
Portage_Moteur_Jeu_P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002714  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e760  0800e760  0001e760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e768  0800e768  0001e768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e76c  0800e76c  0001e76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800e770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          0000aee0  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000af58  2000af58  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   000541ca  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a791  00000000  00000000  00074272  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001c97e  00000000  00000000  0007ea03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f00  00000000  00000000  0009b388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ad8  00000000  00000000  0009d288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001577b  00000000  00000000  0009fd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b006  00000000  00000000  000b54db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c04e1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005e18  00000000  00000000  000c0560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c034 	.word	0x0800c034

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800c034 	.word	0x0800c034

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f00b f8d2 	bl	800b6dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00b f8ae 	bl	800b698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_IncTick+0x14>)
 8000548:	6811      	ldr	r1, [r2, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20004228 	.word	0x20004228
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20004228 	.word	0x20004228

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000570:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000572:	bf1c      	itt	ne
 8000574:	4b05      	ldrne	r3, [pc, #20]	; (800058c <HAL_Delay+0x24>)
 8000576:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000578:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800057a:	bf18      	it	ne
 800057c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
 800059c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	0200      	lsls	r0, r0, #8
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005ac:	60d3      	str	r3, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b6:	b530      	push	{r4, r5, lr}
 80005b8:	68dc      	ldr	r4, [r3, #12]
 80005ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	bf28      	it	cs
 80005c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	f04f 0501 	mov.w	r5, #1
 80005d0:	fa05 f303 	lsl.w	r3, r5, r3
 80005d4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d8:	bf8c      	ite	hi
 80005da:	3c03      	subhi	r4, #3
 80005dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005de:	4019      	ands	r1, r3
 80005e0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e2:	fa05 f404 	lsl.w	r4, r5, r4
 80005e6:	3c01      	subs	r4, #1
 80005e8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	ea42 0201 	orr.w	r2, r2, r1
 80005f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfad      	iteet	ge
 80005f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	f000 000f 	andlt.w	r0, r0, #15
 80005fe:	4b06      	ldrlt	r3, [pc, #24]	; (8000618 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfb5      	itete	lt
 8000606:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00
 8000618:	e000ed14 	.word	0xe000ed14

0800061c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800061c:	2800      	cmp	r0, #0
 800061e:	db08      	blt.n	8000632 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000620:	0942      	lsrs	r2, r0, #5
 8000622:	2301      	movs	r3, #1
 8000624:	f000 001f 	and.w	r0, r0, #31
 8000628:	fa03 f000 	lsl.w	r0, r3, r0
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <HAL_NVIC_EnableIRQ+0x18>)
 800062e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100

08000638 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 8000638:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <ETH_Delay.constprop.4+0x20>)
 800063c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	fbb3 f3f2 	udiv	r3, r3, r2
 8000646:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8000648:	bf00      	nop
  } 
  while (Delay --);
 800064a:	9b01      	ldr	r3, [sp, #4]
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f9      	bne.n	8000648 <ETH_Delay.constprop.4+0x10>
}
 8000654:	b002      	add	sp, #8
 8000656:	4770      	bx	lr
 8000658:	20000010 	.word	0x20000010

0800065c <ETH_FlushTransmitFIFO>:
{
 800065c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000662:	f241 0118 	movw	r1, #4120	; 0x1018
 8000666:	6803      	ldr	r3, [r0, #0]
 8000668:	585a      	ldr	r2, [r3, r1]
 800066a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800066e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000670:	585b      	ldr	r3, [r3, r1]
 8000672:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000674:	f7ff ffe0 	bl	8000638 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000678:	9a01      	ldr	r2, [sp, #4]
 800067a:	6803      	ldr	r3, [r0, #0]
 800067c:	505a      	str	r2, [r3, r1]
}
 800067e:	b003      	add	sp, #12
 8000680:	f85d fb04 	ldr.w	pc, [sp], #4

08000684 <ETH_MACDMAConfig>:
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000688:	b129      	cbz	r1, 8000696 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800068a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800068e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000694:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000696:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000698:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 800069a:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 800069c:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800069e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80006a0:	68a3      	ldr	r3, [r4, #8]
 80006a2:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80006a6:	4830      	ldr	r0, [pc, #192]	; (8000768 <ETH_MACDMAConfig+0xe4>)
 80006a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ac:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80006b0:	bf0c      	ite	eq
 80006b2:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80006b6:	2100      	movne	r1, #0
 80006b8:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80006ba:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80006bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006be:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80006c0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006c2:	f7ff ff51 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80006c6:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006c8:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80006ca:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006cc:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006ce:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80006d0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006d2:	f7ff ff49 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80006da:	2500      	movs	r5, #0
 80006dc:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80006de:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80006e0:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80006e2:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80006e6:	0412      	lsls	r2, r2, #16
 80006e8:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80006ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80006ee:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f0:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80006f2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f4:	f7ff ff38 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80006f8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006fa:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80006fc:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006fe:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000700:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000702:	f7ff ff31 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000706:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 800070a:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800070c:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000710:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000712:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000714:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000716:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800071a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800071e:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000720:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000722:	f7ff ff21 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000726:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800072a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000730:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000732:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000734:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000736:	f7ff ff17 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800073a:	6822      	ldr	r2, [r4, #0]
 800073c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000740:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000742:	69a3      	ldr	r3, [r4, #24]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d107      	bne.n	8000758 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000748:	f241 011c 	movw	r1, #4124	; 0x101c
 800074c:	5853      	ldr	r3, [r2, r1]
 800074e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000756:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000758:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800075c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800075e:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000760:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <ETH_MACDMAConfig+0xf4>)
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	ff20810f 	.word	0xff20810f
 800076c:	f8de3f23 	.word	0xf8de3f23
 8000770:	02c12080 	.word	0x02c12080
 8000774:	40028040 	.word	0x40028040
 8000778:	40028044 	.word	0x40028044

0800077c <HAL_ETH_DMATxDescListInit>:
{
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800077e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000782:	2c01      	cmp	r4, #1
 8000784:	f04f 0402 	mov.w	r4, #2
 8000788:	d033      	beq.n	80007f2 <HAL_ETH_DMATxDescListInit+0x76>
 800078a:	2501      	movs	r5, #1
 800078c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000790:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000794:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000796:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 800079a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800079c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80007a0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 80007a4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  for(i=0U; i < TxBuffCount; i++)
 80007a8:	429d      	cmp	r5, r3
 80007aa:	d10b      	bne.n	80007c4 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80007ac:	6802      	ldr	r2, [r0, #0]
 80007ae:	f241 0310 	movw	r3, #4112	; 0x1010
 80007b2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80007b4:	2301      	movs	r3, #1
 80007b6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80007ba:	2300      	movs	r3, #0
 80007bc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80007c0:	4618      	mov	r0, r3
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80007c4:	fb0e 2605 	mla	r6, lr, r5, r2
 80007c8:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007cc:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80007ce:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007d2:	b92e      	cbnz	r6, 80007e0 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80007d4:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80007d8:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80007dc:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80007e0:	4565      	cmp	r5, ip
 80007e2:	bf2c      	ite	cs
 80007e4:	460e      	movcs	r6, r1
 80007e6:	4626      	movcc	r6, r4
 80007e8:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 80007ec:	3501      	adds	r5, #1
 80007ee:	3420      	adds	r4, #32
 80007f0:	e7da      	b.n	80007a8 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80007f2:	4620      	mov	r0, r4
}
 80007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007f6 <HAL_ETH_DMARxDescListInit>:
{
 80007f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80007fa:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80007fe:	2c01      	cmp	r4, #1
 8000800:	f04f 0402 	mov.w	r4, #2
 8000804:	d030      	beq.n	8000868 <HAL_ETH_DMARxDescListInit+0x72>
 8000806:	2501      	movs	r5, #1
 8000808:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800080c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000810:	6281      	str	r1, [r0, #40]	; 0x28
 8000812:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 8000816:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000818:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800081c:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000820:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000824:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  for(i=0U; i < RxBuffCount; i++)
 8000828:	429d      	cmp	r5, r3
 800082a:	d10c      	bne.n	8000846 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800082c:	6802      	ldr	r2, [r0, #0]
 800082e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000832:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000834:	2301      	movs	r3, #1
 8000836:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800083a:	2300      	movs	r3, #0
 800083c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000840:	4618      	mov	r0, r3
 8000842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000846:	fb0e 2805 	mla	r8, lr, r5, r2
 800084a:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800084e:	4565      	cmp	r5, ip
 8000850:	bf2c      	ite	cs
 8000852:	4688      	movcs	r8, r1
 8000854:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000856:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800085a:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800085e:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000862:	3501      	adds	r5, #1
 8000864:	3420      	adds	r4, #32
 8000866:	e7df      	b.n	8000828 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000868:	4620      	mov	r0, r4
}
 800086a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000870 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000870:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000874:	2b01      	cmp	r3, #1
{
 8000876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000878:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 800087c:	d068      	beq.n	8000950 <HAL_ETH_TransmitFrame+0xe0>
 800087e:	2201      	movs	r2, #1
 8000880:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000884:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000888:	b929      	cbnz	r1, 8000896 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800088a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800088e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000892:	4610      	mov	r0, r2
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000896:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000898:	681c      	ldr	r4, [r3, #0]
 800089a:	2c00      	cmp	r4, #0
 800089c:	da06      	bge.n	80008ac <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800089e:	2312      	movs	r3, #18
 80008a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80008a4:	2300      	movs	r3, #0
 80008a6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80008aa:	e7f2      	b.n	8000892 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80008ac:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80008b0:	42a1      	cmp	r1, r4
 80008b2:	d92e      	bls.n	8000912 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80008b4:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80008b8:	fb04 1412 	mls	r4, r4, r2, r1
 80008bc:	b33c      	cbz	r4, 800090e <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80008be:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80008c0:	4c24      	ldr	r4, [pc, #144]	; (8000954 <HAL_ETH_TransmitFrame+0xe4>)
 80008c2:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80008c6:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80008ca:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80008ce:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80008d0:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80008d4:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80008d6:	681d      	ldr	r5, [r3, #0]
 80008d8:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80008dc:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80008de:	b91c      	cbnz	r4, 80008e8 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80008e0:	681d      	ldr	r5, [r3, #0]
 80008e2:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80008e6:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80008e8:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80008ea:	bf08      	it	eq
 80008ec:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80008ee:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80008f0:	bf04      	itt	eq
 80008f2:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80008f6:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80008f8:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80008fa:	bf08      	it	eq
 80008fc:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80008fe:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000900:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8000904:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000906:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000908:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 800090a:	d1e4      	bne.n	80008d6 <HAL_ETH_TransmitFrame+0x66>
 800090c:	e00d      	b.n	800092a <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 800090e:	2a01      	cmp	r2, #1
 8000910:	d1d6      	bne.n	80008c0 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000918:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800091a:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800091c:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000920:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000924:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000926:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800092c:	f241 0214 	movw	r2, #4116	; 0x1014
 8000930:	6803      	ldr	r3, [r0, #0]
 8000932:	5899      	ldr	r1, [r3, r2]
 8000934:	0749      	lsls	r1, r1, #29
 8000936:	d505      	bpl.n	8000944 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000938:	2104      	movs	r1, #4
 800093a:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 800093c:	f241 0204 	movw	r2, #4100	; 0x1004
 8000940:	2100      	movs	r1, #0
 8000942:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000944:	2301      	movs	r3, #1
 8000946:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800094a:	2300      	movs	r3, #0
 800094c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000950:	4618      	mov	r0, r3
}
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000954:	fffffa0c 	.word	0xfffffa0c

08000958 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000958:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800095c:	2b01      	cmp	r3, #1
{
 800095e:	b530      	push	{r4, r5, lr}
 8000960:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000964:	d03b      	beq.n	80009de <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000966:	2201      	movs	r2, #1
 8000968:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800096c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000970:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8000972:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000974:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2a00      	cmp	r2, #0
 800097a:	db01      	blt.n	8000980 <HAL_ETH_GetReceivedFrame_IT+0x28>
 800097c:	3c01      	subs	r4, #1
 800097e:	d106      	bne.n	800098e <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000980:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000982:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000984:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000988:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800098c:	e027      	b.n	80009de <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	68dd      	ldr	r5, [r3, #12]
 8000992:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000996:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800099a:	d103      	bne.n	80009a4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800099c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800099e:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80009a0:	6285      	str	r5, [r0, #40]	; 0x28
 80009a2:	e7e7      	b.n	8000974 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	f412 7f40 	tst.w	r2, #768	; 0x300
 80009aa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80009ac:	d102      	bne.n	80009b4 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 80009ae:	3201      	adds	r2, #1
 80009b0:	6382      	str	r2, [r0, #56]	; 0x38
 80009b2:	e7f5      	b.n	80009a0 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 80009b4:	3201      	adds	r2, #1
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80009b6:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80009b8:	bf08      	it	eq
 80009ba:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80009bc:	6343      	str	r3, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80009be:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 80009c0:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80009c2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80009c6:	3b04      	subs	r3, #4
 80009c8:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80009ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80009d6:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80009d8:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 80009da:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd30      	pop	{r4, r5, pc}

080009e2 <HAL_ETH_TxCpltCallback>:
 80009e2:	4770      	bx	lr

080009e4 <HAL_ETH_ErrorCallback>:
{
 80009e4:	4770      	bx	lr

080009e6 <HAL_ETH_IRQHandler>:
{
 80009e6:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80009e8:	6802      	ldr	r2, [r0, #0]
 80009ea:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80009ee:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80009f0:	5995      	ldr	r5, [r2, r6]
 80009f2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80009f6:	d021      	beq.n	8000a3c <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 80009f8:	f00a fbca 	bl	800b190 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	f241 0514 	movw	r5, #4116	; 0x1014
 8000a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a18:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000a1a:	595b      	ldr	r3, [r3, r5]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	d50c      	bpl.n	8000a3a <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff ffdf 	bl	80009e4 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a2c:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a34:	2300      	movs	r3, #0
 8000a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000a3c:	5993      	ldr	r3, [r2, r6]
 8000a3e:	07da      	lsls	r2, r3, #31
 8000a40:	d5e5      	bpl.n	8000a0e <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000a42:	f7ff ffce 	bl	80009e2 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000a46:	6822      	ldr	r2, [r4, #0]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000a4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a50:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000a54:	e7db      	b.n	8000a0e <HAL_ETH_IRQHandler+0x28>

08000a56 <HAL_ETH_ReadPHYRegister>:
{
 8000a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000a58:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000a5c:	2b82      	cmp	r3, #130	; 0x82
{
 8000a5e:	4605      	mov	r5, r0
 8000a60:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000a62:	d030      	beq.n	8000ac6 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a64:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000a66:	2382      	movs	r3, #130	; 0x82
 8000a68:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a6c:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000a6e:	0189      	lsls	r1, r1, #6
 8000a70:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000a74:	f003 011c 	and.w	r1, r3, #28
 8000a78:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000a7a:	8a04      	ldrh	r4, [r0, #16]
 8000a7c:	02e4      	lsls	r4, r4, #11
 8000a7e:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000a80:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000a82:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000a86:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000a88:	f7ff fd68 	bl	800055c <HAL_GetTick>
 8000a8c:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000a8e:	f014 0001 	ands.w	r0, r4, #1
 8000a92:	d107      	bne.n	8000aa4 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000aa4:	f7ff fd5a 	bl	800055c <HAL_GetTick>
 8000aa8:	1bc0      	subs	r0, r0, r7
 8000aaa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000aae:	d307      	bcc.n	8000ac0 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000abc:	2003      	movs	r0, #3
 8000abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	691c      	ldr	r4, [r3, #16]
 8000ac4:	e7e3      	b.n	8000a8e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000ac6:	2002      	movs	r0, #2
}
 8000ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000aca <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000aca:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ace:	2b42      	cmp	r3, #66	; 0x42
{
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000ad4:	d02e      	beq.n	8000b34 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000ad6:	2342      	movs	r3, #66	; 0x42
 8000ad8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000adc:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000ade:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ae0:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000ae2:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000ae6:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000aea:	f000 001c 	and.w	r0, r0, #28
 8000aee:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000af0:	8a2c      	ldrh	r4, [r5, #16]
 8000af2:	02e4      	lsls	r4, r4, #11
 8000af4:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000af6:	4304      	orrs	r4, r0
 8000af8:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000afa:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000afc:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000afe:	f7ff fd2d 	bl	800055c <HAL_GetTick>
 8000b02:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b04:	f014 0001 	ands.w	r0, r4, #1
 8000b08:	d103      	bne.n	8000b12 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000b12:	f7ff fd23 	bl	800055c <HAL_GetTick>
 8000b16:	1b80      	subs	r0, r0, r6
 8000b18:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b1c:	d307      	bcc.n	8000b2e <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b24:	2300      	movs	r3, #0
 8000b26:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b2e:	682b      	ldr	r3, [r5, #0]
 8000b30:	691c      	ldr	r4, [r3, #16]
 8000b32:	e7e7      	b.n	8000b04 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000b34:	2002      	movs	r0, #2
}
 8000b36:	bd70      	pop	{r4, r5, r6, pc}

08000b38 <HAL_ETH_Init>:
{
 8000b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000b3e:	4604      	mov	r4, r0
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f000 80de 	beq.w	8000d02 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000b46:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b4e:	b91b      	cbnz	r3, 8000b58 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000b50:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000b54:	f00a fa8e 	bl	800b074 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <HAL_ETH_Init+0x1d0>)
 8000b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b64:	645a      	str	r2, [r3, #68]	; 0x44
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000b70:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <HAL_ETH_Init+0x1d4>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b78:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	6a21      	ldr	r1, [r4, #32]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f042 0201 	orr.w	r2, r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000b90:	f7ff fce4 	bl	800055c <HAL_GetTick>
 8000b94:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	07d0      	lsls	r0, r2, #31
 8000ba0:	d41d      	bmi.n	8000bde <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ba2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000ba4:	f000 fcc2 	bl	800152c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000ba8:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <HAL_ETH_Init+0x1d8>)
 8000baa:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <HAL_ETH_Init+0x1dc>)
 8000bac:	4403      	add	r3, r0
 8000bae:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000bb0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000bb4:	d822      	bhi.n	8000bfc <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000bb6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000bba:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000bbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000bc0:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff ff80 	bl	8000aca <HAL_ETH_WritePHYRegister>
 8000bca:	4605      	mov	r5, r0
 8000bcc:	b368      	cbz	r0, 8000c2a <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000bd2:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000bd4:	f7ff fd56 	bl	8000684 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000bd8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000bdc:	e00b      	b.n	8000bf6 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000bde:	f7ff fcbd 	bl	800055c <HAL_GetTick>
 8000be2:	1b40      	subs	r0, r0, r5
 8000be4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000be8:	d9d5      	bls.n	8000b96 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000bea:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000bec:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000bee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000bfc:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <HAL_ETH_Init+0x1e0>)
 8000bfe:	4a47      	ldr	r2, [pc, #284]	; (8000d1c <HAL_ETH_Init+0x1e4>)
 8000c00:	4403      	add	r3, r0
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d802      	bhi.n	8000c0c <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c06:	f045 050c 	orr.w	r5, r5, #12
 8000c0a:	e7d6      	b.n	8000bba <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000c0c:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <HAL_ETH_Init+0x1e8>)
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <HAL_ETH_Init+0x1ec>)
 8000c10:	4403      	add	r3, r0
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d9d1      	bls.n	8000bba <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <HAL_ETH_Init+0x1f0>)
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <HAL_ETH_Init+0x1f4>)
 8000c1a:	4403      	add	r3, r0
 8000c1c:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000c1e:	bf94      	ite	ls
 8000c20:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000c24:	f045 0510 	orrhi.w	r5, r5, #16
 8000c28:	e7c7      	b.n	8000bba <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000c2a:	20ff      	movs	r0, #255	; 0xff
 8000c2c:	f7ff fc9c 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d053      	beq.n	8000cde <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000c36:	f7ff fc91 	bl	800055c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c3a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c3e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c40:	466a      	mov	r2, sp
 8000c42:	2101      	movs	r1, #1
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff ff06 	bl	8000a56 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c4a:	f7ff fc87 	bl	800055c <HAL_GetTick>
 8000c4e:	1b80      	subs	r0, r0, r6
 8000c50:	42b8      	cmp	r0, r7
 8000c52:	d90b      	bls.n	8000c6c <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000c54:	2101      	movs	r1, #1
 8000c56:	4620      	mov	r0, r4
 8000c58:	f7ff fd14 	bl	8000684 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000c62:	2300      	movs	r3, #0
 8000c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000c68:	2503      	movs	r5, #3
 8000c6a:	e7c4      	b.n	8000bf6 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000c6c:	9b00      	ldr	r3, [sp, #0]
 8000c6e:	0759      	lsls	r1, r3, #29
 8000c70:	d5e6      	bpl.n	8000c40 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c76:	2100      	movs	r1, #0
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f7ff ff26 	bl	8000aca <HAL_ETH_WritePHYRegister>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d1a5      	bne.n	8000bce <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000c82:	f7ff fc6b 	bl	800055c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000c86:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c8a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c8c:	466a      	mov	r2, sp
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4620      	mov	r0, r4
 8000c92:	f7ff fee0 	bl	8000a56 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000c96:	f7ff fc61 	bl	800055c <HAL_GetTick>
 8000c9a:	1b80      	subs	r0, r0, r6
 8000c9c:	42b8      	cmp	r0, r7
 8000c9e:	d8d9      	bhi.n	8000c54 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ca0:	9b00      	ldr	r3, [sp, #0]
 8000ca2:	069a      	lsls	r2, r3, #26
 8000ca4:	d5f2      	bpl.n	8000c8c <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ca6:	466a      	mov	r2, sp
 8000ca8:	211f      	movs	r1, #31
 8000caa:	4620      	mov	r0, r4
 8000cac:	f7ff fed3 	bl	8000a56 <HAL_ETH_ReadPHYRegister>
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d18c      	bne.n	8000bce <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000cb4:	9b00      	ldr	r3, [sp, #0]
 8000cb6:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000cba:	bf18      	it	ne
 8000cbc:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000cc0:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000cc2:	bf4c      	ite	mi
 8000cc4:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000cc6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000cca:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ccc:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff fcd7 	bl	8000684 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000cdc:	e78b      	b.n	8000bf6 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000cde:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000ce0:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000ce2:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000ce4:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000ce8:	b292      	uxth	r2, r2
 8000cea:	4629      	mov	r1, r5
 8000cec:	4620      	mov	r0, r4
 8000cee:	f7ff feec 	bl	8000aca <HAL_ETH_WritePHYRegister>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	f47f af6b 	bne.w	8000bce <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000cf8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000cfc:	f7ff fc34 	bl	8000568 <HAL_Delay>
 8000d00:	e7e5      	b.n	8000cce <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000d02:	2501      	movs	r5, #1
 8000d04:	e777      	b.n	8000bf6 <HAL_ETH_Init+0xbe>
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	feced300 	.word	0xfeced300
 8000d14:	00e4e1bf 	.word	0x00e4e1bf
 8000d18:	fde9f140 	.word	0xfde9f140
 8000d1c:	017d783f 	.word	0x017d783f
 8000d20:	fc6c7900 	.word	0xfc6c7900
 8000d24:	026259ff 	.word	0x026259ff
 8000d28:	fa0a1f00 	.word	0xfa0a1f00
 8000d2c:	02faf07f 	.word	0x02faf07f

08000d30 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000d30:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000d34:	2b01      	cmp	r3, #1
{  
 8000d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d38:	4605      	mov	r5, r0
 8000d3a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000d3e:	d031      	beq.n	8000da4 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000d40:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d42:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000d44:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000d48:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d4a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000d4c:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d4e:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000d52:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d56:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000d5c:	f7ff fc6c 	bl	8000638 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	9a01      	ldr	r2, [sp, #4]
 8000d64:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000d66:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f042 0204 	orr.w	r2, r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000d74:	f7ff fc60 	bl	8000638 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	9a00      	ldr	r2, [sp, #0]
 8000d7c:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f7ff fc6c 	bl	800065c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000d84:	682a      	ldr	r2, [r5, #0]
 8000d86:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000d8a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000d8c:	58d1      	ldr	r1, [r2, r3]
 8000d8e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000d92:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000d94:	58d1      	ldr	r1, [r2, r3]
 8000d96:	f041 0102 	orr.w	r1, r1, #2
 8000d9a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000d9c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000da0:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000da4:	b002      	add	sp, #8
 8000da6:	bd70      	pop	{r4, r5, r6, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dac:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000f78 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db4:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000f7c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000dbe:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000dc4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000dcc:	45b6      	cmp	lr, r6
 8000dce:	f040 80b6 	bne.w	8000f3e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd2:	684c      	ldr	r4, [r1, #4]
 8000dd4:	f024 0710 	bic.w	r7, r4, #16
 8000dd8:	2f02      	cmp	r7, #2
 8000dda:	d116      	bne.n	8000e0a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000ddc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000de0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000df0:	f04f 0c0f 	mov.w	ip, #15
 8000df4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000df8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dfc:	690d      	ldr	r5, [r1, #16]
 8000dfe:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e02:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e06:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e0a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e10:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e14:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e18:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e22:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e26:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e28:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e2e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e32:	d811      	bhi.n	8000e58 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e36:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3a:	68cf      	ldr	r7, [r1, #12]
 8000e3c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000e40:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000e44:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e46:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000e50:	409f      	lsls	r7, r3
 8000e52:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000e56:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e58:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	688f      	ldr	r7, [r1, #8]
 8000e5e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000e62:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000e64:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e66:	00e5      	lsls	r5, r4, #3
 8000e68:	d569      	bpl.n	8000f3e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	f04f 0b00 	mov.w	fp, #0
 8000e6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000e72:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	4d3f      	ldr	r5, [pc, #252]	; (8000f74 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e7c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000e80:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000e84:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000e88:	9703      	str	r7, [sp, #12]
 8000e8a:	9f03      	ldr	r7, [sp, #12]
 8000e8c:	f023 0703 	bic.w	r7, r3, #3
 8000e90:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e94:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ea4:	f04f 0e0f 	mov.w	lr, #15
 8000ea8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eac:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eae:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb2:	d04b      	beq.n	8000f4c <HAL_GPIO_Init+0x1a4>
 8000eb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	d049      	beq.n	8000f50 <HAL_GPIO_Init+0x1a8>
 8000ebc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ec0:	42a8      	cmp	r0, r5
 8000ec2:	d047      	beq.n	8000f54 <HAL_GPIO_Init+0x1ac>
 8000ec4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ec8:	42a8      	cmp	r0, r5
 8000eca:	d045      	beq.n	8000f58 <HAL_GPIO_Init+0x1b0>
 8000ecc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ed0:	42a8      	cmp	r0, r5
 8000ed2:	d043      	beq.n	8000f5c <HAL_GPIO_Init+0x1b4>
 8000ed4:	4548      	cmp	r0, r9
 8000ed6:	d043      	beq.n	8000f60 <HAL_GPIO_Init+0x1b8>
 8000ed8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000edc:	42a8      	cmp	r0, r5
 8000ede:	d041      	beq.n	8000f64 <HAL_GPIO_Init+0x1bc>
 8000ee0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ee4:	42a8      	cmp	r0, r5
 8000ee6:	d03f      	beq.n	8000f68 <HAL_GPIO_Init+0x1c0>
 8000ee8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eec:	42a8      	cmp	r0, r5
 8000eee:	d03d      	beq.n	8000f6c <HAL_GPIO_Init+0x1c4>
 8000ef0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ef4:	42a8      	cmp	r0, r5
 8000ef6:	bf14      	ite	ne
 8000ef8:	250a      	movne	r5, #10
 8000efa:	2509      	moveq	r5, #9
 8000efc:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f00:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f04:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f06:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	bf0c      	ite	eq
 8000f10:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f12:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f14:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f16:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	bf0c      	ite	eq
 8000f1e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f20:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f22:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f24:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f26:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	bf0c      	ite	eq
 8000f2c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f2e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f30:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f32:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f34:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f36:	bf54      	ite	pl
 8000f38:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f3a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f3c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	f47f af3c 	bne.w	8000dbe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f46:	b005      	add	sp, #20
 8000f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4c:	465d      	mov	r5, fp
 8000f4e:	e7d5      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f50:	2501      	movs	r5, #1
 8000f52:	e7d3      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f54:	2502      	movs	r5, #2
 8000f56:	e7d1      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f58:	2503      	movs	r5, #3
 8000f5a:	e7cf      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f5c:	2504      	movs	r5, #4
 8000f5e:	e7cd      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f60:	2505      	movs	r5, #5
 8000f62:	e7cb      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f64:	2506      	movs	r5, #6
 8000f66:	e7c9      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f68:	2507      	movs	r5, #7
 8000f6a:	e7c7      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f6c:	2508      	movs	r5, #8
 8000f6e:	e7c5      	b.n	8000efc <HAL_GPIO_Init+0x154>
 8000f70:	40013c00 	.word	0x40013c00
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40021400 	.word	0x40021400

08000f80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	b10a      	cbz	r2, 8000f86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f82:	6181      	str	r1, [r0, #24]
 8000f84:	4770      	bx	lr
 8000f86:	0409      	lsls	r1, r1, #16
 8000f88:	e7fb      	b.n	8000f82 <HAL_GPIO_WritePin+0x2>

08000f8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f8c:	4604      	mov	r4, r0
{
 8000f8e:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000f90:	b360      	cbz	r0, 8000fec <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f92:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000f96:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f9c:	b91b      	cbnz	r3, 8000fa6 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f9e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa2:	f00a fda3 	bl	800baec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fae:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fb0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000fb4:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000fb8:	bf08      	it	eq
 8000fba:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000fbc:	f000 fdd4 	bl	8001b68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	466e      	mov	r6, sp
 8000fc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fce:	e886 0003 	stmia.w	r6, {r0, r1}
 8000fd2:	4625      	mov	r5, r4
 8000fd4:	1d27      	adds	r7, r4, #4
 8000fd6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000fda:	f855 0b10 	ldr.w	r0, [r5], #16
 8000fde:	f000 fd83 	bl	8001ae8 <USB_CoreInit>
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	b120      	cbz	r0, 8000ff0 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000fec:	2501      	movs	r5, #1
 8000fee:	e050      	b.n	8001092 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	6820      	ldr	r0, [r4, #0]
 8000ff4:	f000 fdbe 	bl	8001b74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ffe:	261c      	movs	r6, #28
 8001000:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001004:	4601      	mov	r1, r0
 8001006:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	4596      	cmp	lr, r2
 800100a:	f100 0001 	add.w	r0, r0, #1
 800100e:	d81c      	bhi.n	800104a <HAL_PCD_Init+0xc0>
 8001010:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001012:	261c      	movs	r6, #28
 8001014:	4619      	mov	r1, r3
 8001016:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001018:	4586      	cmp	lr, r0
 800101a:	f103 0301 	add.w	r3, r3, #1
 800101e:	d822      	bhi.n	8001066 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	466e      	mov	r6, sp
 8001024:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800102a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800102e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001032:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001036:	6820      	ldr	r0, [r4, #0]
 8001038:	f000 fdde 	bl	8001bf8 <USB_DevInit>
 800103c:	2301      	movs	r3, #1
 800103e:	4605      	mov	r5, r0
 8001040:	b300      	cbz	r0, 8001084 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001042:	2202      	movs	r2, #2
 8001044:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8001048:	e7d0      	b.n	8000fec <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800104a:	fb06 4302 	mla	r3, r6, r2, r4
 800104e:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001056:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800105a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800105e:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001060:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001062:	6519      	str	r1, [r3, #80]	; 0x50
 8001064:	e7cf      	b.n	8001006 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001066:	fb06 4200 	mla	r2, r6, r0, r4
 800106a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800106e:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001072:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001076:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800107a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800107e:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8001082:	e7c8      	b.n	8001016 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001084:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001088:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	f000 fe77 	bl	8001d80 <USB_DevDisconnect>

  return HAL_OK;
}
 8001092:	4628      	mov	r0, r5
 8001094:	b00b      	add	sp, #44	; 0x2c
 8001096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	4604      	mov	r4, r0
 800109e:	b918      	cbnz	r0, 80010a8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010a2:	b002      	add	sp, #8
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a8:	6803      	ldr	r3, [r0, #0]
 80010aa:	07dd      	lsls	r5, r3, #31
 80010ac:	d410      	bmi.n	80010d0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	0798      	lsls	r0, r3, #30
 80010b2:	d458      	bmi.n	8001166 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	071a      	lsls	r2, r3, #28
 80010b8:	f100 809a 	bmi.w	80011f0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	075b      	lsls	r3, r3, #29
 80010c0:	f100 80b8 	bmi.w	8001234 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c4:	69a2      	ldr	r2, [r4, #24]
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	f040 8119 	bne.w	80012fe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80010cc:	2000      	movs	r0, #0
 80010ce:	e7e8      	b.n	80010a2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d0:	4ba6      	ldr	r3, [pc, #664]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	f002 020c 	and.w	r2, r2, #12
 80010d8:	2a04      	cmp	r2, #4
 80010da:	d007      	beq.n	80010ec <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e2:	2a08      	cmp	r2, #8
 80010e4:	d10a      	bne.n	80010fc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	0259      	lsls	r1, r3, #9
 80010ea:	d507      	bpl.n	80010fc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	4b9f      	ldr	r3, [pc, #636]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	039a      	lsls	r2, r3, #14
 80010f2:	d5dc      	bpl.n	80010ae <HAL_RCC_OscConfig+0x16>
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1d9      	bne.n	80010ae <HAL_RCC_OscConfig+0x16>
 80010fa:	e7d1      	b.n	80010a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	4d9b      	ldr	r5, [pc, #620]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d111      	bne.n	800112a <HAL_RCC_OscConfig+0x92>
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800110e:	f7ff fa25 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4d96      	ldr	r5, [pc, #600]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001114:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	039b      	lsls	r3, r3, #14
 800111a:	d4c8      	bmi.n	80010ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fa1e 	bl	800055c <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	2864      	cmp	r0, #100	; 0x64
 8001124:	d9f7      	bls.n	8001116 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001126:	2003      	movs	r0, #3
 8001128:	e7bb      	b.n	80010a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800112e:	d104      	bne.n	800113a <HAL_RCC_OscConfig+0xa2>
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	e7e5      	b.n	8001106 <HAL_RCC_OscConfig+0x6e>
 800113a:	682a      	ldr	r2, [r5, #0]
 800113c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001140:	602a      	str	r2, [r5, #0]
 8001142:	682a      	ldr	r2, [r5, #0]
 8001144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001148:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1df      	bne.n	800110e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800114e:	f7ff fa05 	bl	800055c <HAL_GetTick>
 8001152:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	039f      	lsls	r7, r3, #14
 8001158:	d5a9      	bpl.n	80010ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115a:	f7ff f9ff 	bl	800055c <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	2864      	cmp	r0, #100	; 0x64
 8001162:	d9f7      	bls.n	8001154 <HAL_RCC_OscConfig+0xbc>
 8001164:	e7df      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	4b81      	ldr	r3, [pc, #516]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	f012 0f0c 	tst.w	r2, #12
 800116e:	d007      	beq.n	8001180 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	2a08      	cmp	r2, #8
 8001178:	d111      	bne.n	800119e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	025e      	lsls	r6, r3, #9
 800117e:	d40e      	bmi.n	800119e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001180:	4b7a      	ldr	r3, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	0795      	lsls	r5, r2, #30
 8001186:	d502      	bpl.n	800118e <HAL_RCC_OscConfig+0xf6>
 8001188:	68e2      	ldr	r2, [r4, #12]
 800118a:	2a01      	cmp	r2, #1
 800118c:	d188      	bne.n	80010a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6921      	ldr	r1, [r4, #16]
 8001192:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001196:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800119a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119c:	e78a      	b.n	80010b4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800119e:	68e2      	ldr	r2, [r4, #12]
 80011a0:	4b73      	ldr	r3, [pc, #460]	; (8001370 <HAL_RCC_OscConfig+0x2d8>)
 80011a2:	b1b2      	cbz	r2, 80011d2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011a8:	f7ff f9d8 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4d6f      	ldr	r5, [pc, #444]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	0798      	lsls	r0, r3, #30
 80011b4:	d507      	bpl.n	80011c6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	6922      	ldr	r2, [r4, #16]
 80011ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	e776      	b.n	80010b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff f9c9 	bl	800055c <HAL_GetTick>
 80011ca:	1b80      	subs	r0, r0, r6
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9ef      	bls.n	80011b0 <HAL_RCC_OscConfig+0x118>
 80011d0:	e7a9      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80011d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011d4:	f7ff f9c2 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d8:	4d64      	ldr	r5, [pc, #400]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	0799      	lsls	r1, r3, #30
 80011e0:	f57f af68 	bpl.w	80010b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff f9ba 	bl	800055c <HAL_GetTick>
 80011e8:	1b80      	subs	r0, r0, r6
 80011ea:	2802      	cmp	r0, #2
 80011ec:	d9f6      	bls.n	80011dc <HAL_RCC_OscConfig+0x144>
 80011ee:	e79a      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011f0:	6962      	ldr	r2, [r4, #20]
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <HAL_RCC_OscConfig+0x2dc>)
 80011f4:	b17a      	cbz	r2, 8001216 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011fa:	f7ff f9af 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4d5b      	ldr	r5, [pc, #364]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001200:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001204:	079f      	lsls	r7, r3, #30
 8001206:	f53f af59 	bmi.w	80010bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff f9a7 	bl	800055c <HAL_GetTick>
 800120e:	1b80      	subs	r0, r0, r6
 8001210:	2802      	cmp	r0, #2
 8001212:	d9f6      	bls.n	8001202 <HAL_RCC_OscConfig+0x16a>
 8001214:	e787      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001216:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001218:	f7ff f9a0 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4d53      	ldr	r5, [pc, #332]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800121e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001222:	0798      	lsls	r0, r3, #30
 8001224:	f57f af4a 	bpl.w	80010bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff f998 	bl	800055c <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	2802      	cmp	r0, #2
 8001230:	d9f6      	bls.n	8001220 <HAL_RCC_OscConfig+0x188>
 8001232:	e778      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001238:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800123c:	d128      	bne.n	8001290 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	9201      	str	r2, [sp, #4]
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001252:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4d48      	ldr	r5, [pc, #288]	; (8001378 <HAL_RCC_OscConfig+0x2e0>)
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	05d9      	lsls	r1, r3, #23
 800125a:	d51b      	bpl.n	8001294 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125c:	68a3      	ldr	r3, [r4, #8]
 800125e:	4d43      	ldr	r5, [pc, #268]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001260:	2b01      	cmp	r3, #1
 8001262:	d127      	bne.n	80012b4 <HAL_RCC_OscConfig+0x21c>
 8001264:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800126c:	f7ff f976 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	4d3e      	ldr	r5, [pc, #248]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001272:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800127a:	079b      	lsls	r3, r3, #30
 800127c:	d539      	bpl.n	80012f2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800127e:	2e00      	cmp	r6, #0
 8001280:	f43f af20 	beq.w	80010c4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001284:	4a39      	ldr	r2, [pc, #228]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001286:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	e719      	b.n	80010c4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001290:	2600      	movs	r6, #0
 8001292:	e7df      	b.n	8001254 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800129c:	f7ff f95e 	bl	800055c <HAL_GetTick>
 80012a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	05da      	lsls	r2, r3, #23
 80012a6:	d4d9      	bmi.n	800125c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a8:	f7ff f958 	bl	800055c <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	2802      	cmp	r0, #2
 80012b0:	d9f7      	bls.n	80012a2 <HAL_RCC_OscConfig+0x20a>
 80012b2:	e738      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d104      	bne.n	80012c2 <HAL_RCC_OscConfig+0x22a>
 80012b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	672b      	str	r3, [r5, #112]	; 0x70
 80012c0:	e7d0      	b.n	8001264 <HAL_RCC_OscConfig+0x1cc>
 80012c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	672a      	str	r2, [r5, #112]	; 0x70
 80012ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012cc:	f022 0204 	bic.w	r2, r2, #4
 80012d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ca      	bne.n	800126c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80012d6:	f7ff f941 	bl	800055c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012e2:	0798      	lsls	r0, r3, #30
 80012e4:	d5cb      	bpl.n	800127e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff f939 	bl	800055c <HAL_GetTick>
 80012ea:	1bc0      	subs	r0, r0, r7
 80012ec:	4540      	cmp	r0, r8
 80012ee:	d9f7      	bls.n	80012e0 <HAL_RCC_OscConfig+0x248>
 80012f0:	e719      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff f933 	bl	800055c <HAL_GetTick>
 80012f6:	1bc0      	subs	r0, r0, r7
 80012f8:	4540      	cmp	r0, r8
 80012fa:	d9bd      	bls.n	8001278 <HAL_RCC_OscConfig+0x1e0>
 80012fc:	e713      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012fe:	4d1b      	ldr	r5, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001300:	68ab      	ldr	r3, [r5, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b08      	cmp	r3, #8
 8001308:	f43f aeca 	beq.w	80010a0 <HAL_RCC_OscConfig+0x8>
 800130c:	4e1b      	ldr	r6, [pc, #108]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 800130e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001310:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001312:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001314:	d134      	bne.n	8001380 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001316:	f7ff f921 	bl	800055c <HAL_GetTick>
 800131a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	0199      	lsls	r1, r3, #6
 8001320:	d41e      	bmi.n	8001360 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001322:	6a22      	ldr	r2, [r4, #32]
 8001324:	69e3      	ldr	r3, [r4, #28]
 8001326:	4313      	orrs	r3, r2
 8001328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800132a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800132e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001330:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001334:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001336:	4c0d      	ldr	r4, [pc, #52]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001338:	0852      	lsrs	r2, r2, #1
 800133a:	3a01      	subs	r2, #1
 800133c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001340:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001342:	2301      	movs	r3, #1
 8001344:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001346:	f7ff f909 	bl	800055c <HAL_GetTick>
 800134a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	019a      	lsls	r2, r3, #6
 8001350:	f53f aebc 	bmi.w	80010cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff f902 	bl	800055c <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2802      	cmp	r0, #2
 800135c:	d9f6      	bls.n	800134c <HAL_RCC_OscConfig+0x2b4>
 800135e:	e6e2      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff f8fc 	bl	800055c <HAL_GetTick>
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	2802      	cmp	r0, #2
 8001368:	d9d8      	bls.n	800131c <HAL_RCC_OscConfig+0x284>
 800136a:	e6dc      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
 800136c:	40023800 	.word	0x40023800
 8001370:	42470000 	.word	0x42470000
 8001374:	42470e80 	.word	0x42470e80
 8001378:	40007000 	.word	0x40007000
 800137c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001380:	f7ff f8ec 	bl	800055c <HAL_GetTick>
 8001384:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	f57f ae9f 	bpl.w	80010cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff f8e5 	bl	800055c <HAL_GetTick>
 8001392:	1b00      	subs	r0, r0, r4
 8001394:	2802      	cmp	r0, #2
 8001396:	d9f6      	bls.n	8001386 <HAL_RCC_OscConfig+0x2ee>
 8001398:	e6c5      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
 800139a:	bf00      	nop

0800139c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800139c:	4913      	ldr	r1, [pc, #76]	; (80013ec <HAL_RCC_GetSysClockFreq+0x50>)
{
 800139e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a0:	688b      	ldr	r3, [r1, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d003      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x16>
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d003      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013b0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80013b4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c0:	bf14      	ite	ne
 80013c2:	480c      	ldrne	r0, [pc, #48]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	480a      	ldreq	r0, [pc, #40]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013ca:	bf18      	it	ne
 80013cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	fba1 0100 	umull	r0, r1, r1, r0
 80013d6:	f7fe ff13 	bl	8000200 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_RCC_GetSysClockFreq+0x50>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	00f42400 	.word	0x00f42400
 80013f4:	007a1200 	.word	0x007a1200

080013f8 <HAL_RCC_ClockConfig>:
{
 80013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013fe:	4604      	mov	r4, r0
 8001400:	b910      	cbnz	r0, 8001408 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b44      	ldr	r3, [pc, #272]	; (800151c <HAL_RCC_ClockConfig+0x124>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f002 020f 	and.w	r2, r2, #15
 8001410:	428a      	cmp	r2, r1
 8001412:	d328      	bcc.n	8001466 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	6821      	ldr	r1, [r4, #0]
 8001416:	078f      	lsls	r7, r1, #30
 8001418:	d42d      	bmi.n	8001476 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	07c8      	lsls	r0, r1, #31
 800141c:	d440      	bmi.n	80014a0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_ClockConfig+0x124>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f002 020f 	and.w	r2, r2, #15
 8001426:	4295      	cmp	r5, r2
 8001428:	d366      	bcc.n	80014f8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142a:	6822      	ldr	r2, [r4, #0]
 800142c:	0751      	lsls	r1, r2, #29
 800142e:	d46c      	bmi.n	800150a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	0713      	lsls	r3, r2, #28
 8001432:	d507      	bpl.n	8001444 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001434:	4a3a      	ldr	r2, [pc, #232]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 8001436:	6921      	ldr	r1, [r4, #16]
 8001438:	6893      	ldr	r3, [r2, #8]
 800143a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800143e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001442:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001444:	f7ff ffaa 	bl	800139c <HAL_RCC_GetSysClockFreq>
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 800144a:	4a36      	ldr	r2, [pc, #216]	; (8001524 <HAL_RCC_ClockConfig+0x12c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	40d8      	lsrs	r0, r3
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_ClockConfig+0x130>)
 8001458:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f00a f93e 	bl	800b6dc <HAL_InitTick>
  return HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	4299      	cmp	r1, r3
 8001472:	d1c6      	bne.n	8001402 <HAL_RCC_ClockConfig+0xa>
 8001474:	e7ce      	b.n	8001414 <HAL_RCC_ClockConfig+0x1c>
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800147c:	bf1e      	ittt	ne
 800147e:	689a      	ldrne	r2, [r3, #8]
 8001480:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001484:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	bf42      	ittt	mi
 800148a:	689a      	ldrmi	r2, [r3, #8]
 800148c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001490:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	68a0      	ldr	r0, [r4, #8]
 8001496:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800149a:	4302      	orrs	r2, r0
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	e7bc      	b.n	800141a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a0:	6862      	ldr	r2, [r4, #4]
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 80014a4:	2a01      	cmp	r2, #1
 80014a6:	d11d      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	d0a8      	beq.n	8001402 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	4e1b      	ldr	r6, [pc, #108]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 80014b2:	68b3      	ldr	r3, [r6, #8]
 80014b4:	f023 0303 	bic.w	r3, r3, #3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014bc:	f7ff f84e 	bl	800055c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	68b3      	ldr	r3, [r6, #8]
 80014c8:	6862      	ldr	r2, [r4, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014d2:	d0a4      	beq.n	800141e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff f842 	bl	800055c <HAL_GetTick>
 80014d8:	1bc0      	subs	r0, r0, r7
 80014da:	4540      	cmp	r0, r8
 80014dc:	d9f3      	bls.n	80014c6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80014de:	2003      	movs	r0, #3
}
 80014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e4:	1e91      	subs	r1, r2, #2
 80014e6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	d802      	bhi.n	80014f2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f0:	e7dd      	b.n	80014ae <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	f013 0f02 	tst.w	r3, #2
 80014f6:	e7da      	b.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f8:	b2ea      	uxtb	r2, r5
 80014fa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	429d      	cmp	r5, r3
 8001504:	f47f af7d 	bne.w	8001402 <HAL_RCC_ClockConfig+0xa>
 8001508:	e78f      	b.n	800142a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150a:	4905      	ldr	r1, [pc, #20]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 800150c:	68e0      	ldr	r0, [r4, #12]
 800150e:	688b      	ldr	r3, [r1, #8]
 8001510:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001514:	4303      	orrs	r3, r0
 8001516:	608b      	str	r3, [r1, #8]
 8001518:	e78a      	b.n	8001430 <HAL_RCC_ClockConfig+0x38>
 800151a:	bf00      	nop
 800151c:	40023c00 	.word	0x40023c00
 8001520:	40023800 	.word	0x40023800
 8001524:	0800e0b0 	.word	0x0800e0b0
 8001528:	20000010 	.word	0x20000010

0800152c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800152c:	4b01      	ldr	r3, [pc, #4]	; (8001534 <HAL_RCC_GetHCLKFreq+0x8>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000010 	.word	0x20000010

08001538 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_GetPCLK1Freq+0x14>)
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <HAL_RCC_GetPCLK1Freq+0x18>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001546:	6810      	ldr	r0, [r2, #0]
}
 8001548:	40d8      	lsrs	r0, r3
 800154a:	4770      	bx	lr
 800154c:	40023800 	.word	0x40023800
 8001550:	0800e0c0 	.word	0x0800e0c0
 8001554:	20000010 	.word	0x20000010

08001558 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_RCC_GetPCLK2Freq+0x14>)
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x18>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001566:	6810      	ldr	r0, [r2, #0]
}
 8001568:	40d8      	lsrs	r0, r3
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	0800e0c0 	.word	0x0800e0c0
 8001574:	20000010 	.word	0x20000010

08001578 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001578:	230f      	movs	r3, #15
 800157a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_GetClockConfig+0x34>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800158c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001594:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800159e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_GetClockConfig+0x38>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	600b      	str	r3, [r1, #0]
 80015aa:	4770      	bx	lr
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_TIM_Base_MspInit>:
 80015b4:	4770      	bx	lr

080015b6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015b6:	6803      	ldr	r3, [r0, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015c6:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80015c8:	bf1e      	ittt	ne
 80015ca:	681a      	ldrne	r2, [r3, #0]
 80015cc:	f042 0201 	orrne.w	r2, r2, #1
 80015d0:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80015d2:	2000      	movs	r0, #0
 80015d4:	4770      	bx	lr

080015d6 <HAL_TIM_OC_DelayElapsedCallback>:
 80015d6:	4770      	bx	lr

080015d8 <HAL_TIM_IC_CaptureCallback>:
 80015d8:	4770      	bx	lr

080015da <HAL_TIM_PWM_PulseFinishedCallback>:
 80015da:	4770      	bx	lr

080015dc <HAL_TIM_TriggerCallback>:
 80015dc:	4770      	bx	lr

080015de <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015de:	6803      	ldr	r3, [r0, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	0791      	lsls	r1, r2, #30
{
 80015e4:	b510      	push	{r4, lr}
 80015e6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015e8:	d50e      	bpl.n	8001608 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	0792      	lsls	r2, r2, #30
 80015ee:	d50b      	bpl.n	8001608 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015f0:	f06f 0202 	mvn.w	r2, #2
 80015f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015f6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015f8:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015fa:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015fc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015fe:	d077      	beq.n	80016f0 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001600:	f7ff ffea 	bl	80015d8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001604:	2300      	movs	r3, #0
 8001606:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	0750      	lsls	r0, r2, #29
 800160e:	d510      	bpl.n	8001632 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d50d      	bpl.n	8001632 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001616:	f06f 0204 	mvn.w	r2, #4
 800161a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800161e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001620:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001624:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001626:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001628:	d068      	beq.n	80016fc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800162a:	f7ff ffd5 	bl	80015d8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	2300      	movs	r3, #0
 8001630:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	0712      	lsls	r2, r2, #28
 8001638:	d50f      	bpl.n	800165a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	0710      	lsls	r0, r2, #28
 800163e:	d50c      	bpl.n	800165a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001640:	f06f 0208 	mvn.w	r2, #8
 8001644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001646:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001648:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800164a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800164c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001650:	d05a      	beq.n	8001708 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001652:	f7ff ffc1 	bl	80015d8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001656:	2300      	movs	r3, #0
 8001658:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	06d2      	lsls	r2, r2, #27
 8001660:	d510      	bpl.n	8001684 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	06d0      	lsls	r0, r2, #27
 8001666:	d50d      	bpl.n	8001684 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001668:	f06f 0210 	mvn.w	r2, #16
 800166c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800166e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001670:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001672:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001676:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001678:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800167a:	d04b      	beq.n	8001714 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800167c:	f7ff ffac 	bl	80015d8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001680:	2300      	movs	r3, #0
 8001682:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	07d1      	lsls	r1, r2, #31
 800168a:	d508      	bpl.n	800169e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	07d2      	lsls	r2, r2, #31
 8001690:	d505      	bpl.n	800169e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001692:	f06f 0201 	mvn.w	r2, #1
 8001696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001698:	4620      	mov	r0, r4
 800169a:	f009 ffc7 	bl	800b62c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	0610      	lsls	r0, r2, #24
 80016a4:	d508      	bpl.n	80016b8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	0611      	lsls	r1, r2, #24
 80016aa:	d505      	bpl.n	80016b8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016b2:	4620      	mov	r0, r4
 80016b4:	f000 f8b7 	bl	8001826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	0652      	lsls	r2, r2, #25
 80016be:	d508      	bpl.n	80016d2 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	0650      	lsls	r0, r2, #25
 80016c4:	d505      	bpl.n	80016d2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff ff85 	bl	80015dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	0691      	lsls	r1, r2, #26
 80016d8:	d522      	bpl.n	8001720 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	0692      	lsls	r2, r2, #26
 80016de:	d51f      	bpl.n	8001720 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016e0:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016e6:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80016ec:	f000 b89a 	b.w	8001824 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f0:	f7ff ff71 	bl	80015d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff ff70 	bl	80015da <HAL_TIM_PWM_PulseFinishedCallback>
 80016fa:	e783      	b.n	8001604 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fc:	f7ff ff6b 	bl	80015d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff ff6a 	bl	80015da <HAL_TIM_PWM_PulseFinishedCallback>
 8001706:	e792      	b.n	800162e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001708:	f7ff ff65 	bl	80015d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff64 	bl	80015da <HAL_TIM_PWM_PulseFinishedCallback>
 8001712:	e7a0      	b.n	8001656 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001714:	f7ff ff5f 	bl	80015d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ff5e 	bl	80015da <HAL_TIM_PWM_PulseFinishedCallback>
 800171e:	e7af      	b.n	8001680 <HAL_TIM_IRQHandler+0xa2>
 8001720:	bd10      	pop	{r4, pc}
	...

08001724 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001724:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001726:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001728:	4290      	cmp	r0, r2
 800172a:	d012      	beq.n	8001752 <TIM_Base_SetConfig+0x2e>
 800172c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001730:	d00f      	beq.n	8001752 <TIM_Base_SetConfig+0x2e>
 8001732:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001736:	4290      	cmp	r0, r2
 8001738:	d00b      	beq.n	8001752 <TIM_Base_SetConfig+0x2e>
 800173a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173e:	4290      	cmp	r0, r2
 8001740:	d007      	beq.n	8001752 <TIM_Base_SetConfig+0x2e>
 8001742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001746:	4290      	cmp	r0, r2
 8001748:	d003      	beq.n	8001752 <TIM_Base_SetConfig+0x2e>
 800174a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800174e:	4290      	cmp	r0, r2
 8001750:	d119      	bne.n	8001786 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001752:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001758:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800175a:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <TIM_Base_SetConfig+0xc4>)
 800175c:	4290      	cmp	r0, r2
 800175e:	d029      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 8001760:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001764:	d026      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 8001766:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800176a:	4290      	cmp	r0, r2
 800176c:	d022      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 800176e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001772:	4290      	cmp	r0, r2
 8001774:	d01e      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 8001776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800177a:	4290      	cmp	r0, r2
 800177c:	d01a      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 800177e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001782:	4290      	cmp	r0, r2
 8001784:	d016      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <TIM_Base_SetConfig+0xc8>)
 8001788:	4290      	cmp	r0, r2
 800178a:	d013      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 800178c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001790:	4290      	cmp	r0, r2
 8001792:	d00f      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 8001794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001798:	4290      	cmp	r0, r2
 800179a:	d00b      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 800179c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017a0:	4290      	cmp	r0, r2
 80017a2:	d007      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 80017a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a8:	4290      	cmp	r0, r2
 80017aa:	d003      	beq.n	80017b4 <TIM_Base_SetConfig+0x90>
 80017ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b0:	4290      	cmp	r0, r2
 80017b2:	d103      	bne.n	80017bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017b4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ba:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017bc:	694a      	ldr	r2, [r1, #20]
 80017be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017c2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017c4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017c6:	688b      	ldr	r3, [r1, #8]
 80017c8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017ca:	680b      	ldr	r3, [r1, #0]
 80017cc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <TIM_Base_SetConfig+0xc4>)
 80017d0:	4298      	cmp	r0, r3
 80017d2:	d003      	beq.n	80017dc <TIM_Base_SetConfig+0xb8>
 80017d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017d8:	4298      	cmp	r0, r3
 80017da:	d101      	bne.n	80017e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017dc:	690b      	ldr	r3, [r1, #16]
 80017de:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017e0:	2301      	movs	r3, #1
 80017e2:	6143      	str	r3, [r0, #20]
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40010000 	.word	0x40010000
 80017ec:	40014000 	.word	0x40014000

080017f0 <HAL_TIM_Base_Init>:
{
 80017f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80017f2:	4604      	mov	r4, r0
 80017f4:	b1a0      	cbz	r0, 8001820 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017fe:	b91b      	cbnz	r3, 8001808 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001800:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001804:	f7ff fed6 	bl	80015b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001808:	2302      	movs	r3, #2
 800180a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	1d21      	adds	r1, r4, #4
 8001812:	f7ff ff87 	bl	8001724 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001816:	2301      	movs	r3, #1
 8001818:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800181c:	2000      	movs	r0, #0
 800181e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
}
 8001822:	bd10      	pop	{r4, pc}

08001824 <HAL_TIMEx_CommutCallback>:
 8001824:	4770      	bx	lr

08001826 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001826:	4770      	bx	lr

08001828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800182c:	6806      	ldr	r6, [r0, #0]
 800182e:	68c2      	ldr	r2, [r0, #12]
 8001830:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001832:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001838:	4313      	orrs	r3, r2
 800183a:	6133      	str	r3, [r6, #16]
{
 800183c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800183e:	6883      	ldr	r3, [r0, #8]
 8001840:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001842:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001844:	4303      	orrs	r3, r0
 8001846:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001848:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800184c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800184e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001852:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001854:	4313      	orrs	r3, r2
 8001856:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001858:	6973      	ldr	r3, [r6, #20]
 800185a:	69a2      	ldr	r2, [r4, #24]
 800185c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001860:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001862:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001866:	6173      	str	r3, [r6, #20]
 8001868:	4b7a      	ldr	r3, [pc, #488]	; (8001a54 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800186a:	d17c      	bne.n	8001966 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800186c:	429e      	cmp	r6, r3
 800186e:	d003      	beq.n	8001878 <UART_SetConfig+0x50>
 8001870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001874:	429e      	cmp	r6, r3
 8001876:	d144      	bne.n	8001902 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001878:	f7ff fe6e 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 800187c:	2519      	movs	r5, #25
 800187e:	fb05 f300 	mul.w	r3, r5, r0
 8001882:	6860      	ldr	r0, [r4, #4]
 8001884:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001888:	0040      	lsls	r0, r0, #1
 800188a:	fbb3 f3f0 	udiv	r3, r3, r0
 800188e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001892:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001896:	f7ff fe5f 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	4368      	muls	r0, r5
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fbb0 f7f3 	udiv	r7, r0, r3
 80018a4:	f7ff fe58 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80018a8:	6863      	ldr	r3, [r4, #4]
 80018aa:	4368      	muls	r0, r5
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	fbb3 f3f9 	udiv	r3, r3, r9
 80018b6:	fb09 7313 	mls	r3, r9, r3, r7
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	3332      	adds	r3, #50	; 0x32
 80018be:	fbb3 f3f9 	udiv	r3, r3, r9
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80018c8:	f7ff fe46 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80018cc:	6862      	ldr	r2, [r4, #4]
 80018ce:	4368      	muls	r0, r5
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	fbb0 faf2 	udiv	sl, r0, r2
 80018d6:	f7ff fe3f 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018da:	6863      	ldr	r3, [r4, #4]
 80018dc:	4368      	muls	r0, r5
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80018e8:	fb09 a313 	mls	r3, r9, r3, sl
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	3332      	adds	r3, #50	; 0x32
 80018f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018fa:	443b      	add	r3, r7
 80018fc:	60b3      	str	r3, [r6, #8]
 80018fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001902:	f7ff fe19 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001906:	2519      	movs	r5, #25
 8001908:	fb05 f300 	mul.w	r3, r5, r0
 800190c:	6860      	ldr	r0, [r4, #4]
 800190e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001912:	0040      	lsls	r0, r0, #1
 8001914:	fbb3 f3f0 	udiv	r3, r3, r0
 8001918:	fbb3 f3f9 	udiv	r3, r3, r9
 800191c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001920:	f7ff fe0a 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001924:	6863      	ldr	r3, [r4, #4]
 8001926:	4368      	muls	r0, r5
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fbb0 f7f3 	udiv	r7, r0, r3
 800192e:	f7ff fe03 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001932:	6863      	ldr	r3, [r4, #4]
 8001934:	4368      	muls	r0, r5
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fbb0 f3f3 	udiv	r3, r0, r3
 800193c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001940:	fb09 7313 	mls	r3, r9, r3, r7
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	3332      	adds	r3, #50	; 0x32
 8001948:	fbb3 f3f9 	udiv	r3, r3, r9
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001952:	f7ff fdf1 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001956:	6862      	ldr	r2, [r4, #4]
 8001958:	4368      	muls	r0, r5
 800195a:	0052      	lsls	r2, r2, #1
 800195c:	fbb0 faf2 	udiv	sl, r0, r2
 8001960:	f7ff fdea 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001964:	e7b9      	b.n	80018da <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001966:	429e      	cmp	r6, r3
 8001968:	d002      	beq.n	8001970 <UART_SetConfig+0x148>
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <UART_SetConfig+0x230>)
 800196c:	429e      	cmp	r6, r3
 800196e:	d140      	bne.n	80019f2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001970:	f7ff fdf2 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001974:	6867      	ldr	r7, [r4, #4]
 8001976:	2519      	movs	r5, #25
 8001978:	f04f 0964 	mov.w	r9, #100	; 0x64
 800197c:	fb05 f300 	mul.w	r3, r5, r0
 8001980:	00bf      	lsls	r7, r7, #2
 8001982:	fbb3 f3f7 	udiv	r3, r3, r7
 8001986:	fbb3 f3f9 	udiv	r3, r3, r9
 800198a:	011f      	lsls	r7, r3, #4
 800198c:	f7ff fde4 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001990:	6863      	ldr	r3, [r4, #4]
 8001992:	4368      	muls	r0, r5
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fbb0 f8f3 	udiv	r8, r0, r3
 800199a:	f7ff fddd 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	4368      	muls	r0, r5
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019ac:	fb09 8313 	mls	r3, r9, r3, r8
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	3332      	adds	r3, #50	; 0x32
 80019b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019b8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80019bc:	f7ff fdcc 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80019c0:	6862      	ldr	r2, [r4, #4]
 80019c2:	4368      	muls	r0, r5
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	fbb0 faf2 	udiv	sl, r0, r2
 80019ca:	f7ff fdc5 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019ce:	6863      	ldr	r3, [r4, #4]
 80019d0:	4368      	muls	r0, r5
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019dc:	fb09 a313 	mls	r3, r9, r3, sl
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	3332      	adds	r3, #50	; 0x32
 80019e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	ea43 0308 	orr.w	r3, r3, r8
 80019f0:	e783      	b.n	80018fa <UART_SetConfig+0xd2>
 80019f2:	f7ff fda1 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 80019f6:	6867      	ldr	r7, [r4, #4]
 80019f8:	2519      	movs	r5, #25
 80019fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019fe:	fb05 f300 	mul.w	r3, r5, r0
 8001a02:	00bf      	lsls	r7, r7, #2
 8001a04:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a08:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a0c:	011f      	lsls	r7, r3, #4
 8001a0e:	f7ff fd93 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	4368      	muls	r0, r5
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a1c:	f7ff fd8c 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	4368      	muls	r0, r5
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a2e:	fb09 8313 	mls	r3, r9, r3, r8
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	3332      	adds	r3, #50	; 0x32
 8001a36:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a3a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a3e:	f7ff fd7b 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a42:	6862      	ldr	r2, [r4, #4]
 8001a44:	4368      	muls	r0, r5
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	fbb0 faf2 	udiv	sl, r0, r2
 8001a4c:	f7ff fd74 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a50:	e7bd      	b.n	80019ce <UART_SetConfig+0x1a6>
 8001a52:	bf00      	nop
 8001a54:	40011000 	.word	0x40011000
 8001a58:	40011400 	.word	0x40011400

08001a5c <HAL_UART_Init>:
{
 8001a5c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001a5e:	4604      	mov	r4, r0
 8001a60:	b340      	cbz	r0, 8001ab4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a6a:	b91b      	cbnz	r3, 8001a74 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a70:	f009 ffe8 	bl	800ba44 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a76:	2324      	movs	r3, #36	; 0x24
 8001a78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a7c:	68d3      	ldr	r3, [r2, #12]
 8001a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a82:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fecf 	bl	8001828 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a9a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aa2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001aa6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001aaa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001aae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ab2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
}
 8001ab6:	bd10      	pop	{r4, pc}

08001ab8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001aba:	3b01      	subs	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ac2:	6902      	ldr	r2, [r0, #16]
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	daf8      	bge.n	8001aba <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ac8:	6903      	ldr	r3, [r0, #16]
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <USB_CoreReset+0x2c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001ad2:	3a01      	subs	r2, #1
 8001ad4:	d0f3      	beq.n	8001abe <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001ad6:	6903      	ldr	r3, [r0, #16]
 8001ad8:	f013 0301 	ands.w	r3, r3, #1
 8001adc:	d1f9      	bne.n	8001ad2 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001ade:	4618      	mov	r0, r3
}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	00030d41 	.word	0x00030d41

08001ae8 <USB_CoreInit>:
{
 8001ae8:	b084      	sub	sp, #16
 8001aea:	b538      	push	{r3, r4, r5, lr}
 8001aec:	ad05      	add	r5, sp, #20
 8001aee:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001af4:	2b01      	cmp	r3, #1
{
 8001af6:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001af8:	d125      	bne.n	8001b46 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001afa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001b02:	68c3      	ldr	r3, [r0, #12]
 8001b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b0c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001b0e:	68c3      	ldr	r3, [r0, #12]
 8001b10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b14:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001b18:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001b1a:	bf02      	ittt	eq
 8001b1c:	68c3      	ldreq	r3, [r0, #12]
 8001b1e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001b22:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001b24:	f7ff ffc8 	bl	8001ab8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001b28:	9b08      	ldr	r3, [sp, #32]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	f043 0306 	orr.w	r3, r3, #6
 8001b34:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b36:	68a3      	ldr	r3, [r4, #8]
 8001b38:	f043 0320 	orr.w	r3, r3, #32
 8001b3c:	60a3      	str	r3, [r4, #8]
}
 8001b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b42:	b004      	add	sp, #16
 8001b44:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001b46:	68c3      	ldr	r3, [r0, #12]
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001b4e:	f7ff ffb3 	bl	8001ab8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b54:	b923      	cbnz	r3, 8001b60 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b5e:	e7e3      	b.n	8001b28 <USB_CoreInit+0x40>
 8001b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	e7f9      	b.n	8001b5c <USB_CoreInit+0x74>

08001b68 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b68:	6883      	ldr	r3, [r0, #8]
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6083      	str	r3, [r0, #8]
}
 8001b70:	2000      	movs	r0, #0
 8001b72:	4770      	bx	lr

08001b74 <USB_SetCurrentMode>:
{
 8001b74:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b76:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b78:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b7a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001b7e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b80:	d108      	bne.n	8001b94 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001b82:	68c3      	ldr	r3, [r0, #12]
 8001b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001b88:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001b8a:	2032      	movs	r0, #50	; 0x32
 8001b8c:	f7fe fcec 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 8001b90:	2000      	movs	r0, #0
 8001b92:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001b94:	b919      	cbnz	r1, 8001b9e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001b96:	68c3      	ldr	r3, [r0, #12]
 8001b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b9c:	e7f4      	b.n	8001b88 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001b9e:	2001      	movs	r0, #1
}
 8001ba0:	bd08      	pop	{r3, pc}
	...

08001ba4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001ba4:	0189      	lsls	r1, r1, #6
 8001ba6:	f041 0120 	orr.w	r1, r1, #32
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <USB_FlushTxFifo+0x20>)
 8001bac:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	d005      	beq.n	8001bbe <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001bb2:	6903      	ldr	r3, [r0, #16]
 8001bb4:	f013 0320 	ands.w	r3, r3, #32
 8001bb8:	d1f9      	bne.n	8001bae <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001bbe:	2003      	movs	r0, #3
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	00030d41 	.word	0x00030d41

08001bc8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001bc8:	2310      	movs	r3, #16
 8001bca:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <USB_FlushRxFifo+0x1c>)
 8001bcc:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	d005      	beq.n	8001bde <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001bd2:	6903      	ldr	r3, [r0, #16]
 8001bd4:	f013 0310 	ands.w	r3, r3, #16
 8001bd8:	d1f9      	bne.n	8001bce <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	00030d41 	.word	0x00030d41

08001be8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001be8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001bec:	4319      	orrs	r1, r3
 8001bee:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	4770      	bx	lr
	...

08001bf8 <USB_DevInit>:
{
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bfe:	4604      	mov	r4, r0
 8001c00:	a809      	add	r0, sp, #36	; 0x24
 8001c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001c0a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8001c0c:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8001c18:	3301      	adds	r3, #1
 8001c1a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8001c1c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001c1e:	d1f7      	bne.n	8001c10 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8001c20:	2e00      	cmp	r6, #0
 8001c22:	d173      	bne.n	8001d0c <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c2e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c32:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c3a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c42:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001c46:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c4c:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c4e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c52:	d165      	bne.n	8001d20 <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8001c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c56:	2900      	cmp	r1, #0
 8001c58:	d160      	bne.n	8001d1c <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ffc4 	bl	8001be8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c60:	2110      	movs	r1, #16
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ff9e 	bl	8001ba4 <USB_FlushTxFifo>
 8001c68:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff ffac 	bl	8001bc8 <USB_FlushRxFifo>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d157      	bne.n	8001d24 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c74:	1c08      	adds	r0, r1, #0
 8001c76:	bf18      	it	ne
 8001c78:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	612b      	str	r3, [r5, #16]
 8001c7e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001c82:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001c84:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8001c86:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001c88:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001c8c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001c90:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c94:	4543      	cmp	r3, r8
 8001c96:	d147      	bne.n	8001d28 <USB_DevInit+0x130>
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001c9e:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001ca0:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001ca4:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001ca8:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001cac:	428b      	cmp	r3, r1
 8001cae:	d14e      	bne.n	8001d4e <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001cb0:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001cb2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001cba:	d107      	bne.n	8001ccc <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <USB_DevInit+0x180>)
 8001cbe:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001cc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	f043 0303 	orr.w	r3, r3, #3
 8001cca:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001cd0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001cd4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001cd6:	b91f      	cbnz	r7, 8001ce0 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001cd8:	69a3      	ldr	r3, [r4, #24]
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001ce0:	69a2      	ldr	r2, [r4, #24]
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <USB_DevInit+0x184>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001cea:	b11b      	cbz	r3, 8001cf4 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001cec:	69a3      	ldr	r3, [r4, #24]
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001cf4:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001cf6:	bf01      	itttt	eq
 8001cf8:	69a3      	ldreq	r3, [r4, #24]
 8001cfa:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001cfe:	f043 0304 	orreq.w	r3, r3, #4
 8001d02:	61a3      	streq	r3, [r4, #24]
}
 8001d04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d08:	b004      	add	sp, #16
 8001d0a:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d12:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d1a:	e78e      	b.n	8001c3a <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	e79c      	b.n	8001c5a <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001d20:	2103      	movs	r1, #3
 8001d22:	e79a      	b.n	8001c5a <USB_DevInit+0x62>
 8001d24:	2001      	movs	r0, #1
 8001d26:	e7a8      	b.n	8001c7a <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001d28:	f8d2 a000 	ldr.w	sl, [r2]
 8001d2c:	f1ba 0f00 	cmp.w	sl, #0
 8001d30:	da0b      	bge.n	8001d4a <USB_DevInit+0x152>
      if (i == 0U)
 8001d32:	b93b      	cbnz	r3, 8001d44 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001d34:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001d38:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d3a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001d3c:	f8c2 9008 	str.w	r9, [r2, #8]
 8001d40:	3220      	adds	r2, #32
 8001d42:	e7a7      	b.n	8001c94 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001d44:	f8c2 e000 	str.w	lr, [r2]
 8001d48:	e7f6      	b.n	8001d38 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 8001d4a:	6011      	str	r1, [r2, #0]
 8001d4c:	e7f4      	b.n	8001d38 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001d4e:	f8d2 a000 	ldr.w	sl, [r2]
 8001d52:	f1ba 0f00 	cmp.w	sl, #0
 8001d56:	da0c      	bge.n	8001d72 <USB_DevInit+0x17a>
      if (i == 0U)
 8001d58:	b941      	cbnz	r1, 8001d6c <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001d5a:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001d5e:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d62:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001d64:	f8c2 9008 	str.w	r9, [r2, #8]
 8001d68:	3220      	adds	r2, #32
 8001d6a:	e79f      	b.n	8001cac <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001d6c:	f8c2 c000 	str.w	ip, [r2]
 8001d70:	e7f5      	b.n	8001d5e <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001d72:	f8c2 e000 	str.w	lr, [r2]
 8001d76:	e7f2      	b.n	8001d5e <USB_DevInit+0x166>
 8001d78:	00800100 	.word	0x00800100
 8001d7c:	803c3800 	.word	0x803c3800

08001d80 <USB_DevDisconnect>:
{
 8001d80:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001d82:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f7fe fbea 	bl	8000568 <HAL_Delay>
}
 8001d94:	2000      	movs	r0, #0
 8001d96:	bd08      	pop	{r3, pc}

08001d98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d98:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001d9a:	f001 fa8f 	bl	80032bc <vTaskStartScheduler>
  
  return osOK;
}
 8001d9e:	2000      	movs	r0, #0
 8001da0:	bd08      	pop	{r3, pc}

08001da2 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001da2:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8001da6:	b10b      	cbz	r3, 8001dac <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8001da8:	f001 bacc 	b.w	8003344 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8001dac:	f001 bac4 	b.w	8003338 <xTaskGetTickCount>

08001db0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001db4:	6946      	ldr	r6, [r0, #20]
 8001db6:	692a      	ldr	r2, [r5, #16]
 8001db8:	6840      	ldr	r0, [r0, #4]
 8001dba:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001dc4:	b176      	cbz	r6, 8001de4 <osThreadCreate+0x34>
 8001dc6:	69ad      	ldr	r5, [r5, #24]
 8001dc8:	b165      	cbz	r5, 8001de4 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001dca:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001dcc:	bf14      	ite	ne
 8001dce:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dd0:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dd2:	9502      	str	r5, [sp, #8]
 8001dd4:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001dd8:	f001 fa0c 	bl	80031f4 <xTaskCreateStatic>
 8001ddc:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dde:	9805      	ldr	r0, [sp, #20]
}
 8001de0:	b006      	add	sp, #24
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001de4:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001de6:	bf14      	ite	ne
 8001de8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dea:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dec:	ad05      	add	r5, sp, #20
 8001dee:	b292      	uxth	r2, r2
 8001df0:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001df4:	f001 fa35 	bl	8003262 <xTaskCreate>
 8001df8:	2801      	cmp	r0, #1
 8001dfa:	d0f0      	beq.n	8001dde <osThreadCreate+0x2e>
      return NULL;
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	e7ef      	b.n	8001de0 <osThreadCreate+0x30>

08001e00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e00:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e02:	2800      	cmp	r0, #0
 8001e04:	bf08      	it	eq
 8001e06:	2001      	moveq	r0, #1
 8001e08:	f001 fb78 	bl	80034fc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	bd08      	pop	{r3, pc}

08001e10 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001e10:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e12:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8001e14:	b109      	cbz	r1, 8001e1a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e16:	f000 bdee 	b.w	80029f6 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001e1a:	f000 bde1 	b.w	80029e0 <xQueueCreateMutex>
	...

08001e20 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001e20:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001e22:	2400      	movs	r4, #0
 8001e24:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001e26:	b1e0      	cbz	r0, 8001e62 <osMutexWait+0x42>
 8001e28:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001e2c:	b1a3      	cbz	r3, 8001e58 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001e2e:	aa01      	add	r2, sp, #4
 8001e30:	4621      	mov	r1, r4
 8001e32:	f000 fff5 	bl	8002e20 <xQueueReceiveFromISR>
 8001e36:	2801      	cmp	r0, #1
 8001e38:	d002      	beq.n	8001e40 <osMutexWait+0x20>
      return osErrorOS;
 8001e3a:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	b13b      	cbz	r3, 8001e54 <osMutexWait+0x34>
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <osMutexWait+0x48>)
 8001e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	f3bf 8f6f 	isb	sy
  return osOK;
 8001e54:	2000      	movs	r0, #0
 8001e56:	e7f1      	b.n	8001e3c <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001e58:	f000 ff2a 	bl	8002cb0 <xQueueSemaphoreTake>
 8001e5c:	2801      	cmp	r0, #1
 8001e5e:	d1ec      	bne.n	8001e3a <osMutexWait+0x1a>
 8001e60:	e7f8      	b.n	8001e54 <osMutexWait+0x34>
    return osErrorParameter;
 8001e62:	2080      	movs	r0, #128	; 0x80
 8001e64:	e7ea      	b.n	8001e3c <osMutexWait+0x1c>
 8001e66:	bf00      	nop
 8001e68:	e000ed04 	.word	0xe000ed04

08001e6c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001e6e:	6844      	ldr	r4, [r0, #4]
{ 
 8001e70:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8001e72:	b16c      	cbz	r4, 8001e90 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8001e74:	2901      	cmp	r1, #1
 8001e76:	d11b      	bne.n	8001eb0 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001e78:	2303      	movs	r3, #3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4628      	mov	r0, r5
 8001e80:	4623      	mov	r3, r4
 8001e82:	4611      	mov	r1, r2
 8001e84:	f000 fc8b 	bl	800279e <xQueueGenericCreateStatic>
 8001e88:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8001e90:	2901      	cmp	r1, #1
 8001e92:	d10f      	bne.n	8001eb4 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8001e94:	4628      	mov	r0, r5
 8001e96:	2203      	movs	r2, #3
 8001e98:	4621      	mov	r1, r4
 8001e9a:	f000 fcc9 	bl	8002830 <xQueueGenericCreate>
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d0f2      	beq.n	8001e8a <osSemaphoreCreate+0x1e>
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f000 fce5 	bl	8002878 <xQueueGenericSend>
 8001eae:	e7ec      	b.n	8001e8a <osSemaphoreCreate+0x1e>
      return NULL;
 8001eb0:	2500      	movs	r5, #0
 8001eb2:	e7ea      	b.n	8001e8a <osSemaphoreCreate+0x1e>
 8001eb4:	4625      	mov	r5, r4
 8001eb6:	e7e8      	b.n	8001e8a <osSemaphoreCreate+0x1e>

08001eb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001eb8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001eba:	2400      	movs	r4, #0
 8001ebc:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001ebe:	b1e0      	cbz	r0, 8001efa <osSemaphoreWait+0x42>
 8001ec0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001ec4:	b1a3      	cbz	r3, 8001ef0 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001ec6:	aa01      	add	r2, sp, #4
 8001ec8:	4621      	mov	r1, r4
 8001eca:	f000 ffa9 	bl	8002e20 <xQueueReceiveFromISR>
 8001ece:	2801      	cmp	r0, #1
 8001ed0:	d002      	beq.n	8001ed8 <osSemaphoreWait+0x20>
      return osErrorOS;
 8001ed2:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001ed8:	9b01      	ldr	r3, [sp, #4]
 8001eda:	b13b      	cbz	r3, 8001eec <osSemaphoreWait+0x34>
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <osSemaphoreWait+0x48>)
 8001ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	f3bf 8f6f 	isb	sy
  return osOK;
 8001eec:	2000      	movs	r0, #0
 8001eee:	e7f1      	b.n	8001ed4 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001ef0:	f000 fede 	bl	8002cb0 <xQueueSemaphoreTake>
 8001ef4:	2801      	cmp	r0, #1
 8001ef6:	d1ec      	bne.n	8001ed2 <osSemaphoreWait+0x1a>
 8001ef8:	e7f8      	b.n	8001eec <osSemaphoreWait+0x34>
    return osErrorParameter;
 8001efa:	2080      	movs	r0, #128	; 0x80
 8001efc:	e7ea      	b.n	8001ed4 <osSemaphoreWait+0x1c>
 8001efe:	bf00      	nop
 8001f00:	e000ed04 	.word	0xe000ed04

08001f04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001f04:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001f06:	2400      	movs	r4, #0
 8001f08:	9401      	str	r4, [sp, #4]
 8001f0a:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001f0e:	b193      	cbz	r3, 8001f36 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001f10:	a901      	add	r1, sp, #4
 8001f12:	f000 fde0 	bl	8002ad6 <xQueueGiveFromISR>
 8001f16:	2801      	cmp	r0, #1
 8001f18:	d113      	bne.n	8001f42 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001f1a:	9b01      	ldr	r3, [sp, #4]
 8001f1c:	b913      	cbnz	r3, 8001f24 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001f1e:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001f20:	b002      	add	sp, #8
 8001f22:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <osSemaphoreRelease+0x44>)
 8001f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	e7f3      	b.n	8001f1e <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001f36:	461a      	mov	r2, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f000 fc9d 	bl	8002878 <xQueueGenericSend>
 8001f3e:	2801      	cmp	r0, #1
 8001f40:	d0ed      	beq.n	8001f1e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001f42:	20ff      	movs	r0, #255	; 0xff
 8001f44:	e7ec      	b.n	8001f20 <osSemaphoreRelease+0x1c>
 8001f46:	bf00      	nop
 8001f48:	e000ed04 	.word	0xe000ed04

08001f4c <osMutexRelease>:
 8001f4c:	f7ff bfda 	b.w	8001f04 <osSemaphoreRelease>

08001f50 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001f50:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001f52:	6882      	ldr	r2, [r0, #8]
 8001f54:	b14a      	cbz	r2, 8001f6a <osMessageCreate+0x1a>
 8001f56:	68c3      	ldr	r3, [r0, #12]
 8001f58:	b13b      	cbz	r3, 8001f6a <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	9100      	str	r1, [sp, #0]
 8001f5e:	c803      	ldmia	r0, {r0, r1}
 8001f60:	f000 fc1d 	bl	800279e <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001f64:	b003      	add	sp, #12
 8001f66:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f6a:	c803      	ldmia	r0, {r0, r1}
 8001f6c:	2200      	movs	r2, #0
}
 8001f6e:	b003      	add	sp, #12
 8001f70:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f74:	f000 bc5c 	b.w	8002830 <xQueueGenericCreate>

08001f78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8001f7a:	2400      	movs	r4, #0
{
 8001f7c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001f7e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	bf08      	it	eq
 8001f84:	2201      	moveq	r2, #1
 8001f86:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8001f8a:	b1ab      	cbz	r3, 8001fb8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001f8c:	4623      	mov	r3, r4
 8001f8e:	aa03      	add	r2, sp, #12
 8001f90:	a901      	add	r1, sp, #4
 8001f92:	f000 fd3e 	bl	8002a12 <xQueueGenericSendFromISR>
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d002      	beq.n	8001fa0 <osMessagePut+0x28>
      return osErrorOS;
 8001f9a:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001fa0:	9b03      	ldr	r3, [sp, #12]
 8001fa2:	b13b      	cbz	r3, 8001fb4 <osMessagePut+0x3c>
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <osMessagePut+0x4c>)
 8001fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	f3bf 8f6f 	isb	sy
  return osOK;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7f1      	b.n	8001f9c <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001fb8:	a901      	add	r1, sp, #4
 8001fba:	f000 fc5d 	bl	8002878 <xQueueGenericSend>
 8001fbe:	2801      	cmp	r0, #1
 8001fc0:	d1eb      	bne.n	8001f9a <osMessagePut+0x22>
 8001fc2:	e7f7      	b.n	8001fb4 <osMessagePut+0x3c>
 8001fc4:	e000ed04 	.word	0xe000ed04

08001fc8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fca:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001fcc:	2600      	movs	r6, #0
{
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4617      	mov	r7, r2
 8001fd2:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001fd4:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001fd6:	9602      	str	r6, [sp, #8]
 8001fd8:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8001fda:	b911      	cbnz	r1, 8001fe2 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8001fdc:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	e017      	b.n	8002012 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8001fe2:	9600      	str	r6, [sp, #0]
 8001fe4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001fe8:	b1d3      	cbz	r3, 8002020 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001fea:	466a      	mov	r2, sp
 8001fec:	a902      	add	r1, sp, #8
 8001fee:	f000 ff17 	bl	8002e20 <xQueueReceiveFromISR>
 8001ff2:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8001ff4:	bf04      	itt	eq
 8001ff6:	2310      	moveq	r3, #16
 8001ff8:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001ffa:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8001ffc:	bf18      	it	ne
 8001ffe:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002000:	b13b      	cbz	r3, 8002012 <osMessageGet+0x4a>
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <osMessageGet+0x70>)
 8002004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8002012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800201a:	4620      	mov	r0, r4
 800201c:	b005      	add	sp, #20
 800201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002020:	a902      	add	r1, sp, #8
 8002022:	f000 fdad 	bl	8002b80 <xQueueReceive>
 8002026:	2801      	cmp	r0, #1
 8002028:	d101      	bne.n	800202e <osMessageGet+0x66>
      event.status = osEventMessage;
 800202a:	2310      	movs	r3, #16
 800202c:	e7d7      	b.n	8001fde <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800202e:	2f00      	cmp	r7, #0
 8002030:	bf0c      	ite	eq
 8002032:	2300      	moveq	r3, #0
 8002034:	2340      	movne	r3, #64	; 0x40
 8002036:	e7d2      	b.n	8001fde <osMessageGet+0x16>
 8002038:	e000ed04 	.word	0xe000ed04

0800203c <osMessageWaiting>:
 800203c:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8002040:	b10b      	cbz	r3, 8002046 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8002042:	f000 bf50 	b.w	8002ee6 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8002046:	f000 bf3b 	b.w	8002ec0 <uxQueueMessagesWaiting>

0800204a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800204a:	b510      	push	{r4, lr}
 800204c:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8002050:	b91c      	cbnz	r4, 800205a <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 8002052:	f000 ff69 	bl	8002f28 <vQueueDelete>

  return osOK; 
 8002056:	4620      	mov	r0, r4
 8002058:	bd10      	pop	{r4, pc}
    return osErrorISR;
 800205a:	2082      	movs	r0, #130	; 0x82
}
 800205c:	bd10      	pop	{r4, pc}

0800205e <osSemaphoreDelete>:
 800205e:	f7ff bff4 	b.w	800204a <osMessageDelete>

08002062 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002062:	f100 0308 	add.w	r3, r0, #8
 8002066:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002070:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002072:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002074:	6003      	str	r3, [r0, #0]
 8002076:	4770      	bx	lr

08002078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	6103      	str	r3, [r0, #16]
 800207c:	4770      	bx	lr

0800207e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800207e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002080:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800208a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800208c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800208e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002090:	3301      	adds	r3, #1
 8002092:	6003      	str	r3, [r0, #0]
 8002094:	4770      	bx	lr

08002096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002096:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002098:	1c53      	adds	r3, r2, #1
{
 800209a:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800209c:	d10a      	bne.n	80020b4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800209e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020a4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020a6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80020a8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80020aa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020ac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80020ae:	3301      	adds	r3, #1
 80020b0:	6003      	str	r3, [r0, #0]
 80020b2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b4:	f100 0308 	add.w	r3, r0, #8
 80020b8:	685c      	ldr	r4, [r3, #4]
 80020ba:	6825      	ldr	r5, [r4, #0]
 80020bc:	42aa      	cmp	r2, r5
 80020be:	d3ef      	bcc.n	80020a0 <vListInsert+0xa>
 80020c0:	4623      	mov	r3, r4
 80020c2:	e7f9      	b.n	80020b8 <vListInsert+0x22>

080020c4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020c4:	6841      	ldr	r1, [r0, #4]
 80020c6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80020c8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020ca:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020cc:	6882      	ldr	r2, [r0, #8]
 80020ce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020d4:	bf08      	it	eq
 80020d6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020d8:	2200      	movs	r2, #0
 80020da:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	3a01      	subs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020e2:	6818      	ldr	r0, [r3, #0]
}
 80020e4:	4770      	bx	lr
	...

080020e8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <prvTaskExitError+0x3c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	d008      	beq.n	8002108 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fa:	f383 8811 	msr	BASEPRI, r3
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f3bf 8f4f 	dsb	sy
 8002106:	e7fe      	b.n	8002106 <prvTaskExitError+0x1e>
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002118:	9b01      	ldr	r3, [sp, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0fc      	beq.n	8002118 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800211e:	b002      	add	sp, #8
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000004 	.word	0x20000004

08002128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002128:	4808      	ldr	r0, [pc, #32]	; (800214c <prvPortStartFirstTask+0x24>)
 800212a:	6800      	ldr	r0, [r0, #0]
 800212c:	6800      	ldr	r0, [r0, #0]
 800212e:	f380 8808 	msr	MSP, r0
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f380 8814 	msr	CONTROL, r0
 800213a:	b662      	cpsie	i
 800213c:	b661      	cpsie	f
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	df00      	svc	0
 8002148:	bf00      	nop
 800214a:	0000      	.short	0x0000
 800214c:	e000ed08 	.word	0xe000ed08

08002150 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002150:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002160 <vPortEnableVFP+0x10>
 8002154:	6801      	ldr	r1, [r0, #0]
 8002156:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800215a:	6001      	str	r1, [r0, #0]
 800215c:	4770      	bx	lr
 800215e:	0000      	.short	0x0000
 8002160:	e000ed88 	.word	0xe000ed88

08002164 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002168:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <pxPortInitialiseStack+0x28>)
 800216e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002172:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002176:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800217a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800217e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002182:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002186:	3844      	subs	r0, #68	; 0x44
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	080020e9 	.word	0x080020e9

08002190 <SVC_Handler>:
	__asm volatile (
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <pxCurrentTCBConst2>)
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	6808      	ldr	r0, [r1, #0]
 8002196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219a:	f380 8809 	msr	PSP, r0
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f380 8811 	msr	BASEPRI, r0
 80021aa:	4770      	bx	lr
 80021ac:	f3af 8000 	nop.w

080021b0 <pxCurrentTCBConst2>:
 80021b0:	20003cb4 	.word	0x20003cb4

080021b4 <vPortEnterCritical>:
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <vPortEnterCritical+0x3c>)
 80021c6:	6813      	ldr	r3, [r2, #0]
 80021c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80021ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80021cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80021ce:	d10d      	bne.n	80021ec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <vPortEnterCritical+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80021d8:	d008      	beq.n	80021ec <vPortEnterCritical+0x38>
 80021da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021de:	f383 8811 	msr	BASEPRI, r3
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	e7fe      	b.n	80021ea <vPortEnterCritical+0x36>
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000004 	.word	0x20000004
 80021f4:	e000ed04 	.word	0xe000ed04

080021f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80021f8:	4a08      	ldr	r2, [pc, #32]	; (800221c <vPortExitCritical+0x24>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	b943      	cbnz	r3, 8002210 <vPortExitCritical+0x18>
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	e7fe      	b.n	800220e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002210:	3b01      	subs	r3, #1
 8002212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002214:	b90b      	cbnz	r3, 800221a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002216:	f383 8811 	msr	BASEPRI, r3
 800221a:	4770      	bx	lr
 800221c:	20000004 	.word	0x20000004

08002220 <PendSV_Handler>:
	__asm volatile
 8002220:	f3ef 8009 	mrs	r0, PSP
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <pxCurrentTCBConst>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f01e 0f10 	tst.w	lr, #16
 8002230:	bf08      	it	eq
 8002232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223a:	6010      	str	r0, [r2, #0]
 800223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002244:	f380 8811 	msr	BASEPRI, r0
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f001 f978 	bl	8003544 <vTaskSwitchContext>
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f380 8811 	msr	BASEPRI, r0
 800225c:	bc09      	pop	{r0, r3}
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	6808      	ldr	r0, [r1, #0]
 8002262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002266:	f01e 0f10 	tst.w	lr, #16
 800226a:	bf08      	it	eq
 800226c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002270:	f380 8809 	msr	PSP, r0
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	f3af 8000 	nop.w

08002280 <pxCurrentTCBConst>:
 8002280:	20003cb4 	.word	0x20003cb4

08002284 <SysTick_Handler>:
{
 8002284:	b508      	push	{r3, lr}
	__asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002296:	f001 f85d 	bl	8003354 <xTaskIncrementTick>
 800229a:	b118      	cbz	r0, 80022a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <SysTick_Handler+0x28>)
 800229e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80022a4:	2300      	movs	r3, #0
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	bd08      	pop	{r3, pc}
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022b2:	4909      	ldr	r1, [pc, #36]	; (80022d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <vPortSetupTimerInterrupt+0x2c>)
 80022bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c6:	4906      	ldr	r1, [pc, #24]	; (80022e0 <vPortSetupTimerInterrupt+0x30>)
 80022c8:	3b01      	subs	r3, #1
 80022ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022cc:	2307      	movs	r3, #7
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010
 80022d8:	e000e018 	.word	0xe000e018
 80022dc:	20000010 	.word	0x20000010
 80022e0:	e000e014 	.word	0xe000e014

080022e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022e4:	4b39      	ldr	r3, [pc, #228]	; (80023cc <xPortStartScheduler+0xe8>)
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <xPortStartScheduler+0xec>)
{
 80022e8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	4291      	cmp	r1, r2
 80022ee:	d108      	bne.n	8002302 <xPortStartScheduler+0x1e>
	__asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	e7fe      	b.n	8002300 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <xPortStartScheduler+0xf0>)
 8002306:	429a      	cmp	r2, r3
 8002308:	d108      	bne.n	800231c <xPortStartScheduler+0x38>
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	e7fe      	b.n	800231a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <xPortStartScheduler+0xf4>)
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002324:	22ff      	movs	r2, #255	; 0xff
 8002326:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002328:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800232a:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002332:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002336:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800233a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <xPortStartScheduler+0xfc>)
 800233e:	2207      	movs	r2, #7
 8002340:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002342:	2100      	movs	r1, #0
 8002344:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002348:	0600      	lsls	r0, r0, #24
 800234a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800234e:	d40d      	bmi.n	800236c <xPortStartScheduler+0x88>
 8002350:	b101      	cbz	r1, 8002354 <xPortStartScheduler+0x70>
 8002352:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2a03      	cmp	r2, #3
 8002358:	d011      	beq.n	800237e <xPortStartScheduler+0x9a>
 800235a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	e7fe      	b.n	800236a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800236c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f88d 2003 	strb.w	r2, [sp, #3]
 8002378:	2101      	movs	r1, #1
 800237a:	4622      	mov	r2, r4
 800237c:	e7e2      	b.n	8002344 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800237e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002380:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002384:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002386:	9b01      	ldr	r3, [sp, #4]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <xPortStartScheduler+0xf4>)
 800238a:	b2db      	uxtb	r3, r3
 800238c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <xPortStartScheduler+0x100>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002396:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800239e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80023a0:	f7ff ff86 	bl	80022b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <xPortStartScheduler+0x104>)
 80023a6:	2400      	movs	r4, #0
 80023a8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80023aa:	f7ff fed1 	bl	8002150 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <xPortStartScheduler+0x108>)
 80023b0:	6813      	ldr	r3, [r2, #0]
 80023b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80023b6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80023b8:	f7ff feb6 	bl	8002128 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80023bc:	f001 f8c2 	bl	8003544 <vTaskSwitchContext>
	prvTaskExitError();
 80023c0:	f7ff fe92 	bl	80020e8 <prvTaskExitError>
}
 80023c4:	4620      	mov	r0, r4
 80023c6:	b002      	add	sp, #8
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	410fc271 	.word	0x410fc271
 80023d4:	410fc270 	.word	0x410fc270
 80023d8:	e000e400 	.word	0xe000e400
 80023dc:	20000094 	.word	0x20000094
 80023e0:	20000098 	.word	0x20000098
 80023e4:	e000ed20 	.word	0xe000ed20
 80023e8:	20000004 	.word	0x20000004
 80023ec:	e000ef34 	.word	0xe000ef34

080023f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80023f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d90e      	bls.n	8002416 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <vPortValidateInterruptPriority+0x4c>)
 80023fa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80023fc:	4a10      	ldr	r2, [pc, #64]	; (8002440 <vPortValidateInterruptPriority+0x50>)
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d908      	bls.n	8002416 <vPortValidateInterruptPriority+0x26>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	e7fe      	b.n	8002414 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <vPortValidateInterruptPriority+0x54>)
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <vPortValidateInterruptPriority+0x58>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002422:	4293      	cmp	r3, r2
 8002424:	d908      	bls.n	8002438 <vPortValidateInterruptPriority+0x48>
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	e7fe      	b.n	8002436 <vPortValidateInterruptPriority+0x46>
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e3f0 	.word	0xe000e3f0
 8002440:	20000094 	.word	0x20000094
 8002444:	e000ed0c 	.word	0xe000ed0c
 8002448:	20000098 	.word	0x20000098

0800244c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800244c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <prvInsertBlockIntoFreeList+0x40>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4282      	cmp	r2, r0
 8002454:	d318      	bcc.n	8002488 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002456:	685c      	ldr	r4, [r3, #4]
 8002458:	1919      	adds	r1, r3, r4
 800245a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800245c:	bf01      	itttt	eq
 800245e:	6841      	ldreq	r1, [r0, #4]
 8002460:	4618      	moveq	r0, r3
 8002462:	1909      	addeq	r1, r1, r4
 8002464:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002466:	6844      	ldr	r4, [r0, #4]
 8002468:	1901      	adds	r1, r0, r4
 800246a:	428a      	cmp	r2, r1
 800246c:	d107      	bne.n	800247e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <prvInsertBlockIntoFreeList+0x44>)
 8002470:	6809      	ldr	r1, [r1, #0]
 8002472:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002474:	bf1f      	itttt	ne
 8002476:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002478:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800247a:	1909      	addne	r1, r1, r4
 800247c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800247e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002480:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002482:	bf18      	it	ne
 8002484:	6018      	strne	r0, [r3, #0]
 8002486:	bd10      	pop	{r4, pc}
 8002488:	4613      	mov	r3, r2
 800248a:	e7e1      	b.n	8002450 <prvInsertBlockIntoFreeList+0x4>
 800248c:	20003cac 	.word	0x20003cac
 8002490:	2000009c 	.word	0x2000009c

08002494 <pvPortMalloc>:
{
 8002494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002498:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800249a:	f000 ff45 	bl	8003328 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800249e:	493e      	ldr	r1, [pc, #248]	; (8002598 <pvPortMalloc+0x104>)
 80024a0:	4d3e      	ldr	r5, [pc, #248]	; (800259c <pvPortMalloc+0x108>)
 80024a2:	680b      	ldr	r3, [r1, #0]
 80024a4:	bb0b      	cbnz	r3, 80024ea <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80024a6:	4a3e      	ldr	r2, [pc, #248]	; (80025a0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024a8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024aa:	bf1f      	itttt	ne
 80024ac:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024ae:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80024b2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80024b6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024b8:	bf14      	ite	ne
 80024ba:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024bc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80024c0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80024c2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024c4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024c8:	4e36      	ldr	r6, [pc, #216]	; (80025a4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80024ca:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80024cc:	2000      	movs	r0, #0
 80024ce:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024d0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80024d2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80024d4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024d6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024d8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024dc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024de:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <pvPortMalloc+0x118>)
 80024e2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024e8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024ea:	682f      	ldr	r7, [r5, #0]
 80024ec:	4227      	tst	r7, r4
 80024ee:	d116      	bne.n	800251e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80024f0:	2c00      	cmp	r4, #0
 80024f2:	d041      	beq.n	8002578 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80024f4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024f8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024fa:	bf1c      	itt	ne
 80024fc:	f023 0307 	bicne.w	r3, r3, #7
 8002500:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002502:	b163      	cbz	r3, 800251e <pvPortMalloc+0x8a>
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <pvPortMalloc+0x118>)
 8002506:	6816      	ldr	r6, [r2, #0]
 8002508:	42b3      	cmp	r3, r6
 800250a:	4690      	mov	r8, r2
 800250c:	d807      	bhi.n	800251e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <pvPortMalloc+0x110>)
 8002510:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002512:	6868      	ldr	r0, [r5, #4]
 8002514:	4283      	cmp	r3, r0
 8002516:	d804      	bhi.n	8002522 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002518:	6809      	ldr	r1, [r1, #0]
 800251a:	428d      	cmp	r5, r1
 800251c:	d107      	bne.n	800252e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800251e:	2400      	movs	r4, #0
 8002520:	e02a      	b.n	8002578 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002522:	682c      	ldr	r4, [r5, #0]
 8002524:	2c00      	cmp	r4, #0
 8002526:	d0f7      	beq.n	8002518 <pvPortMalloc+0x84>
 8002528:	462a      	mov	r2, r5
 800252a:	4625      	mov	r5, r4
 800252c:	e7f1      	b.n	8002512 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800252e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002530:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002532:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002534:	1ac2      	subs	r2, r0, r3
 8002536:	2a10      	cmp	r2, #16
 8002538:	d90f      	bls.n	800255a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800253a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800253c:	0741      	lsls	r1, r0, #29
 800253e:	d008      	beq.n	8002552 <pvPortMalloc+0xbe>
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	e7fe      	b.n	8002550 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002552:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002554:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002556:	f7ff ff79 	bl	800244c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800255a:	4913      	ldr	r1, [pc, #76]	; (80025a8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800255c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800255e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002560:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002562:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002564:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002566:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800256a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800256e:	bf38      	it	cc
 8002570:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002572:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002574:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002576:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002578:	f000 ff58 	bl	800342c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800257c:	0763      	lsls	r3, r4, #29
 800257e:	d008      	beq.n	8002592 <pvPortMalloc+0xfe>
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	e7fe      	b.n	8002590 <pvPortMalloc+0xfc>
}
 8002592:	4620      	mov	r0, r4
 8002594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002598:	2000009c 	.word	0x2000009c
 800259c:	20003ca0 	.word	0x20003ca0
 80025a0:	200000a0 	.word	0x200000a0
 80025a4:	20003cac 	.word	0x20003cac
 80025a8:	20003ca8 	.word	0x20003ca8
 80025ac:	20003ca4 	.word	0x20003ca4

080025b0 <vPortFree>:
{
 80025b0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80025b2:	4604      	mov	r4, r0
 80025b4:	b370      	cbz	r0, 8002614 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <vPortFree+0x68>)
 80025b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4213      	tst	r3, r2
 80025c0:	d108      	bne.n	80025d4 <vPortFree+0x24>
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	e7fe      	b.n	80025d2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80025d8:	b141      	cbz	r1, 80025ec <vPortFree+0x3c>
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	e7fe      	b.n	80025ea <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025ec:	ea23 0302 	bic.w	r3, r3, r2
 80025f0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80025f4:	f000 fe98 	bl	8003328 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025f8:	4a08      	ldr	r2, [pc, #32]	; (800261c <vPortFree+0x6c>)
 80025fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80025fe:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002600:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002604:	440b      	add	r3, r1
 8002606:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002608:	f7ff ff20 	bl	800244c <prvInsertBlockIntoFreeList>
}
 800260c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002610:	f000 bf0c 	b.w	800342c <xTaskResumeAll>
 8002614:	bd10      	pop	{r4, pc}
 8002616:	bf00      	nop
 8002618:	20003ca0 	.word	0x20003ca0
 800261c:	20003ca4 	.word	0x20003ca4

08002620 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002620:	b510      	push	{r4, lr}
 8002622:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002624:	f7ff fdc6 	bl	80021b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002628:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800262a:	f7ff fde5 	bl	80021f8 <vPortExitCritical>

	return xReturn;
}
 800262e:	fab4 f084 	clz	r0, r4
 8002632:	0940      	lsrs	r0, r0, #5
 8002634:	bd10      	pop	{r4, pc}

08002636 <prvCopyDataToQueue>:
{
 8002636:	b570      	push	{r4, r5, r6, lr}
 8002638:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800263a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800263c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800263e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002640:	b942      	cbnz	r2, 8002654 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002642:	6805      	ldr	r5, [r0, #0]
 8002644:	b99d      	cbnz	r5, 800266e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002646:	6840      	ldr	r0, [r0, #4]
 8002648:	f001 f8c4 	bl	80037d4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800264c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800264e:	3601      	adds	r6, #1
 8002650:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002652:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002654:	b96d      	cbnz	r5, 8002672 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002656:	6880      	ldr	r0, [r0, #8]
 8002658:	f009 fae7 	bl	800bc2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800265c:	68a3      	ldr	r3, [r4, #8]
 800265e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002660:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002662:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002664:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002666:	4293      	cmp	r3, r2
 8002668:	d301      	bcc.n	800266e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800266e:	2000      	movs	r0, #0
 8002670:	e7ed      	b.n	800264e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002672:	68c0      	ldr	r0, [r0, #12]
 8002674:	f009 fad9 	bl	800bc2a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800267a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800267c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800267e:	425b      	negs	r3, r3
 8002680:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002682:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002684:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002686:	bf3e      	ittt	cc
 8002688:	6862      	ldrcc	r2, [r4, #4]
 800268a:	189b      	addcc	r3, r3, r2
 800268c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800268e:	2d02      	cmp	r5, #2
 8002690:	d1ed      	bne.n	800266e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002692:	b10e      	cbz	r6, 8002698 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002694:	3e01      	subs	r6, #1
 8002696:	e7ea      	b.n	800266e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002698:	4630      	mov	r0, r6
 800269a:	e7d8      	b.n	800264e <prvCopyDataToQueue+0x18>

0800269c <prvCopyDataFromQueue>:
{
 800269c:	4603      	mov	r3, r0
 800269e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80026a2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026a4:	b162      	cbz	r2, 80026c0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80026a6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026a8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80026aa:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026ac:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80026ae:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80026b0:	bf24      	itt	cs
 80026b2:	6819      	ldrcs	r1, [r3, #0]
 80026b4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80026b6:	68d9      	ldr	r1, [r3, #12]
}
 80026b8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80026bc:	f009 bab5 	b.w	800bc2a <memcpy>
}
 80026c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <prvUnlockQueue>:
{
 80026c6:	b570      	push	{r4, r5, r6, lr}
 80026c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80026ca:	f7ff fd73 	bl	80021b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80026ce:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80026d6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026d8:	2d00      	cmp	r5, #0
 80026da:	dc14      	bgt.n	8002706 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80026dc:	23ff      	movs	r3, #255	; 0xff
 80026de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80026e2:	f7ff fd89 	bl	80021f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80026e6:	f7ff fd65 	bl	80021b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80026ea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ee:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80026f2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026f4:	2d00      	cmp	r5, #0
 80026f6:	dc12      	bgt.n	800271e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80026f8:	23ff      	movs	r3, #255	; 0xff
 80026fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80026fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002702:	f7ff bd79 	b.w	80021f8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0e7      	beq.n	80026dc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800270c:	4630      	mov	r0, r6
 800270e:	f000 ff6d 	bl	80035ec <xTaskRemoveFromEventList>
 8002712:	b108      	cbz	r0, 8002718 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002714:	f000 fff4 	bl	8003700 <vTaskMissedYield>
 8002718:	3d01      	subs	r5, #1
 800271a:	b26d      	sxtb	r5, r5
 800271c:	e7dc      	b.n	80026d8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800271e:	6923      	ldr	r3, [r4, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0e9      	beq.n	80026f8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002724:	4630      	mov	r0, r6
 8002726:	f000 ff61 	bl	80035ec <xTaskRemoveFromEventList>
 800272a:	b108      	cbz	r0, 8002730 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800272c:	f000 ffe8 	bl	8003700 <vTaskMissedYield>
 8002730:	3d01      	subs	r5, #1
 8002732:	b26d      	sxtb	r5, r5
 8002734:	e7de      	b.n	80026f4 <prvUnlockQueue+0x2e>

08002736 <xQueueGenericReset>:
{
 8002736:	b538      	push	{r3, r4, r5, lr}
 8002738:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800273a:	4604      	mov	r4, r0
 800273c:	b940      	cbnz	r0, 8002750 <xQueueGenericReset+0x1a>
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	e7fe      	b.n	800274e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002750:	f7ff fd30 	bl	80021b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002754:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002758:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800275a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800275c:	4343      	muls	r3, r0
 800275e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002760:	1a1b      	subs	r3, r3, r0
 8002762:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002764:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002766:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002768:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800276a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800276c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800276e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002776:	b94d      	cbnz	r5, 800278c <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	b11b      	cbz	r3, 8002784 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800277c:	f104 0010 	add.w	r0, r4, #16
 8002780:	f000 ff34 	bl	80035ec <xTaskRemoveFromEventList>
	taskEXIT_CRITICAL();
 8002784:	f7ff fd38 	bl	80021f8 <vPortExitCritical>
}
 8002788:	2001      	movs	r0, #1
 800278a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800278c:	f104 0010 	add.w	r0, r4, #16
 8002790:	f7ff fc67 	bl	8002062 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002794:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002798:	f7ff fc63 	bl	8002062 <vListInitialise>
 800279c:	e7f2      	b.n	8002784 <xQueueGenericReset+0x4e>

0800279e <xQueueGenericCreateStatic>:
	{
 800279e:	b513      	push	{r0, r1, r4, lr}
 80027a0:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027a2:	b940      	cbnz	r0, 80027b6 <xQueueGenericCreateStatic+0x18>
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	e7fe      	b.n	80027b4 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80027b6:	b943      	cbnz	r3, 80027ca <xQueueGenericCreateStatic+0x2c>
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	e7fe      	b.n	80027c8 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027ca:	b14a      	cbz	r2, 80027e0 <xQueueGenericCreateStatic+0x42>
 80027cc:	b9d9      	cbnz	r1, 8002806 <xQueueGenericCreateStatic+0x68>
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	e7fe      	b.n	80027de <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027e0:	b189      	cbz	r1, 8002806 <xQueueGenericCreateStatic+0x68>
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	e7fe      	b.n	80027f2 <xQueueGenericCreateStatic+0x54>
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	e7fe      	b.n	8002804 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002806:	2348      	movs	r3, #72	; 0x48
 8002808:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	2b48      	cmp	r3, #72	; 0x48
 800280e:	d1f1      	bne.n	80027f4 <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002810:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002812:	2900      	cmp	r1, #0
 8002814:	bf08      	it	eq
 8002816:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8002818:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800281a:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800281c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002820:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002822:	4619      	mov	r1, r3
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ff86 	bl	8002736 <xQueueGenericReset>
	}
 800282a:	4620      	mov	r0, r4
 800282c:	b002      	add	sp, #8
 800282e:	bd10      	pop	{r4, pc}

08002830 <xQueueGenericCreate>:
	{
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002834:	4606      	mov	r6, r0
 8002836:	b940      	cbnz	r0, 800284a <xQueueGenericCreate+0x1a>
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	e7fe      	b.n	8002848 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800284a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800284c:	3048      	adds	r0, #72	; 0x48
 800284e:	f7ff fe21 	bl	8002494 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002852:	4604      	mov	r4, r0
 8002854:	b150      	cbz	r0, 800286c <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002856:	2300      	movs	r3, #0
 8002858:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800285c:	b945      	cbnz	r5, 8002870 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800285e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002860:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002862:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002864:	2101      	movs	r1, #1
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff ff65 	bl	8002736 <xQueueGenericReset>
	}
 800286c:	4620      	mov	r0, r4
 800286e:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002870:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002874:	6003      	str	r3, [r0, #0]
 8002876:	e7f3      	b.n	8002860 <xQueueGenericCreate+0x30>

08002878 <xQueueGenericSend>:
{
 8002878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800287c:	4689      	mov	r9, r1
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002882:	4604      	mov	r4, r0
 8002884:	b940      	cbnz	r0, 8002898 <xQueueGenericSend+0x20>
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	e7fe      	b.n	8002896 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002898:	2900      	cmp	r1, #0
 800289a:	d17c      	bne.n	8002996 <xQueueGenericSend+0x11e>
 800289c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d079      	beq.n	8002996 <xQueueGenericSend+0x11e>
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	e7fe      	b.n	80028b2 <xQueueGenericSend+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b4:	9e01      	ldr	r6, [sp, #4]
 80028b6:	2e00      	cmp	r6, #0
 80028b8:	d077      	beq.n	80029aa <xQueueGenericSend+0x132>
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	e7fe      	b.n	80028ca <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80028cc:	9d01      	ldr	r5, [sp, #4]
 80028ce:	b91d      	cbnz	r5, 80028d8 <xQueueGenericSend+0x60>
					taskEXIT_CRITICAL();
 80028d0:	f7ff fc92 	bl	80021f8 <vPortExitCritical>
			return errQUEUE_FULL;
 80028d4:	2000      	movs	r0, #0
 80028d6:	e04f      	b.n	8002978 <xQueueGenericSend+0x100>
				else if( xEntryTimeSet == pdFALSE )
 80028d8:	b916      	cbnz	r6, 80028e0 <xQueueGenericSend+0x68>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028da:	a802      	add	r0, sp, #8
 80028dc:	f000 fec8 	bl	8003670 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80028e0:	f7ff fc8a 	bl	80021f8 <vPortExitCritical>
		vTaskSuspendAll();
 80028e4:	f000 fd20 	bl	8003328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e8:	f7ff fc64 	bl	80021b4 <vPortEnterCritical>
 80028ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028f0:	2bff      	cmp	r3, #255	; 0xff
 80028f2:	bf08      	it	eq
 80028f4:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80028f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028fc:	2bff      	cmp	r3, #255	; 0xff
 80028fe:	bf08      	it	eq
 8002900:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002904:	f7ff fc78 	bl	80021f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002908:	a901      	add	r1, sp, #4
 800290a:	a802      	add	r0, sp, #8
 800290c:	f000 febc 	bl	8003688 <xTaskCheckForTimeOut>
 8002910:	2800      	cmp	r0, #0
 8002912:	d13a      	bne.n	800298a <xQueueGenericSend+0x112>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002914:	f7ff fc4e 	bl	80021b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002918:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800291a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800291c:	f7ff fc6c 	bl	80021f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002920:	42ae      	cmp	r6, r5
 8002922:	d12c      	bne.n	800297e <xQueueGenericSend+0x106>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002924:	9901      	ldr	r1, [sp, #4]
 8002926:	f104 0010 	add.w	r0, r4, #16
 800292a:	f000 fe45 	bl	80035b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800292e:	4620      	mov	r0, r4
 8002930:	f7ff fec9 	bl	80026c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002934:	f000 fd7a 	bl	800342c <xTaskResumeAll>
 8002938:	b938      	cbnz	r0, 800294a <xQueueGenericSend+0xd2>
					portYIELD_WITHIN_API();
 800293a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800293e:	f8ca 3000 	str.w	r3, [sl]
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800294c:	f7ff fc32 	bl	80021b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002950:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002954:	429a      	cmp	r2, r3
 8002956:	d301      	bcc.n	800295c <xQueueGenericSend+0xe4>
 8002958:	2f02      	cmp	r7, #2
 800295a:	d1b7      	bne.n	80028cc <xQueueGenericSend+0x54>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800295c:	463a      	mov	r2, r7
 800295e:	4649      	mov	r1, r9
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff fe68 	bl	8002636 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002968:	b11b      	cbz	r3, 8002972 <xQueueGenericSend+0xfa>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800296e:	f000 fe3d 	bl	80035ec <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002972:	f7ff fc41 	bl	80021f8 <vPortExitCritical>
				return pdPASS;
 8002976:	2001      	movs	r0, #1
}
 8002978:	b004      	add	sp, #16
 800297a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff fea1 	bl	80026c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002984:	f000 fd52 	bl	800342c <xTaskResumeAll>
 8002988:	e7df      	b.n	800294a <xQueueGenericSend+0xd2>
			prvUnlockQueue( pxQueue );
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fe9b 	bl	80026c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002990:	f000 fd4c 	bl	800342c <xTaskResumeAll>
 8002994:	e79e      	b.n	80028d4 <xQueueGenericSend+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002996:	2f02      	cmp	r7, #2
 8002998:	d102      	bne.n	80029a0 <xQueueGenericSend+0x128>
 800299a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d109      	bne.n	80029b4 <xQueueGenericSend+0x13c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029a0:	f000 feb4 	bl	800370c <xTaskGetSchedulerState>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d085      	beq.n	80028b4 <xQueueGenericSend+0x3c>
 80029a8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80029aa:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80029ae:	f8df a018 	ldr.w	sl, [pc, #24]	; 80029c8 <xQueueGenericSend+0x150>
 80029b2:	e7cb      	b.n	800294c <xQueueGenericSend+0xd4>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericSend+0x14c>
 80029c6:	bf00      	nop
 80029c8:	e000ed04 	.word	0xe000ed04

080029cc <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80029cc:	b138      	cbz	r0, 80029de <prvInitialiseMutex+0x12>
			pxNewQueue->pxMutexHolder = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80029d2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80029d4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80029d6:	461a      	mov	r2, r3
 80029d8:	4619      	mov	r1, r3
 80029da:	f7ff bf4d 	b.w	8002878 <xQueueGenericSend>
 80029de:	4770      	bx	lr

080029e0 <xQueueCreateMutex>:
	{
 80029e0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80029e2:	4602      	mov	r2, r0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7ff ff22 	bl	8002830 <xQueueGenericCreate>
 80029ec:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80029ee:	f7ff ffed 	bl	80029cc <prvInitialiseMutex>
	}
 80029f2:	4620      	mov	r0, r4
 80029f4:	bd10      	pop	{r4, pc}

080029f6 <xQueueCreateMutexStatic>:
	{
 80029f6:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80029f8:	2200      	movs	r2, #0
 80029fa:	460b      	mov	r3, r1
 80029fc:	9000      	str	r0, [sp, #0]
 80029fe:	4611      	mov	r1, r2
 8002a00:	2001      	movs	r0, #1
 8002a02:	f7ff fecc 	bl	800279e <xQueueGenericCreateStatic>
 8002a06:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8002a08:	f7ff ffe0 	bl	80029cc <prvInitialiseMutex>
	}
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd10      	pop	{r4, pc}

08002a12 <xQueueGenericSendFromISR>:
{
 8002a12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a16:	4688      	mov	r8, r1
 8002a18:	4691      	mov	r9, r2
 8002a1a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	b940      	cbnz	r0, 8002a32 <xQueueGenericSendFromISR+0x20>
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	e7fe      	b.n	8002a30 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a32:	bb09      	cbnz	r1, 8002a78 <xQueueGenericSendFromISR+0x66>
 8002a34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a36:	b1fb      	cbz	r3, 8002a78 <xQueueGenericSendFromISR+0x66>
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a4e:	f000 fdcd 	bl	80035ec <xTaskRemoveFromEventList>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d034      	beq.n	8002ac0 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002a56:	f1b9 0f00 	cmp.w	r9, #0
 8002a5a:	d031      	beq.n	8002ac0 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002a62:	f386 8811 	msr	BASEPRI, r6
}
 8002a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a6a:	3501      	adds	r5, #1
 8002a6c:	b26d      	sxtb	r5, r5
 8002a6e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002a72:	e025      	b.n	8002ac0 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7f4      	b.n	8002a62 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a78:	2f02      	cmp	r7, #2
 8002a7a:	d102      	bne.n	8002a82 <xQueueGenericSendFromISR+0x70>
 8002a7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d120      	bne.n	8002ac4 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a82:	f7ff fcb5 	bl	80023f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002a86:	f3ef 8611 	mrs	r6, BASEPRI
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d301      	bcc.n	8002aa6 <xQueueGenericSendFromISR+0x94>
 8002aa2:	2f02      	cmp	r7, #2
 8002aa4:	d1e6      	bne.n	8002a74 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aa6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aaa:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aae:	4641      	mov	r1, r8
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff fdc0 	bl	8002636 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002ab6:	1c6b      	adds	r3, r5, #1
 8002ab8:	d1d7      	bne.n	8002a6a <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1c4      	bne.n	8002a4a <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	e7ce      	b.n	8002a62 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSendFromISR+0xc2>

08002ad6 <xQueueGiveFromISR>:
{
 8002ad6:	b570      	push	{r4, r5, r6, lr}
 8002ad8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002ada:	4604      	mov	r4, r0
 8002adc:	b940      	cbnz	r0, 8002af0 <xQueueGiveFromISR+0x1a>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	e7fe      	b.n	8002aee <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002af0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002af2:	b143      	cbz	r3, 8002b06 <xQueueGiveFromISR+0x30>
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	e7fe      	b.n	8002b04 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002b06:	6803      	ldr	r3, [r0, #0]
 8002b08:	b90b      	cbnz	r3, 8002b0e <xQueueGiveFromISR+0x38>
 8002b0a:	6843      	ldr	r3, [r0, #4]
 8002b0c:	bb73      	cbnz	r3, 8002b6c <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b0e:	f7ff fc6f 	bl	80023f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002b12:	f3ef 8611 	mrs	r6, BASEPRI
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002b28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d301      	bcc.n	8002b32 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002b2e:	2000      	movs	r0, #0
 8002b30:	e014      	b.n	8002b5c <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b36:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b38:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b3a:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	d110      	bne.n	8002b62 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b42:	b90b      	cbnz	r3, 8002b48 <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8002b44:	2001      	movs	r0, #1
 8002b46:	e009      	b.n	8002b5c <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b4c:	f000 fd4e 	bl	80035ec <xTaskRemoveFromEventList>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d0f7      	beq.n	8002b44 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8002b54:	2d00      	cmp	r5, #0
 8002b56:	d0f5      	beq.n	8002b44 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b58:	2001      	movs	r0, #1
 8002b5a:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002b5c:	f386 8811 	msr	BASEPRI, r6
}
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b62:	3301      	adds	r3, #1
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b6a:	e7eb      	b.n	8002b44 <xQueueGiveFromISR+0x6e>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGiveFromISR+0xa6>
	...

08002b80 <xQueueReceive>:
{
 8002b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b84:	b085      	sub	sp, #20
 8002b86:	4688      	mov	r8, r1
 8002b88:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	b940      	cbnz	r0, 8002ba0 <xQueueReceive+0x20>
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	e7fe      	b.n	8002b9e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	d17a      	bne.n	8002c9a <xQueueReceive+0x11a>
 8002ba4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d077      	beq.n	8002c9a <xQueueReceive+0x11a>
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	e7fe      	b.n	8002bba <xQueueReceive+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bbc:	9e01      	ldr	r6, [sp, #4]
 8002bbe:	2e00      	cmp	r6, #0
 8002bc0:	d070      	beq.n	8002ca4 <xQueueReceive+0x124>
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueReceive+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd4:	9d01      	ldr	r5, [sp, #4]
 8002bd6:	b91d      	cbnz	r5, 8002be0 <xQueueReceive+0x60>
					taskEXIT_CRITICAL();
 8002bd8:	f7ff fb0e 	bl	80021f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002bdc:	2000      	movs	r0, #0
 8002bde:	e048      	b.n	8002c72 <xQueueReceive+0xf2>
				else if( xEntryTimeSet == pdFALSE )
 8002be0:	b916      	cbnz	r6, 8002be8 <xQueueReceive+0x68>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be2:	a802      	add	r0, sp, #8
 8002be4:	f000 fd44 	bl	8003670 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002be8:	f7ff fb06 	bl	80021f8 <vPortExitCritical>
		vTaskSuspendAll();
 8002bec:	f000 fb9c 	bl	8003328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bf0:	f7ff fae0 	bl	80021b4 <vPortEnterCritical>
 8002bf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002bf8:	2bff      	cmp	r3, #255	; 0xff
 8002bfa:	bf08      	it	eq
 8002bfc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002c00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c04:	2bff      	cmp	r3, #255	; 0xff
 8002c06:	bf08      	it	eq
 8002c08:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002c0c:	f7ff faf4 	bl	80021f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c10:	a901      	add	r1, sp, #4
 8002c12:	a802      	add	r0, sp, #8
 8002c14:	f000 fd38 	bl	8003688 <xTaskCheckForTimeOut>
 8002c18:	bba0      	cbnz	r0, 8002c84 <xQueueReceive+0x104>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7ff fd00 	bl	8002620 <prvIsQueueEmpty>
 8002c20:	b350      	cbz	r0, 8002c78 <xQueueReceive+0xf8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c22:	9901      	ldr	r1, [sp, #4]
 8002c24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c28:	f000 fcc6 	bl	80035b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff fd4a 	bl	80026c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c32:	f000 fbfb 	bl	800342c <xTaskResumeAll>
 8002c36:	b938      	cbnz	r0, 8002c48 <xQueueReceive+0xc8>
					portYIELD_WITHIN_API();
 8002c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c3c:	f8c9 3000 	str.w	r3, [r9]
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002c4a:	f7ff fab3 	bl	80021b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c4e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	d0bf      	beq.n	8002bd4 <xQueueReceive+0x54>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c54:	4641      	mov	r1, r8
 8002c56:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c58:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c5a:	f7ff fd1f 	bl	800269c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c5e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c60:	6923      	ldr	r3, [r4, #16]
 8002c62:	b11b      	cbz	r3, 8002c6c <xQueueReceive+0xec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c64:	f104 0010 	add.w	r0, r4, #16
 8002c68:	f000 fcc0 	bl	80035ec <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002c6c:	f7ff fac4 	bl	80021f8 <vPortExitCritical>
				return pdPASS;
 8002c70:	2001      	movs	r0, #1
}
 8002c72:	b005      	add	sp, #20
 8002c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fd24 	bl	80026c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c7e:	f000 fbd5 	bl	800342c <xTaskResumeAll>
 8002c82:	e7e1      	b.n	8002c48 <xQueueReceive+0xc8>
			prvUnlockQueue( pxQueue );
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7ff fd1e 	bl	80026c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c8a:	f000 fbcf 	bl	800342c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f7ff fcc6 	bl	8002620 <prvIsQueueEmpty>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d0d7      	beq.n	8002c48 <xQueueReceive+0xc8>
 8002c98:	e7a0      	b.n	8002bdc <xQueueReceive+0x5c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c9a:	f000 fd37 	bl	800370c <xTaskGetSchedulerState>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d08c      	beq.n	8002bbc <xQueueReceive+0x3c>
 8002ca2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002ca4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002ca6:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002cac <xQueueReceive+0x12c>
 8002caa:	e7ce      	b.n	8002c4a <xQueueReceive+0xca>
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <xQueueSemaphoreTake>:
{
 8002cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8002cb4:	4604      	mov	r4, r0
{
 8002cb6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002cb8:	b940      	cbnz	r0, 8002ccc <xQueueSemaphoreTake+0x1c>
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	e7fe      	b.n	8002cca <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ccc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002cce:	b145      	cbz	r5, 8002ce2 <xQueueSemaphoreTake+0x32>
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce2:	f000 fd13 	bl	800370c <xTaskGetSchedulerState>
 8002ce6:	b918      	cbnz	r0, 8002cf0 <xQueueSemaphoreTake+0x40>
 8002ce8:	9d01      	ldr	r5, [sp, #4]
 8002cea:	2d00      	cmp	r5, #0
 8002cec:	f040 808c 	bne.w	8002e08 <xQueueSemaphoreTake+0x158>
					portYIELD_WITHIN_API();
 8002cf0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002e1c <xQueueSemaphoreTake+0x16c>
 8002cf4:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002cf6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8002cf8:	f7ff fa5c 	bl	80021b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002cfe:	b19b      	cbz	r3, 8002d28 <xQueueSemaphoreTake+0x78>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d00:	3b01      	subs	r3, #1
 8002d02:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	b913      	cbnz	r3, 8002d0e <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002d08:	f000 fe0e 	bl	8003928 <pvTaskIncrementMutexHeldCount>
 8002d0c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	b11b      	cbz	r3, 8002d1a <xQueueSemaphoreTake+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d12:	f104 0010 	add.w	r0, r4, #16
 8002d16:	f000 fc69 	bl	80035ec <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002d1a:	f7ff fa6d 	bl	80021f8 <vPortExitCritical>
				return pdPASS;
 8002d1e:	2501      	movs	r5, #1
}
 8002d20:	4628      	mov	r0, r5
 8002d22:	b004      	add	sp, #16
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	b963      	cbnz	r3, 8002d46 <xQueueSemaphoreTake+0x96>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002d2c:	b145      	cbz	r5, 8002d40 <xQueueSemaphoreTake+0x90>
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	e7fe      	b.n	8002d3e <xQueueSemaphoreTake+0x8e>
					taskEXIT_CRITICAL();
 8002d40:	f7ff fa5a 	bl	80021f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002d44:	e7ec      	b.n	8002d20 <xQueueSemaphoreTake+0x70>
				else if( xEntryTimeSet == pdFALSE )
 8002d46:	b916      	cbnz	r6, 8002d4e <xQueueSemaphoreTake+0x9e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d48:	a802      	add	r0, sp, #8
 8002d4a:	f000 fc91 	bl	8003670 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002d4e:	f7ff fa53 	bl	80021f8 <vPortExitCritical>
		vTaskSuspendAll();
 8002d52:	f000 fae9 	bl	8003328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d56:	f7ff fa2d 	bl	80021b4 <vPortEnterCritical>
 8002d5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d5e:	2bff      	cmp	r3, #255	; 0xff
 8002d60:	bf08      	it	eq
 8002d62:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002d66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	bf08      	it	eq
 8002d6e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002d72:	f7ff fa41 	bl	80021f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d76:	a901      	add	r1, sp, #4
 8002d78:	a802      	add	r0, sp, #8
 8002d7a:	f000 fc85 	bl	8003688 <xTaskCheckForTimeOut>
 8002d7e:	bb40      	cbnz	r0, 8002dd2 <xQueueSemaphoreTake+0x122>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff fc4d 	bl	8002620 <prvIsQueueEmpty>
 8002d86:	b1f0      	cbz	r0, 8002dc6 <xQueueSemaphoreTake+0x116>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	b93b      	cbnz	r3, 8002d9c <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 8002d8c:	f7ff fa12 	bl	80021b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002d90:	6860      	ldr	r0, [r4, #4]
 8002d92:	f000 fccb 	bl	800372c <xTaskPriorityInherit>
 8002d96:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002d98:	f7ff fa2e 	bl	80021f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d9c:	9901      	ldr	r1, [sp, #4]
 8002d9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002da2:	f000 fc09 	bl	80035b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff fc8d 	bl	80026c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dac:	f000 fb3e 	bl	800342c <xTaskResumeAll>
 8002db0:	b938      	cbnz	r0, 8002dc2 <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8002db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002db6:	f8c8 3000 	str.w	r3, [r8]
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	2601      	movs	r6, #1
 8002dc4:	e798      	b.n	8002cf8 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fc7d 	bl	80026c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dcc:	f000 fb2e 	bl	800342c <xTaskResumeAll>
 8002dd0:	e7f7      	b.n	8002dc2 <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff fc77 	bl	80026c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dd8:	f000 fb28 	bl	800342c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7ff fc1f 	bl	8002620 <prvIsQueueEmpty>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d0ed      	beq.n	8002dc2 <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	d09a      	beq.n	8002d20 <xQueueSemaphoreTake+0x70>
						taskENTER_CRITICAL();
 8002dea:	f7ff f9e3 	bl	80021b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002dee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002df0:	b119      	cbz	r1, 8002dfa <xQueueSemaphoreTake+0x14a>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002dfa:	6860      	ldr	r0, [r4, #4]
 8002dfc:	f000 fd3a 	bl	8003874 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002e00:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002e02:	f7ff f9f9 	bl	80021f8 <vPortExitCritical>
 8002e06:	e78b      	b.n	8002d20 <xQueueSemaphoreTake+0x70>
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	e7fe      	b.n	8002e18 <xQueueSemaphoreTake+0x168>
 8002e1a:	bf00      	nop
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xQueueReceiveFromISR>:
{
 8002e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e24:	4689      	mov	r9, r1
 8002e26:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002e28:	4605      	mov	r5, r0
 8002e2a:	b940      	cbnz	r0, 8002e3e <xQueueReceiveFromISR+0x1e>
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	e7fe      	b.n	8002e3c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3e:	bb71      	cbnz	r1, 8002e9e <xQueueReceiveFromISR+0x7e>
 8002e40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e42:	b363      	cbz	r3, 8002e9e <xQueueReceiveFromISR+0x7e>
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	e7fe      	b.n	8002e54 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e56:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e5a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e5c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f7ff fc1c 	bl	800269c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e64:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002e66:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e68:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002e6a:	d113      	bne.n	8002e94 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e6c:	692b      	ldr	r3, [r5, #16]
 8002e6e:	b90b      	cbnz	r3, 8002e74 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002e70:	2001      	movs	r0, #1
 8002e72:	e00b      	b.n	8002e8c <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e74:	f105 0010 	add.w	r0, r5, #16
 8002e78:	f000 fbb8 	bl	80035ec <xTaskRemoveFromEventList>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d0f7      	beq.n	8002e70 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002e80:	f1b8 0f00 	cmp.w	r8, #0
 8002e84:	d0f4      	beq.n	8002e70 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e86:	2001      	movs	r0, #1
 8002e88:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002e8c:	f387 8811 	msr	BASEPRI, r7
}
 8002e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e94:	3601      	adds	r6, #1
 8002e96:	b276      	sxtb	r6, r6
 8002e98:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002e9c:	e7e8      	b.n	8002e70 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e9e:	f7ff faa7 	bl	80023f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002ea2:	f3ef 8711 	mrs	r7, BASEPRI
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eb6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eb8:	2c00      	cmp	r4, #0
 8002eba:	d1cc      	bne.n	8002e56 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	e7e5      	b.n	8002e8c <xQueueReceiveFromISR+0x6c>

08002ec0 <uxQueueMessagesWaiting>:
{
 8002ec0:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	b940      	cbnz	r0, 8002ed8 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	e7fe      	b.n	8002ed6 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8002ed8:	f7ff f96c 	bl	80021b4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002edc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002ede:	f7ff f98b 	bl	80021f8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	bd10      	pop	{r4, pc}

08002ee6 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8002ee6:	b940      	cbnz	r0, 8002efa <uxQueueMessagesWaitingFromISR+0x14>
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	e7fe      	b.n	8002ef8 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002efa:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002efc:	4770      	bx	lr
	...

08002f00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002f00:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f04:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002f06:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8002f0a:	684c      	ldr	r4, [r1, #4]
 8002f0c:	4284      	cmp	r4, r0
 8002f0e:	d104      	bne.n	8002f1a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002f10:	2000      	movs	r0, #0
 8002f12:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002f16:	6048      	str	r0, [r1, #4]
				break;
 8002f18:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d1f2      	bne.n	8002f06 <vQueueUnregisterQueue+0x6>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	bf00      	nop
 8002f24:	2000422c 	.word	0x2000422c

08002f28 <vQueueDelete>:
{
 8002f28:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	b940      	cbnz	r0, 8002f40 <vQueueDelete+0x18>
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	e7fe      	b.n	8002f3e <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8002f40:	f7ff ffde 	bl	8002f00 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002f44:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002f48:	b923      	cbnz	r3, 8002f54 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8002f4a:	4620      	mov	r0, r4
}
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8002f50:	f7ff bb2e 	b.w	80025b0 <vPortFree>
 8002f54:	bd10      	pop	{r4, pc}
	...

08002f58 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5c:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f5e:	f7ff f929 	bl	80021b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <prvAddNewTaskToReadyList+0xa8>)
		if( pxCurrentTCB == NULL )
 8002f64:	4c27      	ldr	r4, [pc, #156]	; (8003004 <prvAddNewTaskToReadyList+0xac>)
		uxCurrentNumberOfTasks++;
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4f27      	ldr	r7, [pc, #156]	; (8003008 <prvAddNewTaskToReadyList+0xb0>)
 8002f6a:	3201      	adds	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	d139      	bne.n	8002fe8 <prvAddNewTaskToReadyList+0x90>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f74:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d11c      	bne.n	8002fb6 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f7c:	1978      	adds	r0, r7, r5
 8002f7e:	3514      	adds	r5, #20
 8002f80:	f7ff f86f 	bl	8002062 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f84:	2d8c      	cmp	r5, #140	; 0x8c
 8002f86:	d1f9      	bne.n	8002f7c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f88:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003030 <prvAddNewTaskToReadyList+0xd8>
	vListInitialise( &xDelayedTaskList2 );
 8002f8c:	4d1f      	ldr	r5, [pc, #124]	; (800300c <prvAddNewTaskToReadyList+0xb4>)
	vListInitialise( &xDelayedTaskList1 );
 8002f8e:	4640      	mov	r0, r8
 8002f90:	f7ff f867 	bl	8002062 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f94:	4628      	mov	r0, r5
 8002f96:	f7ff f864 	bl	8002062 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f9a:	481d      	ldr	r0, [pc, #116]	; (8003010 <prvAddNewTaskToReadyList+0xb8>)
 8002f9c:	f7ff f861 	bl	8002062 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fa0:	481c      	ldr	r0, [pc, #112]	; (8003014 <prvAddNewTaskToReadyList+0xbc>)
 8002fa2:	f7ff f85e 	bl	8002062 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fa6:	481c      	ldr	r0, [pc, #112]	; (8003018 <prvAddNewTaskToReadyList+0xc0>)
 8002fa8:	f7ff f85b 	bl	8002062 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <prvAddNewTaskToReadyList+0xc4>)
 8002fae:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <prvAddNewTaskToReadyList+0xc8>)
 8002fb4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <prvAddNewTaskToReadyList+0xcc>)
		prvAddTaskToReadyList( pxNewTCB );
 8002fb8:	491b      	ldr	r1, [pc, #108]	; (8003028 <prvAddNewTaskToReadyList+0xd0>)
		uxTaskNumber++;
 8002fba:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fbc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fc2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4093      	lsls	r3, r2
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	2014      	movs	r0, #20
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	fb00 7002 	mla	r0, r0, r2, r7
 8002fd2:	1d31      	adds	r1, r6, #4
 8002fd4:	f7ff f853 	bl	800207e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002fd8:	f7ff f90e 	bl	80021f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <prvAddNewTaskToReadyList+0xd4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b103      	cbz	r3, 8002fe4 <prvAddNewTaskToReadyList+0x8c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <prvAddNewTaskToReadyList+0xd4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e2      	bne.n	8002fb6 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002ff8:	bf98      	it	ls
 8002ffa:	6026      	strls	r6, [r4, #0]
 8002ffc:	e7db      	b.n	8002fb6 <prvAddNewTaskToReadyList+0x5e>
 8002ffe:	bf00      	nop
 8003000:	20003d4c 	.word	0x20003d4c
 8003004:	20003cb4 	.word	0x20003cb4
 8003008:	20003cc0 	.word	0x20003cc0
 800300c:	20003d78 	.word	0x20003d78
 8003010:	20003d94 	.word	0x20003d94
 8003014:	20003dc0 	.word	0x20003dc0
 8003018:	20003dac 	.word	0x20003dac
 800301c:	20003cb8 	.word	0x20003cb8
 8003020:	20003cbc 	.word	0x20003cbc
 8003024:	20003d5c 	.word	0x20003d5c
 8003028:	20003d60 	.word	0x20003d60
 800302c:	20003da8 	.word	0x20003da8
 8003030:	20003d64 	.word	0x20003d64

08003034 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <prvResetNextTaskUnblockTime+0x1c>)
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	6819      	ldr	r1, [r3, #0]
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <prvResetNextTaskUnblockTime+0x20>)
 800303c:	b919      	cbnz	r1, 8003046 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800303e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800304a:	68d2      	ldr	r2, [r2, #12]
 800304c:	6852      	ldr	r2, [r2, #4]
 800304e:	e7f8      	b.n	8003042 <prvResetNextTaskUnblockTime+0xe>
 8003050:	20003cb8 	.word	0x20003cb8
 8003054:	20003d8c 	.word	0x20003d8c

08003058 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800305c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800305e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003062:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003064:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003068:	3a01      	subs	r2, #1
 800306a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800306e:	469a      	mov	sl, r3
 8003070:	4681      	mov	r9, r0
 8003072:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003074:	f026 0607 	bic.w	r6, r6, #7
 8003078:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800307c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800307e:	7858      	ldrb	r0, [r3, #1]
 8003080:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003084:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003088:	b108      	cbz	r0, 800308e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800308a:	428b      	cmp	r3, r1
 800308c:	d1f7      	bne.n	800307e <prvInitialiseNewTask.isra.2+0x26>
 800308e:	9d08      	ldr	r5, [sp, #32]
 8003090:	2d06      	cmp	r5, #6
 8003092:	bf28      	it	cs
 8003094:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003096:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8003098:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800309a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800309c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800309e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80030a2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030a4:	f7fe ffe8 	bl	8002078 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030ac:	f104 0018 	add.w	r0, r4, #24
 80030b0:	f7fe ffe2 	bl	8002078 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80030b4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030b6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030b8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030ba:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030bc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030c0:	4652      	mov	r2, sl
 80030c2:	4649      	mov	r1, r9
 80030c4:	4630      	mov	r0, r6
 80030c6:	f7ff f84d 	bl	8002164 <pxPortInitialiseStack>
 80030ca:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80030cc:	f1b8 0f00 	cmp.w	r8, #0
 80030d0:	d001      	beq.n	80030d6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030d2:	f8c8 4000 	str.w	r4, [r8]
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080030da <prvDeleteTCB>:
	{
 80030da:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030dc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80030e0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030e2:	b93b      	cbnz	r3, 80030f4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80030e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030e6:	f7ff fa63 	bl	80025b0 <vPortFree>
				vPortFree( pxTCB );
 80030ea:	4620      	mov	r0, r4
	}
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80030f0:	f7ff ba5e 	b.w	80025b0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d0f9      	beq.n	80030ec <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d008      	beq.n	800310e <prvDeleteTCB+0x34>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	e7fe      	b.n	800310c <prvDeleteTCB+0x32>
 800310e:	bd10      	pop	{r4, pc}

08003110 <prvIdleTask>:
{
 8003110:	b580      	push	{r7, lr}
			taskYIELD();
 8003112:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8003164 <prvIdleTask+0x54>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003116:	4f10      	ldr	r7, [pc, #64]	; (8003158 <prvIdleTask+0x48>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003118:	4c10      	ldr	r4, [pc, #64]	; (800315c <prvIdleTask+0x4c>)
				--uxCurrentNumberOfTasks;
 800311a:	4d11      	ldr	r5, [pc, #68]	; (8003160 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	b943      	cbnz	r3, 8003132 <prvIdleTask+0x22>
			taskYIELD();
 8003120:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003124:	f8c8 3000 	str.w	r3, [r8]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	e7f2      	b.n	8003118 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003132:	f7ff f83f 	bl	80021b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800313a:	1d30      	adds	r0, r6, #4
 800313c:	f7fe ffc2 	bl	80020c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	3b01      	subs	r3, #1
 8003144:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	3b01      	subs	r3, #1
 800314a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800314c:	f7ff f854 	bl	80021f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003150:	4630      	mov	r0, r6
 8003152:	f7ff ffc2 	bl	80030da <prvDeleteTCB>
 8003156:	e7e1      	b.n	800311c <prvIdleTask+0xc>
 8003158:	20003dc0 	.word	0x20003dc0
 800315c:	20003d50 	.word	0x20003d50
 8003160:	20003d4c 	.word	0x20003d4c
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800316c:	4e1b      	ldr	r6, [pc, #108]	; (80031dc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800316e:	681d      	ldr	r5, [r3, #0]
{
 8003170:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003172:	6830      	ldr	r0, [r6, #0]
 8003174:	3004      	adds	r0, #4
{
 8003176:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003178:	f7fe ffa4 	bl	80020c4 <uxListRemove>
 800317c:	4633      	mov	r3, r6
 800317e:	b940      	cbnz	r0, 8003192 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003180:	6831      	ldr	r1, [r6, #0]
 8003182:	4e17      	ldr	r6, [pc, #92]	; (80031e0 <prvAddCurrentTaskToDelayedList+0x78>)
 8003184:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003186:	6832      	ldr	r2, [r6, #0]
 8003188:	2001      	movs	r0, #1
 800318a:	4088      	lsls	r0, r1
 800318c:	ea22 0200 	bic.w	r2, r2, r0
 8003190:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003192:	1c62      	adds	r2, r4, #1
 8003194:	d107      	bne.n	80031a6 <prvAddCurrentTaskToDelayedList+0x3e>
 8003196:	b137      	cbz	r7, 80031a6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	4812      	ldr	r0, [pc, #72]	; (80031e4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800319c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800319e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a2:	f7fe bf6c 	b.w	800207e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031a6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031a8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80031aa:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031ac:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80031ae:	d907      	bls.n	80031c0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031b0:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <prvAddCurrentTaskToDelayedList+0x80>)
 80031b2:	6810      	ldr	r0, [r2, #0]
 80031b4:	6819      	ldr	r1, [r3, #0]
}
 80031b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ba:	3104      	adds	r1, #4
 80031bc:	f7fe bf6b 	b.w	8002096 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <prvAddCurrentTaskToDelayedList+0x84>)
 80031c2:	6810      	ldr	r0, [r2, #0]
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	3104      	adds	r1, #4
 80031c8:	f7fe ff65 	bl	8002096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <prvAddCurrentTaskToDelayedList+0x88>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80031d2:	bf38      	it	cc
 80031d4:	601c      	strcc	r4, [r3, #0]
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d8:	20003dd4 	.word	0x20003dd4
 80031dc:	20003cb4 	.word	0x20003cb4
 80031e0:	20003d60 	.word	0x20003d60
 80031e4:	20003dac 	.word	0x20003dac
 80031e8:	20003cbc 	.word	0x20003cbc
 80031ec:	20003cb8 	.word	0x20003cb8
 80031f0:	20003d8c 	.word	0x20003d8c

080031f4 <xTaskCreateStatic>:
	{
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80031fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80031fc:	b945      	cbnz	r5, 8003210 <xTaskCreateStatic+0x1c>
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	e7fe      	b.n	800320e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003210:	b944      	cbnz	r4, 8003224 <xTaskCreateStatic+0x30>
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	e7fe      	b.n	8003222 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003224:	2654      	movs	r6, #84	; 0x54
 8003226:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003228:	9e04      	ldr	r6, [sp, #16]
 800322a:	2e54      	cmp	r6, #84	; 0x54
 800322c:	d008      	beq.n	8003240 <xTaskCreateStatic+0x4c>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	e7fe      	b.n	800323e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003240:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003242:	2502      	movs	r5, #2
 8003244:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003248:	ad05      	add	r5, sp, #20
 800324a:	9501      	str	r5, [sp, #4]
 800324c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800324e:	9402      	str	r4, [sp, #8]
 8003250:	9500      	str	r5, [sp, #0]
 8003252:	f7ff ff01 	bl	8003058 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003256:	4620      	mov	r0, r4
 8003258:	f7ff fe7e 	bl	8002f58 <prvAddNewTaskToReadyList>
	}
 800325c:	9805      	ldr	r0, [sp, #20]
 800325e:	b006      	add	sp, #24
 8003260:	bd70      	pop	{r4, r5, r6, pc}

08003262 <xTaskCreate>:
	{
 8003262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003266:	4607      	mov	r7, r0
 8003268:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326a:	0090      	lsls	r0, r2, #2
	{
 800326c:	4688      	mov	r8, r1
 800326e:	4616      	mov	r6, r2
 8003270:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003272:	f7ff f90f 	bl	8002494 <pvPortMalloc>
			if( pxStack != NULL )
 8003276:	4605      	mov	r5, r0
 8003278:	b1e8      	cbz	r0, 80032b6 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800327a:	2054      	movs	r0, #84	; 0x54
 800327c:	f7ff f90a 	bl	8002494 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003280:	4604      	mov	r4, r0
 8003282:	b1a8      	cbz	r0, 80032b0 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003284:	2300      	movs	r3, #0
 8003286:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800328a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800328c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003292:	9002      	str	r0, [sp, #8]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4632      	mov	r2, r6
 8003298:	464b      	mov	r3, r9
 800329a:	4641      	mov	r1, r8
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff fedb 	bl	8003058 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7ff fe58 	bl	8002f58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032a8:	2001      	movs	r0, #1
	}
 80032aa:	b005      	add	sp, #20
 80032ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80032b0:	4628      	mov	r0, r5
 80032b2:	f7ff f97d 	bl	80025b0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80032ba:	e7f6      	b.n	80032aa <xTaskCreate+0x48>

080032bc <vTaskStartScheduler>:
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032c0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032c2:	aa07      	add	r2, sp, #28
 80032c4:	a906      	add	r1, sp, #24
 80032c6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032c8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032ca:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032cc:	f008 f834 	bl	800b338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032d0:	9b05      	ldr	r3, [sp, #20]
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	9b06      	ldr	r3, [sp, #24]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	9400      	str	r4, [sp, #0]
 80032da:	4623      	mov	r3, r4
 80032dc:	9a07      	ldr	r2, [sp, #28]
 80032de:	490d      	ldr	r1, [pc, #52]	; (8003314 <vTaskStartScheduler+0x58>)
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <vTaskStartScheduler+0x5c>)
 80032e2:	f7ff ff87 	bl	80031f4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80032e6:	b190      	cbz	r0, 800330e <vTaskStartScheduler+0x52>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <vTaskStartScheduler+0x60>)
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <vTaskStartScheduler+0x64>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <vTaskStartScheduler+0x68>)
 8003308:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800330a:	f7fe ffeb 	bl	80022e4 <xPortStartScheduler>
}
 800330e:	b008      	add	sp, #32
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	0800c084 	.word	0x0800c084
 8003318:	08003111 	.word	0x08003111
 800331c:	20003d8c 	.word	0x20003d8c
 8003320:	20003da8 	.word	0x20003da8
 8003324:	20003dd4 	.word	0x20003dd4

08003328 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003328:	4a02      	ldr	r2, [pc, #8]	; (8003334 <vTaskSuspendAll+0xc>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20003d58 	.word	0x20003d58

08003338 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003338:	4b01      	ldr	r3, [pc, #4]	; (8003340 <xTaskGetTickCount+0x8>)
 800333a:	6818      	ldr	r0, [r3, #0]
}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20003dd4 	.word	0x20003dd4

08003344 <xTaskGetTickCountFromISR>:
{
 8003344:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003346:	f7ff f853 	bl	80023f0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800334a:	4b01      	ldr	r3, [pc, #4]	; (8003350 <xTaskGetTickCountFromISR+0xc>)
 800334c:	6818      	ldr	r0, [r3, #0]
}
 800334e:	bd08      	pop	{r3, pc}
 8003350:	20003dd4 	.word	0x20003dd4

08003354 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <xTaskIncrementTick+0xb4>)
 8003356:	681b      	ldr	r3, [r3, #0]
{
 8003358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335c:	2b00      	cmp	r3, #0
 800335e:	d12c      	bne.n	80033ba <xTaskIncrementTick+0x66>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003360:	4b2a      	ldr	r3, [pc, #168]	; (800340c <xTaskIncrementTick+0xb8>)
 8003362:	681c      	ldr	r4, [r3, #0]
 8003364:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003366:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003368:	b9bc      	cbnz	r4, 800339a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <xTaskIncrementTick+0xbc>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	b142      	cbz	r2, 8003384 <xTaskIncrementTick+0x30>
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	e7fe      	b.n	8003382 <xTaskIncrementTick+0x2e>
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <xTaskIncrementTick+0xc0>)
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	6810      	ldr	r0, [r2, #0]
 800338a:	6018      	str	r0, [r3, #0]
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	4a22      	ldr	r2, [pc, #136]	; (8003418 <xTaskIncrementTick+0xc4>)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	f7ff fe4d 	bl	8003034 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800339a:	4d20      	ldr	r5, [pc, #128]	; (800341c <xTaskIncrementTick+0xc8>)
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	429c      	cmp	r4, r3
 80033a0:	d30f      	bcc.n	80033c2 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033a2:	4f1b      	ldr	r7, [pc, #108]	; (8003410 <xTaskIncrementTick+0xbc>)
					prvAddTaskToReadyList( pxTCB );
 80033a4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003424 <xTaskIncrementTick+0xd0>
 80033a8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003428 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b953      	cbnz	r3, 80033c8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b6:	602b      	str	r3, [r5, #0]
	return xSwitchRequired;
 80033b8:	e003      	b.n	80033c2 <xTaskIncrementTick+0x6e>
		++uxPendedTicks;
 80033ba:	4a19      	ldr	r2, [pc, #100]	; (8003420 <xTaskIncrementTick+0xcc>)
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	6013      	str	r3, [r2, #0]
}
 80033c2:	2000      	movs	r0, #0
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ce:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80033d0:	429c      	cmp	r4, r3
 80033d2:	d3f0      	bcc.n	80033b6 <xTaskIncrementTick+0x62>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d4:	f106 0904 	add.w	r9, r6, #4
 80033d8:	4648      	mov	r0, r9
 80033da:	f7fe fe73 	bl	80020c4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80033e0:	b11b      	cbz	r3, 80033ea <xTaskIncrementTick+0x96>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e2:	f106 0018 	add.w	r0, r6, #24
 80033e6:	f7fe fe6d 	bl	80020c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033ea:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80033ec:	f8d8 1000 	ldr.w	r1, [r8]
 80033f0:	2301      	movs	r3, #1
 80033f2:	4093      	lsls	r3, r2
 80033f4:	2014      	movs	r0, #20
 80033f6:	430b      	orrs	r3, r1
 80033f8:	fb00 a002 	mla	r0, r0, r2, sl
 80033fc:	4649      	mov	r1, r9
 80033fe:	f8c8 3000 	str.w	r3, [r8]
 8003402:	f7fe fe3c 	bl	800207e <vListInsertEnd>
 8003406:	e7d1      	b.n	80033ac <xTaskIncrementTick+0x58>
 8003408:	20003d58 	.word	0x20003d58
 800340c:	20003dd4 	.word	0x20003dd4
 8003410:	20003cb8 	.word	0x20003cb8
 8003414:	20003cbc 	.word	0x20003cbc
 8003418:	20003d90 	.word	0x20003d90
 800341c:	20003d8c 	.word	0x20003d8c
 8003420:	20003d54 	.word	0x20003d54
 8003424:	20003d60 	.word	0x20003d60
 8003428:	20003cc0 	.word	0x20003cc0

0800342c <xTaskResumeAll>:
{
 800342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003430:	4c2a      	ldr	r4, [pc, #168]	; (80034dc <xTaskResumeAll+0xb0>)
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	b943      	cbnz	r3, 8003448 <xTaskResumeAll+0x1c>
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	e7fe      	b.n	8003446 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003448:	f7fe feb4 	bl	80021b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	3b01      	subs	r3, #1
 8003450:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003452:	6824      	ldr	r4, [r4, #0]
 8003454:	b9dc      	cbnz	r4, 800348e <xTaskResumeAll+0x62>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <xTaskResumeAll+0xb4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b1c3      	cbz	r3, 800348e <xTaskResumeAll+0x62>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80034f4 <xTaskResumeAll+0xc8>
					prvAddTaskToReadyList( pxTCB );
 8003460:	4f20      	ldr	r7, [pc, #128]	; (80034e4 <xTaskResumeAll+0xb8>)
 8003462:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80034f8 <xTaskResumeAll+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003466:	f8d9 3000 	ldr.w	r3, [r9]
 800346a:	b9ab      	cbnz	r3, 8003498 <xTaskResumeAll+0x6c>
				if( pxTCB != NULL )
 800346c:	b10c      	cbz	r4, 8003472 <xTaskResumeAll+0x46>
					prvResetNextTaskUnblockTime();
 800346e:	f7ff fde1 	bl	8003034 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003472:	4d1d      	ldr	r5, [pc, #116]	; (80034e8 <xTaskResumeAll+0xbc>)
 8003474:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003476:	b144      	cbz	r4, 800348a <xTaskResumeAll+0x5e>
								xYieldPending = pdTRUE;
 8003478:	4e1c      	ldr	r6, [pc, #112]	; (80034ec <xTaskResumeAll+0xc0>)
 800347a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800347c:	f7ff ff6a 	bl	8003354 <xTaskIncrementTick>
 8003480:	b100      	cbz	r0, 8003484 <xTaskResumeAll+0x58>
								xYieldPending = pdTRUE;
 8003482:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003484:	3c01      	subs	r4, #1
 8003486:	d1f9      	bne.n	800347c <xTaskResumeAll+0x50>
						uxPendedTicks = 0;
 8003488:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <xTaskResumeAll+0xc0>)
 800348c:	681b      	ldr	r3, [r3, #0]
	taskEXIT_CRITICAL();
 800348e:	f7fe feb3 	bl	80021f8 <vPortExitCritical>
}
 8003492:	2000      	movs	r0, #0
 8003494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003498:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800349c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800349e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034a0:	f104 0018 	add.w	r0, r4, #24
 80034a4:	f7fe fe0e 	bl	80020c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034a8:	4630      	mov	r0, r6
 80034aa:	f7fe fe0b 	bl	80020c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	2501      	movs	r5, #1
 80034b4:	fa05 f302 	lsl.w	r3, r5, r2
 80034b8:	2014      	movs	r0, #20
 80034ba:	430b      	orrs	r3, r1
 80034bc:	fb00 8002 	mla	r0, r0, r2, r8
 80034c0:	4631      	mov	r1, r6
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	f7fe fddb 	bl	800207e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <xTaskResumeAll+0xc4>)
 80034ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80034d2:	bf24      	itt	cs
 80034d4:	4b05      	ldrcs	r3, [pc, #20]	; (80034ec <xTaskResumeAll+0xc0>)
 80034d6:	601d      	strcs	r5, [r3, #0]
 80034d8:	e7c5      	b.n	8003466 <xTaskResumeAll+0x3a>
 80034da:	bf00      	nop
 80034dc:	20003d58 	.word	0x20003d58
 80034e0:	20003d4c 	.word	0x20003d4c
 80034e4:	20003d60 	.word	0x20003d60
 80034e8:	20003d54 	.word	0x20003d54
 80034ec:	20003dd8 	.word	0x20003dd8
 80034f0:	20003cb4 	.word	0x20003cb4
 80034f4:	20003d94 	.word	0x20003d94
 80034f8:	20003cc0 	.word	0x20003cc0

080034fc <vTaskDelay>:
	{
 80034fc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034fe:	b940      	cbnz	r0, 8003512 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <vTaskDelay+0x40>)
 8003502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <vTaskDelay+0x44>)
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	b141      	cbz	r1, 800352a <vTaskDelay+0x2e>
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	e7fe      	b.n	8003528 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800352a:	f7ff fefd 	bl	8003328 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800352e:	f7ff fe1b 	bl	8003168 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003532:	f7ff ff7b 	bl	800342c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003536:	2800      	cmp	r0, #0
 8003538:	d0e2      	beq.n	8003500 <vTaskDelay+0x4>
 800353a:	bd08      	pop	{r3, pc}
 800353c:	e000ed04 	.word	0xe000ed04
 8003540:	20003d58 	.word	0x20003d58

08003544 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <vTaskSwitchContext+0x60>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <vTaskSwitchContext+0x64>)
{
 800354a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800354c:	b112      	cbz	r2, 8003554 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800354e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003554:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <vTaskSwitchContext+0x68>)
 8003558:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f1c3 031f 	rsb	r3, r3, #31
 8003564:	2214      	movs	r2, #20
 8003566:	4912      	ldr	r1, [pc, #72]	; (80035b0 <vTaskSwitchContext+0x6c>)
 8003568:	435a      	muls	r2, r3
 800356a:	1888      	adds	r0, r1, r2
 800356c:	588c      	ldr	r4, [r1, r2]
 800356e:	b944      	cbnz	r4, 8003582 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	e7fe      	b.n	8003580 <vTaskSwitchContext+0x3c>
 8003582:	6844      	ldr	r4, [r0, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	6864      	ldr	r4, [r4, #4]
 8003588:	6044      	str	r4, [r0, #4]
 800358a:	440a      	add	r2, r1
 800358c:	4294      	cmp	r4, r2
 800358e:	bf04      	itt	eq
 8003590:	6862      	ldreq	r2, [r4, #4]
 8003592:	6042      	streq	r2, [r0, #4]
 8003594:	2214      	movs	r2, #20
 8003596:	fb02 1303 	mla	r3, r2, r3, r1
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <vTaskSwitchContext+0x70>)
 80035a0:	e7d6      	b.n	8003550 <vTaskSwitchContext+0xc>
 80035a2:	bf00      	nop
 80035a4:	20003d58 	.word	0x20003d58
 80035a8:	20003dd8 	.word	0x20003dd8
 80035ac:	20003d60 	.word	0x20003d60
 80035b0:	20003cc0 	.word	0x20003cc0
 80035b4:	20003cb4 	.word	0x20003cb4

080035b8 <vTaskPlaceOnEventList>:
{
 80035b8:	b510      	push	{r4, lr}
 80035ba:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80035bc:	b940      	cbnz	r0, 80035d0 <vTaskPlaceOnEventList+0x18>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	e7fe      	b.n	80035ce <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <vTaskPlaceOnEventList+0x30>)
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	3118      	adds	r1, #24
 80035d6:	f7fe fd5e 	bl	8002096 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035da:	4620      	mov	r0, r4
 80035dc:	2101      	movs	r1, #1
}
 80035de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035e2:	f7ff bdc1 	b.w	8003168 <prvAddCurrentTaskToDelayedList>
 80035e6:	bf00      	nop
 80035e8:	20003cb4 	.word	0x20003cb4

080035ec <xTaskRemoveFromEventList>:
{
 80035ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035ee:	68c3      	ldr	r3, [r0, #12]
 80035f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80035f2:	b944      	cbnz	r4, 8003606 <xTaskRemoveFromEventList+0x1a>
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	e7fe      	b.n	8003604 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003606:	f104 0518 	add.w	r5, r4, #24
 800360a:	4628      	mov	r0, r5
 800360c:	f7fe fd5a 	bl	80020c4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <xTaskRemoveFromEventList+0x6c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b9e3      	cbnz	r3, 8003650 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003616:	1d25      	adds	r5, r4, #4
 8003618:	4628      	mov	r0, r5
 800361a:	f7fe fd53 	bl	80020c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800361e:	490f      	ldr	r1, [pc, #60]	; (800365c <xTaskRemoveFromEventList+0x70>)
 8003620:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003622:	6808      	ldr	r0, [r1, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	4093      	lsls	r3, r2
 8003628:	4303      	orrs	r3, r0
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <xTaskRemoveFromEventList+0x74>)
 800362e:	2014      	movs	r0, #20
 8003630:	4629      	mov	r1, r5
 8003632:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003636:	f7fe fd22 	bl	800207e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <xTaskRemoveFromEventList+0x78>)
 800363c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003644:	bf83      	ittte	hi
 8003646:	4b08      	ldrhi	r3, [pc, #32]	; (8003668 <xTaskRemoveFromEventList+0x7c>)
 8003648:	2001      	movhi	r0, #1
 800364a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800364c:	2000      	movls	r0, #0
}
 800364e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003650:	4629      	mov	r1, r5
 8003652:	4806      	ldr	r0, [pc, #24]	; (800366c <xTaskRemoveFromEventList+0x80>)
 8003654:	e7ef      	b.n	8003636 <xTaskRemoveFromEventList+0x4a>
 8003656:	bf00      	nop
 8003658:	20003d58 	.word	0x20003d58
 800365c:	20003d60 	.word	0x20003d60
 8003660:	20003cc0 	.word	0x20003cc0
 8003664:	20003cb4 	.word	0x20003cb4
 8003668:	20003dd8 	.word	0x20003dd8
 800366c:	20003d94 	.word	0x20003d94

08003670 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <vTaskInternalSetTimeOutState+0x10>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003676:	4b03      	ldr	r3, [pc, #12]	; (8003684 <vTaskInternalSetTimeOutState+0x14>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6043      	str	r3, [r0, #4]
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20003d90 	.word	0x20003d90
 8003684:	20003dd4 	.word	0x20003dd4

08003688 <xTaskCheckForTimeOut>:
{
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800368c:	4605      	mov	r5, r0
 800368e:	b940      	cbnz	r0, 80036a2 <xTaskCheckForTimeOut+0x1a>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	e7fe      	b.n	80036a0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80036a2:	b941      	cbnz	r1, 80036b6 <xTaskCheckForTimeOut+0x2e>
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	e7fe      	b.n	80036b4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80036b6:	f7fe fd7d 	bl	80021b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036bc:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80036be:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	1c58      	adds	r0, r3, #1
 80036c4:	d00e      	beq.n	80036e4 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036c6:	480d      	ldr	r0, [pc, #52]	; (80036fc <xTaskCheckForTimeOut+0x74>)
 80036c8:	682e      	ldr	r6, [r5, #0]
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	4286      	cmp	r6, r0
 80036ce:	d001      	beq.n	80036d4 <xTaskCheckForTimeOut+0x4c>
 80036d0:	428a      	cmp	r2, r1
 80036d2:	d20e      	bcs.n	80036f2 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036d4:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d209      	bcs.n	80036ee <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036de:	4628      	mov	r0, r5
 80036e0:	f7ff ffc6 	bl	8003670 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80036e4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80036e6:	f7fe fd87 	bl	80021f8 <vPortExitCritical>
}
 80036ea:	4620      	mov	r0, r4
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80036f2:	2401      	movs	r4, #1
 80036f4:	e7f7      	b.n	80036e6 <xTaskCheckForTimeOut+0x5e>
 80036f6:	bf00      	nop
 80036f8:	20003dd4 	.word	0x20003dd4
 80036fc:	20003d90 	.word	0x20003d90

08003700 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <vTaskMissedYield+0x8>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	4770      	bx	lr
 8003708:	20003dd8 	.word	0x20003dd8

0800370c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <xTaskGetSchedulerState+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b133      	cbz	r3, 8003720 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <xTaskGetSchedulerState+0x1c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003718:	bf0c      	ite	eq
 800371a:	2002      	moveq	r0, #2
 800371c:	2000      	movne	r0, #0
 800371e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003720:	2001      	movs	r0, #1
	}
 8003722:	4770      	bx	lr
 8003724:	20003da8 	.word	0x20003da8
 8003728:	20003d58 	.word	0x20003d58

0800372c <xTaskPriorityInherit>:
	{
 800372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003730:	4604      	mov	r4, r0
 8003732:	2800      	cmp	r0, #0
 8003734:	d041      	beq.n	80037ba <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003736:	4a24      	ldr	r2, [pc, #144]	; (80037c8 <xTaskPriorityInherit+0x9c>)
 8003738:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800373a:	6811      	ldr	r1, [r2, #0]
 800373c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800373e:	428b      	cmp	r3, r1
 8003740:	4617      	mov	r7, r2
 8003742:	d231      	bcs.n	80037a8 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003744:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003746:	4d21      	ldr	r5, [pc, #132]	; (80037cc <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003748:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374a:	bfa1      	itttt	ge
 800374c:	683a      	ldrge	r2, [r7, #0]
 800374e:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003750:	f1c2 0207 	rsbge	r2, r2, #7
 8003754:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003756:	2614      	movs	r6, #20
 8003758:	6942      	ldr	r2, [r0, #20]
 800375a:	fb06 5303 	mla	r3, r6, r3, r5
 800375e:	429a      	cmp	r2, r3
 8003760:	d12d      	bne.n	80037be <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003762:	f100 0804 	add.w	r8, r0, #4
 8003766:	4640      	mov	r0, r8
 8003768:	f7fe fcac 	bl	80020c4 <uxListRemove>
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <xTaskPriorityInherit+0xa4>)
 800376e:	b948      	cbnz	r0, 8003784 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003770:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003772:	4346      	muls	r6, r0
 8003774:	59aa      	ldr	r2, [r5, r6]
 8003776:	b92a      	cbnz	r2, 8003784 <xTaskPriorityInherit+0x58>
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	2101      	movs	r1, #1
 800377c:	4081      	lsls	r1, r0
 800377e:	ea22 0201 	bic.w	r2, r2, r1
 8003782:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003784:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003786:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003788:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800378a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800378c:	2401      	movs	r4, #1
 800378e:	fa04 f002 	lsl.w	r0, r4, r2
 8003792:	4308      	orrs	r0, r1
 8003794:	6018      	str	r0, [r3, #0]
 8003796:	2014      	movs	r0, #20
 8003798:	4641      	mov	r1, r8
 800379a:	fb00 5002 	mla	r0, r0, r2, r5
 800379e:	f7fe fc6e 	bl	800207e <vListInsertEnd>
				xReturn = pdTRUE;
 80037a2:	2001      	movs	r0, #1
	}
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80037a8:	6813      	ldr	r3, [r2, #0]
 80037aa:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80037ac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80037ae:	42a0      	cmp	r0, r4
 80037b0:	bf2c      	ite	cs
 80037b2:	2000      	movcs	r0, #0
 80037b4:	2001      	movcc	r0, #1
 80037b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 80037ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80037c4:	e7ed      	b.n	80037a2 <xTaskPriorityInherit+0x76>
 80037c6:	bf00      	nop
 80037c8:	20003cb4 	.word	0x20003cb4
 80037cc:	20003cc0 	.word	0x20003cc0
 80037d0:	20003d60 	.word	0x20003d60

080037d4 <xTaskPriorityDisinherit>:
	{
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80037d6:	4604      	mov	r4, r0
 80037d8:	b908      	cbnz	r0, 80037de <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80037da:	2000      	movs	r0, #0
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80037de:	4b22      	ldr	r3, [pc, #136]	; (8003868 <xTaskPriorityDisinherit+0x94>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4298      	cmp	r0, r3
 80037e4:	d008      	beq.n	80037f8 <xTaskPriorityDisinherit+0x24>
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	e7fe      	b.n	80037f6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80037f8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80037fa:	b943      	cbnz	r3, 800380e <xTaskPriorityDisinherit+0x3a>
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	e7fe      	b.n	800380c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800380e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003810:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003812:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003814:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003816:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003818:	d0df      	beq.n	80037da <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1dd      	bne.n	80037da <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800381e:	1d05      	adds	r5, r0, #4
 8003820:	4628      	mov	r0, r5
 8003822:	f7fe fc4f 	bl	80020c4 <uxListRemove>
 8003826:	4e11      	ldr	r6, [pc, #68]	; (800386c <xTaskPriorityDisinherit+0x98>)
 8003828:	4a11      	ldr	r2, [pc, #68]	; (8003870 <xTaskPriorityDisinherit+0x9c>)
 800382a:	b950      	cbnz	r0, 8003842 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800382c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800382e:	2114      	movs	r1, #20
 8003830:	4379      	muls	r1, r7
 8003832:	5873      	ldr	r3, [r6, r1]
 8003834:	b92b      	cbnz	r3, 8003842 <xTaskPriorityDisinherit+0x6e>
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	2001      	movs	r0, #1
 800383a:	40b8      	lsls	r0, r7
 800383c:	ea23 0300 	bic.w	r3, r3, r0
 8003840:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003844:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003846:	f1c3 0107 	rsb	r1, r3, #7
 800384a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800384c:	6811      	ldr	r1, [r2, #0]
 800384e:	2401      	movs	r4, #1
 8003850:	fa04 f003 	lsl.w	r0, r4, r3
 8003854:	4308      	orrs	r0, r1
 8003856:	6010      	str	r0, [r2, #0]
 8003858:	2014      	movs	r0, #20
 800385a:	fb00 6003 	mla	r0, r0, r3, r6
 800385e:	4629      	mov	r1, r5
 8003860:	f7fe fc0d 	bl	800207e <vListInsertEnd>
					xReturn = pdTRUE;
 8003864:	4620      	mov	r0, r4
	}
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003868:	20003cb4 	.word	0x20003cb4
 800386c:	20003cc0 	.word	0x20003cc0
 8003870:	20003d60 	.word	0x20003d60

08003874 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003876:	4604      	mov	r4, r0
 8003878:	2800      	cmp	r0, #0
 800387a:	d04d      	beq.n	8003918 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 800387c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800387e:	b942      	cbnz	r2, 8003892 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	e7fe      	b.n	8003890 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8003892:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003894:	4299      	cmp	r1, r3
 8003896:	bf38      	it	cc
 8003898:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800389a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800389c:	428b      	cmp	r3, r1
 800389e:	d03b      	beq.n	8003918 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80038a0:	2a01      	cmp	r2, #1
 80038a2:	d139      	bne.n	8003918 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4290      	cmp	r0, r2
 80038aa:	d108      	bne.n	80038be <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	e7fe      	b.n	80038bc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038be:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038c0:	4d17      	ldr	r5, [pc, #92]	; (8003920 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 80038c2:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038c4:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038c6:	f04f 0614 	mov.w	r6, #20
 80038ca:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038cc:	bfa8      	it	ge
 80038ce:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038d2:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d6:	bfa8      	it	ge
 80038d8:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11c      	bne.n	8003918 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038de:	1d07      	adds	r7, r0, #4
 80038e0:	4638      	mov	r0, r7
 80038e2:	f7fe fbef 	bl	80020c4 <uxListRemove>
 80038e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038e8:	4c0e      	ldr	r4, [pc, #56]	; (8003924 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80038ea:	b940      	cbnz	r0, 80038fe <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038ec:	4356      	muls	r6, r2
 80038ee:	59ab      	ldr	r3, [r5, r6]
 80038f0:	b92b      	cbnz	r3, 80038fe <vTaskPriorityDisinheritAfterTimeout+0x8a>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	4091      	lsls	r1, r2
 80038f8:	ea23 0301 	bic.w	r3, r3, r1
 80038fc:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	4093      	lsls	r3, r2
 8003904:	430b      	orrs	r3, r1
 8003906:	2014      	movs	r0, #20
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	4639      	mov	r1, r7
 800390c:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8003910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8003914:	f7fe bbb3 	b.w	800207e <vListInsertEnd>
 8003918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800391a:	bf00      	nop
 800391c:	20003cb4 	.word	0x20003cb4
 8003920:	20003cc0 	.word	0x20003cc0
 8003924:	20003d60 	.word	0x20003d60

08003928 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <pvTaskIncrementMutexHeldCount+0x14>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	b11a      	cbz	r2, 8003936 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003932:	3201      	adds	r2, #1
 8003934:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003936:	6818      	ldr	r0, [r3, #0]
	}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20003cb4 	.word	0x20003cb4

08003940 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003940:	680a      	ldr	r2, [r1, #0]
{
 8003942:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003944:	320c      	adds	r2, #12
{
 8003946:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003948:	f001 fb76 	bl	8005038 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800394c:	b908      	cbnz	r0, 8003952 <netconn_apimsg+0x12>
    return apimsg->err;
 800394e:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8003952:	bd10      	pop	{r4, pc}

08003954 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	460d      	mov	r5, r1
 8003958:	b086      	sub	sp, #24
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800395a:	4611      	mov	r1, r2
 800395c:	f000 fd96 	bl	800448c <netconn_alloc>
  if (conn != NULL) {
 8003960:	4604      	mov	r4, r0
 8003962:	2800      	cmp	r0, #0
 8003964:	d03f      	beq.n	80039e6 <netconn_new_with_proto_and_callback+0x92>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
    API_MSG_VAR_REF(msg).conn = conn;
 8003966:	a906      	add	r1, sp, #24
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8003968:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 800396c:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8003970:	481e      	ldr	r0, [pc, #120]	; (80039ec <netconn_new_with_proto_and_callback+0x98>)
 8003972:	f7ff ffe5 	bl	8003940 <netconn_apimsg>
    if (err != ERR_OK) {
 8003976:	2800      	cmp	r0, #0
 8003978:	d035      	beq.n	80039e6 <netconn_new_with_proto_and_callback+0x92>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	b12b      	cbz	r3, 800398a <netconn_new_with_proto_and_callback+0x36>
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <netconn_new_with_proto_and_callback+0x9c>)
 8003980:	491c      	ldr	r1, [pc, #112]	; (80039f4 <netconn_new_with_proto_and_callback+0xa0>)
 8003982:	481d      	ldr	r0, [pc, #116]	; (80039f8 <netconn_new_with_proto_and_callback+0xa4>)
 8003984:	2289      	movs	r2, #137	; 0x89
 8003986:	f007 ffe8 	bl	800b95a <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800398a:	f104 0510 	add.w	r5, r4, #16
 800398e:	4628      	mov	r0, r5
 8003990:	f007 f9d9 	bl	800ad46 <sys_mbox_valid>
 8003994:	b928      	cbnz	r0, 80039a2 <netconn_new_with_proto_and_callback+0x4e>
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <netconn_new_with_proto_and_callback+0x9c>)
 8003998:	4918      	ldr	r1, [pc, #96]	; (80039fc <netconn_new_with_proto_and_callback+0xa8>)
 800399a:	4817      	ldr	r0, [pc, #92]	; (80039f8 <netconn_new_with_proto_and_callback+0xa4>)
 800399c:	228a      	movs	r2, #138	; 0x8a
 800399e:	f007 ffdc 	bl	800b95a <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80039a2:	f104 0014 	add.w	r0, r4, #20
 80039a6:	f007 f9ce 	bl	800ad46 <sys_mbox_valid>
 80039aa:	b128      	cbz	r0, 80039b8 <netconn_new_with_proto_and_callback+0x64>
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <netconn_new_with_proto_and_callback+0x9c>)
 80039ae:	4914      	ldr	r1, [pc, #80]	; (8003a00 <netconn_new_with_proto_and_callback+0xac>)
 80039b0:	4811      	ldr	r0, [pc, #68]	; (80039f8 <netconn_new_with_proto_and_callback+0xa4>)
 80039b2:	228c      	movs	r2, #140	; 0x8c
 80039b4:	f007 ffd1 	bl	800b95a <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80039b8:	f104 060c 	add.w	r6, r4, #12
 80039bc:	4630      	mov	r0, r6
 80039be:	f007 fa03 	bl	800adc8 <sys_sem_valid>
 80039c2:	b928      	cbnz	r0, 80039d0 <netconn_new_with_proto_and_callback+0x7c>
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <netconn_new_with_proto_and_callback+0x9c>)
 80039c6:	490f      	ldr	r1, [pc, #60]	; (8003a04 <netconn_new_with_proto_and_callback+0xb0>)
 80039c8:	480b      	ldr	r0, [pc, #44]	; (80039f8 <netconn_new_with_proto_and_callback+0xa4>)
 80039ca:	228f      	movs	r2, #143	; 0x8f
 80039cc:	f007 ffc5 	bl	800b95a <iprintf>
      sys_sem_free(&conn->op_completed);
 80039d0:	4630      	mov	r0, r6
 80039d2:	f007 f9f6 	bl	800adc2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80039d6:	4628      	mov	r0, r5
 80039d8:	f007 f962 	bl	800aca0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80039dc:	4621      	mov	r1, r4
 80039de:	2007      	movs	r0, #7
 80039e0:	f003 f872 	bl	8006ac8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80039e4:	2400      	movs	r4, #0
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
}
 80039e6:	4620      	mov	r0, r4
 80039e8:	b006      	add	sp, #24
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	0800440d 	.word	0x0800440d
 80039f0:	0800c089 	.word	0x0800c089
 80039f4:	0800c13e 	.word	0x0800c13e
 80039f8:	0800c0d7 	.word	0x0800c0d7
 80039fc:	0800c15f 	.word	0x0800c15f
 8003a00:	0800c174 	.word	0x0800c174
 8003a04:	0800c195 	.word	0x0800c195

08003a08 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8003a08:	b530      	push	{r4, r5, lr}
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8003a0a:	4604      	mov	r4, r0
{
 8003a0c:	b087      	sub	sp, #28
  if (conn == NULL) {
 8003a0e:	b178      	cbz	r0, 8003a30 <netconn_delete+0x28>
    return ERR_OK;
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8003a10:	9001      	str	r0, [sp, #4]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003a12:	2329      	movs	r3, #41	; 0x29
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8003a14:	a901      	add	r1, sp, #4
 8003a16:	4807      	ldr	r0, [pc, #28]	; (8003a34 <netconn_delete+0x2c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003a18:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8003a1c:	f7ff ff90 	bl	8003940 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8003a20:	4605      	mov	r5, r0
 8003a22:	b910      	cbnz	r0, 8003a2a <netconn_delete+0x22>
    return err;
  }

  netconn_free(conn);
 8003a24:	4620      	mov	r0, r4
 8003a26:	f000 fd77 	bl	8004518 <netconn_free>

  return ERR_OK;
}
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	b007      	add	sp, #28
 8003a2e:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 8003a30:	4605      	mov	r5, r0
 8003a32:	e7fa      	b.n	8003a2a <netconn_delete+0x22>
 8003a34:	08004631 	.word	0x08004631

08003a38 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8003a38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8003a3a:	b958      	cbnz	r0, 8003a54 <netconn_connect+0x1c>
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <netconn_connect+0x38>)
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <netconn_connect+0x3c>)
 8003a40:	480d      	ldr	r0, [pc, #52]	; (8003a78 <netconn_connect+0x40>)
 8003a42:	f240 122b 	movw	r2, #299	; 0x12b
 8003a46:	f007 ff88 	bl	800b95a <iprintf>
 8003a4a:	f06f 000f 	mvn.w	r0, #15
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003a4e:	b007      	add	sp, #28
 8003a50:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <netconn_connect+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8003a56:	9001      	str	r0, [sp, #4]
    addr = IP4_ADDR_ANY;
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	bf08      	it	eq
 8003a5c:	4619      	moveq	r1, r3
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8003a5e:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8003a60:	4807      	ldr	r0, [pc, #28]	; (8003a80 <netconn_connect+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8003a62:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8003a66:	a901      	add	r1, sp, #4
 8003a68:	f7ff ff6a 	bl	8003940 <netconn_apimsg>
  return err;
 8003a6c:	e7ef      	b.n	8003a4e <netconn_connect+0x16>
 8003a6e:	bf00      	nop
 8003a70:	0800c089 	.word	0x0800c089
 8003a74:	0800c0ff 	.word	0x0800c0ff
 8003a78:	0800c0d7 	.word	0x0800c0d7
 8003a7c:	0800cb50 	.word	0x0800cb50
 8003a80:	08004761 	.word	0x08004761

08003a84 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8003a84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8003a86:	b958      	cbnz	r0, 8003aa0 <netconn_disconnect+0x1c>
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <netconn_disconnect+0x2c>)
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <netconn_disconnect+0x30>)
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <netconn_disconnect+0x34>)
 8003a8e:	f240 124b 	movw	r2, #331	; 0x14b
 8003a92:	f007 ff62 	bl	800b95a <iprintf>
 8003a96:	f06f 000f 	mvn.w	r0, #15
  API_MSG_VAR_REF(msg).conn = conn;
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003a9a:	b007      	add	sp, #28
 8003a9c:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8003aa0:	a906      	add	r1, sp, #24
 8003aa2:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8003aa6:	4805      	ldr	r0, [pc, #20]	; (8003abc <netconn_disconnect+0x38>)
 8003aa8:	f7ff ff4a 	bl	8003940 <netconn_apimsg>
  return err;
 8003aac:	e7f5      	b.n	8003a9a <netconn_disconnect+0x16>
 8003aae:	bf00      	nop
 8003ab0:	0800c089 	.word	0x0800c089
 8003ab4:	0800c11d 	.word	0x0800c11d
 8003ab8:	0800c0d7 	.word	0x0800c0d7
 8003abc:	08004851 	.word	0x08004851

08003ac0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8003ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003ac2:	b958      	cbnz	r0, 8003adc <netconn_send+0x1c>
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <netconn_send+0x2c>)
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <netconn_send+0x30>)
 8003ac8:	480a      	ldr	r0, [pc, #40]	; (8003af4 <netconn_send+0x34>)
 8003aca:	f240 22c3 	movw	r2, #707	; 0x2c3
 8003ace:	f007 ff44 	bl	800b95a <iprintf>
 8003ad2:	f06f 000f 	mvn.w	r0, #15
  API_MSG_VAR_REF(msg).msg.b = buf;
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003ad6:	b007      	add	sp, #28
 8003ad8:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8003adc:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8003ade:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8003ae0:	4805      	ldr	r0, [pc, #20]	; (8003af8 <netconn_send+0x38>)
 8003ae2:	a901      	add	r1, sp, #4
 8003ae4:	f7ff ff2c 	bl	8003940 <netconn_apimsg>
  return err;
 8003ae8:	e7f5      	b.n	8003ad6 <netconn_send+0x16>
 8003aea:	bf00      	nop
 8003aec:	0800c089 	.word	0x0800c089
 8003af0:	0800c1ae 	.word	0x0800c1ae
 8003af4:	0800c0d7 	.word	0x0800c0d7
 8003af8:	0800488f 	.word	0x0800488f

08003afc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	4615      	mov	r5, r2
 8003b02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003b04:	b950      	cbnz	r0, 8003b1c <netconn_write_partly+0x20>
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <netconn_write_partly+0x80>)
 8003b08:	491d      	ldr	r1, [pc, #116]	; (8003b80 <netconn_write_partly+0x84>)
 8003b0a:	481e      	ldr	r0, [pc, #120]	; (8003b84 <netconn_write_partly+0x88>)
 8003b0c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003b10:	f007 ff23 	bl	800b95a <iprintf>
 8003b14:	f06f 000f 	mvn.w	r0, #15
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003b18:	b006      	add	sp, #24
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8003b1c:	7802      	ldrb	r2, [r0, #0]
 8003b1e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003b22:	2a10      	cmp	r2, #16
 8003b24:	d009      	beq.n	8003b3a <netconn_write_partly+0x3e>
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <netconn_write_partly+0x80>)
 8003b28:	4917      	ldr	r1, [pc, #92]	; (8003b88 <netconn_write_partly+0x8c>)
 8003b2a:	4816      	ldr	r0, [pc, #88]	; (8003b84 <netconn_write_partly+0x88>)
 8003b2c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8003b30:	f007 ff13 	bl	800b95a <iprintf>
    return ERR_VAL;
 8003b34:	f06f 0005 	mvn.w	r0, #5
 8003b38:	e7ee      	b.n	8003b18 <netconn_write_partly+0x1c>
  if (size == 0) {
 8003b3a:	b90d      	cbnz	r5, 8003b40 <netconn_write_partly+0x44>
    return ERR_OK;
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e7eb      	b.n	8003b18 <netconn_write_partly+0x1c>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8003b40:	7f02      	ldrb	r2, [r0, #28]
 8003b42:	0792      	lsls	r2, r2, #30
 8003b44:	d413      	bmi.n	8003b6e <netconn_write_partly+0x72>
 8003b46:	f3c3 0680 	ubfx	r6, r3, #2, #1
  if (dontblock && !bytes_written) {
 8003b4a:	b98e      	cbnz	r6, 8003b70 <netconn_write_partly+0x74>
  API_MSG_VAR_REF(msg).conn = conn;
 8003b4c:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8003b4e:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8003b50:	480e      	ldr	r0, [pc, #56]	; (8003b8c <netconn_write_partly+0x90>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8003b52:	f88d 3014 	strb.w	r3, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8003b56:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8003b58:	9504      	str	r5, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8003b5a:	f7ff fef1 	bl	8003940 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d1da      	bne.n	8003b18 <netconn_write_partly+0x1c>
 8003b62:	2c00      	cmp	r4, #0
 8003b64:	d0ea      	beq.n	8003b3c <netconn_write_partly+0x40>
    if (dontblock) {
 8003b66:	b136      	cbz	r6, 8003b76 <netconn_write_partly+0x7a>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8003b68:	9b04      	ldr	r3, [sp, #16]
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	e7d4      	b.n	8003b18 <netconn_write_partly+0x1c>
 8003b6e:	2601      	movs	r6, #1
  if (dontblock && !bytes_written) {
 8003b70:	2c00      	cmp	r4, #0
 8003b72:	d1eb      	bne.n	8003b4c <netconn_write_partly+0x50>
 8003b74:	e7de      	b.n	8003b34 <netconn_write_partly+0x38>
      *bytes_written = size;
 8003b76:	6025      	str	r5, [r4, #0]
 8003b78:	e7ce      	b.n	8003b18 <netconn_write_partly+0x1c>
 8003b7a:	bf00      	nop
 8003b7c:	0800c089 	.word	0x0800c089
 8003b80:	0800c1c9 	.word	0x0800c1c9
 8003b84:	0800c0d7 	.word	0x0800c0d7
 8003b88:	0800c1e5 	.word	0x0800c1e5
 8003b8c:	080048f5 	.word	0x080048f5

08003b90 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	4606      	mov	r6, r0
 8003b96:	4617      	mov	r7, r2
 8003b98:	461d      	mov	r5, r3
 8003b9a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	b929      	cbnz	r1, 8003bae <recv_udp+0x1e>
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <recv_udp+0x9c>)
 8003ba4:	4922      	ldr	r1, [pc, #136]	; (8003c30 <recv_udp+0xa0>)
 8003ba6:	4823      	ldr	r0, [pc, #140]	; (8003c34 <recv_udp+0xa4>)
 8003ba8:	22b1      	movs	r2, #177	; 0xb1
 8003baa:	f007 fed6 	bl	800b95a <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8003bae:	b98e      	cbnz	r6, 8003bd4 <recv_udp+0x44>
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <recv_udp+0x9c>)
 8003bb2:	4921      	ldr	r1, [pc, #132]	; (8003c38 <recv_udp+0xa8>)
 8003bb4:	481f      	ldr	r0, [pc, #124]	; (8003c34 <recv_udp+0xa4>)
 8003bb6:	22b2      	movs	r2, #178	; 0xb2
 8003bb8:	f007 fecf 	bl	800b95a <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8003bbc:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8003bbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8003bc2:	f003 b907 	b.w	8006dd4 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8003bc6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003bc8:	b373      	cbz	r3, 8003c28 <recv_udp+0x98>
 8003bca:	462a      	mov	r2, r5
 8003bcc:	4630      	mov	r0, r6
}
 8003bce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8003bd2:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8003bd4:	6873      	ldr	r3, [r6, #4]
 8003bd6:	429c      	cmp	r4, r3
 8003bd8:	d005      	beq.n	8003be6 <recv_udp+0x56>
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <recv_udp+0x9c>)
 8003bdc:	4917      	ldr	r1, [pc, #92]	; (8003c3c <recv_udp+0xac>)
 8003bde:	4815      	ldr	r0, [pc, #84]	; (8003c34 <recv_udp+0xa4>)
 8003be0:	22ba      	movs	r2, #186	; 0xba
 8003be2:	f007 feba 	bl	800b95a <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8003be6:	f106 0810 	add.w	r8, r6, #16
 8003bea:	4640      	mov	r0, r8
 8003bec:	f007 f8ab 	bl	800ad46 <sys_mbox_valid>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d0e3      	beq.n	8003bbc <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8003bf4:	2006      	movs	r0, #6
 8003bf6:	f002 ff4b 	bl	8006a90 <memp_malloc>
  if (buf == NULL) {
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d0dd      	beq.n	8003bbc <recv_udp+0x2c>
    buf->p = p;
 8003c00:	6007      	str	r7, [r0, #0]
    buf->ptr = p;
 8003c02:	6047      	str	r7, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8003c04:	b105      	cbz	r5, 8003c08 <recv_udp+0x78>
 8003c06:	682d      	ldr	r5, [r5, #0]
 8003c08:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8003c0a:	4621      	mov	r1, r4
    buf->port = port;
 8003c0c:	f8a4 900c 	strh.w	r9, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8003c10:	4640      	mov	r0, r8
  len = p->tot_len;
 8003c12:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8003c14:	f007 f85a 	bl	800accc <sys_mbox_trypost>
 8003c18:	4601      	mov	r1, r0
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d0d3      	beq.n	8003bc6 <recv_udp+0x36>
    netbuf_delete(buf);
 8003c1e:	4620      	mov	r0, r4
}
 8003c20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8003c24:	f000 bee8 	b.w	80049f8 <netbuf_delete>
 8003c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2c:	0800c56a 	.word	0x0800c56a
 8003c30:	0800c59c 	.word	0x0800c59c
 8003c34:	0800c0d7 	.word	0x0800c0d7
 8003c38:	0800c5be 	.word	0x0800c5be
 8003c3c:	0800c5dd 	.word	0x0800c5dd

08003c40 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8003c40:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8003c42:	6844      	ldr	r4, [r0, #4]
{
 8003c44:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8003c46:	4620      	mov	r0, r4
 8003c48:	f003 fca2 	bl	8007590 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4909      	ldr	r1, [pc, #36]	; (8003c74 <setup_tcp+0x34>)
 8003c50:	f003 fca2 	bl	8007598 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8003c54:	4620      	mov	r0, r4
 8003c56:	4908      	ldr	r1, [pc, #32]	; (8003c78 <setup_tcp+0x38>)
 8003c58:	f003 fcb6 	bl	80075c8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4907      	ldr	r1, [pc, #28]	; (8003c7c <setup_tcp+0x3c>)
 8003c60:	2202      	movs	r2, #2
 8003c62:	f003 fce5 	bl	8007630 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8003c66:	4620      	mov	r0, r4
 8003c68:	4905      	ldr	r1, [pc, #20]	; (8003c80 <setup_tcp+0x40>)
}
 8003c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 8003c6e:	f003 bcc1 	b.w	80075f4 <tcp_err>
 8003c72:	bf00      	nop
 8003c74:	080042dd 	.word	0x080042dd
 8003c78:	080043a1 	.word	0x080043a1
 8003c7c:	08004265 	.word	0x08004265
 8003c80:	08003c85 	.word	0x08003c85

08003c84 <err_tcp>:
{
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	b930      	cbnz	r0, 8003c9c <err_tcp+0x18>
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <err_tcp+0x110>)
 8003c90:	4941      	ldr	r1, [pc, #260]	; (8003d98 <err_tcp+0x114>)
 8003c92:	4842      	ldr	r0, [pc, #264]	; (8003d9c <err_tcp+0x118>)
 8003c94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8003c98:	f007 fe5f 	bl	800b95a <iprintf>
  old_state = conn->state;
 8003c9c:	7865      	ldrb	r5, [r4, #1]
  conn->pcb.tcp = NULL;
 8003c9e:	2700      	movs	r7, #0
  if (old_state == NETCONN_CLOSE) {
 8003ca0:	2d04      	cmp	r5, #4
  conn->pcb.tcp = NULL;
 8003ca2:	6067      	str	r7, [r4, #4]
  conn->state = NETCONN_NONE;
 8003ca4:	7067      	strb	r7, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8003ca6:	d162      	bne.n	8003d6e <err_tcp+0xea>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8003ca8:	f007 f8d0 	bl	800ae4c <sys_arch_protect>
 8003cac:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	bfa8      	it	ge
 8003cb4:	7227      	strbge	r7, [r4, #8]
 8003cb6:	f007 f8d5 	bl	800ae64 <sys_arch_unprotect>
    err = ERR_OK;
 8003cba:	2600      	movs	r6, #0
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8003cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cbe:	b11b      	cbz	r3, 8003cc8 <err_tcp+0x44>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8003cc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cca:	b11b      	cbz	r3, 8003cd4 <err_tcp+0x50>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8003cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cd6:	b11b      	cbz	r3, 8003ce0 <err_tcp+0x5c>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8003ce0:	f104 0710 	add.w	r7, r4, #16
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f007 f82e 	bl	800ad46 <sys_mbox_valid>
 8003cea:	b118      	cbz	r0, 8003cf4 <err_tcp+0x70>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8003cec:	2100      	movs	r1, #0
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f006 ffec 	bl	800accc <sys_mbox_trypost>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8003cf4:	f104 0714 	add.w	r7, r4, #20
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	f007 f824 	bl	800ad46 <sys_mbox_valid>
 8003cfe:	b118      	cbz	r0, 8003d08 <err_tcp+0x84>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8003d00:	2100      	movs	r1, #0
 8003d02:	4638      	mov	r0, r7
 8003d04:	f006 ffe2 	bl	800accc <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8003d08:	2d01      	cmp	r5, #1
 8003d0a:	d002      	beq.n	8003d12 <err_tcp+0x8e>
 8003d0c:	3d03      	subs	r5, #3
 8003d0e:	2d01      	cmp	r5, #1
 8003d10:	d833      	bhi.n	8003d7a <err_tcp+0xf6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8003d12:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8003d14:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8003d18:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8003d1a:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8003d1c:	d438      	bmi.n	8003d90 <err_tcp+0x10c>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8003d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d20:	b933      	cbnz	r3, 8003d30 <err_tcp+0xac>
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <err_tcp+0x110>)
 8003d24:	491e      	ldr	r1, [pc, #120]	; (8003da0 <err_tcp+0x11c>)
 8003d26:	481d      	ldr	r0, [pc, #116]	; (8003d9c <err_tcp+0x118>)
 8003d28:	f240 12b3 	movw	r2, #435	; 0x1b3
 8003d2c:	f007 fe15 	bl	800b95a <iprintf>
      conn->current_msg->err = err;
 8003d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8003d32:	681d      	ldr	r5, [r3, #0]
      conn->current_msg->err = err;
 8003d34:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8003d36:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f007 f845 	bl	800adc8 <sys_sem_valid>
 8003d3e:	b930      	cbnz	r0, 8003d4e <err_tcp+0xca>
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <err_tcp+0x110>)
 8003d42:	4918      	ldr	r1, [pc, #96]	; (8003da4 <err_tcp+0x120>)
 8003d44:	4815      	ldr	r0, [pc, #84]	; (8003d9c <err_tcp+0x118>)
 8003d46:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8003d4a:	f007 fe06 	bl	800b95a <iprintf>
      conn->current_msg = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8003d52:	f007 f87b 	bl	800ae4c <sys_arch_protect>
 8003d56:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	bfa8      	it	ge
 8003d5e:	7226      	strbge	r6, [r4, #8]
 8003d60:	f007 f880 	bl	800ae64 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8003d64:	4628      	mov	r0, r5
}
 8003d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8003d6a:	f007 b827 	b.w	800adbc <sys_sem_signal>
    SYS_ARCH_SET(conn->last_err, err);
 8003d6e:	f007 f86d 	bl	800ae4c <sys_arch_protect>
 8003d72:	7226      	strb	r6, [r4, #8]
 8003d74:	f007 f876 	bl	800ae64 <sys_arch_unprotect>
 8003d78:	e7a0      	b.n	8003cbc <err_tcp+0x38>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8003d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d7c:	b143      	cbz	r3, 8003d90 <err_tcp+0x10c>
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <err_tcp+0x110>)
 8003d80:	4909      	ldr	r1, [pc, #36]	; (8003da8 <err_tcp+0x124>)
 8003d82:	4806      	ldr	r0, [pc, #24]	; (8003d9c <err_tcp+0x118>)
 8003d84:	f240 12bd 	movw	r2, #445	; 0x1bd
}
 8003d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8003d8c:	f007 bde5 	b.w	800b95a <iprintf>
 8003d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d94:	0800c56a 	.word	0x0800c56a
 8003d98:	0800c207 	.word	0x0800c207
 8003d9c:	0800c0d7 	.word	0x0800c0d7
 8003da0:	0800c214 	.word	0x0800c214
 8003da4:	0800c22e 	.word	0x0800c22e
 8003da8:	0800c247 	.word	0x0800c247

08003dac <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	4616      	mov	r6, r2

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8003db0:	4604      	mov	r4, r0
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d04d      	beq.n	8003e52 <lwip_netconn_do_connected+0xa6>
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8003db6:	7843      	ldrb	r3, [r0, #1]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d006      	beq.n	8003dca <lwip_netconn_do_connected+0x1e>
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <lwip_netconn_do_connected+0xac>)
 8003dbe:	4927      	ldr	r1, [pc, #156]	; (8003e5c <lwip_netconn_do_connected+0xb0>)
 8003dc0:	4827      	ldr	r0, [pc, #156]	; (8003e60 <lwip_netconn_do_connected+0xb4>)
 8003dc2:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8003dc6:	f007 fdc8 	bl	800b95a <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8003dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dcc:	b94b      	cbnz	r3, 8003de2 <lwip_netconn_do_connected+0x36>
 8003dce:	7f23      	ldrb	r3, [r4, #28]
 8003dd0:	075b      	lsls	r3, r3, #29
 8003dd2:	d406      	bmi.n	8003de2 <lwip_netconn_do_connected+0x36>
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <lwip_netconn_do_connected+0xac>)
 8003dd6:	4923      	ldr	r1, [pc, #140]	; (8003e64 <lwip_netconn_do_connected+0xb8>)
 8003dd8:	4821      	ldr	r0, [pc, #132]	; (8003e60 <lwip_netconn_do_connected+0xb4>)
 8003dda:	f240 429a 	movw	r2, #1178	; 0x49a
 8003dde:	f007 fdbc 	bl	800b95a <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8003de2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003de4:	b115      	cbz	r5, 8003dec <lwip_netconn_do_connected+0x40>
    conn->current_msg->err = err;
 8003de6:	712e      	strb	r6, [r5, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8003de8:	682d      	ldr	r5, [r5, #0]
 8003dea:	350c      	adds	r5, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8003dec:	7823      	ldrb	r3, [r4, #0]
 8003dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d103      	bne.n	8003dfe <lwip_netconn_do_connected+0x52>
 8003df6:	b916      	cbnz	r6, 8003dfe <lwip_netconn_do_connected+0x52>
    setup_tcp(conn);
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f7ff ff21 	bl	8003c40 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8003dfe:	7f20      	ldrb	r0, [r4, #28]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8003e00:	f020 0304 	bic.w	r3, r0, #4
  LWIP_ASSERT("blocking connect state error",
 8003e04:	f010 0604 	ands.w	r6, r0, #4
  SET_NONBLOCKING_CONNECT(conn, 0);
 8003e08:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
 8003e0a:	d108      	bne.n	8003e1e <lwip_netconn_do_connected+0x72>
 8003e0c:	b94d      	cbnz	r5, 8003e22 <lwip_netconn_do_connected+0x76>
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <lwip_netconn_do_connected+0xac>)
 8003e10:	4915      	ldr	r1, [pc, #84]	; (8003e68 <lwip_netconn_do_connected+0xbc>)
 8003e12:	4813      	ldr	r0, [pc, #76]	; (8003e60 <lwip_netconn_do_connected+0xb4>)
 8003e14:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8003e18:	f007 fd9f 	bl	800b95a <iprintf>
 8003e1c:	e001      	b.n	8003e22 <lwip_netconn_do_connected+0x76>
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	d1f5      	bne.n	8003e0e <lwip_netconn_do_connected+0x62>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8003e22:	2700      	movs	r7, #0
 8003e24:	6267      	str	r7, [r4, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8003e26:	7067      	strb	r7, [r4, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8003e28:	f007 f810 	bl	800ae4c <sys_arch_protect>
 8003e2c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8003e30:	330c      	adds	r3, #12
 8003e32:	bfa8      	it	ge
 8003e34:	7227      	strbge	r7, [r4, #8]
 8003e36:	f007 f815 	bl	800ae64 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8003e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e3c:	b11b      	cbz	r3, 8003e46 <lwip_netconn_do_connected+0x9a>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2102      	movs	r1, #2
 8003e42:	4620      	mov	r0, r4
 8003e44:	4798      	blx	r3

  if (was_blocking) {
 8003e46:	b916      	cbnz	r6, 8003e4e <lwip_netconn_do_connected+0xa2>
    sys_sem_signal(op_completed_sem);
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f006 ffb7 	bl	800adbc <sys_sem_signal>
  }
  return ERR_OK;
 8003e4e:	2000      	movs	r0, #0
}
 8003e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8003e52:	f06f 0005 	mvn.w	r0, #5
 8003e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e58:	0800c56a 	.word	0x0800c56a
 8003e5c:	0800c2ee 	.word	0x0800c2ee
 8003e60:	0800c0d7 	.word	0x0800c0d7
 8003e64:	0800c30d 	.word	0x0800c30d
 8003e68:	0800c34a 	.word	0x0800c34a

08003e6c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8003e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e70:	460f      	mov	r7, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8003e72:	4604      	mov	r4, r0
 8003e74:	b930      	cbnz	r0, 8003e84 <lwip_netconn_do_writemore+0x18>
 8003e76:	4b74      	ldr	r3, [pc, #464]	; (8004048 <lwip_netconn_do_writemore+0x1dc>)
 8003e78:	4974      	ldr	r1, [pc, #464]	; (800404c <lwip_netconn_do_writemore+0x1e0>)
 8003e7a:	4875      	ldr	r0, [pc, #468]	; (8004050 <lwip_netconn_do_writemore+0x1e4>)
 8003e7c:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8003e80:	f007 fd6b 	bl	800b95a <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8003e84:	7863      	ldrb	r3, [r4, #1]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d006      	beq.n	8003e98 <lwip_netconn_do_writemore+0x2c>
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <lwip_netconn_do_writemore+0x1dc>)
 8003e8c:	4971      	ldr	r1, [pc, #452]	; (8004054 <lwip_netconn_do_writemore+0x1e8>)
 8003e8e:	4870      	ldr	r0, [pc, #448]	; (8004050 <lwip_netconn_do_writemore+0x1e4>)
 8003e90:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8003e94:	f007 fd61 	bl	800b95a <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8003e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e9a:	b933      	cbnz	r3, 8003eaa <lwip_netconn_do_writemore+0x3e>
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <lwip_netconn_do_writemore+0x1dc>)
 8003e9e:	496e      	ldr	r1, [pc, #440]	; (8004058 <lwip_netconn_do_writemore+0x1ec>)
 8003ea0:	486b      	ldr	r0, [pc, #428]	; (8004050 <lwip_netconn_do_writemore+0x1e4>)
 8003ea2:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8003ea6:	f007 fd58 	bl	800b95a <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8003eaa:	6863      	ldr	r3, [r4, #4]
 8003eac:	b933      	cbnz	r3, 8003ebc <lwip_netconn_do_writemore+0x50>
 8003eae:	4b66      	ldr	r3, [pc, #408]	; (8004048 <lwip_netconn_do_writemore+0x1dc>)
 8003eb0:	496a      	ldr	r1, [pc, #424]	; (800405c <lwip_netconn_do_writemore+0x1f0>)
 8003eb2:	4867      	ldr	r0, [pc, #412]	; (8004050 <lwip_netconn_do_writemore+0x1e4>)
 8003eb4:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8003eb8:	f007 fd4f 	bl	800b95a <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8003ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ebe:	6a22      	ldr	r2, [r4, #32]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d306      	bcc.n	8003ed4 <lwip_netconn_do_writemore+0x68>
 8003ec6:	4b60      	ldr	r3, [pc, #384]	; (8004048 <lwip_netconn_do_writemore+0x1dc>)
 8003ec8:	4965      	ldr	r1, [pc, #404]	; (8004060 <lwip_netconn_do_writemore+0x1f4>)
 8003eca:	4861      	ldr	r0, [pc, #388]	; (8004050 <lwip_netconn_do_writemore+0x1e4>)
 8003ecc:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8003ed0:	f007 fd43 	bl	800b95a <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8003ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8003ed6:	7f22      	ldrb	r2, [r4, #28]
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8003ed8:	6899      	ldr	r1, [r3, #8]
  apiflags = conn->current_msg->msg.w.apiflags;
 8003eda:	7c1e      	ldrb	r6, [r3, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8003edc:	0790      	lsls	r0, r2, #30
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8003ede:	6a22      	ldr	r2, [r4, #32]
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8003ee0:	6860      	ldr	r0, [r4, #4]
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8003ee2:	eb01 0902 	add.w	r9, r1, r2
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8003ee6:	68d9      	ldr	r1, [r3, #12]
    available = tcp_sndbuf(conn->pcb.tcp);
 8003ee8:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8003eec:	eba1 0302 	sub.w	r3, r1, r2
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8003ef0:	bf54      	ite	pl
 8003ef2:	f3c6 0880 	ubfxpl	r8, r6, #2, #1
 8003ef6:	f04f 0801 	movmi.w	r8, #1
    if (diff > 0xffffUL) { /* max_u16_t */
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
      len = 0xffff;
 8003efe:	bf2a      	itet	cs
 8003f00:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
      len = (u16_t)diff;
 8003f04:	b29b      	uxthcc	r3, r3
      apiflags |= TCP_WRITE_FLAG_MORE;
 8003f06:	f046 0602 	orrcs.w	r6, r6, #2
    if (available < len) {
 8003f0a:	42ab      	cmp	r3, r5
 8003f0c:	d95f      	bls.n	8003fce <lwip_netconn_do_writemore+0x162>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8003f0e:	f1b8 0f00 	cmp.w	r8, #0
 8003f12:	d059      	beq.n	8003fc8 <lwip_netconn_do_writemore+0x15c>
        if (!len) {
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	d05c      	beq.n	8003fd2 <lwip_netconn_do_writemore+0x166>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8003f18:	442a      	add	r2, r5
 8003f1a:	4291      	cmp	r1, r2
 8003f1c:	d206      	bcs.n	8003f2c <lwip_netconn_do_writemore+0xc0>
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <lwip_netconn_do_writemore+0x1dc>)
 8003f20:	4950      	ldr	r1, [pc, #320]	; (8004064 <lwip_netconn_do_writemore+0x1f8>)
 8003f22:	484b      	ldr	r0, [pc, #300]	; (8004050 <lwip_netconn_do_writemore+0x1e4>)
 8003f24:	f240 6213 	movw	r2, #1555	; 0x613
 8003f28:	f007 fd17 	bl	800b95a <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8003f2c:	4633      	mov	r3, r6
 8003f2e:	462a      	mov	r2, r5
 8003f30:	4649      	mov	r1, r9
 8003f32:	6860      	ldr	r0, [r4, #4]
 8003f34:	f005 fcc0 	bl	80098b8 <tcp_write>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8003f3e:	4606      	mov	r6, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8003f40:	d869      	bhi.n	8004016 <lwip_netconn_do_writemore+0x1aa>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8003f42:	f1b8 0f00 	cmp.w	r8, #0
 8003f46:	d047      	beq.n	8003fd8 <lwip_netconn_do_writemore+0x16c>
 8003f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	d243      	bcs.n	8003fd8 <lwip_netconn_do_writemore+0x16c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8003f50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f52:	b11b      	cbz	r3, 8003f5c <lwip_netconn_do_writemore+0xf0>
 8003f54:	462a      	mov	r2, r5
 8003f56:	2103      	movs	r1, #3
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8003f5c:	7f23      	ldrb	r3, [r4, #28]
 8003f5e:	f043 0310 	orr.w	r3, r3, #16
 8003f62:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8003f64:	2e00      	cmp	r6, #0
 8003f66:	d14b      	bne.n	8004000 <lwip_netconn_do_writemore+0x194>
      err_t out_err;
      conn->write_offset += len;
 8003f68:	6a23      	ldr	r3, [r4, #32]
 8003f6a:	441d      	add	r5, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8003f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      conn->write_offset += len;
 8003f6e:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	4295      	cmp	r5, r2
 8003f74:	d002      	beq.n	8003f7c <lwip_netconn_do_writemore+0x110>
 8003f76:	f1b8 0f00 	cmp.w	r8, #0
 8003f7a:	d03f      	beq.n	8003ffc <lwip_netconn_do_writemore+0x190>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8003f7c:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8003f7e:	2501      	movs	r5, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8003f80:	6860      	ldr	r0, [r4, #4]
 8003f82:	f006 f81f 	bl	8009fc4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8003f86:	f110 0f0c 	cmn.w	r0, #12
 8003f8a:	db01      	blt.n	8003f90 <lwip_netconn_do_writemore+0x124>
 8003f8c:	1d01      	adds	r1, r0, #4
 8003f8e:	d153      	bne.n	8004038 <lwip_netconn_do_writemore+0x1cc>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8003f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
      out_err = tcp_output(conn->pcb.tcp);
 8003f96:	4606      	mov	r6, r0
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8003f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f9a:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8003f9c:	711e      	strb	r6, [r3, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8003f9e:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8003fa4:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8003fa6:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8003fa8:	f006 ff50 	bl	800ae4c <sys_arch_protect>
 8003fac:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	bfa8      	it	ge
 8003fb4:	7226      	strbge	r6, [r4, #8]
 8003fb6:	f006 ff55 	bl	800ae64 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8003fba:	b117      	cbz	r7, 8003fc2 <lwip_netconn_do_writemore+0x156>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f006 fefd 	bl	800adbc <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        apiflags |= TCP_WRITE_FLAG_MORE;
 8003fc8:	f046 0602 	orr.w	r6, r6, #2
 8003fcc:	e7a4      	b.n	8003f18 <lwip_netconn_do_writemore+0xac>
 8003fce:	461d      	mov	r5, r3
 8003fd0:	e7a2      	b.n	8003f18 <lwip_netconn_do_writemore+0xac>
          err = ERR_WOULDBLOCK;
 8003fd2:	f06f 0606 	mvn.w	r6, #6
 8003fd6:	e7b7      	b.n	8003f48 <lwip_netconn_do_writemore+0xdc>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003fde:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8003fe2:	d303      	bcc.n	8003fec <lwip_netconn_do_writemore+0x180>
 8003fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d9bb      	bls.n	8003f64 <lwip_netconn_do_writemore+0xf8>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8003fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0b8      	beq.n	8003f64 <lwip_netconn_do_writemore+0xf8>
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	2103      	movs	r1, #3
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	4798      	blx	r3
 8003ffa:	e7b3      	b.n	8003f64 <lwip_netconn_do_writemore+0xf8>
  u8_t write_finished = 0;
 8003ffc:	4635      	mov	r5, r6
 8003ffe:	e7bf      	b.n	8003f80 <lwip_netconn_do_writemore+0x114>
    } else if (err == ERR_MEM) {
 8004000:	1c72      	adds	r2, r6, #1
 8004002:	d108      	bne.n	8004016 <lwip_netconn_do_writemore+0x1aa>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004004:	6860      	ldr	r0, [r4, #4]
 8004006:	f005 ffdd 	bl	8009fc4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800400a:	f110 0f0c 	cmn.w	r0, #12
      err_t out_err = tcp_output(conn->pcb.tcp);
 800400e:	4606      	mov	r6, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004010:	db01      	blt.n	8004016 <lwip_netconn_do_writemore+0x1aa>
 8004012:	1d03      	adds	r3, r0, #4
 8004014:	d103      	bne.n	800401e <lwip_netconn_do_writemore+0x1b2>
      conn->current_msg->msg.w.len = 0;
 8004016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004018:	2200      	movs	r2, #0
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e7bc      	b.n	8003f98 <lwip_netconn_do_writemore+0x12c>
      } else if (dontblock) {
 800401e:	f1b8 0f00 	cmp.w	r8, #0
 8004022:	d103      	bne.n	800402c <lwip_netconn_do_writemore+0x1c0>
    return ERR_MEM;
 8004024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        conn->current_msg->msg.w.len = 0;
 800402c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
        err = ERR_WOULDBLOCK;
 8004032:	f06f 0606 	mvn.w	r6, #6
 8004036:	e7af      	b.n	8003f98 <lwip_netconn_do_writemore+0x12c>
  if (write_finished) {
 8004038:	2d00      	cmp	r5, #0
 800403a:	d0f3      	beq.n	8004024 <lwip_netconn_do_writemore+0x1b8>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800403c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800403e:	6815      	ldr	r5, [r2, #0]
    conn->current_msg->err = err;
 8004040:	2300      	movs	r3, #0
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004042:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8004044:	7113      	strb	r3, [r2, #4]
 8004046:	e7ac      	b.n	8003fa2 <lwip_netconn_do_writemore+0x136>
 8004048:	0800c56a 	.word	0x0800c56a
 800404c:	0800c207 	.word	0x0800c207
 8004050:	0800c0d7 	.word	0x0800c0d7
 8004054:	0800c3b1 	.word	0x0800c3b1
 8004058:	0800c214 	.word	0x0800c214
 800405c:	0800c3ce 	.word	0x0800c3ce
 8004060:	0800c3e4 	.word	0x0800c3e4
 8004064:	0800c416 	.word	0x0800c416

08004068 <lwip_netconn_do_close_internal>:
{
 8004068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800406e:	4604      	mov	r4, r0
 8004070:	b930      	cbnz	r0, 8004080 <lwip_netconn_do_close_internal+0x18>
 8004072:	4b71      	ldr	r3, [pc, #452]	; (8004238 <lwip_netconn_do_close_internal+0x1d0>)
 8004074:	4971      	ldr	r1, [pc, #452]	; (800423c <lwip_netconn_do_close_internal+0x1d4>)
 8004076:	4872      	ldr	r0, [pc, #456]	; (8004240 <lwip_netconn_do_close_internal+0x1d8>)
 8004078:	f240 3243 	movw	r2, #835	; 0x343
 800407c:	f007 fc6d 	bl	800b95a <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004080:	7823      	ldrb	r3, [r4, #0]
 8004082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004086:	2b10      	cmp	r3, #16
 8004088:	d006      	beq.n	8004098 <lwip_netconn_do_close_internal+0x30>
 800408a:	4b6b      	ldr	r3, [pc, #428]	; (8004238 <lwip_netconn_do_close_internal+0x1d0>)
 800408c:	496d      	ldr	r1, [pc, #436]	; (8004244 <lwip_netconn_do_close_internal+0x1dc>)
 800408e:	486c      	ldr	r0, [pc, #432]	; (8004240 <lwip_netconn_do_close_internal+0x1d8>)
 8004090:	f44f 7251 	mov.w	r2, #836	; 0x344
 8004094:	f007 fc61 	bl	800b95a <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004098:	7863      	ldrb	r3, [r4, #1]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d006      	beq.n	80040ac <lwip_netconn_do_close_internal+0x44>
 800409e:	4b66      	ldr	r3, [pc, #408]	; (8004238 <lwip_netconn_do_close_internal+0x1d0>)
 80040a0:	4969      	ldr	r1, [pc, #420]	; (8004248 <lwip_netconn_do_close_internal+0x1e0>)
 80040a2:	4867      	ldr	r0, [pc, #412]	; (8004240 <lwip_netconn_do_close_internal+0x1d8>)
 80040a4:	f240 3245 	movw	r2, #837	; 0x345
 80040a8:	f007 fc57 	bl	800b95a <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	b933      	cbnz	r3, 80040be <lwip_netconn_do_close_internal+0x56>
 80040b0:	4b61      	ldr	r3, [pc, #388]	; (8004238 <lwip_netconn_do_close_internal+0x1d0>)
 80040b2:	4966      	ldr	r1, [pc, #408]	; (800424c <lwip_netconn_do_close_internal+0x1e4>)
 80040b4:	4862      	ldr	r0, [pc, #392]	; (8004240 <lwip_netconn_do_close_internal+0x1d8>)
 80040b6:	f240 3246 	movw	r2, #838	; 0x346
 80040ba:	f007 fc4e 	bl	800b95a <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80040be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c0:	b933      	cbnz	r3, 80040d0 <lwip_netconn_do_close_internal+0x68>
 80040c2:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <lwip_netconn_do_close_internal+0x1d0>)
 80040c4:	4962      	ldr	r1, [pc, #392]	; (8004250 <lwip_netconn_do_close_internal+0x1e8>)
 80040c6:	485e      	ldr	r0, [pc, #376]	; (8004240 <lwip_netconn_do_close_internal+0x1d8>)
 80040c8:	f240 3247 	movw	r2, #839	; 0x347
 80040cc:	f007 fc45 	bl	800b95a <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80040d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tpcb = conn->pcb.tcp;
 80040d2:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80040d4:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80040d6:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80040d8:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80040dc:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80040e0:	f000 8084 	beq.w	80041ec <lwip_netconn_do_close_internal+0x184>
  } else if (shut_rx &&
 80040e4:	f1b9 0f00 	cmp.w	r9, #0
 80040e8:	d005      	beq.n	80040f6 <lwip_netconn_do_close_internal+0x8e>
             ((tpcb->state == FIN_WAIT_1) ||
 80040ea:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80040ec:	1f5a      	subs	r2, r3, #5
 80040ee:	2a01      	cmp	r2, #1
 80040f0:	d97c      	bls.n	80041ec <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d07a      	beq.n	80041ec <lwip_netconn_do_close_internal+0x184>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80040f6:	f1b8 0f00 	cmp.w	r8, #0
 80040fa:	d011      	beq.n	8004120 <lwip_netconn_do_close_internal+0xb8>
 80040fc:	7eaf      	ldrb	r7, [r5, #26]
 80040fe:	f017 0710 	ands.w	r7, r7, #16
 8004102:	d173      	bne.n	80041ec <lwip_netconn_do_close_internal+0x184>
  if (tpcb->state == LISTEN) {
 8004104:	7d2b      	ldrb	r3, [r5, #20]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10c      	bne.n	8004124 <lwip_netconn_do_close_internal+0xbc>
    tcp_accept(tpcb, NULL);
 800410a:	2100      	movs	r1, #0
 800410c:	4628      	mov	r0, r5
 800410e:	f003 fa89 	bl	8007624 <tcp_accept>
  if (close) {
 8004112:	bb27      	cbnz	r7, 800415e <lwip_netconn_do_close_internal+0xf6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004114:	4642      	mov	r2, r8
 8004116:	4649      	mov	r1, r9
 8004118:	4628      	mov	r0, r5
 800411a:	f003 fe3b 	bl	8007d94 <tcp_shutdown>
 800411e:	e021      	b.n	8004164 <lwip_netconn_do_close_internal+0xfc>
 8004120:	4647      	mov	r7, r8
 8004122:	e7ef      	b.n	8004104 <lwip_netconn_do_close_internal+0x9c>
    if (shut_rx) {
 8004124:	f1b9 0f00 	cmp.w	r9, #0
 8004128:	d007      	beq.n	800413a <lwip_netconn_do_close_internal+0xd2>
      tcp_recv(tpcb, NULL);
 800412a:	2100      	movs	r1, #0
 800412c:	4628      	mov	r0, r5
 800412e:	f003 fa33 	bl	8007598 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004132:	2100      	movs	r1, #0
 8004134:	4628      	mov	r0, r5
 8004136:	f003 fa75 	bl	8007624 <tcp_accept>
    if (shut_tx) {
 800413a:	f1b8 0f00 	cmp.w	r8, #0
 800413e:	d003      	beq.n	8004148 <lwip_netconn_do_close_internal+0xe0>
      tcp_sent(tpcb, NULL);
 8004140:	2100      	movs	r1, #0
 8004142:	4628      	mov	r0, r5
 8004144:	f003 fa40 	bl	80075c8 <tcp_sent>
    if (close) {
 8004148:	2f00      	cmp	r7, #0
 800414a:	d0e3      	beq.n	8004114 <lwip_netconn_do_close_internal+0xac>
      tcp_poll(tpcb, NULL, 0);
 800414c:	2200      	movs	r2, #0
 800414e:	4611      	mov	r1, r2
 8004150:	4628      	mov	r0, r5
 8004152:	f003 fa6d 	bl	8007630 <tcp_poll>
      tcp_err(tpcb, NULL);
 8004156:	2100      	movs	r1, #0
 8004158:	4628      	mov	r0, r5
 800415a:	f003 fa4b 	bl	80075f4 <tcp_err>
      err = tcp_close(tpcb);
 800415e:	4628      	mov	r0, r5
 8004160:	f003 fd76 	bl	8007c50 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004164:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004166:	b160      	cbz	r0, 8004182 <lwip_netconn_do_close_internal+0x11a>
    if (err == ERR_MEM) {
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d10a      	bne.n	8004182 <lwip_netconn_do_close_internal+0x11a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800416c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800416e:	f893 b009 	ldrb.w	fp, [r3, #9]
 8004172:	f1bb 0f00 	cmp.w	fp, #0
 8004176:	d13f      	bne.n	80041f8 <lwip_netconn_do_close_internal+0x190>
        if (close) {
 8004178:	b11f      	cbz	r7, 8004182 <lwip_netconn_do_close_internal+0x11a>
          tcp_abort(tpcb);
 800417a:	4628      	mov	r0, r5
 800417c:	f003 fea6 	bl	8007ecc <tcp_abort>
          err = ERR_OK;
 8004180:	465e      	mov	r6, fp
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004184:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8004186:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800418c:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800418e:	b9ce      	cbnz	r6, 80041c4 <lwip_netconn_do_close_internal+0x15c>
      if (close) {
 8004190:	b137      	cbz	r7, 80041a0 <lwip_netconn_do_close_internal+0x138>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        conn->pcb.tcp = NULL;
 8004194:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004196:	b11b      	cbz	r3, 80041a0 <lwip_netconn_do_close_internal+0x138>
 8004198:	4632      	mov	r2, r6
 800419a:	2104      	movs	r1, #4
 800419c:	4620      	mov	r0, r4
 800419e:	4798      	blx	r3
      if (shut_rx) {
 80041a0:	f1b9 0f00 	cmp.w	r9, #0
 80041a4:	d005      	beq.n	80041b2 <lwip_netconn_do_close_internal+0x14a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80041a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041a8:	b163      	cbz	r3, 80041c4 <lwip_netconn_do_close_internal+0x15c>
 80041aa:	2200      	movs	r2, #0
 80041ac:	4611      	mov	r1, r2
 80041ae:	4620      	mov	r0, r4
 80041b0:	4798      	blx	r3
      if (shut_tx) {
 80041b2:	f1b8 0f00 	cmp.w	r8, #0
 80041b6:	d005      	beq.n	80041c4 <lwip_netconn_do_close_internal+0x15c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80041b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041ba:	b11b      	cbz	r3, 80041c4 <lwip_netconn_do_close_internal+0x15c>
 80041bc:	2200      	movs	r2, #0
 80041be:	2102      	movs	r1, #2
 80041c0:	4620      	mov	r0, r4
 80041c2:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 80041c4:	f006 fe42 	bl	800ae4c <sys_arch_protect>
 80041c8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80041cc:	330c      	adds	r3, #12
 80041ce:	bfa8      	it	ge
 80041d0:	7226      	strbge	r6, [r4, #8]
 80041d2:	f006 fe47 	bl	800ae64 <sys_arch_unprotect>
    if (delayed)
 80041d6:	f1ba 0f00 	cmp.w	sl, #0
 80041da:	d003      	beq.n	80041e4 <lwip_netconn_do_close_internal+0x17c>
      sys_sem_signal(op_completed_sem);
 80041dc:	f105 000c 	add.w	r0, r5, #12
 80041e0:	f006 fdec 	bl	800adbc <sys_sem_signal>
    return ERR_OK;
 80041e4:	2600      	movs	r6, #0
}
 80041e6:	4630      	mov	r0, r6
 80041e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_arg(tpcb, NULL);
 80041ec:	2100      	movs	r1, #0
 80041ee:	4628      	mov	r0, r5
 80041f0:	f003 f9ce 	bl	8007590 <tcp_arg>
 80041f4:	2701      	movs	r7, #1
 80041f6:	e785      	b.n	8004104 <lwip_netconn_do_close_internal+0x9c>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80041f8:	7d2b      	ldrb	r3, [r5, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d106      	bne.n	800420c <lwip_netconn_do_close_internal+0x1a4>
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <lwip_netconn_do_close_internal+0x1d0>)
 8004200:	4914      	ldr	r1, [pc, #80]	; (8004254 <lwip_netconn_do_close_internal+0x1ec>)
 8004202:	480f      	ldr	r0, [pc, #60]	; (8004240 <lwip_netconn_do_close_internal+0x1d8>)
 8004204:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004208:	f007 fba7 	bl	800b95a <iprintf>
    if (shut_tx) {
 800420c:	f1b8 0f00 	cmp.w	r8, #0
 8004210:	d003      	beq.n	800421a <lwip_netconn_do_close_internal+0x1b2>
      tcp_sent(tpcb, sent_tcp);
 8004212:	4911      	ldr	r1, [pc, #68]	; (8004258 <lwip_netconn_do_close_internal+0x1f0>)
 8004214:	4628      	mov	r0, r5
 8004216:	f003 f9d7 	bl	80075c8 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 800421a:	2201      	movs	r2, #1
 800421c:	4628      	mov	r0, r5
 800421e:	490f      	ldr	r1, [pc, #60]	; (800425c <lwip_netconn_do_close_internal+0x1f4>)
 8004220:	f003 fa06 	bl	8007630 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004224:	4628      	mov	r0, r5
 8004226:	490e      	ldr	r1, [pc, #56]	; (8004260 <lwip_netconn_do_close_internal+0x1f8>)
 8004228:	f003 f9e4 	bl	80075f4 <tcp_err>
    tcp_arg(tpcb, conn);
 800422c:	4621      	mov	r1, r4
 800422e:	4628      	mov	r0, r5
 8004230:	f003 f9ae 	bl	8007590 <tcp_arg>
 8004234:	e7d7      	b.n	80041e6 <lwip_netconn_do_close_internal+0x17e>
 8004236:	bf00      	nop
 8004238:	0800c56a 	.word	0x0800c56a
 800423c:	0800c1bc 	.word	0x0800c1bc
 8004240:	0800c0d7 	.word	0x0800c0d7
 8004244:	0800c261 	.word	0x0800c261
 8004248:	0800c27f 	.word	0x0800c27f
 800424c:	0800c2a3 	.word	0x0800c2a3
 8004250:	0800c214 	.word	0x0800c214
 8004254:	0800c2b6 	.word	0x0800c2b6
 8004258:	080043a1 	.word	0x080043a1
 800425c:	08004265 	.word	0x08004265
 8004260:	08003c85 	.word	0x08003c85

08004264 <poll_tcp>:
{
 8004264:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004266:	4604      	mov	r4, r0
 8004268:	b930      	cbnz	r0, 8004278 <poll_tcp+0x14>
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <poll_tcp+0x6c>)
 800426c:	4919      	ldr	r1, [pc, #100]	; (80042d4 <poll_tcp+0x70>)
 800426e:	481a      	ldr	r0, [pc, #104]	; (80042d8 <poll_tcp+0x74>)
 8004270:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004274:	f007 fb71 	bl	800b95a <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8004278:	7861      	ldrb	r1, [r4, #1]
 800427a:	2901      	cmp	r1, #1
 800427c:	d11b      	bne.n	80042b6 <poll_tcp+0x52>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800427e:	4620      	mov	r0, r4
 8004280:	f7ff fdf4 	bl	8003e6c <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004284:	7f23      	ldrb	r3, [r4, #28]
 8004286:	06da      	lsls	r2, r3, #27
 8004288:	d513      	bpl.n	80042b2 <poll_tcp+0x4e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	b18a      	cbz	r2, 80042b2 <poll_tcp+0x4e>
 800428e:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 8004292:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8004296:	d30c      	bcc.n	80042b2 <poll_tcp+0x4e>
 8004298:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 800429c:	2a04      	cmp	r2, #4
 800429e:	d808      	bhi.n	80042b2 <poll_tcp+0x4e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80042a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042a8:	b11b      	cbz	r3, 80042b2 <poll_tcp+0x4e>
 80042aa:	2200      	movs	r2, #0
 80042ac:	2102      	movs	r1, #2
 80042ae:	4620      	mov	r0, r4
 80042b0:	4798      	blx	r3
}
 80042b2:	2000      	movs	r0, #0
 80042b4:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 80042b6:	2904      	cmp	r1, #4
 80042b8:	d1e4      	bne.n	8004284 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80042ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042bc:	b11a      	cbz	r2, 80042c6 <poll_tcp+0x62>
 80042be:	7a53      	ldrb	r3, [r2, #9]
 80042c0:	b10b      	cbz	r3, 80042c6 <poll_tcp+0x62>
      conn->current_msg->msg.sd.polls_left--;
 80042c2:	3b01      	subs	r3, #1
 80042c4:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80042c6:	2101      	movs	r1, #1
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff fecd 	bl	8004068 <lwip_netconn_do_close_internal>
 80042ce:	e7d9      	b.n	8004284 <poll_tcp+0x20>
 80042d0:	0800c56a 	.word	0x0800c56a
 80042d4:	0800c207 	.word	0x0800c207
 80042d8:	0800c0d7 	.word	0x0800c0d7

080042dc <recv_tcp>:
{
 80042dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e0:	4605      	mov	r5, r0
 80042e2:	4616      	mov	r6, r2
 80042e4:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80042e6:	460f      	mov	r7, r1
 80042e8:	b929      	cbnz	r1, 80042f6 <recv_tcp+0x1a>
 80042ea:	4b28      	ldr	r3, [pc, #160]	; (800438c <recv_tcp+0xb0>)
 80042ec:	4928      	ldr	r1, [pc, #160]	; (8004390 <recv_tcp+0xb4>)
 80042ee:	4829      	ldr	r0, [pc, #164]	; (8004394 <recv_tcp+0xb8>)
 80042f0:	22f9      	movs	r2, #249	; 0xf9
 80042f2:	f007 fb32 	bl	800b95a <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80042f6:	bb9d      	cbnz	r5, 8004360 <recv_tcp+0x84>
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <recv_tcp+0xb0>)
 80042fa:	4927      	ldr	r1, [pc, #156]	; (8004398 <recv_tcp+0xbc>)
 80042fc:	4825      	ldr	r0, [pc, #148]	; (8004394 <recv_tcp+0xb8>)
 80042fe:	22fa      	movs	r2, #250	; 0xfa
 8004300:	f007 fb2b 	bl	800b95a <iprintf>
    return ERR_VAL;
 8004304:	f06f 0405 	mvn.w	r4, #5
}
 8004308:	4620      	mov	r0, r4
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      tcp_recved(pcb, p->tot_len);
 800430e:	4638      	mov	r0, r7
 8004310:	8931      	ldrh	r1, [r6, #8]
 8004312:	f003 f8d3 	bl	80074bc <tcp_recved>
      pbuf_free(p);
 8004316:	4630      	mov	r0, r6
 8004318:	f002 fd5c 	bl	8006dd4 <pbuf_free>
 800431c:	e7f4      	b.n	8004308 <recv_tcp+0x2c>
  if (err != ERR_OK) {
 800431e:	f1b8 0f00 	cmp.w	r8, #0
 8004322:	d009      	beq.n	8004338 <recv_tcp+0x5c>
    NETCONN_SET_SAFE_ERR(conn, err);
 8004324:	f006 fd92 	bl	800ae4c <sys_arch_protect>
 8004328:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800432c:	330c      	adds	r3, #12
 800432e:	bfa8      	it	ge
 8004330:	f885 8008 	strbge.w	r8, [r5, #8]
 8004334:	f006 fd96 	bl	800ae64 <sys_arch_unprotect>
  if (p != NULL) {
 8004338:	b16e      	cbz	r6, 8004356 <recv_tcp+0x7a>
    len = p->tot_len;
 800433a:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800433c:	4631      	mov	r1, r6
 800433e:	4648      	mov	r0, r9
 8004340:	f006 fcc4 	bl	800accc <sys_mbox_trypost>
 8004344:	4604      	mov	r4, r0
 8004346:	b940      	cbnz	r0, 800435a <recv_tcp+0x7e>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004348:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800434a:	b1eb      	cbz	r3, 8004388 <recv_tcp+0xac>
 800434c:	4601      	mov	r1, r0
 800434e:	463a      	mov	r2, r7
 8004350:	4628      	mov	r0, r5
 8004352:	4798      	blx	r3
 8004354:	e7d8      	b.n	8004308 <recv_tcp+0x2c>
    len = 0;
 8004356:	4637      	mov	r7, r6
 8004358:	e7f0      	b.n	800433c <recv_tcp+0x60>
    return ERR_MEM;
 800435a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800435e:	e7d3      	b.n	8004308 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004360:	686b      	ldr	r3, [r5, #4]
 8004362:	429f      	cmp	r7, r3
 8004364:	d006      	beq.n	8004374 <recv_tcp+0x98>
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <recv_tcp+0xb0>)
 8004368:	490c      	ldr	r1, [pc, #48]	; (800439c <recv_tcp+0xc0>)
 800436a:	480a      	ldr	r0, [pc, #40]	; (8004394 <recv_tcp+0xb8>)
 800436c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004370:	f007 faf3 	bl	800b95a <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004374:	f105 0910 	add.w	r9, r5, #16
 8004378:	4648      	mov	r0, r9
 800437a:	f006 fce4 	bl	800ad46 <sys_mbox_valid>
 800437e:	4604      	mov	r4, r0
 8004380:	2800      	cmp	r0, #0
 8004382:	d1cc      	bne.n	800431e <recv_tcp+0x42>
    if (p != NULL) {
 8004384:	2e00      	cmp	r6, #0
 8004386:	d1c2      	bne.n	800430e <recv_tcp+0x32>
    return ERR_OK;
 8004388:	2400      	movs	r4, #0
 800438a:	e7bd      	b.n	8004308 <recv_tcp+0x2c>
 800438c:	0800c56a 	.word	0x0800c56a
 8004390:	0800c50b 	.word	0x0800c50b
 8004394:	0800c0d7 	.word	0x0800c0d7
 8004398:	0800c52d 	.word	0x0800c52d
 800439c:	0800c54c 	.word	0x0800c54c

080043a0 <sent_tcp>:
{
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80043a4:	4604      	mov	r4, r0
 80043a6:	b970      	cbnz	r0, 80043c6 <sent_tcp+0x26>
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <sent_tcp+0x60>)
 80043aa:	4916      	ldr	r1, [pc, #88]	; (8004404 <sent_tcp+0x64>)
 80043ac:	4816      	ldr	r0, [pc, #88]	; (8004408 <sent_tcp+0x68>)
 80043ae:	f240 1261 	movw	r2, #353	; 0x161
 80043b2:	f007 fad2 	bl	800b95a <iprintf>
}
 80043b6:	2000      	movs	r0, #0
 80043b8:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80043ba:	2904      	cmp	r1, #4
 80043bc:	d108      	bne.n	80043d0 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80043be:	2101      	movs	r1, #1
 80043c0:	f7ff fe52 	bl	8004068 <lwip_netconn_do_close_internal>
 80043c4:	e004      	b.n	80043d0 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 80043c6:	7841      	ldrb	r1, [r0, #1]
 80043c8:	2901      	cmp	r1, #1
 80043ca:	d1f6      	bne.n	80043ba <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80043cc:	f7ff fd4e 	bl	8003e6c <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ef      	beq.n	80043b6 <sent_tcp+0x16>
 80043d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80043da:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80043de:	d3ea      	bcc.n	80043b6 <sent_tcp+0x16>
 80043e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d8e6      	bhi.n	80043b6 <sent_tcp+0x16>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80043e8:	7f23      	ldrb	r3, [r4, #28]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80043f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0df      	beq.n	80043b6 <sent_tcp+0x16>
 80043f6:	462a      	mov	r2, r5
 80043f8:	2102      	movs	r1, #2
 80043fa:	4620      	mov	r0, r4
 80043fc:	4798      	blx	r3
  return ERR_OK;
 80043fe:	e7da      	b.n	80043b6 <sent_tcp+0x16>
 8004400:	0800c56a 	.word	0x0800c56a
 8004404:	0800c207 	.word	0x0800c207
 8004408:	0800c0d7 	.word	0x0800c0d7

0800440c <lwip_netconn_do_newconn>:
{
 800440c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800440e:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8004410:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 8004412:	7103      	strb	r3, [r0, #4]
{
 8004414:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8004416:	6868      	ldr	r0, [r5, #4]
 8004418:	bb28      	cbnz	r0, 8004466 <lwip_netconn_do_newconn+0x5a>
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800441a:	782b      	ldrb	r3, [r5, #0]
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004420:	2b10      	cmp	r3, #16
 8004422:	d014      	beq.n	800444e <lwip_netconn_do_newconn+0x42>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d11c      	bne.n	8004462 <lwip_netconn_do_newconn+0x56>
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8004428:	f006 fb8c 	bl	800ab44 <udp_new_ip_type>
 800442c:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	6850      	ldr	r0, [r2, #4]
 8004432:	b150      	cbz	r0, 800444a <lwip_netconn_do_newconn+0x3e>
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8004434:	7813      	ldrb	r3, [r2, #0]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004436:	4914      	ldr	r1, [pc, #80]	; (8004488 <lwip_netconn_do_newconn+0x7c>)
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8004438:	2b22      	cmp	r3, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800443a:	bf04      	itt	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	7403      	strbeq	r3, [r0, #16]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004440:	f006 fb56 	bl	800aaf0 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	b96b      	cbnz	r3, 8004466 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800444a:	23ff      	movs	r3, #255	; 0xff
 800444c:	e00a      	b.n	8004464 <lwip_netconn_do_newconn+0x58>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800444e:	f003 fe07 	bl	8008060 <tcp_new_ip_type>
 8004452:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	6843      	ldr	r3, [r0, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f6      	beq.n	800444a <lwip_netconn_do_newconn+0x3e>
      setup_tcp(msg->conn);
 800445c:	f7ff fbf0 	bl	8003c40 <setup_tcp>
 8004460:	e7f0      	b.n	8004444 <lwip_netconn_do_newconn+0x38>
    msg->err = ERR_VAL;
 8004462:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8004464:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	b163      	cbz	r3, 8004484 <lwip_netconn_do_newconn+0x78>
 800446a:	f006 fcef 	bl	800ae4c <sys_arch_protect>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004474:	320c      	adds	r2, #12
 8004476:	bfa4      	itt	ge
 8004478:	7922      	ldrbge	r2, [r4, #4]
 800447a:	721a      	strbge	r2, [r3, #8]
}
 800447c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 8004480:	f006 bcf0 	b.w	800ae64 <sys_arch_unprotect>
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	bf00      	nop
 8004488:	08003b91 	.word	0x08003b91

0800448c <netconn_alloc>:
{
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004490:	2007      	movs	r0, #7
{
 8004492:	460f      	mov	r7, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004494:	f002 fafc 	bl	8006a90 <memp_malloc>
  if (conn == NULL) {
 8004498:	4604      	mov	r4, r0
 800449a:	b3a8      	cbz	r0, 8004508 <netconn_alloc+0x7c>
  conn->type = t;
 800449c:	7005      	strb	r5, [r0, #0]
  switch(NETCONNTYPE_GROUP(t)) {
 800449e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->last_err = ERR_OK;
 80044a2:	2300      	movs	r3, #0
  switch(NETCONNTYPE_GROUP(t)) {
 80044a4:	2d10      	cmp	r5, #16
  conn->last_err = ERR_OK;
 80044a6:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80044a8:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 80044aa:	d00e      	beq.n	80044ca <netconn_alloc+0x3e>
 80044ac:	2d20      	cmp	r5, #32
 80044ae:	d00c      	beq.n	80044ca <netconn_alloc+0x3e>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <netconn_alloc+0x80>)
 80044b2:	4917      	ldr	r1, [pc, #92]	; (8004510 <netconn_alloc+0x84>)
 80044b4:	4817      	ldr	r0, [pc, #92]	; (8004514 <netconn_alloc+0x88>)
 80044b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80044ba:	f007 fa4e 	bl	800b95a <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80044be:	4621      	mov	r1, r4
 80044c0:	2007      	movs	r0, #7
 80044c2:	f002 fb01 	bl	8006ac8 <memp_free>
  return NULL;
 80044c6:	2400      	movs	r4, #0
 80044c8:	e01e      	b.n	8004508 <netconn_alloc+0x7c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80044ca:	f104 0610 	add.w	r6, r4, #16
 80044ce:	2106      	movs	r1, #6
 80044d0:	4630      	mov	r0, r6
 80044d2:	f006 fbd3 	bl	800ac7c <sys_mbox_new>
 80044d6:	4601      	mov	r1, r0
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1f0      	bne.n	80044be <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80044dc:	f104 000c 	add.w	r0, r4, #12
 80044e0:	f006 fc39 	bl	800ad56 <sys_sem_new>
 80044e4:	4605      	mov	r5, r0
 80044e6:	b118      	cbz	r0, 80044f0 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 80044e8:	4630      	mov	r0, r6
 80044ea:	f006 fbd9 	bl	800aca0 <sys_mbox_free>
    goto free_and_return;
 80044ee:	e7e6      	b.n	80044be <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80044f0:	f104 0014 	add.w	r0, r4, #20
 80044f4:	f006 fc2c 	bl	800ad50 <sys_mbox_set_invalid>
  conn->socket       = -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  conn->state        = NETCONN_NONE;
 80044fc:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 80044fe:	61a3      	str	r3, [r4, #24]
  conn->callback     = callback;
 8004500:	62a7      	str	r7, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004502:	6265      	str	r5, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004504:	6225      	str	r5, [r4, #32]
  conn->flags = 0;
 8004506:	7725      	strb	r5, [r4, #28]
}
 8004508:	4620      	mov	r0, r4
 800450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450c:	0800c56a 	.word	0x0800c56a
 8004510:	0800c441 	.word	0x0800c441
 8004514:	0800c0d7 	.word	0x0800c0d7

08004518 <netconn_free>:
{
 8004518:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800451a:	6843      	ldr	r3, [r0, #4]
{
 800451c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800451e:	b133      	cbz	r3, 800452e <netconn_free+0x16>
 8004520:	4b16      	ldr	r3, [pc, #88]	; (800457c <netconn_free+0x64>)
 8004522:	4917      	ldr	r1, [pc, #92]	; (8004580 <netconn_free+0x68>)
 8004524:	4817      	ldr	r0, [pc, #92]	; (8004584 <netconn_free+0x6c>)
 8004526:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800452a:	f007 fa16 	bl	800b95a <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800452e:	f104 0010 	add.w	r0, r4, #16
 8004532:	f006 fc08 	bl	800ad46 <sys_mbox_valid>
 8004536:	b130      	cbz	r0, 8004546 <netconn_free+0x2e>
 8004538:	4b10      	ldr	r3, [pc, #64]	; (800457c <netconn_free+0x64>)
 800453a:	4913      	ldr	r1, [pc, #76]	; (8004588 <netconn_free+0x70>)
 800453c:	4811      	ldr	r0, [pc, #68]	; (8004584 <netconn_free+0x6c>)
 800453e:	f240 22e2 	movw	r2, #738	; 0x2e2
 8004542:	f007 fa0a 	bl	800b95a <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004546:	f104 0014 	add.w	r0, r4, #20
 800454a:	f006 fbfc 	bl	800ad46 <sys_mbox_valid>
 800454e:	b130      	cbz	r0, 800455e <netconn_free+0x46>
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <netconn_free+0x64>)
 8004552:	490e      	ldr	r1, [pc, #56]	; (800458c <netconn_free+0x74>)
 8004554:	480b      	ldr	r0, [pc, #44]	; (8004584 <netconn_free+0x6c>)
 8004556:	f240 22e5 	movw	r2, #741	; 0x2e5
 800455a:	f007 f9fe 	bl	800b95a <iprintf>
  sys_sem_free(&conn->op_completed);
 800455e:	f104 050c 	add.w	r5, r4, #12
 8004562:	4628      	mov	r0, r5
 8004564:	f006 fc2d 	bl	800adc2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004568:	4628      	mov	r0, r5
 800456a:	f006 fc32 	bl	800add2 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800456e:	4621      	mov	r1, r4
 8004570:	2007      	movs	r0, #7
}
 8004572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8004576:	f002 baa7 	b.w	8006ac8 <memp_free>
 800457a:	bf00      	nop
 800457c:	0800c56a 	.word	0x0800c56a
 8004580:	0800c467 	.word	0x0800c467
 8004584:	0800c0d7 	.word	0x0800c0d7
 8004588:	0800c495 	.word	0x0800c495
 800458c:	0800c4cf 	.word	0x0800c4cf

08004590 <netconn_drain>:
{
 8004590:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004592:	f100 0510 	add.w	r5, r0, #16
{
 8004596:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004598:	4628      	mov	r0, r5
 800459a:	f006 fbd4 	bl	800ad46 <sys_mbox_valid>
 800459e:	b9b0      	cbnz	r0, 80045ce <netconn_drain+0x3e>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80045a0:	3414      	adds	r4, #20
 80045a2:	4620      	mov	r0, r4
 80045a4:	f006 fbcf 	bl	800ad46 <sys_mbox_valid>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d13d      	bne.n	8004628 <netconn_drain+0x98>
}
 80045ac:	b002      	add	sp, #8
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80045b0:	7823      	ldrb	r3, [r4, #0]
 80045b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d116      	bne.n	80045e8 <netconn_drain+0x58>
        if (mem != NULL) {
 80045ba:	9e01      	ldr	r6, [sp, #4]
 80045bc:	b13e      	cbz	r6, 80045ce <netconn_drain+0x3e>
          if (conn->pcb.tcp != NULL) {
 80045be:	6860      	ldr	r0, [r4, #4]
 80045c0:	b110      	cbz	r0, 80045c8 <netconn_drain+0x38>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80045c2:	8931      	ldrh	r1, [r6, #8]
 80045c4:	f002 ff7a 	bl	80074bc <tcp_recved>
          pbuf_free(p);
 80045c8:	4630      	mov	r0, r6
 80045ca:	f002 fc03 	bl	8006dd4 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80045ce:	a901      	add	r1, sp, #4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f006 fba7 	bl	800ad24 <sys_arch_mbox_tryfetch>
 80045d6:	3001      	adds	r0, #1
 80045d8:	d1ea      	bne.n	80045b0 <netconn_drain+0x20>
    sys_mbox_free(&conn->recvmbox);
 80045da:	4628      	mov	r0, r5
 80045dc:	f006 fb60 	bl	800aca0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80045e0:	4628      	mov	r0, r5
 80045e2:	f006 fbb5 	bl	800ad50 <sys_mbox_set_invalid>
 80045e6:	e7db      	b.n	80045a0 <netconn_drain+0x10>
        netbuf_delete((struct netbuf *)mem);
 80045e8:	9801      	ldr	r0, [sp, #4]
 80045ea:	f000 fa05 	bl	80049f8 <netbuf_delete>
 80045ee:	e7ee      	b.n	80045ce <netconn_drain+0x3e>
      if (mem != &netconn_aborted) {
 80045f0:	9d01      	ldr	r5, [sp, #4]
 80045f2:	42b5      	cmp	r5, r6
 80045f4:	d00b      	beq.n	800460e <netconn_drain+0x7e>
        netconn_drain(newconn);
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7ff ffca 	bl	8004590 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80045fc:	6868      	ldr	r0, [r5, #4]
 80045fe:	b118      	cbz	r0, 8004608 <netconn_drain+0x78>
          tcp_abort(newconn->pcb.tcp);
 8004600:	f003 fc64 	bl	8007ecc <tcp_abort>
          newconn->pcb.tcp = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	606b      	str	r3, [r5, #4]
        netconn_free(newconn);
 8004608:	4628      	mov	r0, r5
 800460a:	f7ff ff85 	bl	8004518 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800460e:	a901      	add	r1, sp, #4
 8004610:	4620      	mov	r0, r4
 8004612:	f006 fb87 	bl	800ad24 <sys_arch_mbox_tryfetch>
 8004616:	3001      	adds	r0, #1
 8004618:	d1ea      	bne.n	80045f0 <netconn_drain+0x60>
    sys_mbox_free(&conn->acceptmbox);
 800461a:	4620      	mov	r0, r4
 800461c:	f006 fb40 	bl	800aca0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004620:	4620      	mov	r0, r4
 8004622:	f006 fb95 	bl	800ad50 <sys_mbox_set_invalid>
}
 8004626:	e7c1      	b.n	80045ac <netconn_drain+0x1c>
      if (mem != &netconn_aborted) {
 8004628:	4e00      	ldr	r6, [pc, #0]	; (800462c <netconn_drain+0x9c>)
 800462a:	e7f0      	b.n	800460e <netconn_drain+0x7e>
 800462c:	2000426c 	.word	0x2000426c

08004630 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8004630:	6803      	ldr	r3, [r0, #0]
{
 8004632:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8004634:	785d      	ldrb	r5, [r3, #1]
{
 8004636:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8004638:	b16d      	cbz	r5, 8004656 <lwip_netconn_do_delconn+0x26>
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004640:	2b10      	cmp	r3, #16
 8004642:	d006      	beq.n	8004652 <lwip_netconn_do_delconn+0x22>
 8004644:	4b40      	ldr	r3, [pc, #256]	; (8004748 <lwip_netconn_do_delconn+0x118>)
 8004646:	4941      	ldr	r1, [pc, #260]	; (800474c <lwip_netconn_do_delconn+0x11c>)
 8004648:	4841      	ldr	r0, [pc, #260]	; (8004750 <lwip_netconn_do_delconn+0x120>)
 800464a:	f240 4201 	movw	r2, #1025	; 0x401
 800464e:	f007 f984 	bl	800b95a <iprintf>
  if (((state != NETCONN_NONE) &&
 8004652:	2d02      	cmp	r5, #2
 8004654:	d121      	bne.n	800469a <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8004656:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8004658:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800465a:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800465c:	f7ff ff98 	bl	8004590 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	6858      	ldr	r0, [r3, #4]
 8004664:	b160      	cbz	r0, 8004680 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800466c:	2a10      	cmp	r2, #16
 800466e:	d032      	beq.n	80046d6 <lwip_netconn_do_delconn+0xa6>
 8004670:	2a20      	cmp	r2, #32
 8004672:	d102      	bne.n	800467a <lwip_netconn_do_delconn+0x4a>
        msg->conn->pcb.udp->recv_arg = NULL;
 8004674:	61c5      	str	r5, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
 8004676:	f006 fa3f 	bl	800aaf8 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004684:	b113      	cbz	r3, 800468c <lwip_netconn_do_delconn+0x5c>
 8004686:	2200      	movs	r2, #0
 8004688:	4611      	mov	r1, r2
 800468a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004690:	b15b      	cbz	r3, 80046aa <lwip_netconn_do_delconn+0x7a>
 8004692:	2200      	movs	r2, #0
 8004694:	2102      	movs	r1, #2
 8004696:	4798      	blx	r3
 8004698:	e007      	b.n	80046aa <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 800469a:	2d03      	cmp	r5, #3
 800469c:	d103      	bne.n	80046a6 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	7f1b      	ldrb	r3, [r3, #28]
 80046a2:	075b      	lsls	r3, r3, #29
 80046a4:	d4d7      	bmi.n	8004656 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 80046a6:	23fb      	movs	r3, #251	; 0xfb
 80046a8:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80046aa:	6820      	ldr	r0, [r4, #0]
 80046ac:	300c      	adds	r0, #12
 80046ae:	f006 fb8b 	bl	800adc8 <sys_sem_valid>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d046      	beq.n	8004744 <lwip_netconn_do_delconn+0x114>
    TCPIP_APIMSG_ACK(msg);
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d043      	beq.n	8004744 <lwip_netconn_do_delconn+0x114>
 80046bc:	f006 fbc6 	bl	800ae4c <sys_arch_protect>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80046c6:	320c      	adds	r2, #12
 80046c8:	bfa4      	itt	ge
 80046ca:	7922      	ldrbge	r2, [r4, #4]
 80046cc:	721a      	strbge	r2, [r3, #8]
}
 80046ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TCPIP_APIMSG_ACK(msg);
 80046d2:	f006 bbc7 	b.w	800ae64 <sys_arch_unprotect>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80046d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d8:	b90a      	cbnz	r2, 80046de <lwip_netconn_do_delconn+0xae>
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	b133      	cbz	r3, 80046ec <lwip_netconn_do_delconn+0xbc>
 80046de:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <lwip_netconn_do_delconn+0x118>)
 80046e0:	491c      	ldr	r1, [pc, #112]	; (8004754 <lwip_netconn_do_delconn+0x124>)
 80046e2:	481b      	ldr	r0, [pc, #108]	; (8004750 <lwip_netconn_do_delconn+0x120>)
 80046e4:	f240 4235 	movw	r2, #1077	; 0x435
 80046e8:	f007 f937 	bl	800b95a <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	2304      	movs	r3, #4
 80046f0:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80046f2:	2303      	movs	r3, #3
 80046f4:	7223      	strb	r3, [r4, #8]
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80046f6:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 80046f8:	6244      	str	r4, [r0, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80046fa:	f7ff fcb5 	bl	8004068 <lwip_netconn_do_close_internal>
 80046fe:	b308      	cbz	r0, 8004744 <lwip_netconn_do_delconn+0x114>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d006      	beq.n	8004716 <lwip_netconn_do_delconn+0xe6>
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <lwip_netconn_do_delconn+0x118>)
 800470a:	4913      	ldr	r1, [pc, #76]	; (8004758 <lwip_netconn_do_delconn+0x128>)
 800470c:	4810      	ldr	r0, [pc, #64]	; (8004750 <lwip_netconn_do_delconn+0x120>)
 800470e:	f240 423b 	movw	r2, #1083	; 0x43b
 8004712:	f007 f922 	bl	800b95a <iprintf>
          UNLOCK_TCPIP_CORE();
 8004716:	4811      	ldr	r0, [pc, #68]	; (800475c <lwip_netconn_do_delconn+0x12c>)
 8004718:	f006 fb7e 	bl	800ae18 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	2100      	movs	r1, #0
 8004720:	300c      	adds	r0, #12
 8004722:	f006 fb30 	bl	800ad86 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8004726:	480d      	ldr	r0, [pc, #52]	; (800475c <lwip_netconn_do_delconn+0x12c>)
 8004728:	f006 fb71 	bl	800ae0e <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	b143      	cbz	r3, 8004744 <lwip_netconn_do_delconn+0x114>
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <lwip_netconn_do_delconn+0x118>)
 8004734:	4908      	ldr	r1, [pc, #32]	; (8004758 <lwip_netconn_do_delconn+0x128>)
 8004736:	4806      	ldr	r0, [pc, #24]	; (8004750 <lwip_netconn_do_delconn+0x120>)
 8004738:	f240 423f 	movw	r2, #1087	; 0x43f
}
 800473c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8004740:	f007 b90b 	b.w	800b95a <iprintf>
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	bf00      	nop
 8004748:	0800c56a 	.word	0x0800c56a
 800474c:	0800c367 	.word	0x0800c367
 8004750:	0800c0d7 	.word	0x0800c0d7
 8004754:	0800c37b 	.word	0x0800c37b
 8004758:	0800c396 	.word	0x0800c396
 800475c:	20004270 	.word	0x20004270

08004760 <lwip_netconn_do_connect>:
{
 8004760:	b570      	push	{r4, r5, r6, lr}
  if (msg->conn->pcb.tcp == NULL) {
 8004762:	6803      	ldr	r3, [r0, #0]
{
 8004764:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8004766:	6858      	ldr	r0, [r3, #4]
 8004768:	b910      	cbnz	r0, 8004770 <lwip_netconn_do_connect+0x10>
    msg->err = ERR_CLSD;
 800476a:	23f1      	movs	r3, #241	; 0xf1
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 800476c:	7123      	strb	r3, [r4, #4]
      break;
 800476e:	e00b      	b.n	8004788 <lwip_netconn_do_connect+0x28>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004776:	2a10      	cmp	r2, #16
 8004778:	d016      	beq.n	80047a8 <lwip_netconn_do_connect+0x48>
 800477a:	2a20      	cmp	r2, #32
 800477c:	d151      	bne.n	8004822 <lwip_netconn_do_connect+0xc2>
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800477e:	89a2      	ldrh	r2, [r4, #12]
 8004780:	68a1      	ldr	r1, [r4, #8]
 8004782:	f006 f985 	bl	800aa90 <udp_connect>
 8004786:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d052      	beq.n	8004834 <lwip_netconn_do_connect+0xd4>
 800478e:	f006 fb5d 	bl	800ae4c <sys_arch_protect>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004798:	320c      	adds	r2, #12
 800479a:	bfa4      	itt	ge
 800479c:	7922      	ldrbge	r2, [r4, #4]
 800479e:	721a      	strbge	r2, [r3, #8]
}
 80047a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TCPIP_APIMSG_ACK(msg);
 80047a4:	f006 bb5e 	b.w	800ae64 <sys_arch_unprotect>
      if (msg->conn->state == NETCONN_CONNECT) {
 80047a8:	785a      	ldrb	r2, [r3, #1]
 80047aa:	2a03      	cmp	r2, #3
 80047ac:	d101      	bne.n	80047b2 <lwip_netconn_do_connect+0x52>
        msg->err = ERR_ALREADY;
 80047ae:	23f7      	movs	r3, #247	; 0xf7
 80047b0:	e7dc      	b.n	800476c <lwip_netconn_do_connect+0xc>
      } else if (msg->conn->state != NETCONN_NONE) {
 80047b2:	b10a      	cbz	r2, 80047b8 <lwip_netconn_do_connect+0x58>
        msg->err = ERR_ISCONN;
 80047b4:	23f6      	movs	r3, #246	; 0xf6
 80047b6:	e7d9      	b.n	800476c <lwip_netconn_do_connect+0xc>
        setup_tcp(msg->conn);
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fa41 	bl	8003c40 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80047be:	6820      	ldr	r0, [r4, #0]
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <lwip_netconn_do_connect+0xd8>)
 80047c2:	89a2      	ldrh	r2, [r4, #12]
 80047c4:	68a1      	ldr	r1, [r4, #8]
 80047c6:	6840      	ldr	r0, [r0, #4]
 80047c8:	f003 fc6a 	bl	80080a0 <tcp_connect>
 80047cc:	7120      	strb	r0, [r4, #4]
        if (msg->err == ERR_OK) {
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d1da      	bne.n	8004788 <lwip_netconn_do_connect+0x28>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	7f13      	ldrb	r3, [r2, #28]
          msg->conn->state = NETCONN_CONNECT;
 80047d6:	2103      	movs	r1, #3
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80047d8:	f013 0502 	ands.w	r5, r3, #2
          msg->conn->state = NETCONN_CONNECT;
 80047dc:	7051      	strb	r1, [r2, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80047de:	d004      	beq.n	80047ea <lwip_netconn_do_connect+0x8a>
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	7713      	strb	r3, [r2, #28]
            msg->err = ERR_INPROGRESS;
 80047e6:	23fb      	movs	r3, #251	; 0xfb
 80047e8:	e7c0      	b.n	800476c <lwip_netconn_do_connect+0xc>
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	7713      	strb	r3, [r2, #28]
            msg->conn->current_msg = msg;
 80047f0:	6254      	str	r4, [r2, #36]	; 0x24
            UNLOCK_TCPIP_CORE();
 80047f2:	4812      	ldr	r0, [pc, #72]	; (800483c <lwip_netconn_do_connect+0xdc>)
 80047f4:	f006 fb10 	bl	800ae18 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	4629      	mov	r1, r5
 80047fc:	300c      	adds	r0, #12
 80047fe:	f006 fac2 	bl	800ad86 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8004802:	480e      	ldr	r0, [pc, #56]	; (800483c <lwip_netconn_do_connect+0xdc>)
 8004804:	f006 fb03 	bl	800ae0e <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d111      	bne.n	8004834 <lwip_netconn_do_connect+0xd4>
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <lwip_netconn_do_connect+0xe0>)
 8004812:	490c      	ldr	r1, [pc, #48]	; (8004844 <lwip_netconn_do_connect+0xe4>)
 8004814:	480c      	ldr	r0, [pc, #48]	; (8004848 <lwip_netconn_do_connect+0xe8>)
 8004816:	f240 42e9 	movw	r2, #1257	; 0x4e9
}
 800481a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800481e:	f007 b89c 	b.w	800b95a <iprintf>
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <lwip_netconn_do_connect+0xe0>)
 8004824:	4909      	ldr	r1, [pc, #36]	; (800484c <lwip_netconn_do_connect+0xec>)
 8004826:	4808      	ldr	r0, [pc, #32]	; (8004848 <lwip_netconn_do_connect+0xe8>)
 8004828:	f240 42f2 	movw	r2, #1266	; 0x4f2
 800482c:	f007 f895 	bl	800b95a <iprintf>
 8004830:	23fa      	movs	r3, #250	; 0xfa
 8004832:	e79b      	b.n	800476c <lwip_netconn_do_connect+0xc>
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	bf00      	nop
 8004838:	08003dad 	.word	0x08003dad
 800483c:	20004270 	.word	0x20004270
 8004840:	0800c56a 	.word	0x0800c56a
 8004844:	0800c396 	.word	0x0800c396
 8004848:	0800c0d7 	.word	0x0800c0d7
 800484c:	0800c2d9 	.word	0x0800c2d9

08004850 <lwip_netconn_do_disconnect>:
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8004850:	6802      	ldr	r2, [r0, #0]
 8004852:	7813      	ldrb	r3, [r2, #0]
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	2b20      	cmp	r3, #32
{
 800485a:	b510      	push	{r4, lr}
 800485c:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800485e:	d113      	bne.n	8004888 <lwip_netconn_do_disconnect+0x38>
    udp_disconnect(msg->conn->pcb.udp);
 8004860:	6850      	ldr	r0, [r2, #4]
 8004862:	f006 f93d 	bl	800aae0 <udp_disconnect>
    msg->err = ERR_OK;
 8004866:	2300      	movs	r3, #0
    msg->err = ERR_VAL;
 8004868:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	b173      	cbz	r3, 800488c <lwip_netconn_do_disconnect+0x3c>
 800486e:	f006 faed 	bl	800ae4c <sys_arch_protect>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004878:	320c      	adds	r2, #12
 800487a:	bfa4      	itt	ge
 800487c:	7922      	ldrbge	r2, [r4, #4]
 800487e:	721a      	strbge	r2, [r3, #8]
}
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8004884:	f006 baee 	b.w	800ae64 <sys_arch_unprotect>
    msg->err = ERR_VAL;
 8004888:	23fa      	movs	r3, #250	; 0xfa
 800488a:	e7ed      	b.n	8004868 <lwip_netconn_do_disconnect+0x18>
 800488c:	bd10      	pop	{r4, pc}

0800488e <lwip_netconn_do_send>:
{
 800488e:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004890:	6803      	ldr	r3, [r0, #0]
 8004892:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004896:	f112 0f0c 	cmn.w	r2, #12
{
 800489a:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800489c:	da0f      	bge.n	80048be <lwip_netconn_do_send+0x30>
    msg->err = msg->conn->last_err;
 800489e:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b32b      	cbz	r3, 80048f0 <lwip_netconn_do_send+0x62>
 80048a4:	f006 fad2 	bl	800ae4c <sys_arch_protect>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80048ae:	320c      	adds	r2, #12
 80048b0:	bfa4      	itt	ge
 80048b2:	7922      	ldrbge	r2, [r4, #4]
 80048b4:	721a      	strbge	r2, [r3, #8]
}
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80048ba:	f006 bad3 	b.w	800ae64 <sys_arch_unprotect>
    msg->err = ERR_CONN;
 80048be:	22f5      	movs	r2, #245	; 0xf5
 80048c0:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80048c2:	6858      	ldr	r0, [r3, #4]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d0eb      	beq.n	80048a0 <lwip_netconn_do_send+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d1e6      	bne.n	80048a0 <lwip_netconn_do_send+0x12>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80048d2:	68a1      	ldr	r1, [r4, #8]
 80048d4:	688b      	ldr	r3, [r1, #8]
 80048d6:	b923      	cbnz	r3, 80048e2 <lwip_netconn_do_send+0x54>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80048d8:	6809      	ldr	r1, [r1, #0]
 80048da:	f006 f8cf 	bl	800aa7c <udp_send>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80048de:	7120      	strb	r0, [r4, #4]
 80048e0:	e7de      	b.n	80048a0 <lwip_netconn_do_send+0x12>
 80048e2:	898b      	ldrh	r3, [r1, #12]
 80048e4:	f101 0208 	add.w	r2, r1, #8
 80048e8:	6809      	ldr	r1, [r1, #0]
 80048ea:	f006 f8ad 	bl	800aa48 <udp_sendto>
 80048ee:	e7f6      	b.n	80048de <lwip_netconn_do_send+0x50>
 80048f0:	bd10      	pop	{r4, pc}
	...

080048f4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80048f4:	b510      	push	{r4, lr}
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80048fc:	f112 0f0c 	cmn.w	r2, #12
{
 8004900:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004902:	da0d      	bge.n	8004920 <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 8004904:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8004906:	f006 faa1 	bl	800ae4c <sys_arch_protect>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004910:	320c      	adds	r2, #12
 8004912:	bfa4      	itt	ge
 8004914:	7922      	ldrbge	r2, [r4, #4]
 8004916:	721a      	strbge	r2, [r3, #8]
}
 8004918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 800491c:	f006 baa2 	b.w	800ae64 <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004926:	2a10      	cmp	r2, #16
 8004928:	d149      	bne.n	80049be <lwip_netconn_do_write+0xca>
      if (msg->conn->state != NETCONN_NONE) {
 800492a:	785a      	ldrb	r2, [r3, #1]
 800492c:	b112      	cbz	r2, 8004934 <lwip_netconn_do_write+0x40>
        msg->err = ERR_INPROGRESS;
 800492e:	23fb      	movs	r3, #251	; 0xfb
      msg->err = ERR_VAL;
 8004930:	7123      	strb	r3, [r4, #4]
 8004932:	e7e8      	b.n	8004906 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	2a00      	cmp	r2, #0
 8004938:	d03f      	beq.n	80049ba <lwip_netconn_do_write+0xc6>
        msg->conn->state = NETCONN_WRITE;
 800493a:	2201      	movs	r2, #1
 800493c:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800493e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004940:	b90a      	cbnz	r2, 8004946 <lwip_netconn_do_write+0x52>
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	b133      	cbz	r3, 8004954 <lwip_netconn_do_write+0x60>
 8004946:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <lwip_netconn_do_write+0xd0>)
 8004948:	491f      	ldr	r1, [pc, #124]	; (80049c8 <lwip_netconn_do_write+0xd4>)
 800494a:	4820      	ldr	r0, [pc, #128]	; (80049cc <lwip_netconn_do_write+0xd8>)
 800494c:	f240 6283 	movw	r2, #1667	; 0x683
 8004950:	f007 f803 	bl	800b95a <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8004954:	68e3      	ldr	r3, [r4, #12]
 8004956:	b933      	cbnz	r3, 8004966 <lwip_netconn_do_write+0x72>
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <lwip_netconn_do_write+0xd0>)
 800495a:	491d      	ldr	r1, [pc, #116]	; (80049d0 <lwip_netconn_do_write+0xdc>)
 800495c:	481b      	ldr	r0, [pc, #108]	; (80049cc <lwip_netconn_do_write+0xd8>)
 800495e:	f240 6284 	movw	r2, #1668	; 0x684
 8004962:	f006 fffa 	bl	800b95a <iprintf>
        msg->conn->current_msg = msg;
 8004966:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset = 0;
 8004968:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800496a:	6244      	str	r4, [r0, #36]	; 0x24
        msg->conn->write_offset = 0;
 800496c:	6201      	str	r1, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800496e:	f7ff fa7d 	bl	8003e6c <lwip_netconn_do_writemore>
 8004972:	b330      	cbz	r0, 80049c2 <lwip_netconn_do_write+0xce>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d006      	beq.n	800498a <lwip_netconn_do_write+0x96>
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <lwip_netconn_do_write+0xd0>)
 800497e:	4915      	ldr	r1, [pc, #84]	; (80049d4 <lwip_netconn_do_write+0xe0>)
 8004980:	4812      	ldr	r0, [pc, #72]	; (80049cc <lwip_netconn_do_write+0xd8>)
 8004982:	f240 6289 	movw	r2, #1673	; 0x689
 8004986:	f006 ffe8 	bl	800b95a <iprintf>
          UNLOCK_TCPIP_CORE();
 800498a:	4813      	ldr	r0, [pc, #76]	; (80049d8 <lwip_netconn_do_write+0xe4>)
 800498c:	f006 fa44 	bl	800ae18 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	2100      	movs	r1, #0
 8004994:	300c      	adds	r0, #12
 8004996:	f006 f9f6 	bl	800ad86 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800499a:	480f      	ldr	r0, [pc, #60]	; (80049d8 <lwip_netconn_do_write+0xe4>)
 800499c:	f006 fa37 	bl	800ae0e <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10c      	bne.n	80049c2 <lwip_netconn_do_write+0xce>
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <lwip_netconn_do_write+0xd0>)
 80049aa:	490a      	ldr	r1, [pc, #40]	; (80049d4 <lwip_netconn_do_write+0xe0>)
 80049ac:	4807      	ldr	r0, [pc, #28]	; (80049cc <lwip_netconn_do_write+0xd8>)
 80049ae:	f240 628d 	movw	r2, #1677	; 0x68d
}
 80049b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80049b6:	f006 bfd0 	b.w	800b95a <iprintf>
        msg->err = ERR_CONN;
 80049ba:	23f5      	movs	r3, #245	; 0xf5
 80049bc:	e7b8      	b.n	8004930 <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 80049be:	23fa      	movs	r3, #250	; 0xfa
 80049c0:	e7b6      	b.n	8004930 <lwip_netconn_do_write+0x3c>
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	0800c56a 	.word	0x0800c56a
 80049c8:	0800c37b 	.word	0x0800c37b
 80049cc:	0800c0d7 	.word	0x0800c0d7
 80049d0:	0800c39d 	.word	0x0800c39d
 80049d4:	0800c396 	.word	0x0800c396
 80049d8:	20004270 	.word	0x20004270

080049dc <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80049dc:	f100 0310 	add.w	r3, r0, #16
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b10      	cmp	r3, #16
    return EIO;
  }
  return err_to_errno_table[-err];
 80049e4:	bf9d      	ittte	ls
 80049e6:	4240      	negls	r0, r0
 80049e8:	4b02      	ldrls	r3, [pc, #8]	; (80049f4 <err_to_errno+0x18>)
 80049ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    return EIO;
 80049ee:	2005      	movhi	r0, #5
}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	0800c5fc 	.word	0x0800c5fc

080049f8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80049f8:	b510      	push	{r4, lr}
  if (buf != NULL) {
 80049fa:	4604      	mov	r4, r0
 80049fc:	b160      	cbz	r0, 8004a18 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 80049fe:	6800      	ldr	r0, [r0, #0]
 8004a00:	b120      	cbz	r0, 8004a0c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8004a02:	f002 f9e7 	bl	8006dd4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	2006      	movs	r0, #6
  }
}
 8004a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8004a14:	f002 b858 	b.w	8006ac8 <memp_free>
 8004a18:	bd10      	pop	{r4, pc}
	...

08004a1c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8004a1c:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8004a1e:	4604      	mov	r4, r0
 8004a20:	b938      	cbnz	r0, 8004a32 <netbuf_free+0x16>
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <netbuf_free+0x28>)
 8004a24:	4908      	ldr	r1, [pc, #32]	; (8004a48 <netbuf_free+0x2c>)
 8004a26:	4809      	ldr	r0, [pc, #36]	; (8004a4c <netbuf_free+0x30>)
 8004a28:	2281      	movs	r2, #129	; 0x81
  if (buf->p != NULL) {
    pbuf_free(buf->p);
  }
  buf->p = buf->ptr = NULL;
}
 8004a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8004a2e:	f006 bf94 	b.w	800b95a <iprintf>
  if (buf->p != NULL) {
 8004a32:	6800      	ldr	r0, [r0, #0]
 8004a34:	b108      	cbz	r0, 8004a3a <netbuf_free+0x1e>
    pbuf_free(buf->p);
 8004a36:	f002 f9cd 	bl	8006dd4 <pbuf_free>
  buf->p = buf->ptr = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6063      	str	r3, [r4, #4]
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	0800c640 	.word	0x0800c640
 8004a48:	0800c6af 	.word	0x0800c6af
 8004a4c:	0800c0d7 	.word	0x0800c0d7

08004a50 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460e      	mov	r6, r1
 8004a54:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8004a56:	4604      	mov	r4, r0
 8004a58:	b940      	cbnz	r0, 8004a6c <netbuf_ref+0x1c>
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <netbuf_ref+0x48>)
 8004a5c:	490f      	ldr	r1, [pc, #60]	; (8004a9c <netbuf_ref+0x4c>)
 8004a5e:	4810      	ldr	r0, [pc, #64]	; (8004aa0 <netbuf_ref+0x50>)
 8004a60:	2295      	movs	r2, #149	; 0x95
 8004a62:	f006 ff7a 	bl	800b95a <iprintf>
 8004a66:	f06f 000f 	mvn.w	r0, #15
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
  if (buf->p != NULL) {
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	b108      	cbz	r0, 8004a74 <netbuf_ref+0x24>
    pbuf_free(buf->p);
 8004a70:	f002 f9b0 	bl	8006dd4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8004a74:	2100      	movs	r1, #0
 8004a76:	2202      	movs	r2, #2
 8004a78:	4608      	mov	r0, r1
 8004a7a:	f002 fa15 	bl	8006ea8 <pbuf_alloc>
 8004a7e:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 8004a80:	b918      	cbnz	r0, 8004a8a <netbuf_ref+0x3a>
    buf->ptr = NULL;
 8004a82:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8004a8a:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 8004a8c:	8105      	strh	r5, [r0, #8]
 8004a8e:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
 8004a90:	6060      	str	r0, [r4, #4]
  return ERR_OK;
 8004a92:	2000      	movs	r0, #0
}
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
 8004a96:	bf00      	nop
 8004a98:	0800c640 	.word	0x0800c640
 8004a9c:	0800c6c8 	.word	0x0800c6c8
 8004aa0:	0800c0d7 	.word	0x0800c0d7

08004aa4 <get_socket>:
{
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8004aa4:	2803      	cmp	r0, #3
 8004aa6:	d904      	bls.n	8004ab2 <get_socket+0xe>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <get_socket+0x20>)
 8004aaa:	2209      	movs	r2, #9
 8004aac:	601a      	str	r2, [r3, #0]
    return NULL;
 8004aae:	2000      	movs	r0, #0
 8004ab0:	4770      	bx	lr
  }

  sock = &sockets[s];
 8004ab2:	2314      	movs	r3, #20
 8004ab4:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <get_socket+0x24>)
 8004ab6:	4343      	muls	r3, r0
 8004ab8:	18d0      	adds	r0, r2, r3

  if (!sock->conn) {
 8004aba:	58d3      	ldr	r3, [r2, r3]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f3      	beq.n	8004aa8 <get_socket+0x4>
    set_errno(EBADF);
    return NULL;
  }

  return sock;
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20007994 	.word	0x20007994
 8004ac8:	20003de4 	.word	0x20003de4

08004acc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8004acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8004ad0:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8004b40 <alloc_socket+0x74>
{
 8004ad4:	4680      	mov	r8, r0
 8004ad6:	460e      	mov	r6, r1
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8004ad8:	2500      	movs	r5, #0
 8004ada:	f04f 0a14 	mov.w	sl, #20
 8004ade:	46d9      	mov	r9, fp
 8004ae0:	fb0a f405 	mul.w	r4, sl, r5
    SYS_ARCH_PROTECT(lev);
 8004ae4:	f006 f9b2 	bl	800ae4c <sys_arch_protect>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8004ae8:	f854 300b 	ldr.w	r3, [r4, fp]
    SYS_ARCH_PROTECT(lev);
 8004aec:	4602      	mov	r2, r0
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8004aee:	b9f3      	cbnz	r3, 8004b2e <alloc_socket+0x62>
 8004af0:	445c      	add	r4, fp
 8004af2:	7c67      	ldrb	r7, [r4, #17]
 8004af4:	b9df      	cbnz	r7, 8004b2e <alloc_socket+0x62>
      sockets[i].conn       = newconn;
 8004af6:	f8c4 8000 	str.w	r8, [r4]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8004afa:	f006 f9b3 	bl	800ae64 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
      sockets[i].lastoffset = 0;
      sockets[i].rcvevent   = 0;
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8004afe:	f898 3000 	ldrb.w	r3, [r8]
      sockets[i].lastdata   = NULL;
 8004b02:	6067      	str	r7, [r4, #4]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8004b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b08:	2b10      	cmp	r3, #16
      sockets[i].lastoffset = 0;
 8004b0a:	8127      	strh	r7, [r4, #8]
      sockets[i].rcvevent   = 0;
 8004b0c:	8167      	strh	r7, [r4, #10]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8004b0e:	d10c      	bne.n	8004b2a <alloc_socket+0x5e>
 8004b10:	3600      	adds	r6, #0
 8004b12:	bf18      	it	ne
 8004b14:	2601      	movne	r6, #1
 8004b16:	2314      	movs	r3, #20
 8004b18:	fb03 9305 	mla	r3, r3, r5, r9
      sockets[i].errevent   = 0;
 8004b1c:	2200      	movs	r2, #0
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8004b1e:	819e      	strh	r6, [r3, #12]
      sockets[i].errevent   = 0;
 8004b20:	81da      	strh	r2, [r3, #14]
      sockets[i].err        = 0;
 8004b22:	741a      	strb	r2, [r3, #16]
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
}
 8004b24:	4628      	mov	r0, r5
 8004b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2a:	2601      	movs	r6, #1
 8004b2c:	e7f3      	b.n	8004b16 <alloc_socket+0x4a>
    SYS_ARCH_UNPROTECT(lev);
 8004b2e:	4610      	mov	r0, r2
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8004b30:	3501      	adds	r5, #1
    SYS_ARCH_UNPROTECT(lev);
 8004b32:	f006 f997 	bl	800ae64 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8004b36:	2d04      	cmp	r5, #4
 8004b38:	d1d2      	bne.n	8004ae0 <alloc_socket+0x14>
  return -1;
 8004b3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b3e:	e7f1      	b.n	8004b24 <alloc_socket+0x58>
 8004b40:	20003de4 	.word	0x20003de4

08004b44 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8004b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	460e      	mov	r6, r1
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f000 8085 	beq.w	8004c5c <event_callback+0x118>
    s = conn->socket;
 8004b52:	6985      	ldr	r5, [r0, #24]
    if (s < 0) {
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	da0f      	bge.n	8004b78 <event_callback+0x34>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8004b58:	f006 f978 	bl	800ae4c <sys_arch_protect>
      if (conn->socket < 0) {
 8004b5c:	69a5      	ldr	r5, [r4, #24]
 8004b5e:	2d00      	cmp	r5, #0
      SYS_ARCH_PROTECT(lev);
 8004b60:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 8004b62:	da07      	bge.n	8004b74 <event_callback+0x30>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8004b64:	b90e      	cbnz	r6, 8004b6a <event_callback+0x26>
          conn->socket--;
 8004b66:	3d01      	subs	r5, #1
 8004b68:	61a5      	str	r5, [r4, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8004b6a:	4618      	mov	r0, r3
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
}
 8004b6c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SYS_ARCH_UNPROTECT(lev);
 8004b70:	f006 b978 	b.w	800ae64 <sys_arch_unprotect>
      SYS_ARCH_UNPROTECT(lev);
 8004b74:	f006 f976 	bl	800ae64 <sys_arch_unprotect>
    sock = get_socket(s);
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f7ff ff93 	bl	8004aa4 <get_socket>
    if (!sock) {
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d06b      	beq.n	8004c5c <event_callback+0x118>
  SYS_ARCH_PROTECT(lev);
 8004b84:	f006 f962 	bl	800ae4c <sys_arch_protect>
 8004b88:	4607      	mov	r7, r0
  switch (evt) {
 8004b8a:	2e04      	cmp	r6, #4
 8004b8c:	d816      	bhi.n	8004bbc <event_callback+0x78>
 8004b8e:	e8df f006 	tbb	[pc, r6]
 8004b92:	0a03      	.short	0x0a03
 8004b94:	100d      	.short	0x100d
 8004b96:	12          	.byte	0x12
 8004b97:	00          	.byte	0x00
      sock->rcvevent++;
 8004b98:	8963      	ldrh	r3, [r4, #10]
 8004b9a:	3301      	adds	r3, #1
      sock->rcvevent--;
 8004b9c:	8163      	strh	r3, [r4, #10]
  if (sock->select_waiting == 0) {
 8004b9e:	7c63      	ldrb	r3, [r4, #17]
 8004ba0:	b9a3      	cbnz	r3, 8004bcc <event_callback+0x88>
  SYS_ARCH_UNPROTECT(lev);
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	e7e2      	b.n	8004b6c <event_callback+0x28>
      sock->rcvevent--;
 8004ba6:	8963      	ldrh	r3, [r4, #10]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	e7f7      	b.n	8004b9c <event_callback+0x58>
      sock->sendevent = 1;
 8004bac:	2301      	movs	r3, #1
      sock->sendevent = 0;
 8004bae:	81a3      	strh	r3, [r4, #12]
      break;
 8004bb0:	e7f5      	b.n	8004b9e <event_callback+0x5a>
      sock->sendevent = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e7fb      	b.n	8004bae <event_callback+0x6a>
      sock->errevent = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	81e3      	strh	r3, [r4, #14]
      break;
 8004bba:	e7f0      	b.n	8004b9e <event_callback+0x5a>
      LWIP_ASSERT("unknown event", 0);
 8004bbc:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <event_callback+0x11c>)
 8004bbe:	4929      	ldr	r1, [pc, #164]	; (8004c64 <event_callback+0x120>)
 8004bc0:	4829      	ldr	r0, [pc, #164]	; (8004c68 <event_callback+0x124>)
 8004bc2:	f240 625d 	movw	r2, #1629	; 0x65d
 8004bc6:	f006 fec8 	bl	800b95a <iprintf>
      break;
 8004bca:	e7e8      	b.n	8004b9e <event_callback+0x5a>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8004bcc:	ea4f 1b55 	mov.w	fp, r5, lsr #5
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f005 051f 	and.w	r5, r5, #31
    last_select_cb_ctr = select_cb_ctr;
 8004bd6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004c70 <event_callback+0x12c>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8004bda:	fa03 f505 	lsl.w	r5, r3, r5
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8004bde:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <event_callback+0x128>)
 8004be0:	681e      	ldr	r6, [r3, #0]
        scb->sem_signalled = 1;
 8004be2:	f04f 0901 	mov.w	r9, #1
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	d0db      	beq.n	8004ba2 <event_callback+0x5e>
    if (scb->sem_signalled == 0) {
 8004bea:	6973      	ldr	r3, [r6, #20]
    last_select_cb_ctr = select_cb_ctr;
 8004bec:	f8d8 a000 	ldr.w	sl, [r8]
    if (scb->sem_signalled == 0) {
 8004bf0:	b9fb      	cbnz	r3, 8004c32 <event_callback+0xee>
      if (sock->rcvevent > 0) {
 8004bf2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	dd07      	ble.n	8004c0a <event_callback+0xc6>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8004bfa:	68b2      	ldr	r2, [r6, #8]
 8004bfc:	b12a      	cbz	r2, 8004c0a <event_callback+0xc6>
 8004bfe:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 8004c02:	421d      	tst	r5, r3
 8004c04:	bf14      	ite	ne
 8004c06:	2301      	movne	r3, #1
 8004c08:	2300      	moveq	r3, #0
      if (sock->sendevent != 0) {
 8004c0a:	89a2      	ldrh	r2, [r4, #12]
 8004c0c:	b142      	cbz	r2, 8004c20 <event_callback+0xdc>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8004c0e:	b93b      	cbnz	r3, 8004c20 <event_callback+0xdc>
 8004c10:	68f2      	ldr	r2, [r6, #12]
 8004c12:	b12a      	cbz	r2, 8004c20 <event_callback+0xdc>
 8004c14:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 8004c18:	421d      	tst	r5, r3
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
      if (sock->errevent != 0) {
 8004c20:	89e2      	ldrh	r2, [r4, #14]
 8004c22:	b192      	cbz	r2, 8004c4a <event_callback+0x106>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8004c24:	b99b      	cbnz	r3, 8004c4e <event_callback+0x10a>
 8004c26:	6933      	ldr	r3, [r6, #16]
 8004c28:	b11b      	cbz	r3, 8004c32 <event_callback+0xee>
 8004c2a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004c2e:	421d      	tst	r5, r3
 8004c30:	d10d      	bne.n	8004c4e <event_callback+0x10a>
    SYS_ARCH_UNPROTECT(lev);
 8004c32:	4638      	mov	r0, r7
 8004c34:	f006 f916 	bl	800ae64 <sys_arch_unprotect>
    SYS_ARCH_PROTECT(lev);
 8004c38:	f006 f908 	bl	800ae4c <sys_arch_protect>
    if (last_select_cb_ctr != select_cb_ctr) {
 8004c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c40:	459a      	cmp	sl, r3
    SYS_ARCH_PROTECT(lev);
 8004c42:	4607      	mov	r7, r0
    if (last_select_cb_ctr != select_cb_ctr) {
 8004c44:	d1cb      	bne.n	8004bde <event_callback+0x9a>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8004c46:	6836      	ldr	r6, [r6, #0]
 8004c48:	e7cd      	b.n	8004be6 <event_callback+0xa2>
      if (do_signal) {
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f1      	beq.n	8004c32 <event_callback+0xee>
        scb->sem_signalled = 1;
 8004c4e:	f8c6 9014 	str.w	r9, [r6, #20]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8004c52:	f106 0018 	add.w	r0, r6, #24
 8004c56:	f006 f8b1 	bl	800adbc <sys_sem_signal>
 8004c5a:	e7ea      	b.n	8004c32 <event_callback+0xee>
 8004c5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	0800c6e0 	.word	0x0800c6e0
 8004c64:	0800c712 	.word	0x0800c712
 8004c68:	0800c0d7 	.word	0x0800c0d7
 8004c6c:	20003de0 	.word	0x20003de0
 8004c70:	20003ddc 	.word	0x20003ddc

08004c74 <lwip_connect>:
{
 8004c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c76:	4615      	mov	r5, r2
  sock = get_socket(s);
 8004c78:	f7ff ff14 	bl	8004aa4 <get_socket>
  if (!sock) {
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	b918      	cbnz	r0, 8004c88 <lwip_connect+0x14>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004c84:	b003      	add	sp, #12
 8004c86:	bd30      	pop	{r4, r5, pc}
  if (name->sa_family == AF_UNSPEC) {
 8004c88:	784b      	ldrb	r3, [r1, #1]
 8004c8a:	b92b      	cbnz	r3, 8004c98 <lwip_connect+0x24>
    err = netconn_disconnect(sock->conn);
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f7fe fef9 	bl	8003a84 <netconn_disconnect>
  if (err != ERR_OK) {
 8004c92:	b980      	cbnz	r0, 8004cb6 <lwip_connect+0x42>
  sock_set_errno(sock, 0);
 8004c94:	7420      	strb	r0, [r4, #16]
  return 0;
 8004c96:	e7f5      	b.n	8004c84 <lwip_connect+0x10>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8004c98:	2d10      	cmp	r5, #16
 8004c9a:	d103      	bne.n	8004ca4 <lwip_connect+0x30>
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d101      	bne.n	8004ca4 <lwip_connect+0x30>
 8004ca0:	078b      	lsls	r3, r1, #30
 8004ca2:	d010      	beq.n	8004cc6 <lwip_connect+0x52>
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <lwip_connect+0x6c>)
 8004ca6:	490f      	ldr	r1, [pc, #60]	; (8004ce4 <lwip_connect+0x70>)
 8004ca8:	480f      	ldr	r0, [pc, #60]	; (8004ce8 <lwip_connect+0x74>)
 8004caa:	f240 229f 	movw	r2, #671	; 0x29f
 8004cae:	f006 fe54 	bl	800b95a <iprintf>
 8004cb2:	f06f 000f 	mvn.w	r0, #15
 8004cb6:	f7ff fe91 	bl	80049dc <err_to_errno>
 8004cba:	7420      	strb	r0, [r4, #16]
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d0df      	beq.n	8004c80 <lwip_connect+0xc>
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <lwip_connect+0x78>)
 8004cc2:	6018      	str	r0, [r3, #0]
 8004cc4:	e7dc      	b.n	8004c80 <lwip_connect+0xc>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8004cc6:	ad02      	add	r5, sp, #8
 8004cc8:	684b      	ldr	r3, [r1, #4]
 8004cca:	8848      	ldrh	r0, [r1, #2]
 8004ccc:	f845 3d04 	str.w	r3, [r5, #-4]!
 8004cd0:	f000 fa02 	bl	80050d8 <lwip_htons>
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6820      	ldr	r0, [r4, #0]
 8004cda:	f7fe fead 	bl	8003a38 <netconn_connect>
 8004cde:	e7d8      	b.n	8004c92 <lwip_connect+0x1e>
 8004ce0:	0800c6e0 	.word	0x0800c6e0
 8004ce4:	0800c720 	.word	0x0800c720
 8004ce8:	0800c0d7 	.word	0x0800c0d7
 8004cec:	20007994 	.word	0x20007994

08004cf0 <lwip_sendto>:
{
 8004cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	4681      	mov	r9, r0
 8004cf8:	460f      	mov	r7, r1
 8004cfa:	4615      	mov	r5, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004d00:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  sock = get_socket(s);
 8004d04:	f7ff fece 	bl	8004aa4 <get_socket>
  if (!sock) {
 8004d08:	4606      	mov	r6, r0
 8004d0a:	b910      	cbnz	r0, 8004d12 <lwip_sendto+0x22>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d10:	e00b      	b.n	8004d2a <lwip_sendto+0x3a>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8004d12:	6803      	ldr	r3, [r0, #0]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004d1a:	2a10      	cmp	r2, #16
 8004d1c:	d108      	bne.n	8004d30 <lwip_sendto+0x40>
    return lwip_send(s, data, size, flags);
 8004d1e:	460b      	mov	r3, r1
 8004d20:	462a      	mov	r2, r5
 8004d22:	4639      	mov	r1, r7
 8004d24:	4648      	mov	r0, r9
 8004d26:	f000 f85d 	bl	8004de4 <lwip_send>
}
 8004d2a:	b005      	add	sp, #20
 8004d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 8004d30:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004d34:	d306      	bcc.n	8004d44 <lwip_sendto+0x54>
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <lwip_sendto+0xe0>)
 8004d38:	4926      	ldr	r1, [pc, #152]	; (8004dd4 <lwip_sendto+0xe4>)
 8004d3a:	4827      	ldr	r0, [pc, #156]	; (8004dd8 <lwip_sendto+0xe8>)
 8004d3c:	f240 427b 	movw	r2, #1147	; 0x47b
 8004d40:	f006 fe0b 	bl	800b95a <iprintf>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8004d44:	b914      	cbnz	r4, 8004d4c <lwip_sendto+0x5c>
 8004d46:	f1b8 0f00 	cmp.w	r8, #0
 8004d4a:	d018      	beq.n	8004d7e <lwip_sendto+0x8e>
 8004d4c:	f1b8 0f10 	cmp.w	r8, #16
 8004d50:	d104      	bne.n	8004d5c <lwip_sendto+0x6c>
 8004d52:	7863      	ldrb	r3, [r4, #1]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d101      	bne.n	8004d5c <lwip_sendto+0x6c>
 8004d58:	07a3      	lsls	r3, r4, #30
 8004d5a:	d010      	beq.n	8004d7e <lwip_sendto+0x8e>
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <lwip_sendto+0xe0>)
 8004d5e:	491f      	ldr	r1, [pc, #124]	; (8004ddc <lwip_sendto+0xec>)
 8004d60:	481d      	ldr	r0, [pc, #116]	; (8004dd8 <lwip_sendto+0xe8>)
 8004d62:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004d66:	f006 fdf8 	bl	800b95a <iprintf>
 8004d6a:	f06f 000f 	mvn.w	r0, #15
 8004d6e:	f7ff fe35 	bl	80049dc <err_to_errno>
 8004d72:	7430      	strb	r0, [r6, #16]
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d0c9      	beq.n	8004d0c <lwip_sendto+0x1c>
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <lwip_sendto+0xf0>)
 8004d7a:	6018      	str	r0, [r3, #0]
 8004d7c:	e7c6      	b.n	8004d0c <lwip_sendto+0x1c>
  buf.p = buf.ptr = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	9300      	str	r3, [sp, #0]
  if (to) {
 8004d84:	b304      	cbz	r4, 8004dc8 <lwip_sendto+0xd8>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	8860      	ldrh	r0, [r4, #2]
 8004d8a:	9302      	str	r3, [sp, #8]
 8004d8c:	f000 f9a4 	bl	80050d8 <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 8004d90:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 8004d94:	b2aa      	uxth	r2, r5
 8004d96:	4639      	mov	r1, r7
 8004d98:	4668      	mov	r0, sp
 8004d9a:	f7ff fe59 	bl	8004a50 <netbuf_ref>
  if (err == ERR_OK) {
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b920      	cbnz	r0, 8004dac <lwip_sendto+0xbc>
    err = netconn_send(sock->conn, &buf);
 8004da2:	4669      	mov	r1, sp
 8004da4:	6830      	ldr	r0, [r6, #0]
 8004da6:	f7fe fe8b 	bl	8003ac0 <netconn_send>
 8004daa:	4604      	mov	r4, r0
  netbuf_free(&buf);
 8004dac:	4668      	mov	r0, sp
 8004dae:	f7ff fe35 	bl	8004a1c <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8004db2:	4620      	mov	r0, r4
 8004db4:	f7ff fe12 	bl	80049dc <err_to_errno>
 8004db8:	7430      	strb	r0, [r6, #16]
 8004dba:	b108      	cbz	r0, 8004dc0 <lwip_sendto+0xd0>
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <lwip_sendto+0xf0>)
 8004dbe:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 8004dc0:	2c00      	cmp	r4, #0
 8004dc2:	d1a3      	bne.n	8004d0c <lwip_sendto+0x1c>
 8004dc4:	b2a8      	uxth	r0, r5
 8004dc6:	e7b0      	b.n	8004d2a <lwip_sendto+0x3a>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8004dc8:	9402      	str	r4, [sp, #8]
    remote_port = 0;
 8004dca:	4620      	mov	r0, r4
 8004dcc:	e7e0      	b.n	8004d90 <lwip_sendto+0xa0>
 8004dce:	bf00      	nop
 8004dd0:	0800c6e0 	.word	0x0800c6e0
 8004dd4:	0800c73e 	.word	0x0800c73e
 8004dd8:	0800c0d7 	.word	0x0800c0d7
 8004ddc:	0800c762 	.word	0x0800c762
 8004de0:	20007994 	.word	0x20007994

08004de4 <lwip_send>:
{
 8004de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	4607      	mov	r7, r0
 8004dea:	4616      	mov	r6, r2
 8004dec:	461d      	mov	r5, r3
  sock = get_socket(s);
 8004dee:	f7ff fe59 	bl	8004aa4 <get_socket>
  if (!sock) {
 8004df2:	4604      	mov	r4, r0
 8004df4:	b918      	cbnz	r0, 8004dfe <lwip_send+0x1a>
    return -1;
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004dfa:	b005      	add	sp, #20
 8004dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8004dfe:	6800      	ldr	r0, [r0, #0]
 8004e00:	7803      	ldrb	r3, [r0, #0]
 8004e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d008      	beq.n	8004e1c <lwip_send+0x38>
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4632      	mov	r2, r6
 8004e12:	462b      	mov	r3, r5
 8004e14:	4638      	mov	r0, r7
 8004e16:	f7ff ff6b 	bl	8004cf0 <lwip_sendto>
 8004e1a:	e7ee      	b.n	8004dfa <lwip_send+0x16>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8004e1c:	f015 0f10 	tst.w	r5, #16
 8004e20:	bf14      	ite	ne
 8004e22:	2203      	movne	r2, #3
 8004e24:	2201      	moveq	r2, #1
 8004e26:	f015 0f08 	tst.w	r5, #8
  written = 0;
 8004e2a:	ad04      	add	r5, sp, #16
 8004e2c:	f04f 0700 	mov.w	r7, #0
 8004e30:	f845 7d04 	str.w	r7, [r5, #-4]!
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8004e34:	bf14      	ite	ne
 8004e36:	2304      	movne	r3, #4
 8004e38:	2300      	moveq	r3, #0
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	9500      	str	r5, [sp, #0]
 8004e3e:	4632      	mov	r2, r6
 8004e40:	f7fe fe5c 	bl	8003afc <netconn_write_partly>
 8004e44:	4605      	mov	r5, r0
  sock_set_errno(sock, err_to_errno(err));
 8004e46:	f7ff fdc9 	bl	80049dc <err_to_errno>
 8004e4a:	7420      	strb	r0, [r4, #16]
 8004e4c:	b108      	cbz	r0, 8004e52 <lwip_send+0x6e>
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <lwip_send+0x78>)
 8004e50:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (int)written : -1);
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	d1cf      	bne.n	8004df6 <lwip_send+0x12>
 8004e56:	9803      	ldr	r0, [sp, #12]
 8004e58:	e7cf      	b.n	8004dfa <lwip_send+0x16>
 8004e5a:	bf00      	nop
 8004e5c:	20007994 	.word	0x20007994

08004e60 <lwip_socket>:
  switch (type) {
 8004e60:	2902      	cmp	r1, #2
{
 8004e62:	b538      	push	{r3, r4, r5, lr}
 8004e64:	4613      	mov	r3, r2
  switch (type) {
 8004e66:	d010      	beq.n	8004e8a <lwip_socket+0x2a>
 8004e68:	2903      	cmp	r1, #3
 8004e6a:	d005      	beq.n	8004e78 <lwip_socket+0x18>
 8004e6c:	2901      	cmp	r1, #1
 8004e6e:	d114      	bne.n	8004e9a <lwip_socket+0x3a>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8004e70:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <lwip_socket+0x68>)
 8004e72:	2100      	movs	r1, #0
 8004e74:	2010      	movs	r0, #16
 8004e76:	e002      	b.n	8004e7e <lwip_socket+0x1e>
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <lwip_socket+0x68>)
 8004e7a:	b2d9      	uxtb	r1, r3
 8004e7c:	2040      	movs	r0, #64	; 0x40
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8004e7e:	f7fe fd69 	bl	8003954 <netconn_new_with_proto_and_callback>
 8004e82:	4604      	mov	r4, r0
  if (!conn) {
 8004e84:	b980      	cbnz	r0, 8004ea8 <lwip_socket+0x48>
    set_errno(ENOBUFS);
 8004e86:	2269      	movs	r2, #105	; 0x69
 8004e88:	e008      	b.n	8004e9c <lwip_socket+0x3c>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8004e8a:	2a88      	cmp	r2, #136	; 0x88
 8004e8c:	f04f 0100 	mov.w	r1, #0
 8004e90:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <lwip_socket+0x68>)
 8004e92:	bf0c      	ite	eq
 8004e94:	2021      	moveq	r0, #33	; 0x21
 8004e96:	2020      	movne	r0, #32
 8004e98:	e7f1      	b.n	8004e7e <lwip_socket+0x1e>
    set_errno(EINVAL);
 8004e9a:	2216      	movs	r2, #22
    set_errno(ENOBUFS);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <lwip_socket+0x6c>)
    return -1;
 8004e9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    set_errno(ENOBUFS);
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
  i = alloc_socket(conn, 0);
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f7ff fe0f 	bl	8004acc <alloc_socket>
  if (i == -1) {
 8004eae:	1c43      	adds	r3, r0, #1
  i = alloc_socket(conn, 0);
 8004eb0:	4605      	mov	r5, r0
  if (i == -1) {
 8004eb2:	d106      	bne.n	8004ec2 <lwip_socket+0x62>
    netconn_delete(conn);
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7fe fda7 	bl	8003a08 <netconn_delete>
    set_errno(ENFILE);
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <lwip_socket+0x6c>)
 8004ebc:	2217      	movs	r2, #23
 8004ebe:	601a      	str	r2, [r3, #0]
    return -1;
 8004ec0:	e7f0      	b.n	8004ea4 <lwip_socket+0x44>
  conn->socket = i;
 8004ec2:	61a0      	str	r0, [r4, #24]
  return i;
 8004ec4:	e7ee      	b.n	8004ea4 <lwip_socket+0x44>
 8004ec6:	bf00      	nop
 8004ec8:	08004b45 	.word	0x08004b45
 8004ecc:	20007994 	.word	0x20007994

08004ed0 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <tcpip_thread+0x78>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
{
 8004ed4:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8004ed6:	b113      	cbz	r3, 8004ede <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <tcpip_thread+0x7c>)
 8004eda:	6810      	ldr	r0, [r2, #0]
 8004edc:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8004ede:	481c      	ldr	r0, [pc, #112]	; (8004f50 <tcpip_thread+0x80>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8004ee0:	4d1b      	ldr	r5, [pc, #108]	; (8004f50 <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8004ee2:	4e1c      	ldr	r6, [pc, #112]	; (8004f54 <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004ee4:	4c1c      	ldr	r4, [pc, #112]	; (8004f58 <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 8004ee6:	f005 ff92 	bl	800ae0e <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8004eea:	4628      	mov	r0, r5
 8004eec:	f005 ff94 	bl	800ae18 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8004ef0:	a901      	add	r1, sp, #4
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f005 fbe6 	bl	800a6c4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f005 ff88 	bl	800ae0e <sys_mutex_lock>
    if (msg == NULL) {
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	b933      	cbnz	r3, 8004f10 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004f02:	4623      	mov	r3, r4
 8004f04:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004f06:	4915      	ldr	r1, [pc, #84]	; (8004f5c <tcpip_thread+0x8c>)
 8004f08:	4815      	ldr	r0, [pc, #84]	; (8004f60 <tcpip_thread+0x90>)
 8004f0a:	f006 fd26 	bl	800b95a <iprintf>
      break;
 8004f0e:	e7ec      	b.n	8004eea <tcpip_thread+0x1a>
    switch (msg->type) {
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	2a03      	cmp	r2, #3
 8004f14:	d00b      	beq.n	8004f2e <tcpip_thread+0x5e>
 8004f16:	2a04      	cmp	r2, #4
 8004f18:	d00f      	beq.n	8004f3a <tcpip_thread+0x6a>
 8004f1a:	2a02      	cmp	r2, #2
 8004f1c:	d111      	bne.n	8004f42 <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8004f1e:	1d18      	adds	r0, r3, #4
 8004f20:	c807      	ldmia	r0, {r0, r1, r2}
 8004f22:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8004f24:	9901      	ldr	r1, [sp, #4]
 8004f26:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004f28:	f001 fdce 	bl	8006ac8 <memp_free>
      break;
 8004f2c:	e7dd      	b.n	8004eea <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004f2e:	6898      	ldr	r0, [r3, #8]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004f34:	9901      	ldr	r1, [sp, #4]
 8004f36:	2008      	movs	r0, #8
 8004f38:	e7f6      	b.n	8004f28 <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	6898      	ldr	r0, [r3, #8]
 8004f3e:	4790      	blx	r2
      break;
 8004f40:	e7d3      	b.n	8004eea <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004f42:	4623      	mov	r3, r4
 8004f44:	229b      	movs	r2, #155	; 0x9b
 8004f46:	e7de      	b.n	8004f06 <tcpip_thread+0x36>
 8004f48:	20003e38 	.word	0x20003e38
 8004f4c:	20003e3c 	.word	0x20003e3c
 8004f50:	20004270 	.word	0x20004270
 8004f54:	20003e34 	.word	0x20003e34
 8004f58:	0800c7dd 	.word	0x0800c7dd
 8004f5c:	0800c80d 	.word	0x0800c80d
 8004f60:	0800c0d7 	.word	0x0800c0d7

08004f64 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8004f68:	4810      	ldr	r0, [pc, #64]	; (8004fac <tcpip_inpkt+0x48>)
{
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8004f6e:	f005 feea 	bl	800ad46 <sys_mbox_valid>
 8004f72:	b928      	cbnz	r0, 8004f80 <tcpip_inpkt+0x1c>
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <tcpip_inpkt+0x4c>)
 8004f76:	490f      	ldr	r1, [pc, #60]	; (8004fb4 <tcpip_inpkt+0x50>)
 8004f78:	480f      	ldr	r0, [pc, #60]	; (8004fb8 <tcpip_inpkt+0x54>)
 8004f7a:	22b5      	movs	r2, #181	; 0xb5
 8004f7c:	f006 fced 	bl	800b95a <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8004f80:	2009      	movs	r0, #9
 8004f82:	f001 fd85 	bl	8006a90 <memp_malloc>
  if (msg == NULL) {
 8004f86:	4604      	mov	r4, r0
 8004f88:	b168      	cbz	r0, 8004fa6 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8004f8e:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8004f90:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8004f92:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8004f94:	4601      	mov	r1, r0
 8004f96:	4805      	ldr	r0, [pc, #20]	; (8004fac <tcpip_inpkt+0x48>)
 8004f98:	f005 fe98 	bl	800accc <sys_mbox_trypost>
 8004f9c:	b128      	cbz	r0, 8004faa <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	2009      	movs	r0, #9
 8004fa2:	f001 fd91 	bl	8006ac8 <memp_free>
    return ERR_MEM;
 8004fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fac:	20003e34 	.word	0x20003e34
 8004fb0:	0800c7dd 	.word	0x0800c7dd
 8004fb4:	0800c7d0 	.word	0x0800c7d0
 8004fb8:	0800c0d7 	.word	0x0800c0d7

08004fbc <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8004fbc:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8004fc0:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8004fc4:	bf14      	ite	ne
 8004fc6:	4a02      	ldrne	r2, [pc, #8]	; (8004fd0 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8004fc8:	4a02      	ldreq	r2, [pc, #8]	; (8004fd4 <tcpip_input+0x18>)
 8004fca:	f7ff bfcb 	b.w	8004f64 <tcpip_inpkt>
 8004fce:	bf00      	nop
 8004fd0:	0800ab75 	.word	0x0800ab75
 8004fd4:	08005a5d 	.word	0x08005a5d

08004fd8 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8004fdc:	4812      	ldr	r0, [pc, #72]	; (8005028 <tcpip_callback_with_block+0x50>)
{
 8004fde:	460e      	mov	r6, r1
 8004fe0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8004fe2:	f005 feb0 	bl	800ad46 <sys_mbox_valid>
 8004fe6:	b928      	cbnz	r0, 8004ff4 <tcpip_callback_with_block+0x1c>
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <tcpip_callback_with_block+0x54>)
 8004fea:	4911      	ldr	r1, [pc, #68]	; (8005030 <tcpip_callback_with_block+0x58>)
 8004fec:	4811      	ldr	r0, [pc, #68]	; (8005034 <tcpip_callback_with_block+0x5c>)
 8004fee:	22ee      	movs	r2, #238	; 0xee
 8004ff0:	f006 fcb3 	bl	800b95a <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8004ff4:	2008      	movs	r0, #8
 8004ff6:	f001 fd4b 	bl	8006a90 <memp_malloc>
  if (msg == NULL) {
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	b188      	cbz	r0, 8005022 <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8004ffe:	2303      	movs	r3, #3
 8005000:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8005002:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005004:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8005006:	4601      	mov	r1, r0
 8005008:	4807      	ldr	r0, [pc, #28]	; (8005028 <tcpip_callback_with_block+0x50>)
  if (block) {
 800500a:	b11d      	cbz	r5, 8005014 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 800500c:	f005 fe52 	bl	800acb4 <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 8005010:	2000      	movs	r0, #0
 8005012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005014:	f005 fe5a 	bl	800accc <sys_mbox_trypost>
 8005018:	b128      	cbz	r0, 8005026 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800501a:	4621      	mov	r1, r4
 800501c:	2008      	movs	r0, #8
 800501e:	f001 fd53 	bl	8006ac8 <memp_free>
    return ERR_MEM;
 8005022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005028:	20003e34 	.word	0x20003e34
 800502c:	0800c7dd 	.word	0x0800c7dd
 8005030:	0800c7d0 	.word	0x0800c7d0
 8005034:	0800c0d7 	.word	0x0800c0d7

08005038 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8005038:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800503a:	4c06      	ldr	r4, [pc, #24]	; (8005054 <tcpip_send_msg_wait_sem+0x1c>)
{
 800503c:	460e      	mov	r6, r1
 800503e:	4605      	mov	r5, r0
  LOCK_TCPIP_CORE();
 8005040:	4620      	mov	r0, r4
 8005042:	f005 fee4 	bl	800ae0e <sys_mutex_lock>
  fn(apimsg);
 8005046:	4630      	mov	r0, r6
 8005048:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 800504a:	4620      	mov	r0, r4
 800504c:	f005 fee4 	bl	800ae18 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8005050:	2000      	movs	r0, #0
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	20004270 	.word	0x20004270

08005058 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800505a:	4605      	mov	r5, r0
 800505c:	460c      	mov	r4, r1
  lwip_init();
 800505e:	f000 f840 	bl	80050e2 <lwip_init>

  tcpip_init_done = initfunc;
 8005062:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005064:	4813      	ldr	r0, [pc, #76]	; (80050b4 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8005066:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800506a:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800506c:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800506e:	f005 fe05 	bl	800ac7c <sys_mbox_new>
 8005072:	b130      	cbz	r0, 8005082 <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <tcpip_init+0x64>)
 8005076:	4912      	ldr	r1, [pc, #72]	; (80050c0 <tcpip_init+0x68>)
 8005078:	4812      	ldr	r0, [pc, #72]	; (80050c4 <tcpip_init+0x6c>)
 800507a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800507e:	f006 fc6c 	bl	800b95a <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005082:	4811      	ldr	r0, [pc, #68]	; (80050c8 <tcpip_init+0x70>)
 8005084:	f005 feb4 	bl	800adf0 <sys_mutex_new>
 8005088:	b130      	cbz	r0, 8005098 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <tcpip_init+0x64>)
 800508c:	490f      	ldr	r1, [pc, #60]	; (80050cc <tcpip_init+0x74>)
 800508e:	480d      	ldr	r0, [pc, #52]	; (80050c4 <tcpip_init+0x6c>)
 8005090:	f240 12d9 	movw	r2, #473	; 0x1d9
 8005094:	f006 fc61 	bl	800b95a <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005098:	2303      	movs	r3, #3
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a2:	490b      	ldr	r1, [pc, #44]	; (80050d0 <tcpip_init+0x78>)
 80050a4:	480b      	ldr	r0, [pc, #44]	; (80050d4 <tcpip_init+0x7c>)
 80050a6:	f005 feba 	bl	800ae1e <sys_thread_new>
}
 80050aa:	b003      	add	sp, #12
 80050ac:	bd30      	pop	{r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	20003e38 	.word	0x20003e38
 80050b4:	20003e34 	.word	0x20003e34
 80050b8:	20003e3c 	.word	0x20003e3c
 80050bc:	0800c7dd 	.word	0x0800c7dd
 80050c0:	0800c77f 	.word	0x0800c77f
 80050c4:	0800c0d7 	.word	0x0800c0d7
 80050c8:	20004270 	.word	0x20004270
 80050cc:	0800c7a2 	.word	0x0800c7a2
 80050d0:	08004ed1 	.word	0x08004ed1
 80050d4:	0800c7c3 	.word	0x0800c7c3

080050d8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80050d8:	ba40      	rev16	r0, r0
}
 80050da:	b280      	uxth	r0, r0
 80050dc:	4770      	bx	lr

080050de <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 80050de:	ba00      	rev	r0, r0
 80050e0:	4770      	bx	lr

080050e2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80050e2:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80050e4:	f005 fe78 	bl	800add8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80050e8:	f001 fa5e 	bl	80065a8 <mem_init>
  memp_init();
 80050ec:	f001 fcc2 	bl	8006a74 <memp_init>
  pbuf_init();
  netif_init();
 80050f0:	f001 fd0d 	bl	8006b0e <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80050f4:	f005 fb38 	bl	800a768 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80050f8:	f002 f9b2 	bl	8007460 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80050fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005100:	f005 bab6 	b.w	800a670 <sys_timeouts_init>

08005104 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005104:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005106:	2618      	movs	r6, #24
 8005108:	4c07      	ldr	r4, [pc, #28]	; (8005128 <etharp_free_entry+0x24>)
 800510a:	4346      	muls	r6, r0
{
 800510c:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800510e:	59a0      	ldr	r0, [r4, r6]
 8005110:	b118      	cbz	r0, 800511a <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005112:	f001 fe5f 	bl	8006dd4 <pbuf_free>
    arp_table[i].q = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800511a:	2318      	movs	r3, #24
 800511c:	fb03 4405 	mla	r4, r3, r5, r4
 8005120:	2300      	movs	r3, #0
 8005122:	7523      	strb	r3, [r4, #20]
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	bf00      	nop
 8005128:	20003e40 	.word	0x20003e40

0800512c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800512c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005132:	4689      	mov	r9, r1
 8005134:	4692      	mov	sl, r2
 8005136:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005138:	4607      	mov	r7, r0
 800513a:	b930      	cbnz	r0, 800514a <etharp_raw+0x1e>
 800513c:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <etharp_raw+0xc4>)
 800513e:	492d      	ldr	r1, [pc, #180]	; (80051f4 <etharp_raw+0xc8>)
 8005140:	482d      	ldr	r0, [pc, #180]	; (80051f8 <etharp_raw+0xcc>)
 8005142:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005146:	f006 fc08 	bl	800b95a <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800514a:	2200      	movs	r2, #0
 800514c:	211c      	movs	r1, #28
 800514e:	2002      	movs	r0, #2
 8005150:	f001 feaa 	bl	8006ea8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005154:	4606      	mov	r6, r0
 8005156:	2800      	cmp	r0, #0
 8005158:	d047      	beq.n	80051ea <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800515a:	8943      	ldrh	r3, [r0, #10]
 800515c:	2b1b      	cmp	r3, #27
 800515e:	d806      	bhi.n	800516e <etharp_raw+0x42>
 8005160:	4b23      	ldr	r3, [pc, #140]	; (80051f0 <etharp_raw+0xc4>)
 8005162:	4926      	ldr	r1, [pc, #152]	; (80051fc <etharp_raw+0xd0>)
 8005164:	4824      	ldr	r0, [pc, #144]	; (80051f8 <etharp_raw+0xcc>)
 8005166:	f240 4264 	movw	r2, #1124	; 0x464
 800516a:	f006 fbf6 	bl	800b95a <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800516e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8005172:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8005174:	f7ff ffb0 	bl	80050d8 <lwip_htons>
 8005178:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800517a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800517e:	2b06      	cmp	r3, #6
 8005180:	d006      	beq.n	8005190 <etharp_raw+0x64>
 8005182:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <etharp_raw+0xc4>)
 8005184:	491e      	ldr	r1, [pc, #120]	; (8005200 <etharp_raw+0xd4>)
 8005186:	481c      	ldr	r0, [pc, #112]	; (80051f8 <etharp_raw+0xcc>)
 8005188:	f240 426b 	movw	r2, #1131	; 0x46b
 800518c:	f006 fbe5 	bl	800b95a <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8005190:	f8d8 3000 	ldr.w	r3, [r8]
 8005194:	60a3      	str	r3, [r4, #8]
 8005196:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800519a:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	f8c4 3012 	str.w	r3, [r4, #18]
 80051a2:	88ab      	ldrh	r3, [r5, #4]
 80051a4:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80051a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80051ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80051b4:	2301      	movs	r3, #1
 80051b6:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80051b8:	2308      	movs	r3, #8
 80051ba:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80051bc:	2306      	movs	r3, #6
 80051be:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80051c0:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80051c2:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 80051c4:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80051c6:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80051ca:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80051cc:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80051ce:	464a      	mov	r2, r9
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	4631      	mov	r1, r6
 80051d4:	4653      	mov	r3, sl
 80051d6:	4638      	mov	r0, r7
 80051d8:	f005 fd18 	bl	800ac0c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80051dc:	4630      	mov	r0, r6
 80051de:	f001 fdf9 	bl	8006dd4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80051e2:	4628      	mov	r0, r5
}
 80051e4:	b002      	add	sp, #8
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ee:	e7f9      	b.n	80051e4 <etharp_raw+0xb8>
 80051f0:	0800c920 	.word	0x0800c920
 80051f4:	0800c957 	.word	0x0800c957
 80051f8:	0800c0d7 	.word	0x0800c0d7
 80051fc:	0800c965 	.word	0x0800c965
 8005200:	0800c996 	.word	0x0800c996

08005204 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <etharp_find_entry.isra.0+0x100>)
 800520a:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 800520c:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800520e:	4605      	mov	r5, r0
 8005210:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005212:	4694      	mov	ip, r2
 8005214:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005216:	4681      	mov	r9, r0
 8005218:	4680      	mov	r8, r0
 800521a:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 800521c:	4696      	mov	lr, r2
 800521e:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005220:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8005224:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005226:	d112      	bne.n	800524e <etharp_find_entry.isra.0+0x4a>
 8005228:	b99f      	cbnz	r7, 8005252 <etharp_find_entry.isra.0+0x4e>
      empty = i;
 800522a:	fa4f fe80 	sxtb.w	lr, r0
 800522e:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005230:	280a      	cmp	r0, #10
 8005232:	f103 0318 	add.w	r3, r3, #24
 8005236:	d1f3      	bne.n	8005220 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005238:	9b01      	ldr	r3, [sp, #4]
 800523a:	0799      	lsls	r1, r3, #30
 800523c:	d404      	bmi.n	8005248 <etharp_find_entry.isra.0+0x44>
 800523e:	f1be 0f0a 	cmp.w	lr, #10
 8005242:	d11c      	bne.n	800527e <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005244:	07db      	lsls	r3, r3, #31
 8005246:	d435      	bmi.n	80052b4 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8005248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800524c:	e009      	b.n	8005262 <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800524e:	2f00      	cmp	r7, #0
 8005250:	d0ed      	beq.n	800522e <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005252:	2d00      	cmp	r5, #0
 8005254:	d04a      	beq.n	80052ec <etharp_find_entry.isra.0+0xe8>
 8005256:	6829      	ldr	r1, [r5, #0]
 8005258:	468a      	mov	sl, r1
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	458a      	cmp	sl, r1
 800525e:	d145      	bne.n	80052ec <etharp_find_entry.isra.0+0xe8>
        return i;
 8005260:	b240      	sxtb	r0, r0
}
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8005268:	45c2      	cmp	sl, r8
 800526a:	d3e0      	bcc.n	800522e <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 800526c:	fa4f fc80 	sxtb.w	ip, r0
 8005270:	46d0      	mov	r8, sl
 8005272:	e7dc      	b.n	800522e <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8005274:	45ca      	cmp	sl, r9
            old_stable = i;
 8005276:	bf24      	itt	cs
 8005278:	b244      	sxtbcs	r4, r0
 800527a:	46d1      	movcs	r9, sl
 800527c:	e7d7      	b.n	800522e <etharp_find_entry.isra.0+0x2a>
    i = empty;
 800527e:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005282:	2318      	movs	r3, #24
 8005284:	fb03 6307 	mla	r3, r3, r7, r6
 8005288:	7d1b      	ldrb	r3, [r3, #20]
 800528a:	b133      	cbz	r3, 800529a <etharp_find_entry.isra.0+0x96>
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <etharp_find_entry.isra.0+0x104>)
 800528e:	491f      	ldr	r1, [pc, #124]	; (800530c <etharp_find_entry.isra.0+0x108>)
 8005290:	481f      	ldr	r0, [pc, #124]	; (8005310 <etharp_find_entry.isra.0+0x10c>)
 8005292:	f240 1287 	movw	r2, #391	; 0x187
 8005296:	f006 fb60 	bl	800b95a <iprintf>
  if (ipaddr != NULL) {
 800529a:	b125      	cbz	r5, 80052a6 <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800529c:	2318      	movs	r3, #24
 800529e:	fb03 6307 	mla	r3, r3, r7, r6
 80052a2:	682a      	ldr	r2, [r5, #0]
 80052a4:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80052a6:	2318      	movs	r3, #24
 80052a8:	fb03 6607 	mla	r6, r3, r7, r6
 80052ac:	2300      	movs	r3, #0
 80052ae:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 80052b0:	b278      	sxtb	r0, r7
 80052b2:	e7d6      	b.n	8005262 <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 80052b4:	2c0a      	cmp	r4, #10
 80052b6:	d00f      	beq.n	80052d8 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80052b8:	2318      	movs	r3, #24
      i = old_stable;
 80052ba:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80052bc:	435c      	muls	r4, r3
 80052be:	5933      	ldr	r3, [r6, r4]
 80052c0:	b133      	cbz	r3, 80052d0 <etharp_find_entry.isra.0+0xcc>
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <etharp_find_entry.isra.0+0x104>)
 80052c4:	4913      	ldr	r1, [pc, #76]	; (8005314 <etharp_find_entry.isra.0+0x110>)
 80052c6:	4812      	ldr	r0, [pc, #72]	; (8005310 <etharp_find_entry.isra.0+0x10c>)
 80052c8:	f240 126f 	movw	r2, #367	; 0x16f
 80052cc:	f006 fb45 	bl	800b95a <iprintf>
    etharp_free_entry(i);
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ff17 	bl	8005104 <etharp_free_entry>
 80052d6:	e7d4      	b.n	8005282 <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80052d8:	f1bc 0f0a 	cmp.w	ip, #10
 80052dc:	d002      	beq.n	80052e4 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 80052de:	fa5f f78c 	uxtb.w	r7, ip
 80052e2:	e7f5      	b.n	80052d0 <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80052e4:	2a0a      	cmp	r2, #10
 80052e6:	d0af      	beq.n	8005248 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 80052e8:	b2d7      	uxtb	r7, r2
 80052ea:	e7f1      	b.n	80052d0 <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 80052ec:	2f01      	cmp	r7, #1
 80052ee:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 80052f2:	d1bf      	bne.n	8005274 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 80052f4:	681f      	ldr	r7, [r3, #0]
 80052f6:	2f00      	cmp	r7, #0
 80052f8:	d0b6      	beq.n	8005268 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 80052fa:	45da      	cmp	sl, fp
 80052fc:	d397      	bcc.n	800522e <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 80052fe:	b242      	sxtb	r2, r0
 8005300:	46d3      	mov	fp, sl
 8005302:	e794      	b.n	800522e <etharp_find_entry.isra.0+0x2a>
 8005304:	20003e40 	.word	0x20003e40
 8005308:	0800c920 	.word	0x0800c920
 800530c:	0800c842 	.word	0x0800c842
 8005310:	0800c0d7 	.word	0x0800c0d7
 8005314:	0800c82b 	.word	0x0800c82b

08005318 <etharp_cleanup_netif>:
{
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4d08      	ldr	r5, [pc, #32]	; (800533c <etharp_cleanup_netif+0x24>)
 800531c:	4606      	mov	r6, r0
 800531e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005320:	7d2b      	ldrb	r3, [r5, #20]
 8005322:	b12b      	cbz	r3, 8005330 <etharp_cleanup_netif+0x18>
 8005324:	68ab      	ldr	r3, [r5, #8]
 8005326:	42b3      	cmp	r3, r6
 8005328:	d102      	bne.n	8005330 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800532a:	4620      	mov	r0, r4
 800532c:	f7ff feea 	bl	8005104 <etharp_free_entry>
 8005330:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005332:	2c0a      	cmp	r4, #10
 8005334:	f105 0518 	add.w	r5, r5, #24
 8005338:	d1f2      	bne.n	8005320 <etharp_cleanup_netif+0x8>
}
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	20003e40 	.word	0x20003e40

08005340 <etharp_input>:
{
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	4680      	mov	r8, r0
 8005346:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005348:	460c      	mov	r4, r1
 800534a:	b949      	cbnz	r1, 8005360 <etharp_input+0x20>
 800534c:	4b46      	ldr	r3, [pc, #280]	; (8005468 <etharp_input+0x128>)
 800534e:	4947      	ldr	r1, [pc, #284]	; (800546c <etharp_input+0x12c>)
 8005350:	4847      	ldr	r0, [pc, #284]	; (8005470 <etharp_input+0x130>)
 8005352:	f44f 7222 	mov.w	r2, #648	; 0x288
 8005356:	f006 fb00 	bl	800b95a <iprintf>
}
 800535a:	b006      	add	sp, #24
 800535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8005360:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005362:	882b      	ldrh	r3, [r5, #0]
 8005364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005368:	d108      	bne.n	800537c <etharp_input+0x3c>
 800536a:	792b      	ldrb	r3, [r5, #4]
 800536c:	2b06      	cmp	r3, #6
 800536e:	d105      	bne.n	800537c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005370:	796b      	ldrb	r3, [r5, #5]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d102      	bne.n	800537c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005376:	886b      	ldrh	r3, [r5, #2]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d003      	beq.n	8005384 <etharp_input+0x44>
  pbuf_free(p);
 800537c:	4640      	mov	r0, r8
 800537e:	f001 fd29 	bl	8006dd4 <pbuf_free>
 8005382:	e7ea      	b.n	800535a <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005384:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8005386:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800538a:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800538c:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800538e:	b116      	cbz	r6, 8005396 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005390:	1b9b      	subs	r3, r3, r6
 8005392:	425e      	negs	r6, r3
 8005394:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005396:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800539a:	2e00      	cmp	r6, #0
 800539c:	bf14      	ite	ne
 800539e:	f04f 0901 	movne.w	r9, #1
 80053a2:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80053a6:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80053a8:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80053ac:	d006      	beq.n	80053bc <etharp_input+0x7c>
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <etharp_input+0x128>)
 80053b0:	4930      	ldr	r1, [pc, #192]	; (8005474 <etharp_input+0x134>)
 80053b2:	482f      	ldr	r0, [pc, #188]	; (8005470 <etharp_input+0x130>)
 80053b4:	f240 12ab 	movw	r2, #427	; 0x1ab
 80053b8:	f006 facf 	bl	800b95a <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80053bc:	9805      	ldr	r0, [sp, #20]
 80053be:	2800      	cmp	r0, #0
 80053c0:	d03c      	beq.n	800543c <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80053c2:	4621      	mov	r1, r4
 80053c4:	f000 fc95 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80053c8:	4682      	mov	sl, r0
 80053ca:	bbb8      	cbnz	r0, 800543c <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 80053cc:	9b05      	ldr	r3, [sp, #20]
 80053ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80053d2:	2be0      	cmp	r3, #224	; 0xe0
 80053d4:	d032      	beq.n	800543c <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 80053d6:	4649      	mov	r1, r9
 80053d8:	a805      	add	r0, sp, #20
 80053da:	f7ff ff13 	bl	8005204 <etharp_find_entry.isra.0>
  if (i < 0) {
 80053de:	2800      	cmp	r0, #0
 80053e0:	db2c      	blt.n	800543c <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80053e2:	4b25      	ldr	r3, [pc, #148]	; (8005478 <etharp_input+0x138>)
 80053e4:	2218      	movs	r2, #24
 80053e6:	fb02 f100 	mul.w	r1, r2, r0
 80053ea:	eb03 0e01 	add.w	lr, r3, r1
 80053ee:	f04f 0c02 	mov.w	ip, #2
 80053f2:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80053f6:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80053fa:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80053fe:	fb12 c200 	smlabb	r2, r2, r0, ip
 8005402:	6838      	ldr	r0, [r7, #0]
 8005404:	5098      	str	r0, [r3, r2]
 8005406:	eb03 0c02 	add.w	ip, r3, r2
 800540a:	88ba      	ldrh	r2, [r7, #4]
 800540c:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8005410:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8005414:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8005418:	f1b9 0f00 	cmp.w	r9, #0
 800541c:	d00e      	beq.n	800543c <etharp_input+0xfc>
    arp_table[i].q = NULL;
 800541e:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800542c:	463b      	mov	r3, r7
 800542e:	4649      	mov	r1, r9
 8005430:	4620      	mov	r0, r4
 8005432:	f005 fbeb 	bl	800ac0c <ethernet_output>
    pbuf_free(p);
 8005436:	4648      	mov	r0, r9
 8005438:	f001 fccc 	bl	8006dd4 <pbuf_free>
  switch (hdr->opcode) {
 800543c:	88eb      	ldrh	r3, [r5, #6]
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	d19b      	bne.n	800537c <etharp_input+0x3c>
    if (for_us) {
 8005444:	2e00      	cmp	r6, #0
 8005446:	d099      	beq.n	800537c <etharp_input+0x3c>
      etharp_raw(netif,
 8005448:	2202      	movs	r2, #2
 800544a:	9203      	str	r2, [sp, #12]
 800544c:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800544e:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8005452:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005454:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8005456:	9200      	str	r2, [sp, #0]
 8005458:	9701      	str	r7, [sp, #4]
 800545a:	463a      	mov	r2, r7
 800545c:	4619      	mov	r1, r3
 800545e:	4620      	mov	r0, r4
 8005460:	f7ff fe64 	bl	800512c <etharp_raw>
 8005464:	e78a      	b.n	800537c <etharp_input+0x3c>
 8005466:	bf00      	nop
 8005468:	0800c920 	.word	0x0800c920
 800546c:	0800c957 	.word	0x0800c957
 8005470:	0800c0d7 	.word	0x0800c0d7
 8005474:	0800c88a 	.word	0x0800c88a
 8005478:	20003e40 	.word	0x20003e40

0800547c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800547c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800547e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005480:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8005484:	9102      	str	r1, [sp, #8]
 8005486:	2401      	movs	r4, #1
 8005488:	4905      	ldr	r1, [pc, #20]	; (80054a0 <etharp_request+0x24>)
 800548a:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800548c:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800548e:	9200      	str	r2, [sp, #0]
 8005490:	9403      	str	r4, [sp, #12]
 8005492:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <etharp_request+0x28>)
 8005494:	4619      	mov	r1, r3
 8005496:	f7ff fe49 	bl	800512c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800549a:	b004      	add	sp, #16
 800549c:	bd10      	pop	{r4, pc}
 800549e:	bf00      	nop
 80054a0:	0800dfea 	.word	0x0800dfea
 80054a4:	0800df7e 	.word	0x0800df7e

080054a8 <etharp_tmr>:
{
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	4c13      	ldr	r4, [pc, #76]	; (80054f8 <etharp_tmr+0x50>)
 80054ac:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80054ae:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80054b0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80054b2:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80054b4:	b16a      	cbz	r2, 80054d2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80054b6:	89e3      	ldrh	r3, [r4, #14]
 80054b8:	3301      	adds	r3, #1
 80054ba:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80054bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80054c0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80054c2:	d203      	bcs.n	80054cc <etharp_tmr+0x24>
 80054c4:	2a01      	cmp	r2, #1
 80054c6:	d10a      	bne.n	80054de <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d90c      	bls.n	80054e6 <etharp_tmr+0x3e>
        etharp_free_entry(i);
 80054cc:	4628      	mov	r0, r5
 80054ce:	f7ff fe19 	bl	8005104 <etharp_free_entry>
 80054d2:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80054d4:	2d0a      	cmp	r5, #10
 80054d6:	f104 0418 	add.w	r4, r4, #24
 80054da:	d1ea      	bne.n	80054b2 <etharp_tmr+0xa>
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80054de:	2a03      	cmp	r2, #3
 80054e0:	d106      	bne.n	80054f0 <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80054e2:	7427      	strb	r7, [r4, #16]
 80054e4:	e7f5      	b.n	80054d2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80054e6:	4621      	mov	r1, r4
 80054e8:	6860      	ldr	r0, [r4, #4]
 80054ea:	f7ff ffc7 	bl	800547c <etharp_request>
 80054ee:	e7f0      	b.n	80054d2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80054f0:	2a04      	cmp	r2, #4
 80054f2:	d1ee      	bne.n	80054d2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80054f4:	7426      	strb	r6, [r4, #16]
 80054f6:	e7ec      	b.n	80054d2 <etharp_tmr+0x2a>
 80054f8:	20003e44 	.word	0x20003e44

080054fc <etharp_output_to_arp_index>:
{
 80054fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005500:	4d27      	ldr	r5, [pc, #156]	; (80055a0 <etharp_output_to_arp_index+0xa4>)
{
 8005502:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005504:	2218      	movs	r2, #24
 8005506:	fb02 5204 	mla	r2, r2, r4, r5
{
 800550a:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800550c:	7d12      	ldrb	r2, [r2, #20]
 800550e:	2a01      	cmp	r2, #1
{
 8005510:	4606      	mov	r6, r0
 8005512:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005514:	d806      	bhi.n	8005524 <etharp_output_to_arp_index+0x28>
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <etharp_output_to_arp_index+0xa8>)
 8005518:	4923      	ldr	r1, [pc, #140]	; (80055a8 <etharp_output_to_arp_index+0xac>)
 800551a:	4824      	ldr	r0, [pc, #144]	; (80055ac <etharp_output_to_arp_index+0xb0>)
 800551c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005520:	f006 fa1b 	bl	800b95a <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005524:	2118      	movs	r1, #24
 8005526:	fb01 5904 	mla	r9, r1, r4, r5
 800552a:	f106 0725 	add.w	r7, r6, #37	; 0x25
 800552e:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d10d      	bne.n	8005552 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005536:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800553a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800553e:	d917      	bls.n	8005570 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005540:	4649      	mov	r1, r9
 8005542:	3104      	adds	r1, #4
 8005544:	4630      	mov	r0, r6
 8005546:	f7ff ff99 	bl	800547c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800554a:	b910      	cbnz	r0, 8005552 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800554c:	2303      	movs	r3, #3
 800554e:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005552:	2318      	movs	r3, #24
 8005554:	fb03 5304 	mla	r3, r3, r4, r5
 8005558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555c:	9200      	str	r2, [sp, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	463a      	mov	r2, r7
 8005562:	4641      	mov	r1, r8
 8005564:	4630      	mov	r0, r6
 8005566:	f005 fb51 	bl	800ac0c <ethernet_output>
}
 800556a:	b005      	add	sp, #20
 800556c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005570:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005574:	d3ed      	bcc.n	8005552 <etharp_output_to_arp_index+0x56>
 8005576:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800557a:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800557c:	f103 020c 	add.w	r2, r3, #12
 8005580:	3304      	adds	r3, #4
 8005582:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005584:	9302      	str	r3, [sp, #8]
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <etharp_output_to_arp_index+0xb4>)
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800558c:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800558e:	9103      	str	r1, [sp, #12]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	442a      	add	r2, r5
 8005594:	463b      	mov	r3, r7
 8005596:	4639      	mov	r1, r7
 8005598:	4630      	mov	r0, r6
 800559a:	f7ff fdc7 	bl	800512c <etharp_raw>
 800559e:	e7d4      	b.n	800554a <etharp_output_to_arp_index+0x4e>
 80055a0:	20003e40 	.word	0x20003e40
 80055a4:	0800c920 	.word	0x0800c920
 80055a8:	0800c8ae 	.word	0x0800c8ae
 80055ac:	0800c0d7 	.word	0x0800c0d7
 80055b0:	0800dfea 	.word	0x0800dfea

080055b4 <etharp_query>:
{
 80055b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	4689      	mov	r9, r1
 80055ba:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80055bc:	4601      	mov	r1, r0
 80055be:	f8d9 0000 	ldr.w	r0, [r9]
{
 80055c2:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80055c4:	f000 fb95 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 80055c8:	4604      	mov	r4, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d15e      	bne.n	800568c <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 80055ce:	f8d9 3000 	ldr.w	r3, [r9]
 80055d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80055d6:	2ae0      	cmp	r2, #224	; 0xe0
 80055d8:	d058      	beq.n	800568c <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d056      	beq.n	800568c <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80055de:	2101      	movs	r1, #1
 80055e0:	4648      	mov	r0, r9
 80055e2:	f7ff fe0f 	bl	8005204 <etharp_find_entry.isra.0>
  if (i < 0) {
 80055e6:	1e05      	subs	r5, r0, #0
 80055e8:	db53      	blt.n	8005692 <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80055ea:	4f40      	ldr	r7, [pc, #256]	; (80056ec <etharp_query+0x138>)
 80055ec:	2318      	movs	r3, #24
 80055ee:	fb03 7305 	mla	r3, r3, r5, r7
 80055f2:	7d1a      	ldrb	r2, [r3, #20]
 80055f4:	b91a      	cbnz	r2, 80055fe <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80055f6:	2401      	movs	r4, #1
 80055f8:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 80055fa:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80055fe:	2318      	movs	r3, #24
 8005600:	fb03 7305 	mla	r3, r3, r5, r7
 8005604:	7d1b      	ldrb	r3, [r3, #20]
 8005606:	b933      	cbnz	r3, 8005616 <etharp_query+0x62>
 8005608:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <etharp_query+0x13c>)
 800560a:	493a      	ldr	r1, [pc, #232]	; (80056f4 <etharp_query+0x140>)
 800560c:	483a      	ldr	r0, [pc, #232]	; (80056f8 <etharp_query+0x144>)
 800560e:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005612:	f006 f9a2 	bl	800b95a <iprintf>
  if (is_new_entry || (q == NULL)) {
 8005616:	b90c      	cbnz	r4, 800561c <etharp_query+0x68>
 8005618:	2e00      	cmp	r6, #0
 800561a:	d13c      	bne.n	8005696 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 800561c:	4649      	mov	r1, r9
 800561e:	4640      	mov	r0, r8
 8005620:	f7ff ff2c 	bl	800547c <etharp_request>
    if (q == NULL) {
 8005624:	2e00      	cmp	r6, #0
 8005626:	d138      	bne.n	800569a <etharp_query+0xe6>
}
 8005628:	b002      	add	sp, #8
 800562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800562e:	d1fb      	bne.n	8005628 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005630:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80056f0 <etharp_query+0x13c>
 8005634:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005700 <etharp_query+0x14c>
 8005638:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80056f8 <etharp_query+0x144>
 800563c:	4634      	mov	r4, r6
    while (p) {
 800563e:	b99c      	cbnz	r4, 8005668 <etharp_query+0xb4>
      pbuf_ref(p);
 8005640:	4630      	mov	r0, r6
 8005642:	f001 fd85 	bl	8007150 <pbuf_ref>
    if (p != NULL) {
 8005646:	2e00      	cmp	r6, #0
 8005648:	d04c      	beq.n	80056e4 <etharp_query+0x130>
 800564a:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 800564c:	2318      	movs	r3, #24
 800564e:	fb03 f205 	mul.w	r2, r3, r5
 8005652:	461c      	mov	r4, r3
 8005654:	58b8      	ldr	r0, [r7, r2]
 8005656:	b108      	cbz	r0, 800565c <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8005658:	f001 fbbc 	bl	8006dd4 <pbuf_free>
      arp_table[i].q = p;
 800565c:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8005660:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8005662:	f847 8003 	str.w	r8, [r7, r3]
 8005666:	e7df      	b.n	8005628 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005668:	8962      	ldrh	r2, [r4, #10]
 800566a:	8923      	ldrh	r3, [r4, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d108      	bne.n	8005682 <etharp_query+0xce>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	b133      	cbz	r3, 8005682 <etharp_query+0xce>
 8005674:	4643      	mov	r3, r8
 8005676:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800567a:	4649      	mov	r1, r9
 800567c:	4650      	mov	r0, sl
 800567e:	f006 f96c 	bl	800b95a <iprintf>
      if (p->type != PBUF_ROM) {
 8005682:	7b23      	ldrb	r3, [r4, #12]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d11e      	bne.n	80056c6 <etharp_query+0x112>
      p = p->next;
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	e7d8      	b.n	800563e <etharp_query+0x8a>
    return ERR_ARG;
 800568c:	f06f 000f 	mvn.w	r0, #15
 8005690:	e7ca      	b.n	8005628 <etharp_query+0x74>
 8005692:	4628      	mov	r0, r5
 8005694:	e7c8      	b.n	8005628 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8005696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800569a:	2318      	movs	r3, #24
 800569c:	fb03 7205 	mla	r2, r3, r5, r7
 80056a0:	7d12      	ldrb	r2, [r2, #20]
 80056a2:	2a01      	cmp	r2, #1
 80056a4:	d9c3      	bls.n	800562e <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <etharp_query+0x148>)
 80056a8:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80056aa:	220c      	movs	r2, #12
 80056ac:	fb13 2305 	smlabb	r3, r3, r5, r2
 80056b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b4:	9200      	str	r2, [sp, #0]
 80056b6:	443b      	add	r3, r7
 80056b8:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80056bc:	4631      	mov	r1, r6
 80056be:	4640      	mov	r0, r8
 80056c0:	f005 faa4 	bl	800ac0c <ethernet_output>
 80056c4:	e7b0      	b.n	8005628 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80056c6:	2200      	movs	r2, #0
 80056c8:	8921      	ldrh	r1, [r4, #8]
 80056ca:	2002      	movs	r0, #2
 80056cc:	f001 fbec 	bl	8006ea8 <pbuf_alloc>
      if (p != NULL) {
 80056d0:	4680      	mov	r8, r0
 80056d2:	b138      	cbz	r0, 80056e4 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80056d4:	4631      	mov	r1, r6
 80056d6:	f001 fd9b 	bl	8007210 <pbuf_copy>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d0b6      	beq.n	800564c <etharp_query+0x98>
          pbuf_free(p);
 80056de:	4640      	mov	r0, r8
 80056e0:	f001 fb78 	bl	8006dd4 <pbuf_free>
      result = ERR_MEM;
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e8:	e79e      	b.n	8005628 <etharp_query+0x74>
 80056ea:	bf00      	nop
 80056ec:	20003e40 	.word	0x20003e40
 80056f0:	0800c920 	.word	0x0800c920
 80056f4:	0800c8de 	.word	0x0800c8de
 80056f8:	0800c0d7 	.word	0x0800c0d7
 80056fc:	20003f30 	.word	0x20003f30
 8005700:	0800c906 	.word	0x0800c906

08005704 <etharp_output>:
{
 8005704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005706:	460e      	mov	r6, r1
 8005708:	b085      	sub	sp, #20
 800570a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800570c:	4604      	mov	r4, r0
 800570e:	b930      	cbnz	r0, 800571e <etharp_output+0x1a>
 8005710:	4b3e      	ldr	r3, [pc, #248]	; (800580c <etharp_output+0x108>)
 8005712:	493f      	ldr	r1, [pc, #252]	; (8005810 <etharp_output+0x10c>)
 8005714:	483f      	ldr	r0, [pc, #252]	; (8005814 <etharp_output+0x110>)
 8005716:	f240 321b 	movw	r2, #795	; 0x31b
 800571a:	f006 f91e 	bl	800b95a <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800571e:	b936      	cbnz	r6, 800572e <etharp_output+0x2a>
 8005720:	4b3a      	ldr	r3, [pc, #232]	; (800580c <etharp_output+0x108>)
 8005722:	493d      	ldr	r1, [pc, #244]	; (8005818 <etharp_output+0x114>)
 8005724:	483b      	ldr	r0, [pc, #236]	; (8005814 <etharp_output+0x110>)
 8005726:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800572a:	f006 f916 	bl	800b95a <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800572e:	b935      	cbnz	r5, 800573e <etharp_output+0x3a>
 8005730:	4b36      	ldr	r3, [pc, #216]	; (800580c <etharp_output+0x108>)
 8005732:	493a      	ldr	r1, [pc, #232]	; (800581c <etharp_output+0x118>)
 8005734:	4837      	ldr	r0, [pc, #220]	; (8005814 <etharp_output+0x110>)
 8005736:	f240 321d 	movw	r2, #797	; 0x31d
 800573a:	f006 f90e 	bl	800b95a <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800573e:	4621      	mov	r1, r4
 8005740:	6828      	ldr	r0, [r5, #0]
 8005742:	f000 fad6 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 8005746:	2800      	cmp	r0, #0
 8005748:	d15b      	bne.n	8005802 <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005750:	2ae0      	cmp	r2, #224	; 0xe0
 8005752:	d11d      	bne.n	8005790 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005754:	2301      	movs	r3, #1
 8005756:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800575a:	235e      	movs	r3, #94	; 0x5e
 800575c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005760:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005762:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800576e:	78ab      	ldrb	r3, [r5, #2]
 8005770:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005774:	78eb      	ldrb	r3, [r5, #3]
 8005776:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800577a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800577c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005780:	9200      	str	r2, [sp, #0]
 8005782:	4631      	mov	r1, r6
 8005784:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8005788:	4620      	mov	r0, r4
 800578a:	f005 fa3f 	bl	800ac0c <ethernet_output>
 800578e:	e01f      	b.n	80057d0 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005790:	6862      	ldr	r2, [r4, #4]
 8005792:	68a1      	ldr	r1, [r4, #8]
 8005794:	405a      	eors	r2, r3
 8005796:	420a      	tst	r2, r1
 8005798:	d008      	beq.n	80057ac <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 800579a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800579c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80057a4:	68e3      	ldr	r3, [r4, #12]
 80057a6:	b373      	cbz	r3, 8005806 <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80057a8:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80057ac:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <etharp_output+0x11c>)
 80057ae:	491d      	ldr	r1, [pc, #116]	; (8005824 <etharp_output+0x120>)
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	2018      	movs	r0, #24
 80057b4:	fb00 1002 	mla	r0, r0, r2, r1
 80057b8:	7d01      	ldrb	r1, [r0, #20]
 80057ba:	2901      	cmp	r1, #1
 80057bc:	4619      	mov	r1, r3
 80057be:	d909      	bls.n	80057d4 <etharp_output+0xd0>
 80057c0:	682f      	ldr	r7, [r5, #0]
 80057c2:	6843      	ldr	r3, [r0, #4]
 80057c4:	429f      	cmp	r7, r3
 80057c6:	d105      	bne.n	80057d4 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80057c8:	4631      	mov	r1, r6
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff fe96 	bl	80054fc <etharp_output_to_arp_index>
}
 80057d0:	b005      	add	sp, #20
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <etharp_output+0x120>)
{
 80057d6:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80057d8:	7d18      	ldrb	r0, [r3, #20]
 80057da:	2801      	cmp	r0, #1
 80057dc:	d906      	bls.n	80057ec <etharp_output+0xe8>
 80057de:	682f      	ldr	r7, [r5, #0]
 80057e0:	6858      	ldr	r0, [r3, #4]
 80057e2:	4287      	cmp	r7, r0
 80057e4:	d102      	bne.n	80057ec <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	700a      	strb	r2, [r1, #0]
 80057ea:	e7ed      	b.n	80057c8 <etharp_output+0xc4>
 80057ec:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80057ee:	2a0a      	cmp	r2, #10
 80057f0:	f103 0318 	add.w	r3, r3, #24
 80057f4:	d1f0      	bne.n	80057d8 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 80057f6:	4632      	mov	r2, r6
 80057f8:	4629      	mov	r1, r5
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff feda 	bl	80055b4 <etharp_query>
 8005800:	e7e6      	b.n	80057d0 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <etharp_output+0x124>)
 8005804:	e7ba      	b.n	800577c <etharp_output+0x78>
            return ERR_RTE;
 8005806:	f06f 0003 	mvn.w	r0, #3
 800580a:	e7e1      	b.n	80057d0 <etharp_output+0xcc>
 800580c:	0800c920 	.word	0x0800c920
 8005810:	0800c957 	.word	0x0800c957
 8005814:	0800c0d7 	.word	0x0800c0d7
 8005818:	0800d3a3 	.word	0x0800d3a3
 800581c:	0800c86b 	.word	0x0800c86b
 8005820:	20003f30 	.word	0x20003f30
 8005824:	20003e40 	.word	0x20003e40
 8005828:	0800df7e 	.word	0x0800df7e

0800582c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800582c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800582e:	4604      	mov	r4, r0
 8005830:	b087      	sub	sp, #28
 8005832:	460f      	mov	r7, r1
 8005834:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005836:	2124      	movs	r1, #36	; 0x24
 8005838:	2200      	movs	r2, #0
 800583a:	2001      	movs	r0, #1
 800583c:	f001 fb34 	bl	8006ea8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005840:	4605      	mov	r5, r0
 8005842:	b3a0      	cbz	r0, 80058ae <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005844:	8943      	ldrh	r3, [r0, #10]
 8005846:	2b23      	cmp	r3, #35	; 0x23
 8005848:	d806      	bhi.n	8005858 <icmp_send_response.isra.0+0x2c>
 800584a:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <icmp_send_response.isra.0+0x88>)
 800584c:	491a      	ldr	r1, [pc, #104]	; (80058b8 <icmp_send_response.isra.0+0x8c>)
 800584e:	481b      	ldr	r0, [pc, #108]	; (80058bc <icmp_send_response.isra.0+0x90>)
 8005850:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005854:	f006 f881 	bl	800b95a <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005858:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800585a:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	7123      	strb	r3, [r4, #4]
 8005860:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8005862:	71a3      	strb	r3, [r4, #6]
 8005864:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8005866:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8005868:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800586a:	4613      	mov	r3, r2
 800586c:	f104 0108 	add.w	r1, r4, #8
 8005870:	f102 001c 	add.w	r0, r2, #28
 8005874:	f853 6b04 	ldr.w	r6, [r3], #4
 8005878:	f841 6b04 	str.w	r6, [r1], #4
 800587c:	4283      	cmp	r3, r0
 800587e:	d1f9      	bne.n	8005874 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005880:	ae06      	add	r6, sp, #24
 8005882:	68d3      	ldr	r3, [r2, #12]
 8005884:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005888:	4630      	mov	r0, r6
 800588a:	f000 f8bb 	bl	8005a04 <ip4_route>
#endif
  if (netif != NULL) {
 800588e:	b158      	cbz	r0, 80058a8 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005890:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005892:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8005894:	70a1      	strb	r1, [r4, #2]
 8005896:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005898:	4632      	mov	r2, r6
 800589a:	9002      	str	r0, [sp, #8]
 800589c:	e88d 000a 	stmia.w	sp, {r1, r3}
 80058a0:	4628      	mov	r0, r5
 80058a2:	23ff      	movs	r3, #255	; 0xff
 80058a4:	f000 fa14 	bl	8005cd0 <ip4_output_if>
  }
  pbuf_free(q);
 80058a8:	4628      	mov	r0, r5
 80058aa:	f001 fa93 	bl	8006dd4 <pbuf_free>
}
 80058ae:	b007      	add	sp, #28
 80058b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	0800ca3e 	.word	0x0800ca3e
 80058b8:	0800ca73 	.word	0x0800ca73
 80058bc:	0800c0d7 	.word	0x0800c0d7

080058c0 <icmp_input>:
{
 80058c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80058c4:	4b44      	ldr	r3, [pc, #272]	; (80059d8 <icmp_input+0x118>)
 80058c6:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 80058ca:	f899 5000 	ldrb.w	r5, [r9]
 80058ce:	f005 050f 	and.w	r5, r5, #15
 80058d2:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80058d4:	2d13      	cmp	r5, #19
{
 80058d6:	b085      	sub	sp, #20
 80058d8:	4604      	mov	r4, r0
 80058da:	4688      	mov	r8, r1
 80058dc:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 80058de:	d92a      	bls.n	8005936 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80058e0:	8942      	ldrh	r2, [r0, #10]
 80058e2:	2a03      	cmp	r2, #3
 80058e4:	d927      	bls.n	8005936 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80058e6:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	2a08      	cmp	r2, #8
 80058ec:	d123      	bne.n	8005936 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80058ee:	6958      	ldr	r0, [r3, #20]
 80058f0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80058f4:	2ae0      	cmp	r2, #224	; 0xe0
 80058f6:	d01e      	beq.n	8005936 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	f000 f9fa 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 80058fe:	4606      	mov	r6, r0
 8005900:	b9c8      	cbnz	r0, 8005936 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005902:	8923      	ldrh	r3, [r4, #8]
 8005904:	2b07      	cmp	r3, #7
 8005906:	d916      	bls.n	8005936 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005908:	f105 010e 	add.w	r1, r5, #14
 800590c:	4620      	mov	r0, r4
 800590e:	f001 fa5b 	bl	8006dc8 <pbuf_header>
 8005912:	2800      	cmp	r0, #0
 8005914:	d04f      	beq.n	80059b6 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8005916:	8921      	ldrh	r1, [r4, #8]
 8005918:	4429      	add	r1, r5
 800591a:	4632      	mov	r2, r6
 800591c:	b289      	uxth	r1, r1
 800591e:	2002      	movs	r0, #2
 8005920:	f001 fac2 	bl	8006ea8 <pbuf_alloc>
      if (r == NULL) {
 8005924:	4606      	mov	r6, r0
 8005926:	b130      	cbz	r0, 8005936 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005928:	8942      	ldrh	r2, [r0, #10]
 800592a:	f105 0308 	add.w	r3, r5, #8
 800592e:	429a      	cmp	r2, r3
 8005930:	d207      	bcs.n	8005942 <icmp_input+0x82>
        pbuf_free(r);
 8005932:	f001 fa4f 	bl	8006dd4 <pbuf_free>
  pbuf_free(p);
 8005936:	4620      	mov	r0, r4
}
 8005938:	b005      	add	sp, #20
 800593a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800593e:	f001 ba49 	b.w	8006dd4 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8005942:	4649      	mov	r1, r9
 8005944:	462a      	mov	r2, r5
 8005946:	6840      	ldr	r0, [r0, #4]
 8005948:	f006 f96f 	bl	800bc2a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800594c:	4269      	negs	r1, r5
 800594e:	4630      	mov	r0, r6
 8005950:	f001 fa3a 	bl	8006dc8 <pbuf_header>
 8005954:	b138      	cbz	r0, 8005966 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005956:	4b21      	ldr	r3, [pc, #132]	; (80059dc <icmp_input+0x11c>)
 8005958:	4921      	ldr	r1, [pc, #132]	; (80059e0 <icmp_input+0x120>)
 800595a:	4822      	ldr	r0, [pc, #136]	; (80059e4 <icmp_input+0x124>)
 800595c:	22af      	movs	r2, #175	; 0xaf
 800595e:	f005 fffc 	bl	800b95a <iprintf>
        pbuf_free(r);
 8005962:	4630      	mov	r0, r6
 8005964:	e7e5      	b.n	8005932 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8005966:	4621      	mov	r1, r4
 8005968:	4630      	mov	r0, r6
 800596a:	f001 fc51 	bl	8007210 <pbuf_copy>
 800596e:	2800      	cmp	r0, #0
 8005970:	d1f7      	bne.n	8005962 <icmp_input+0xa2>
      pbuf_free(p);
 8005972:	4620      	mov	r0, r4
 8005974:	f001 fa2e 	bl	8006dd4 <pbuf_free>
 8005978:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 800597a:	4629      	mov	r1, r5
 800597c:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800597e:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005980:	f001 fa22 	bl	8006dc8 <pbuf_header>
 8005984:	4602      	mov	r2, r0
 8005986:	2800      	cmp	r0, #0
 8005988:	d1d5      	bne.n	8005936 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800598a:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005994:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005996:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8005998:	70b0      	strb	r0, [r6, #2]
 800599a:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800599c:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800599e:	7288      	strb	r0, [r1, #10]
 80059a0:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80059a2:	2101      	movs	r1, #1
 80059a4:	9101      	str	r1, [sp, #4]
 80059a6:	9000      	str	r0, [sp, #0]
 80059a8:	f8cd 8008 	str.w	r8, [sp, #8]
 80059ac:	490e      	ldr	r1, [pc, #56]	; (80059e8 <icmp_input+0x128>)
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 f98e 	bl	8005cd0 <ip4_output_if>
 80059b4:	e7bf      	b.n	8005936 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80059b6:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80059ba:	31f2      	adds	r1, #242	; 0xf2
 80059bc:	b209      	sxth	r1, r1
 80059be:	4620      	mov	r0, r4
 80059c0:	f001 fa02 	bl	8006dc8 <pbuf_header>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d0d8      	beq.n	800597a <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <icmp_input+0x11c>)
 80059ca:	4908      	ldr	r1, [pc, #32]	; (80059ec <icmp_input+0x12c>)
 80059cc:	4805      	ldr	r0, [pc, #20]	; (80059e4 <icmp_input+0x124>)
 80059ce:	22c0      	movs	r2, #192	; 0xc0
 80059d0:	f005 ffc3 	bl	800b95a <iprintf>
        goto icmperr;
 80059d4:	e7af      	b.n	8005936 <icmp_input+0x76>
 80059d6:	bf00      	nop
 80059d8:	20004274 	.word	0x20004274
 80059dc:	0800ca3e 	.word	0x0800ca3e
 80059e0:	0800c9d7 	.word	0x0800c9d7
 80059e4:	0800c0d7 	.word	0x0800c0d7
 80059e8:	20004288 	.word	0x20004288
 80059ec:	0800ca0c 	.word	0x0800ca0c

080059f0 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80059f0:	460a      	mov	r2, r1
 80059f2:	3004      	adds	r0, #4
 80059f4:	2103      	movs	r1, #3
 80059f6:	f7ff bf19 	b.w	800582c <icmp_send_response.isra.0>

080059fa <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 80059fa:	460a      	mov	r2, r1
 80059fc:	3004      	adds	r0, #4
 80059fe:	210b      	movs	r1, #11
 8005a00:	f7ff bf14 	b.w	800582c <icmp_send_response.isra.0>

08005a04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8005a04:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <ip4_route+0x50>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	b96b      	cbnz	r3, 8005a28 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005a0c:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <ip4_route+0x54>)
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	b1ea      	cbz	r2, 8005a4e <ip4_route+0x4a>
 8005a12:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8005a16:	f001 0105 	and.w	r1, r1, #5
 8005a1a:	2905      	cmp	r1, #5
 8005a1c:	d117      	bne.n	8005a4e <ip4_route+0x4a>
 8005a1e:	6851      	ldr	r1, [r2, #4]
 8005a20:	2900      	cmp	r1, #0
 8005a22:	bf18      	it	ne
 8005a24:	4613      	movne	r3, r2
 8005a26:	e012      	b.n	8005a4e <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005a28:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8005a2c:	f004 0205 	and.w	r2, r4, #5
 8005a30:	2a05      	cmp	r2, #5
 8005a32:	d1e9      	bne.n	8005a08 <ip4_route+0x4>
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d0e6      	beq.n	8005a08 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005a3a:	6801      	ldr	r1, [r0, #0]
 8005a3c:	689d      	ldr	r5, [r3, #8]
 8005a3e:	404a      	eors	r2, r1
 8005a40:	422a      	tst	r2, r5
 8005a42:	d004      	beq.n	8005a4e <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005a44:	07a2      	lsls	r2, r4, #30
 8005a46:	d4df      	bmi.n	8005a08 <ip4_route+0x4>
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	d1dc      	bne.n	8005a08 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	bd30      	pop	{r4, r5, pc}
 8005a52:	bf00      	nop
 8005a54:	20007968 	.word	0x20007968
 8005a58:	2000796c 	.word	0x2000796c

08005a5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005a60:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8005a62:	f897 9000 	ldrb.w	r9, [r7]
 8005a66:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005a6a:	2b04      	cmp	r3, #4
{
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8005a70:	d005      	beq.n	8005a7e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005a72:	4628      	mov	r0, r5
 8005a74:	f001 f9ae 	bl	8006dd4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005a7e:	8878      	ldrh	r0, [r7, #2]
 8005a80:	f7ff fb2a 	bl	80050d8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005a84:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8005a86:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8005a8a:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8005a8c:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005a90:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005a92:	d903      	bls.n	8005a9c <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8005a94:	4601      	mov	r1, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f001 fae2 	bl	8007060 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005a9c:	896b      	ldrh	r3, [r5, #10]
 8005a9e:	454b      	cmp	r3, r9
 8005aa0:	d3e7      	bcc.n	8005a72 <ip4_input+0x16>
 8005aa2:	892b      	ldrh	r3, [r5, #8]
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d3e4      	bcc.n	8005a72 <ip4_input+0x16>
 8005aa8:	f1b9 0f13 	cmp.w	r9, #19
 8005aac:	d9e1      	bls.n	8005a72 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4c49      	ldr	r4, [pc, #292]	; (8005bd8 <ip4_input+0x17c>)
 8005ab2:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005abc:	2be0      	cmp	r3, #224	; 0xe0
 8005abe:	d139      	bne.n	8005b34 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005ac0:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8005ac4:	07da      	lsls	r2, r3, #31
 8005ac6:	d503      	bpl.n	8005ad0 <ip4_input+0x74>
 8005ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d158      	bne.n	8005b82 <ip4_input+0x126>
      netif = NULL;
 8005ad0:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	6920      	ldr	r0, [r4, #16]
 8005ad6:	f000 f90c 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d1c9      	bne.n	8005a72 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005ae4:	2be0      	cmp	r3, #224	; 0xe0
 8005ae6:	d0c4      	beq.n	8005a72 <ip4_input+0x16>
  if (netif == NULL) {
 8005ae8:	2e00      	cmp	r6, #0
 8005aea:	d0c2      	beq.n	8005a72 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005af2:	b133      	cbz	r3, 8005b02 <ip4_input+0xa6>
    p = ip4_reass(p);
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 fad3 	bl	80060a0 <ip4_reass>
    if (p == NULL) {
 8005afa:	4605      	mov	r5, r0
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d0bb      	beq.n	8005a78 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8005b00:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8005b02:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8005b04:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8005b08:	783b      	ldrb	r3, [r7, #0]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005b10:	f1c9 0100 	rsb	r1, r9, #0
 8005b14:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8005b16:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005b18:	f001 f956 	bl	8006dc8 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8005b1c:	7a7b      	ldrb	r3, [r7, #9]
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d03d      	beq.n	8005b9e <ip4_input+0x142>
 8005b22:	2b11      	cmp	r3, #17
 8005b24:	d02f      	beq.n	8005b86 <ip4_input+0x12a>
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d13e      	bne.n	8005ba8 <ip4_input+0x14c>
      icmp_input(p, inp);
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f7ff fec7 	bl	80058c0 <icmp_input>
      break;
 8005b32:	e02c      	b.n	8005b8e <ip4_input+0x132>
        netif = netif_list;
 8005b34:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8005bdc <ip4_input+0x180>
 8005b38:	4646      	mov	r6, r8
 8005b3a:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005b3e:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8005b42:	07db      	lsls	r3, r3, #31
 8005b44:	d404      	bmi.n	8005b50 <ip4_input+0xf4>
      if (first) {
 8005b46:	f1ba 0f00 	cmp.w	sl, #0
 8005b4a:	d10d      	bne.n	8005b68 <ip4_input+0x10c>
        netif = netif->next;
 8005b4c:	6836      	ldr	r6, [r6, #0]
 8005b4e:	e010      	b.n	8005b72 <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005b50:	6873      	ldr	r3, [r6, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f7      	beq.n	8005b46 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005b56:	6960      	ldr	r0, [r4, #20]
 8005b58:	4283      	cmp	r3, r0
 8005b5a:	d0ba      	beq.n	8005ad2 <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	f000 f8c8 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d0ef      	beq.n	8005b46 <ip4_input+0xea>
 8005b66:	e7b4      	b.n	8005ad2 <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8005b68:	7d23      	ldrb	r3, [r4, #20]
 8005b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6c:	d0b0      	beq.n	8005ad0 <ip4_input+0x74>
        netif = netif_list;
 8005b6e:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8005b72:	4546      	cmp	r6, r8
        netif = netif->next;
 8005b74:	bf08      	it	eq
 8005b76:	6836      	ldreq	r6, [r6, #0]
 8005b78:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8005b7c:	2e00      	cmp	r6, #0
 8005b7e:	d1de      	bne.n	8005b3e <ip4_input+0xe2>
 8005b80:	e7a6      	b.n	8005ad0 <ip4_input+0x74>
 8005b82:	4646      	mov	r6, r8
 8005b84:	e7a5      	b.n	8005ad2 <ip4_input+0x76>
      udp_input(p, inp);
 8005b86:	4641      	mov	r1, r8
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f004 fdef 	bl	800a76c <udp_input>
  ip_data.current_netif = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8005b92:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8005b94:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005b96:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005b98:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005b9a:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005b9c:	e76c      	b.n	8005a78 <ip4_input+0x1c>
      tcp_input(p, inp);
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f003 f8a5 	bl	8008cf0 <tcp_input>
      break;
 8005ba6:	e7f2      	b.n	8005b8e <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005ba8:	4631      	mov	r1, r6
 8005baa:	6960      	ldr	r0, [r4, #20]
 8005bac:	f000 f8a1 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 8005bb0:	b968      	cbnz	r0, 8005bce <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005bb2:	6963      	ldr	r3, [r4, #20]
 8005bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005bb8:	2be0      	cmp	r3, #224	; 0xe0
 8005bba:	d008      	beq.n	8005bce <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f001 f905 	bl	8006dce <pbuf_header_force>
        p->payload = iphdr;
 8005bc4:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f7ff ff11 	bl	80059f0 <icmp_dest_unreach>
      pbuf_free(p);
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f001 f900 	bl	8006dd4 <pbuf_free>
 8005bd4:	e7db      	b.n	8005b8e <ip4_input+0x132>
 8005bd6:	bf00      	nop
 8005bd8:	20004274 	.word	0x20004274
 8005bdc:	20007968 	.word	0x20007968

08005be0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8005be0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005be6:	89c3      	ldrh	r3, [r0, #14]
{
 8005be8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005bec:	2b01      	cmp	r3, #1
{
 8005bee:	4605      	mov	r5, r0
 8005bf0:	468a      	mov	sl, r1
 8005bf2:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005bf4:	d006      	beq.n	8005c04 <ip4_output_if_src+0x24>
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <ip4_output_if_src+0xd8>)
 8005bf8:	4930      	ldr	r1, [pc, #192]	; (8005cbc <ip4_output_if_src+0xdc>)
 8005bfa:	4831      	ldr	r0, [pc, #196]	; (8005cc0 <ip4_output_if_src+0xe0>)
 8005bfc:	f240 3233 	movw	r2, #819	; 0x333
 8005c00:	f005 feab 	bl	800b95a <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	d047      	beq.n	8005c98 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8005c08:	2114      	movs	r1, #20
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f001 f8dc 	bl	8006dc8 <pbuf_header>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d14e      	bne.n	8005cb2 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005c14:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8005c16:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005c18:	2b13      	cmp	r3, #19
 8005c1a:	d806      	bhi.n	8005c2a <ip4_output_if_src+0x4a>
 8005c1c:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <ip4_output_if_src+0xd8>)
 8005c1e:	4929      	ldr	r1, [pc, #164]	; (8005cc4 <ip4_output_if_src+0xe4>)
 8005c20:	4827      	ldr	r0, [pc, #156]	; (8005cc0 <ip4_output_if_src+0xe0>)
 8005c22:	f240 3261 	movw	r2, #865	; 0x361
 8005c26:	f005 fe98 	bl	800b95a <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8005c2a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8005c2e:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8005c30:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8005c32:	6833      	ldr	r3, [r6, #0]
 8005c34:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8005c36:	2345      	movs	r3, #69	; 0x45
 8005c38:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8005c3a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005c3e:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005c40:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005c42:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005ccc <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005c46:	f7ff fa47 	bl	80050d8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8005c4a:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005c4c:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8005c4e:	71a7      	strb	r7, [r4, #6]
 8005c50:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005c52:	f8b9 0000 	ldrh.w	r0, [r9]
 8005c56:	f7ff fa3f 	bl	80050d8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8005c5a:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005c5e:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8005c60:	3301      	adds	r3, #1
 8005c62:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8005c66:	f1ba 0f00 	cmp.w	sl, #0
 8005c6a:	d112      	bne.n	8005c92 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8005c6c:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <ip4_output_if_src+0xe8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8005c70:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8005c72:	72a7      	strb	r7, [r4, #10]
 8005c74:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8005c76:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8005c7a:	b19b      	cbz	r3, 8005ca4 <ip4_output_if_src+0xc4>
 8005c7c:	892a      	ldrh	r2, [r5, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d910      	bls.n	8005ca4 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8005c82:	4632      	mov	r2, r6
 8005c84:	4641      	mov	r1, r8
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 fbb4 	bl	80063f4 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8005c8c:	b002      	add	sp, #8
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8005c92:	f8da 3000 	ldr.w	r3, [sl]
 8005c96:	e7eb      	b.n	8005c70 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005c98:	686b      	ldr	r3, [r5, #4]
 8005c9a:	ae02      	add	r6, sp, #8
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f846 3d04 	str.w	r3, [r6, #-4]!
 8005ca2:	e7e8      	b.n	8005c76 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8005ca4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4629      	mov	r1, r5
 8005cac:	4640      	mov	r0, r8
 8005cae:	4798      	blx	r3
 8005cb0:	e7ec      	b.n	8005c8c <ip4_output_if_src+0xac>
      return ERR_BUF;
 8005cb2:	f06f 0001 	mvn.w	r0, #1
 8005cb6:	e7e9      	b.n	8005c8c <ip4_output_if_src+0xac>
 8005cb8:	0800ca9f 	.word	0x0800ca9f
 8005cbc:	0800cad3 	.word	0x0800cad3
 8005cc0:	0800c0d7 	.word	0x0800c0d7
 8005cc4:	0800cadf 	.word	0x0800cadf
 8005cc8:	0800cb50 	.word	0x0800cb50
 8005ccc:	20003f32 	.word	0x20003f32

08005cd0 <ip4_output_if>:
{
 8005cd0:	b4f0      	push	{r4, r5, r6, r7}
 8005cd2:	9c06      	ldr	r4, [sp, #24]
 8005cd4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8005cd8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8005cdc:	b11a      	cbz	r2, 8005ce6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8005cde:	b109      	cbz	r1, 8005ce4 <ip4_output_if+0x14>
 8005ce0:	680f      	ldr	r7, [r1, #0]
 8005ce2:	b907      	cbnz	r7, 8005ce6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8005ce4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005ce6:	9406      	str	r4, [sp, #24]
 8005ce8:	9605      	str	r6, [sp, #20]
 8005cea:	9504      	str	r5, [sp, #16]
}
 8005cec:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005cee:	f7ff bf77 	b.w	8005be0 <ip4_output_if_src>

08005cf2 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8005cf2:	1e43      	subs	r3, r0, #1
 8005cf4:	3303      	adds	r3, #3
 8005cf6:	d811      	bhi.n	8005d1c <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8005cf8:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8005cfc:	f013 0302 	ands.w	r3, r3, #2
 8005d00:	d00e      	beq.n	8005d20 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8005d02:	684a      	ldr	r2, [r1, #4]
 8005d04:	4290      	cmp	r0, r2
 8005d06:	d00b      	beq.n	8005d20 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8005d08:	688b      	ldr	r3, [r1, #8]
 8005d0a:	4042      	eors	r2, r0
 8005d0c:	421a      	tst	r2, r3
 8005d0e:	d107      	bne.n	8005d20 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8005d10:	43db      	mvns	r3, r3
 8005d12:	4383      	bics	r3, r0
    return 1;
 8005d14:	bf0c      	ite	eq
 8005d16:	2001      	moveq	r0, #1
 8005d18:	2000      	movne	r0, #0
 8005d1a:	4770      	bx	lr
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8005d20:	2000      	movs	r0, #0
  }
}
 8005d22:	4770      	bx	lr

08005d24 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8005d24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8005d28:	7802      	ldrb	r2, [r0, #0]
{
 8005d2a:	460d      	mov	r5, r1
  u32_t *pp = parts;
 8005d2c:	466b      	mov	r3, sp
 8005d2e:	466f      	mov	r7, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8005d30:	f10d 0e0c 	add.w	lr, sp, #12
    if (!isdigit(c)) {
 8005d34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005d38:	2909      	cmp	r1, #9
 8005d3a:	f200 8085 	bhi.w	8005e48 <ip4addr_aton+0x124>
    if (c == '0') {
 8005d3e:	2a30      	cmp	r2, #48	; 0x30
 8005d40:	d118      	bne.n	8005d74 <ip4addr_aton+0x50>
      c = *++cp;
 8005d42:	7842      	ldrb	r2, [r0, #1]
      if (c == 'x' || c == 'X') {
 8005d44:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8005d48:	2958      	cmp	r1, #88	; 0x58
        c = *++cp;
 8005d4a:	bf0d      	iteet	eq
 8005d4c:	7882      	ldrbeq	r2, [r0, #2]
      c = *++cp;
 8005d4e:	3001      	addne	r0, #1
        base = 8;
 8005d50:	2608      	movne	r6, #8
        c = *++cp;
 8005d52:	3002      	addeq	r0, #2
        base = 16;
 8005d54:	bf08      	it	eq
 8005d56:	2610      	moveq	r6, #16
 8005d58:	3001      	adds	r0, #1
 8005d5a:	2400      	movs	r4, #0
      if (isdigit(c)) {
 8005d5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005d60:	2909      	cmp	r1, #9
 8005d62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8005d66:	d807      	bhi.n	8005d78 <ip4addr_aton+0x54>
        val = (val * base) + (u32_t)(c - '0');
 8005d68:	fb04 2406 	mla	r4, r4, r6, r2
 8005d6c:	3c30      	subs	r4, #48	; 0x30
        c = *++cp;
 8005d6e:	7802      	ldrb	r2, [r0, #0]
 8005d70:	3001      	adds	r0, #1
 8005d72:	e7f3      	b.n	8005d5c <ip4addr_aton+0x38>
    base = 10;
 8005d74:	260a      	movs	r6, #10
 8005d76:	e7ef      	b.n	8005d58 <ip4addr_aton+0x34>
      } else if (base == 16 && isxdigit(c)) {
 8005d78:	2e10      	cmp	r6, #16
 8005d7a:	d114      	bne.n	8005da6 <ip4addr_aton+0x82>
 8005d7c:	f022 0120 	bic.w	r1, r2, #32
 8005d80:	3941      	subs	r1, #65	; 0x41
 8005d82:	b2c9      	uxtb	r1, r1
 8005d84:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
 8005d88:	2905      	cmp	r1, #5
 8005d8a:	fa5f fc8c 	uxtb.w	ip, ip
 8005d8e:	d80a      	bhi.n	8005da6 <ip4addr_aton+0x82>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8005d90:	f1bc 0f1a 	cmp.w	ip, #26
 8005d94:	f102 020a 	add.w	r2, r2, #10
 8005d98:	bf34      	ite	cc
 8005d9a:	2161      	movcc	r1, #97	; 0x61
 8005d9c:	2141      	movcs	r1, #65	; 0x41
 8005d9e:	1a52      	subs	r2, r2, r1
 8005da0:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
 8005da4:	e7e3      	b.n	8005d6e <ip4addr_aton+0x4a>
    if (c == '.') {
 8005da6:	2a2e      	cmp	r2, #46	; 0x2e
 8005da8:	d108      	bne.n	8005dbc <ip4addr_aton+0x98>
      if (pp >= parts + 3) {
 8005daa:	4573      	cmp	r3, lr
 8005dac:	d04c      	beq.n	8005e48 <ip4addr_aton+0x124>
        return 0;
      }
      *pp++ = val;
 8005dae:	f843 4b04 	str.w	r4, [r3], #4
      c = *++cp;
 8005db2:	f108 0001 	add.w	r0, r8, #1
 8005db6:	f898 2001 	ldrb.w	r2, [r8, #1]
    if (!isdigit(c)) {
 8005dba:	e7bb      	b.n	8005d34 <ip4addr_aton+0x10>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8005dbc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005dc0:	d002      	beq.n	8005dc8 <ip4addr_aton+0xa4>
 8005dc2:	3a09      	subs	r2, #9
 8005dc4:	2a04      	cmp	r2, #4
 8005dc6:	d83f      	bhi.n	8005e48 <ip4addr_aton+0x124>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8005dc8:	1bd8      	subs	r0, r3, r7
 8005dca:	1080      	asrs	r0, r0, #2
 8005dcc:	3001      	adds	r0, #1
 8005dce:	2804      	cmp	r0, #4
 8005dd0:	d832      	bhi.n	8005e38 <ip4addr_aton+0x114>
 8005dd2:	e8df f000 	tbb	[pc, r0]
 8005dd6:	0b3a      	.short	0x0b3a
 8005dd8:	1203      	.short	0x1203
 8005dda:	20          	.byte	0x20
 8005ddb:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8005ddc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8005de0:	d232      	bcs.n	8005e48 <ip4addr_aton+0x124>
      return 0;
    }
    if (parts[0] > 0xff) {
 8005de2:	9b00      	ldr	r3, [sp, #0]
 8005de4:	2bff      	cmp	r3, #255	; 0xff
 8005de6:	d82f      	bhi.n	8005e48 <ip4addr_aton+0x124>
      return 0;
    }
    val |= parts[0] << 24;
 8005de8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 8005dec:	b11d      	cbz	r5, 8005df6 <ip4addr_aton+0xd2>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff f975 	bl	80050de <lwip_htonl>
 8005df4:	6028      	str	r0, [r5, #0]
  }
  return 1;
 8005df6:	2001      	movs	r0, #1
 8005df8:	e027      	b.n	8005e4a <ip4addr_aton+0x126>
    if (val > 0xffff) {
 8005dfa:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005dfe:	d223      	bcs.n	8005e48 <ip4addr_aton+0x124>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8005e00:	9a00      	ldr	r2, [sp, #0]
 8005e02:	2aff      	cmp	r2, #255	; 0xff
 8005e04:	d820      	bhi.n	8005e48 <ip4addr_aton+0x124>
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	2bff      	cmp	r3, #255	; 0xff
 8005e0a:	d81d      	bhi.n	8005e48 <ip4addr_aton+0x124>
    val |= (parts[0] << 24) | (parts[1] << 16);
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8005e12:	431c      	orrs	r4, r3
    break;
 8005e14:	e7ea      	b.n	8005dec <ip4addr_aton+0xc8>
    if (val > 0xff) {
 8005e16:	2cff      	cmp	r4, #255	; 0xff
 8005e18:	d816      	bhi.n	8005e48 <ip4addr_aton+0x124>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8005e1a:	9900      	ldr	r1, [sp, #0]
 8005e1c:	29ff      	cmp	r1, #255	; 0xff
 8005e1e:	d813      	bhi.n	8005e48 <ip4addr_aton+0x124>
 8005e20:	9b01      	ldr	r3, [sp, #4]
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d810      	bhi.n	8005e48 <ip4addr_aton+0x124>
 8005e26:	9a02      	ldr	r2, [sp, #8]
 8005e28:	2aff      	cmp	r2, #255	; 0xff
 8005e2a:	d80d      	bhi.n	8005e48 <ip4addr_aton+0x124>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005e32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e36:	e7ec      	b.n	8005e12 <ip4addr_aton+0xee>
    LWIP_ASSERT("unhandled", 0);
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <ip4addr_aton+0x12c>)
 8005e3a:	4906      	ldr	r1, [pc, #24]	; (8005e54 <ip4addr_aton+0x130>)
 8005e3c:	4806      	ldr	r0, [pc, #24]	; (8005e58 <ip4addr_aton+0x134>)
 8005e3e:	f240 1203 	movw	r2, #259	; 0x103
 8005e42:	f005 fd8a 	bl	800b95a <iprintf>
    break;
 8005e46:	e7d1      	b.n	8005dec <ip4addr_aton+0xc8>
      return 0;
 8005e48:	2000      	movs	r0, #0
}
 8005e4a:	b004      	add	sp, #16
 8005e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e50:	0800cb0c 	.word	0x0800cb0c
 8005e54:	0800cb45 	.word	0x0800cb45
 8005e58:	0800c0d7 	.word	0x0800c0d7

08005e5c <ipaddr_addr>:
{
 8005e5c:	b507      	push	{r0, r1, r2, lr}
  if (ip4addr_aton(cp, &val)) {
 8005e5e:	a901      	add	r1, sp, #4
 8005e60:	f7ff ff60 	bl	8005d24 <ip4addr_aton>
 8005e64:	b118      	cbz	r0, 8005e6e <ipaddr_addr+0x12>
    return ip4_addr_get_u32(&val);
 8005e66:	9801      	ldr	r0, [sp, #4]
}
 8005e68:	b003      	add	sp, #12
 8005e6a:	f85d fb04 	ldr.w	pc, [sp], #4
  return (IPADDR_NONE);
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e72:	e7f9      	b.n	8005e68 <ipaddr_addr+0xc>

08005e74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8005e74:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <ip_reass_dequeue_datagram+0x34>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4282      	cmp	r2, r0
{
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8005e80:	d107      	bne.n	8005e92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8005e82:	6802      	ldr	r2, [r0, #0]
 8005e84:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8005e86:	4621      	mov	r1, r4
 8005e88:	2004      	movs	r0, #4
}
 8005e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8005e8e:	f000 be1b 	b.w	8006ac8 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8005e92:	b931      	cbnz	r1, 8005ea2 <ip_reass_dequeue_datagram+0x2e>
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <ip_reass_dequeue_datagram+0x38>)
 8005e96:	4906      	ldr	r1, [pc, #24]	; (8005eb0 <ip_reass_dequeue_datagram+0x3c>)
 8005e98:	4806      	ldr	r0, [pc, #24]	; (8005eb4 <ip_reass_dequeue_datagram+0x40>)
 8005e9a:	f240 1245 	movw	r2, #325	; 0x145
 8005e9e:	f005 fd5c 	bl	800b95a <iprintf>
    prev->next = ipr->next;
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	e7ee      	b.n	8005e86 <ip_reass_dequeue_datagram+0x12>
 8005ea8:	20003f38 	.word	0x20003f38
 8005eac:	0800cc39 	.word	0x0800cc39
 8005eb0:	0800cc72 	.word	0x0800cc72
 8005eb4:	0800c0d7 	.word	0x0800c0d7

08005eb8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005eb8:	4281      	cmp	r1, r0
{
 8005eba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005ec2:	d105      	bne.n	8005ed0 <ip_reass_free_complete_datagram+0x18>
 8005ec4:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <ip_reass_free_complete_datagram+0xcc>)
 8005ec6:	4930      	ldr	r1, [pc, #192]	; (8005f88 <ip_reass_free_complete_datagram+0xd0>)
 8005ec8:	4830      	ldr	r0, [pc, #192]	; (8005f8c <ip_reass_free_complete_datagram+0xd4>)
 8005eca:	22ab      	movs	r2, #171	; 0xab
 8005ecc:	f005 fd45 	bl	800b95a <iprintf>
  if (prev != NULL) {
 8005ed0:	b147      	cbz	r7, 8005ee4 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	429d      	cmp	r5, r3
 8005ed6:	d005      	beq.n	8005ee4 <ip_reass_free_complete_datagram+0x2c>
 8005ed8:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <ip_reass_free_complete_datagram+0xcc>)
 8005eda:	492d      	ldr	r1, [pc, #180]	; (8005f90 <ip_reass_free_complete_datagram+0xd8>)
 8005edc:	482b      	ldr	r0, [pc, #172]	; (8005f8c <ip_reass_free_complete_datagram+0xd4>)
 8005ede:	22ad      	movs	r2, #173	; 0xad
 8005ee0:	f005 fd3b 	bl	800b95a <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8005ee4:	686e      	ldr	r6, [r5, #4]
 8005ee6:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8005ee8:	889a      	ldrh	r2, [r3, #4]
 8005eea:	bb92      	cbnz	r2, 8005f52 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005ef0:	f105 011c 	add.w	r1, r5, #28
 8005ef4:	f105 0208 	add.w	r2, r5, #8
 8005ef8:	f852 0b04 	ldr.w	r0, [r2], #4
 8005efc:	f843 0b04 	str.w	r0, [r3], #4
 8005f00:	428a      	cmp	r2, r1
 8005f02:	d1f9      	bne.n	8005ef8 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8005f04:	2101      	movs	r1, #1
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff fd77 	bl	80059fa <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f001 f917 	bl	8007140 <pbuf_clen>
 8005f12:	4604      	mov	r4, r0
    pbuf_free(p);
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 ff5d 	bl	8006dd4 <pbuf_free>
  p = ipr->p;
 8005f1a:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005f1c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005f84 <ip_reass_free_complete_datagram+0xcc>
 8005f20:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005f9c <ip_reass_free_complete_datagram+0xe4>
 8005f24:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005f8c <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8005f28:	b9ae      	cbnz	r6, 8005f56 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8005f2a:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005f2c:	4d19      	ldr	r5, [pc, #100]	; (8005f94 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7ff ffa0 	bl	8005e74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005f34:	882b      	ldrh	r3, [r5, #0]
 8005f36:	42a3      	cmp	r3, r4
 8005f38:	d205      	bcs.n	8005f46 <ip_reass_free_complete_datagram+0x8e>
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <ip_reass_free_complete_datagram+0xcc>)
 8005f3c:	4916      	ldr	r1, [pc, #88]	; (8005f98 <ip_reass_free_complete_datagram+0xe0>)
 8005f3e:	4813      	ldr	r0, [pc, #76]	; (8005f8c <ip_reass_free_complete_datagram+0xd4>)
 8005f40:	22d2      	movs	r2, #210	; 0xd2
 8005f42:	f005 fd0a 	bl	800b95a <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8005f46:	882b      	ldrh	r3, [r5, #0]
 8005f48:	1b1b      	subs	r3, r3, r4
 8005f4a:	802b      	strh	r3, [r5, #0]
}
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8005f52:	2400      	movs	r4, #0
 8005f54:	e7e1      	b.n	8005f1a <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8005f56:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8005f58:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8005f5a:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8005f5e:	f001 f8ef 	bl	8007140 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005f62:	4404      	add	r4, r0
 8005f64:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005f68:	db05      	blt.n	8005f76 <ip_reass_free_complete_datagram+0xbe>
 8005f6a:	4643      	mov	r3, r8
 8005f6c:	22cc      	movs	r2, #204	; 0xcc
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4650      	mov	r0, sl
 8005f72:	f005 fcf2 	bl	800b95a <iprintf>
    pbuf_free(pcur);
 8005f76:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8005f78:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8005f7a:	f000 ff2b 	bl	8006dd4 <pbuf_free>
    p = iprh->next_pbuf;
 8005f7e:	465e      	mov	r6, fp
 8005f80:	e7d2      	b.n	8005f28 <ip_reass_free_complete_datagram+0x70>
 8005f82:	bf00      	nop
 8005f84:	0800cc39 	.word	0x0800cc39
 8005f88:	0800cc8b 	.word	0x0800cc8b
 8005f8c:	0800c0d7 	.word	0x0800c0d7
 8005f90:	0800cc97 	.word	0x0800cc97
 8005f94:	20003f34 	.word	0x20003f34
 8005f98:	0800ccc6 	.word	0x0800ccc6
 8005f9c:	0800cca9 	.word	0x0800cca9

08005fa0 <ip_reass_remove_oldest_datagram>:
{
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8005fa4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006014 <ip_reass_remove_oldest_datagram+0x74>
{
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8005fac:	2500      	movs	r5, #0
    other_datagrams = 0;
 8005fae:	2400      	movs	r4, #0
    r = reassdatagrams;
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8005fb4:	4621      	mov	r1, r4
    prev = NULL;
 8005fb6:	46a6      	mov	lr, r4
    oldest = NULL;
 8005fb8:	4620      	mov	r0, r4
    while (r != NULL) {
 8005fba:	b953      	cbnz	r3, 8005fd2 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8005fbc:	b110      	cbz	r0, 8005fc4 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8005fbe:	f7ff ff7b 	bl	8005eb8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8005fc2:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005fc4:	42bd      	cmp	r5, r7
 8005fc6:	da01      	bge.n	8005fcc <ip_reass_remove_oldest_datagram+0x2c>
 8005fc8:	2c01      	cmp	r4, #1
 8005fca:	dcf0      	bgt.n	8005fae <ip_reass_remove_oldest_datagram+0xe>
}
 8005fcc:	4628      	mov	r0, r5
 8005fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8005fd2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	4562      	cmp	r2, ip
 8005fda:	d109      	bne.n	8005ff0 <ip_reass_remove_oldest_datagram+0x50>
 8005fdc:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	4562      	cmp	r2, ip
 8005fe4:	d104      	bne.n	8005ff0 <ip_reass_remove_oldest_datagram+0x50>
 8005fe6:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005fea:	88b2      	ldrh	r2, [r6, #4]
 8005fec:	4594      	cmp	ip, r2
 8005fee:	d008      	beq.n	8006002 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8005ff0:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8005ff2:	b160      	cbz	r0, 800600e <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8005ff4:	7fc2      	ldrb	r2, [r0, #31]
 8005ff6:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005ffa:	4594      	cmp	ip, r2
 8005ffc:	bf9c      	itt	ls
 8005ffe:	4671      	movls	r1, lr
 8006000:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	2a00      	cmp	r2, #0
 8006006:	bf18      	it	ne
 8006008:	469e      	movne	lr, r3
 800600a:	4613      	mov	r3, r2
 800600c:	e7d5      	b.n	8005fba <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800600e:	4671      	mov	r1, lr
 8006010:	4618      	mov	r0, r3
 8006012:	e7f6      	b.n	8006002 <ip_reass_remove_oldest_datagram+0x62>
 8006014:	20003f38 	.word	0x20003f38

08006018 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8006018:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800601a:	4604      	mov	r4, r0
 800601c:	b930      	cbnz	r0, 800602c <ip_frag_free_pbuf_custom_ref+0x14>
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <ip_frag_free_pbuf_custom_ref+0x20>)
 8006020:	4906      	ldr	r1, [pc, #24]	; (800603c <ip_frag_free_pbuf_custom_ref+0x24>)
 8006022:	4807      	ldr	r0, [pc, #28]	; (8006040 <ip_frag_free_pbuf_custom_ref+0x28>)
 8006024:	f240 22ae 	movw	r2, #686	; 0x2ae
 8006028:	f005 fc97 	bl	800b95a <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800602c:	4621      	mov	r1, r4
 800602e:	2005      	movs	r0, #5
}
 8006030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8006034:	f000 bd48 	b.w	8006ac8 <memp_free>
 8006038:	0800cc39 	.word	0x0800cc39
 800603c:	0800d35f 	.word	0x0800d35f
 8006040:	0800c0d7 	.word	0x0800c0d7

08006044 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006044:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006046:	4604      	mov	r4, r0
 8006048:	b930      	cbnz	r0, 8006058 <ipfrag_free_pbuf_custom+0x14>
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <ipfrag_free_pbuf_custom+0x28>)
 800604c:	4908      	ldr	r1, [pc, #32]	; (8006070 <ipfrag_free_pbuf_custom+0x2c>)
 800604e:	4809      	ldr	r0, [pc, #36]	; (8006074 <ipfrag_free_pbuf_custom+0x30>)
 8006050:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006054:	f005 fc81 	bl	800b95a <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8006058:	6960      	ldr	r0, [r4, #20]
 800605a:	b108      	cbz	r0, 8006060 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800605c:	f000 feba 	bl	8006dd4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006060:	4620      	mov	r0, r4
}
 8006062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8006066:	f7ff bfd7 	b.w	8006018 <ip_frag_free_pbuf_custom_ref>
 800606a:	bf00      	nop
 800606c:	0800cc39 	.word	0x0800cc39
 8006070:	0800cce1 	.word	0x0800cce1
 8006074:	0800c0d7 	.word	0x0800c0d7

08006078 <ip_reass_tmr>:
{
 8006078:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <ip_reass_tmr+0x24>)
 800607c:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800607e:	2400      	movs	r4, #0
  while (r != NULL) {
 8006080:	b900      	cbnz	r0, 8006084 <ip_reass_tmr+0xc>
}
 8006082:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8006084:	7fc3      	ldrb	r3, [r0, #31]
 8006086:	6805      	ldr	r5, [r0, #0]
 8006088:	b123      	cbz	r3, 8006094 <ip_reass_tmr+0x1c>
      r->timer--;
 800608a:	3b01      	subs	r3, #1
 800608c:	77c3      	strb	r3, [r0, #31]
 800608e:	4604      	mov	r4, r0
      r = r->next;
 8006090:	4628      	mov	r0, r5
 8006092:	e7f5      	b.n	8006080 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8006094:	4621      	mov	r1, r4
 8006096:	f7ff ff0f 	bl	8005eb8 <ip_reass_free_complete_datagram>
 800609a:	e7f9      	b.n	8006090 <ip_reass_tmr+0x18>
 800609c:	20003f38 	.word	0x20003f38

080060a0 <ip4_reass>:
{
 80060a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 80060a4:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80060a6:	782b      	ldrb	r3, [r5, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2b05      	cmp	r3, #5
{
 80060ae:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80060b0:	f040 808c 	bne.w	80061cc <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80060b4:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80060b6:	4cb4      	ldr	r4, [pc, #720]	; (8006388 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80060b8:	f7ff f80e 	bl	80050d8 <lwip_htons>
 80060bc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80060c0:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80060c4:	8868      	ldrh	r0, [r5, #2]
 80060c6:	f7ff f807 	bl	80050d8 <lwip_htons>
 80060ca:	782b      	ldrb	r3, [r5, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 80060d4:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80060d6:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80060d8:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80060da:	f001 f831 	bl	8007140 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80060de:	8823      	ldrh	r3, [r4, #0]
 80060e0:	4403      	add	r3, r0
 80060e2:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80060e4:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80060e6:	dc68      	bgt.n	80061ba <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80060e8:	4ea8      	ldr	r6, [pc, #672]	; (800638c <ip4_reass+0x2ec>)
 80060ea:	6834      	ldr	r4, [r6, #0]
 80060ec:	2c00      	cmp	r4, #0
 80060ee:	d172      	bne.n	80061d6 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80060f0:	2004      	movs	r0, #4
 80060f2:	f000 fccd 	bl	8006a90 <memp_malloc>
  if (ipr == NULL) {
 80060f6:	4604      	mov	r4, r0
 80060f8:	b958      	cbnz	r0, 8006112 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80060fa:	4651      	mov	r1, sl
 80060fc:	4628      	mov	r0, r5
 80060fe:	f7ff ff4f 	bl	8005fa0 <ip_reass_remove_oldest_datagram>
 8006102:	4582      	cmp	sl, r0
 8006104:	dc62      	bgt.n	80061cc <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006106:	2004      	movs	r0, #4
 8006108:	f000 fcc2 	bl	8006a90 <memp_malloc>
    if (ipr == NULL)
 800610c:	4604      	mov	r4, r0
 800610e:	2800      	cmp	r0, #0
 8006110:	d05c      	beq.n	80061cc <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8006112:	2220      	movs	r2, #32
 8006114:	2100      	movs	r1, #0
 8006116:	4620      	mov	r0, r4
 8006118:	f005 fd92 	bl	800bc40 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800611c:	2303      	movs	r3, #3
 800611e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8006124:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006126:	462b      	mov	r3, r5
 8006128:	f104 0208 	add.w	r2, r4, #8
 800612c:	f105 0114 	add.w	r1, r5, #20
 8006130:	f853 0b04 	ldr.w	r0, [r3], #4
 8006134:	f842 0b04 	str.w	r0, [r2], #4
 8006138:	428b      	cmp	r3, r1
 800613a:	d1f9      	bne.n	8006130 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800613c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8006140:	f01b 0b20 	ands.w	fp, fp, #32
 8006144:	d108      	bne.n	8006158 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	444b      	add	r3, r9
 800614a:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800614c:	4599      	cmp	r9, r3
 800614e:	d83d      	bhi.n	80061cc <ip4_reass+0x12c>
 8006150:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8006154:	4293      	cmp	r3, r2
 8006156:	d839      	bhi.n	80061cc <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8006158:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800615a:	8868      	ldrh	r0, [r5, #2]
 800615c:	f7fe ffbc 	bl	80050d8 <lwip_htons>
 8006160:	f895 8000 	ldrb.w	r8, [r5]
 8006164:	f008 080f 	and.w	r8, r8, #15
 8006168:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800616c:	88e8      	ldrh	r0, [r5, #6]
 800616e:	f7fe ffb3 	bl	80050d8 <lwip_htons>
 8006172:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006176:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800617a:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800617c:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 800617e:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8006182:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8006184:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8006188:	2500      	movs	r5, #0
  iprh->end = offset + len;
 800618a:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800618c:	7035      	strb	r5, [r6, #0]
 800618e:	7075      	strb	r5, [r6, #1]
 8006190:	70b5      	strb	r5, [r6, #2]
 8006192:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8006194:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8006196:	4672      	mov	r2, lr
  int valid = 1;
 8006198:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 800619c:	bb52      	cbnz	r2, 80061f4 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800619e:	2d00      	cmp	r5, #0
 80061a0:	f040 8092 	bne.w	80062c8 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80061a4:	f1be 0f00 	cmp.w	lr, #0
 80061a8:	d07d      	beq.n	80062a6 <ip4_reass+0x206>
 80061aa:	4b79      	ldr	r3, [pc, #484]	; (8006390 <ip4_reass+0x2f0>)
 80061ac:	4979      	ldr	r1, [pc, #484]	; (8006394 <ip4_reass+0x2f4>)
 80061ae:	487a      	ldr	r0, [pc, #488]	; (8006398 <ip4_reass+0x2f8>)
 80061b0:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80061b4:	f005 fbd1 	bl	800b95a <iprintf>
 80061b8:	e075      	b.n	80062a6 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80061ba:	4601      	mov	r1, r0
 80061bc:	4628      	mov	r0, r5
 80061be:	f7ff feef 	bl	8005fa0 <ip_reass_remove_oldest_datagram>
 80061c2:	b118      	cbz	r0, 80061cc <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80061c4:	8823      	ldrh	r3, [r4, #0]
 80061c6:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80061c8:	2b0a      	cmp	r3, #10
 80061ca:	dd8d      	ble.n	80060e8 <ip4_reass+0x48>
  pbuf_free(p);
 80061cc:	4638      	mov	r0, r7
 80061ce:	f000 fe01 	bl	8006dd4 <pbuf_free>
  return NULL;
 80061d2:	2500      	movs	r5, #0
 80061d4:	e0d4      	b.n	8006380 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80061d6:	68eb      	ldr	r3, [r5, #12]
 80061d8:	6962      	ldr	r2, [r4, #20]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d108      	bne.n	80061f0 <ip4_reass+0x150>
 80061de:	692b      	ldr	r3, [r5, #16]
 80061e0:	69a2      	ldr	r2, [r4, #24]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d104      	bne.n	80061f0 <ip4_reass+0x150>
 80061e6:	89a2      	ldrh	r2, [r4, #12]
 80061e8:	88ab      	ldrh	r3, [r5, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	f000 80dc 	beq.w	80063a8 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80061f0:	6824      	ldr	r4, [r4, #0]
 80061f2:	e77b      	b.n	80060ec <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80061f4:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 80061f8:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80061fc:	4288      	cmp	r0, r1
 80061fe:	d254      	bcs.n	80062aa <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8006200:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8006202:	2d00      	cmp	r5, #0
 8006204:	d04d      	beq.n	80062a2 <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006206:	88ea      	ldrh	r2, [r5, #6]
 8006208:	4290      	cmp	r0, r2
 800620a:	f0c0 8091 	bcc.w	8006330 <ip4_reass+0x290>
 800620e:	428b      	cmp	r3, r1
 8006210:	f200 808e 	bhi.w	8006330 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8006214:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8006216:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8006218:	f040 80e4 	bne.w	80063e4 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800621c:	f1bb 0f00 	cmp.w	fp, #0
 8006220:	d004      	beq.n	800622c <ip4_reass+0x18c>
 8006222:	7fa3      	ldrb	r3, [r4, #30]
 8006224:	f013 0301 	ands.w	r3, r3, #1
 8006228:	f000 80da 	beq.w	80063e0 <ip4_reass+0x340>
    if (valid) {
 800622c:	f1b8 0f00 	cmp.w	r8, #0
 8006230:	d159      	bne.n	80062e6 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8006232:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006236:	4e54      	ldr	r6, [pc, #336]	; (8006388 <ip4_reass+0x2e8>)
 8006238:	8833      	ldrh	r3, [r6, #0]
 800623a:	449a      	add	sl, r3
 800623c:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8006240:	f1bb 0f00 	cmp.w	fp, #0
 8006244:	d107      	bne.n	8006256 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800624a:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800624c:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006256:	f1b8 0f01 	cmp.w	r8, #1
 800625a:	d1ba      	bne.n	80061d2 <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 800625c:	8ba3      	ldrh	r3, [r4, #28]
 800625e:	3314      	adds	r3, #20
 8006260:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006262:	6863      	ldr	r3, [r4, #4]
 8006264:	685d      	ldr	r5, [r3, #4]
 8006266:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006268:	f104 0308 	add.w	r3, r4, #8
 800626c:	462a      	mov	r2, r5
 800626e:	f104 011c 	add.w	r1, r4, #28
 8006272:	f853 0b04 	ldr.w	r0, [r3], #4
 8006276:	f842 0b04 	str.w	r0, [r2], #4
 800627a:	428b      	cmp	r3, r1
 800627c:	d1f9      	bne.n	8006272 <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800627e:	8ba0      	ldrh	r0, [r4, #28]
 8006280:	f7fe ff2a 	bl	80050d8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8006284:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006286:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006288:	71ab      	strb	r3, [r5, #6]
 800628a:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800628c:	72ab      	strb	r3, [r5, #10]
 800628e:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8006290:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8006292:	2f00      	cmp	r7, #0
 8006294:	d157      	bne.n	8006346 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8006296:	4b3d      	ldr	r3, [pc, #244]	; (800638c <ip4_reass+0x2ec>)
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	428c      	cmp	r4, r1
 800629c:	d165      	bne.n	800636a <ip4_reass+0x2ca>
      ipr_prev = NULL;
 800629e:	4639      	mov	r1, r7
 80062a0:	e065      	b.n	800636e <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 80062a2:	428b      	cmp	r3, r1
 80062a4:	d844      	bhi.n	8006330 <ip4_reass+0x290>
      ipr->p = new_p;
 80062a6:	6067      	str	r7, [r4, #4]
 80062a8:	e7b8      	b.n	800621c <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 80062aa:	d041      	beq.n	8006330 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 80062ac:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80062b0:	4282      	cmp	r2, r0
 80062b2:	d83d      	bhi.n	8006330 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 80062b4:	b125      	cbz	r5, 80062c0 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 80062b6:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 80062b8:	428a      	cmp	r2, r1
 80062ba:	bf18      	it	ne
 80062bc:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 80062c0:	f8dc 2000 	ldr.w	r2, [ip]
 80062c4:	4665      	mov	r5, ip
 80062c6:	e769      	b.n	800619c <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80062c8:	88eb      	ldrh	r3, [r5, #6]
 80062ca:	4283      	cmp	r3, r0
 80062cc:	d906      	bls.n	80062dc <ip4_reass+0x23c>
 80062ce:	4b30      	ldr	r3, [pc, #192]	; (8006390 <ip4_reass+0x2f0>)
 80062d0:	4932      	ldr	r1, [pc, #200]	; (800639c <ip4_reass+0x2fc>)
 80062d2:	4831      	ldr	r0, [pc, #196]	; (8006398 <ip4_reass+0x2f8>)
 80062d4:	f240 12ab 	movw	r2, #427	; 0x1ab
 80062d8:	f005 fb3f 	bl	800b95a <iprintf>
      iprh_prev->next_pbuf = new_p;
 80062dc:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80062de:	88ea      	ldrh	r2, [r5, #6]
 80062e0:	88b3      	ldrh	r3, [r6, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	e798      	b.n	8006218 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80062e6:	6863      	ldr	r3, [r4, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0a2      	beq.n	8006232 <ip4_reass+0x192>
 80062ec:	6859      	ldr	r1, [r3, #4]
 80062ee:	888b      	ldrh	r3, [r1, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d19e      	bne.n	8006232 <ip4_reass+0x192>
        q = iprh->next_pbuf;
 80062f4:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80062f6:	b99b      	cbnz	r3, 8006320 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 80062f8:	42b1      	cmp	r1, r6
 80062fa:	d106      	bne.n	800630a <ip4_reass+0x26a>
 80062fc:	4b24      	ldr	r3, [pc, #144]	; (8006390 <ip4_reass+0x2f0>)
 80062fe:	4928      	ldr	r1, [pc, #160]	; (80063a0 <ip4_reass+0x300>)
 8006300:	4825      	ldr	r0, [pc, #148]	; (8006398 <ip4_reass+0x2f8>)
 8006302:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006306:	f005 fb28 	bl	800b95a <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800630a:	6833      	ldr	r3, [r6, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d092      	beq.n	8006236 <ip4_reass+0x196>
 8006310:	4b1f      	ldr	r3, [pc, #124]	; (8006390 <ip4_reass+0x2f0>)
 8006312:	4924      	ldr	r1, [pc, #144]	; (80063a4 <ip4_reass+0x304>)
 8006314:	4820      	ldr	r0, [pc, #128]	; (8006398 <ip4_reass+0x2f8>)
 8006316:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800631a:	f005 fb1e 	bl	800b95a <iprintf>
 800631e:	e78a      	b.n	8006236 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8006320:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8006322:	88f0      	ldrh	r0, [r6, #6]
 8006324:	8893      	ldrh	r3, [r2, #4]
 8006326:	4298      	cmp	r0, r3
 8006328:	d183      	bne.n	8006232 <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	4616      	mov	r6, r2
 800632e:	e7e2      	b.n	80062f6 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006330:	4638      	mov	r0, r7
 8006332:	f000 ff05 	bl	8007140 <pbuf_clen>
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <ip4_reass+0x2e8>)
 8006338:	8813      	ldrh	r3, [r2, #0]
 800633a:	1a18      	subs	r0, r3, r0
 800633c:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800633e:	4638      	mov	r0, r7
 8006340:	f000 fd48 	bl	8006dd4 <pbuf_free>
 8006344:	e742      	b.n	80061cc <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 8006346:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800634a:	f06f 0113 	mvn.w	r1, #19
 800634e:	4638      	mov	r0, r7
 8006350:	f000 fd3a 	bl	8006dc8 <pbuf_header>
      pbuf_cat(p, r);
 8006354:	4639      	mov	r1, r7
 8006356:	4628      	mov	r0, r5
 8006358:	f000 ff16 	bl	8007188 <pbuf_cat>
      r = iprh->next_pbuf;
 800635c:	f8d8 7000 	ldr.w	r7, [r8]
 8006360:	e797      	b.n	8006292 <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8006362:	680b      	ldr	r3, [r1, #0]
 8006364:	429c      	cmp	r4, r3
 8006366:	d002      	beq.n	800636e <ip4_reass+0x2ce>
 8006368:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800636a:	2900      	cmp	r1, #0
 800636c:	d1f9      	bne.n	8006362 <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff fd80 	bl	8005e74 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8006374:	4628      	mov	r0, r5
 8006376:	f000 fee3 	bl	8007140 <pbuf_clen>
 800637a:	8833      	ldrh	r3, [r6, #0]
 800637c:	1a18      	subs	r0, r3, r0
 800637e:	8030      	strh	r0, [r6, #0]
}
 8006380:	4628      	mov	r0, r5
 8006382:	b003      	add	sp, #12
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	20003f34 	.word	0x20003f34
 800638c:	20003f38 	.word	0x20003f38
 8006390:	0800cc39 	.word	0x0800cc39
 8006394:	0800cbd3 	.word	0x0800cbd3
 8006398:	0800c0d7 	.word	0x0800c0d7
 800639c:	0800cbb5 	.word	0x0800cbb5
 80063a0:	0800cc0a 	.word	0x0800cc0a
 80063a4:	0800cc17 	.word	0x0800cc17
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80063a8:	88e8      	ldrh	r0, [r5, #6]
 80063aa:	f7fe fe95 	bl	80050d8 <lwip_htons>
 80063ae:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80063b2:	2800      	cmp	r0, #0
 80063b4:	f47f aec2 	bne.w	800613c <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80063b8:	89e0      	ldrh	r0, [r4, #14]
 80063ba:	f7fe fe8d 	bl	80050d8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80063be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f43f aeba 	beq.w	800613c <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80063c8:	462b      	mov	r3, r5
 80063ca:	f104 0208 	add.w	r2, r4, #8
 80063ce:	f105 0114 	add.w	r1, r5, #20
 80063d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80063d6:	f842 0b04 	str.w	r0, [r2], #4
 80063da:	428b      	cmp	r3, r1
 80063dc:	d1f9      	bne.n	80063d2 <ip4_reass+0x332>
 80063de:	e6ad      	b.n	800613c <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80063e0:	4698      	mov	r8, r3
 80063e2:	e728      	b.n	8006236 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80063e4:	f1bb 0f00 	cmp.w	fp, #0
 80063e8:	f43f af23 	beq.w	8006232 <ip4_reass+0x192>
 80063ec:	f04f 0800 	mov.w	r8, #0
 80063f0:	e717      	b.n	8006222 <ip4_reass+0x182>
 80063f2:	bf00      	nop

080063f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80063f8:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 80063fc:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80063fe:	2308      	movs	r3, #8
 8006400:	f1a8 0814 	sub.w	r8, r8, #20
 8006404:	fb98 f8f3 	sdiv	r8, r8, r3
 8006408:	fa1f f388 	uxth.w	r3, r8
 800640c:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800640e:	6843      	ldr	r3, [r0, #4]
{
 8006410:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006412:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8006414:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006416:	f006 060f 	and.w	r6, r6, #15
 800641a:	00b6      	lsls	r6, r6, #2
 800641c:	2e14      	cmp	r6, #20
{
 800641e:	4607      	mov	r7, r0
 8006420:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006422:	d00b      	beq.n	800643c <ip4_frag+0x48>
 8006424:	4b5a      	ldr	r3, [pc, #360]	; (8006590 <ip4_frag+0x19c>)
 8006426:	495b      	ldr	r1, [pc, #364]	; (8006594 <ip4_frag+0x1a0>)
 8006428:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800642c:	485a      	ldr	r0, [pc, #360]	; (8006598 <ip4_frag+0x1a4>)
 800642e:	f005 fa94 	bl	800b95a <iprintf>
 8006432:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8006436:	b00b      	add	sp, #44	; 0x2c
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800643c:	9b02      	ldr	r3, [sp, #8]
 800643e:	88d8      	ldrh	r0, [r3, #6]
 8006440:	f7fe fe4a 	bl	80050d8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006444:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006448:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800644c:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800644e:	d004      	beq.n	800645a <ip4_frag+0x66>
 8006450:	4b4f      	ldr	r3, [pc, #316]	; (8006590 <ip4_frag+0x19c>)
 8006452:	4952      	ldr	r1, [pc, #328]	; (800659c <ip4_frag+0x1a8>)
 8006454:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006458:	e7e8      	b.n	800642c <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800645a:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800645c:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8006460:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8006462:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8006466:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8006468:	9307      	str	r3, [sp, #28]
  while (left) {
 800646a:	b90d      	cbnz	r5, 8006470 <ip4_frag+0x7c>
  return ERR_OK;
 800646c:	4628      	mov	r0, r5
 800646e:	e7e2      	b.n	8006436 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	42ab      	cmp	r3, r5
 8006474:	bfa8      	it	ge
 8006476:	462b      	movge	r3, r5
 8006478:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800647a:	2200      	movs	r2, #0
 800647c:	2114      	movs	r1, #20
 800647e:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8006480:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006482:	f000 fd11 	bl	8006ea8 <pbuf_alloc>
    if (rambuf == NULL) {
 8006486:	4680      	mov	r8, r0
 8006488:	b370      	cbz	r0, 80064e8 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800648a:	897b      	ldrh	r3, [r7, #10]
 800648c:	2b13      	cmp	r3, #19
 800648e:	d806      	bhi.n	800649e <ip4_frag+0xaa>
 8006490:	4b3f      	ldr	r3, [pc, #252]	; (8006590 <ip4_frag+0x19c>)
 8006492:	4943      	ldr	r1, [pc, #268]	; (80065a0 <ip4_frag+0x1ac>)
 8006494:	4840      	ldr	r0, [pc, #256]	; (8006598 <ip4_frag+0x1a4>)
 8006496:	f240 3209 	movw	r2, #777	; 0x309
 800649a:	f005 fa5e 	bl	800b95a <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80064a4:	4619      	mov	r1, r3
 80064a6:	3114      	adds	r1, #20
 80064a8:	f853 0b04 	ldr.w	r0, [r3], #4
 80064ac:	f842 0b04 	str.w	r0, [r2], #4
 80064b0:	428b      	cmp	r3, r1
 80064b2:	d1f9      	bne.n	80064a8 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80064b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 80064b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80064bc:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 80064be:	f1b9 0f00 	cmp.w	r9, #0
 80064c2:	d037      	beq.n	8006534 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 80064c4:	897c      	ldrh	r4, [r7, #10]
 80064c6:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80064c8:	b2a4      	uxth	r4, r4
 80064ca:	454c      	cmp	r4, r9
 80064cc:	bf28      	it	cs
 80064ce:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 80064d0:	b914      	cbnz	r4, 80064d8 <ip4_frag+0xe4>
        p = p->next;
 80064d2:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 80064d4:	2600      	movs	r6, #0
 80064d6:	e7f2      	b.n	80064be <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80064d8:	2005      	movs	r0, #5
 80064da:	f000 fad9 	bl	8006a90 <memp_malloc>
      if (pcr == NULL) {
 80064de:	4682      	mov	sl, r0
 80064e0:	b928      	cbnz	r0, 80064ee <ip4_frag+0xfa>
        pbuf_free(rambuf);
 80064e2:	4640      	mov	r0, r8
 80064e4:	f000 fc76 	bl	8006dd4 <pbuf_free>
  return ERR_MEM;
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ec:	e7a3      	b.n	8006436 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80064ee:	9401      	str	r4, [sp, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4433      	add	r3, r6
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	2202      	movs	r2, #2
 80064f8:	4603      	mov	r3, r0
 80064fa:	4621      	mov	r1, r4
 80064fc:	2004      	movs	r0, #4
 80064fe:	f000 fc2b 	bl	8006d58 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006502:	b918      	cbnz	r0, 800650c <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006504:	4650      	mov	r0, sl
 8006506:	f7ff fd87 	bl	8006018 <ip_frag_free_pbuf_custom_ref>
 800650a:	e7ea      	b.n	80064e2 <ip4_frag+0xee>
 800650c:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 800650e:	4638      	mov	r0, r7
 8006510:	f000 fe1e 	bl	8007150 <pbuf_ref>
      left_to_copy -= newpbuflen;
 8006514:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006518:	4b22      	ldr	r3, [pc, #136]	; (80065a4 <ip4_frag+0x1b0>)
      pcr->original = p;
 800651a:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800651e:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8006522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006524:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8006526:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800652a:	f000 fe2d 	bl	8007188 <pbuf_cat>
      if (left_to_copy) {
 800652e:	f1b9 0f00 	cmp.w	r9, #0
 8006532:	d1ce      	bne.n	80064d2 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800653a:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 800653e:	3b13      	subs	r3, #19
    if (!last) {
 8006540:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8006542:	bfa8      	it	ge
 8006544:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006548:	f7fe fdc6 	bl	80050d8 <lwip_htons>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	f103 0014 	add.w	r0, r3, #20
 8006556:	b280      	uxth	r0, r0
 8006558:	f7fe fdbe 	bl	80050d8 <lwip_htons>
 800655c:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800655e:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006560:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006562:	2300      	movs	r3, #0
 8006564:	7293      	strb	r3, [r2, #10]
 8006566:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8006568:	4641      	mov	r1, r8
 800656a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800656e:	9a08      	ldr	r2, [sp, #32]
 8006570:	4658      	mov	r0, fp
 8006572:	4798      	blx	r3
    pbuf_free(rambuf);
 8006574:	4640      	mov	r0, r8
 8006576:	f000 fc2d 	bl	8006dd4 <pbuf_free>
    left -= fragsize;
 800657a:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800657c:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800657e:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8006580:	9b04      	ldr	r3, [sp, #16]
 8006582:	4413      	add	r3, r2
    poff += newpbuflen;
 8006584:	4426      	add	r6, r4
    ofo += nfb;
 8006586:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8006588:	b2b6      	uxth	r6, r6
    left -= fragsize;
 800658a:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	e76c      	b.n	800646a <ip4_frag+0x76>
 8006590:	0800cc39 	.word	0x0800cc39
 8006594:	0800cb54 	.word	0x0800cb54
 8006598:	0800c0d7 	.word	0x0800c0d7
 800659c:	0800cb7b 	.word	0x0800cb7b
 80065a0:	0800cb95 	.word	0x0800cb95
 80065a4:	08006045 	.word	0x08006045

080065a8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80065a8:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <mem_init+0x4c>)
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <mem_init+0x50>)
 80065ac:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 80065b0:	2100      	movs	r1, #0
{
 80065b2:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80065b4:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 80065b6:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 80065b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 80065bc:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80065be:	490f      	ldr	r1, [pc, #60]	; (80065fc <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 80065c0:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80065c2:	1898      	adds	r0, r3, r2
 80065c4:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 80065c6:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->used = 1;
 80065ca:	2101      	movs	r1, #1
  ram_end->prev = MEM_SIZE_ALIGNED;
 80065cc:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80065d0:	4a0b      	ldr	r2, [pc, #44]	; (8006600 <mem_init+0x58>)
  ram_end->used = 1;
 80065d2:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80065d6:	480b      	ldr	r0, [pc, #44]	; (8006604 <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 80065d8:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80065da:	f004 fc09 	bl	800adf0 <sys_mutex_new>
 80065de:	b140      	cbz	r0, 80065f2 <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <mem_init+0x60>)
 80065e2:	490a      	ldr	r1, [pc, #40]	; (800660c <mem_init+0x64>)
 80065e4:	480a      	ldr	r0, [pc, #40]	; (8006610 <mem_init+0x68>)
 80065e6:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 80065ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80065ee:	f005 b9b4 	b.w	800b95a <iprintf>
 80065f2:	bd10      	pop	{r4, pc}
 80065f4:	2000428f 	.word	0x2000428f
 80065f8:	20003f44 	.word	0x20003f44
 80065fc:	20003f48 	.word	0x20003f48
 8006600:	20003f3c 	.word	0x20003f3c
 8006604:	20003f40 	.word	0x20003f40
 8006608:	0800cdaf 	.word	0x0800cdaf
 800660c:	0800cdde 	.word	0x0800cdde
 8006610:	0800c0d7 	.word	0x0800c0d7

08006614 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006618:	4604      	mov	r4, r0
 800661a:	2800      	cmp	r0, #0
 800661c:	f000 8096 	beq.w	800674c <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006620:	0783      	lsls	r3, r0, #30
 8006622:	d006      	beq.n	8006632 <mem_free+0x1e>
 8006624:	4b4a      	ldr	r3, [pc, #296]	; (8006750 <mem_free+0x13c>)
 8006626:	494b      	ldr	r1, [pc, #300]	; (8006754 <mem_free+0x140>)
 8006628:	484b      	ldr	r0, [pc, #300]	; (8006758 <mem_free+0x144>)
 800662a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800662e:	f005 f994 	bl	800b95a <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006632:	4f4a      	ldr	r7, [pc, #296]	; (800675c <mem_free+0x148>)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	429c      	cmp	r4, r3
 8006638:	d303      	bcc.n	8006642 <mem_free+0x2e>
 800663a:	4b49      	ldr	r3, [pc, #292]	; (8006760 <mem_free+0x14c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	429c      	cmp	r4, r3
 8006640:	d306      	bcc.n	8006650 <mem_free+0x3c>
 8006642:	4b43      	ldr	r3, [pc, #268]	; (8006750 <mem_free+0x13c>)
 8006644:	4947      	ldr	r1, [pc, #284]	; (8006764 <mem_free+0x150>)
 8006646:	4844      	ldr	r0, [pc, #272]	; (8006758 <mem_free+0x144>)
 8006648:	f240 12af 	movw	r2, #431	; 0x1af
 800664c:	f005 f985 	bl	800b95a <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	429c      	cmp	r4, r3
 8006654:	d304      	bcc.n	8006660 <mem_free+0x4c>
 8006656:	4b42      	ldr	r3, [pc, #264]	; (8006760 <mem_free+0x14c>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4294      	cmp	r4, r2
 800665c:	4698      	mov	r8, r3
 800665e:	d305      	bcc.n	800666c <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006660:	f004 fbf4 	bl	800ae4c <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8006668:	f004 bbfc 	b.w	800ae64 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800666c:	483e      	ldr	r0, [pc, #248]	; (8006768 <mem_free+0x154>)
 800666e:	f004 fbce 	bl	800ae0e <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006672:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006676:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800667a:	b933      	cbnz	r3, 800668a <mem_free+0x76>
 800667c:	4b34      	ldr	r3, [pc, #208]	; (8006750 <mem_free+0x13c>)
 800667e:	493b      	ldr	r1, [pc, #236]	; (800676c <mem_free+0x158>)
 8006680:	4835      	ldr	r0, [pc, #212]	; (8006758 <mem_free+0x144>)
 8006682:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006686:	f005 f968 	bl	800b95a <iprintf>
  if (mem < lfree) {
 800668a:	4e39      	ldr	r6, [pc, #228]	; (8006770 <mem_free+0x15c>)
  mem->used = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8006692:	6833      	ldr	r3, [r6, #0]
 8006694:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006696:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8006698:	bf38      	it	cc
 800669a:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800669c:	429d      	cmp	r5, r3
 800669e:	d206      	bcs.n	80066ae <mem_free+0x9a>
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <mem_free+0x13c>)
 80066a2:	4934      	ldr	r1, [pc, #208]	; (8006774 <mem_free+0x160>)
 80066a4:	482c      	ldr	r0, [pc, #176]	; (8006758 <mem_free+0x144>)
 80066a6:	f240 125d 	movw	r2, #349	; 0x15d
 80066aa:	f005 f956 	bl	800b95a <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80066ae:	f8d8 3000 	ldr.w	r3, [r8]
 80066b2:	429d      	cmp	r5, r3
 80066b4:	d306      	bcc.n	80066c4 <mem_free+0xb0>
 80066b6:	4b26      	ldr	r3, [pc, #152]	; (8006750 <mem_free+0x13c>)
 80066b8:	492f      	ldr	r1, [pc, #188]	; (8006778 <mem_free+0x164>)
 80066ba:	4827      	ldr	r0, [pc, #156]	; (8006758 <mem_free+0x144>)
 80066bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80066c0:	f005 f94b 	bl	800b95a <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80066c4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80066c8:	b133      	cbz	r3, 80066d8 <mem_free+0xc4>
 80066ca:	4b21      	ldr	r3, [pc, #132]	; (8006750 <mem_free+0x13c>)
 80066cc:	492b      	ldr	r1, [pc, #172]	; (800677c <mem_free+0x168>)
 80066ce:	4822      	ldr	r0, [pc, #136]	; (8006758 <mem_free+0x144>)
 80066d0:	f240 125f 	movw	r2, #351	; 0x15f
 80066d4:	f005 f941 	bl	800b95a <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80066d8:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80066dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066e0:	d906      	bls.n	80066f0 <mem_free+0xdc>
 80066e2:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <mem_free+0x13c>)
 80066e4:	4926      	ldr	r1, [pc, #152]	; (8006780 <mem_free+0x16c>)
 80066e6:	481c      	ldr	r0, [pc, #112]	; (8006758 <mem_free+0x144>)
 80066e8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80066ec:	f005 f935 	bl	800b95a <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80066f6:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80066f8:	4295      	cmp	r5, r2
 80066fa:	d010      	beq.n	800671e <mem_free+0x10a>
 80066fc:	7910      	ldrb	r0, [r2, #4]
 80066fe:	b970      	cbnz	r0, 800671e <mem_free+0x10a>
 8006700:	f8d8 0000 	ldr.w	r0, [r8]
 8006704:	4282      	cmp	r2, r0
 8006706:	d00a      	beq.n	800671e <mem_free+0x10a>
    if (lfree == nmem) {
 8006708:	6830      	ldr	r0, [r6, #0]
 800670a:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800670c:	5a5a      	ldrh	r2, [r3, r1]
 800670e:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006712:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8006714:	bf08      	it	eq
 8006716:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006718:	441a      	add	r2, r3
 800671a:	1ae9      	subs	r1, r5, r3
 800671c:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800671e:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8006722:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006724:	428d      	cmp	r5, r1
 8006726:	d00c      	beq.n	8006742 <mem_free+0x12e>
 8006728:	7908      	ldrb	r0, [r1, #4]
 800672a:	b950      	cbnz	r0, 8006742 <mem_free+0x12e>
    if (lfree == mem) {
 800672c:	6830      	ldr	r0, [r6, #0]
 800672e:	4285      	cmp	r5, r0
      lfree = pmem;
 8006730:	bf08      	it	eq
 8006732:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006734:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006738:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800673a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800673e:	440b      	add	r3, r1
 8006740:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006742:	4809      	ldr	r0, [pc, #36]	; (8006768 <mem_free+0x154>)
}
 8006744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006748:	f004 bb66 	b.w	800ae18 <sys_mutex_unlock>
 800674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006750:	0800cdaf 	.word	0x0800cdaf
 8006754:	0800cced 	.word	0x0800cced
 8006758:	0800c0d7 	.word	0x0800c0d7
 800675c:	20003f44 	.word	0x20003f44
 8006760:	20003f48 	.word	0x20003f48
 8006764:	0800cd0e 	.word	0x0800cd0e
 8006768:	20003f40 	.word	0x20003f40
 800676c:	0800cd25 	.word	0x0800cd25
 8006770:	20003f3c 	.word	0x20003f3c
 8006774:	0800cd39 	.word	0x0800cd39
 8006778:	0800cd50 	.word	0x0800cd50
 800677c:	0800cd6a 	.word	0x0800cd6a
 8006780:	0800cd85 	.word	0x0800cd85

08006784 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006788:	3103      	adds	r1, #3
 800678a:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800678e:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8006790:	2d0b      	cmp	r5, #11
{
 8006792:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8006794:	d904      	bls.n	80067a0 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006796:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800679a:	d902      	bls.n	80067a2 <mem_trim+0x1e>
    return NULL;
 800679c:	2400      	movs	r4, #0
 800679e:	e01c      	b.n	80067da <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 80067a0:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80067a2:	4b36      	ldr	r3, [pc, #216]	; (800687c <mem_trim+0xf8>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	42a2      	cmp	r2, r4
 80067a8:	4698      	mov	r8, r3
 80067aa:	d803      	bhi.n	80067b4 <mem_trim+0x30>
 80067ac:	4b34      	ldr	r3, [pc, #208]	; (8006880 <mem_trim+0xfc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d306      	bcc.n	80067c2 <mem_trim+0x3e>
 80067b4:	4b33      	ldr	r3, [pc, #204]	; (8006884 <mem_trim+0x100>)
 80067b6:	4934      	ldr	r1, [pc, #208]	; (8006888 <mem_trim+0x104>)
 80067b8:	4834      	ldr	r0, [pc, #208]	; (800688c <mem_trim+0x108>)
 80067ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067be:	f005 f8cc 	bl	800b95a <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80067c2:	f8d8 3000 	ldr.w	r3, [r8]
 80067c6:	429c      	cmp	r4, r3
 80067c8:	d303      	bcc.n	80067d2 <mem_trim+0x4e>
 80067ca:	4a2d      	ldr	r2, [pc, #180]	; (8006880 <mem_trim+0xfc>)
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	4294      	cmp	r4, r2
 80067d0:	d306      	bcc.n	80067e0 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 80067d2:	f004 fb3b 	bl	800ae4c <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 80067d6:	f004 fb45 	bl	800ae64 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80067da:	4620      	mov	r0, r4
 80067dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80067e0:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80067e4:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80067e8:	1af6      	subs	r6, r6, r3
 80067ea:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80067ec:	3f08      	subs	r7, #8
 80067ee:	1bbf      	subs	r7, r7, r6
 80067f0:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80067f2:	42af      	cmp	r7, r5
 80067f4:	d219      	bcs.n	800682a <mem_trim+0xa6>
 80067f6:	4b23      	ldr	r3, [pc, #140]	; (8006884 <mem_trim+0x100>)
 80067f8:	4925      	ldr	r1, [pc, #148]	; (8006890 <mem_trim+0x10c>)
 80067fa:	4824      	ldr	r0, [pc, #144]	; (800688c <mem_trim+0x108>)
 80067fc:	f240 2206 	movw	r2, #518	; 0x206
 8006800:	f005 f8ab 	bl	800b95a <iprintf>
 8006804:	e7ca      	b.n	800679c <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006806:	f105 0214 	add.w	r2, r5, #20
 800680a:	42ba      	cmp	r2, r7
 800680c:	d831      	bhi.n	8006872 <mem_trim+0xee>
    if (mem2 < lfree) {
 800680e:	4821      	ldr	r0, [pc, #132]	; (8006894 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006810:	f106 0208 	add.w	r2, r6, #8
 8006814:	4415      	add	r5, r2
    if (mem2 < lfree) {
 8006816:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006818:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800681a:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 800681c:	42ba      	cmp	r2, r7
      lfree = mem2;
 800681e:	bf38      	it	cc
 8006820:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 8006822:	2000      	movs	r0, #0
 8006824:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8006826:	5359      	strh	r1, [r3, r5]
 8006828:	e01a      	b.n	8006860 <mem_trim+0xdc>
  if (newsize == size) {
 800682a:	d0d6      	beq.n	80067da <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 800682c:	481a      	ldr	r0, [pc, #104]	; (8006898 <mem_trim+0x114>)
 800682e:	f004 faee 	bl	800ae0e <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006832:	f8d8 3000 	ldr.w	r3, [r8]
 8006836:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800683a:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 800683c:	7902      	ldrb	r2, [r0, #4]
 800683e:	2a00      	cmp	r2, #0
 8006840:	d1e1      	bne.n	8006806 <mem_trim+0x82>
    next = mem2->next;
 8006842:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 8006844:	4913      	ldr	r1, [pc, #76]	; (8006894 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006846:	f106 0208 	add.w	r2, r6, #8
 800684a:	4415      	add	r5, r2
    if (lfree == mem2) {
 800684c:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800684e:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8006850:	4290      	cmp	r0, r2
 8006852:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006856:	bf08      	it	eq
 8006858:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 800685a:	2100      	movs	r1, #0
 800685c:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 800685e:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8006860:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8006862:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006866:	5b5a      	ldrh	r2, [r3, r5]
 8006868:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800686c:	bf1c      	itt	ne
 800686e:	189b      	addne	r3, r3, r2
 8006870:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006872:	4809      	ldr	r0, [pc, #36]	; (8006898 <mem_trim+0x114>)
 8006874:	f004 fad0 	bl	800ae18 <sys_mutex_unlock>
  return rmem;
 8006878:	e7af      	b.n	80067da <mem_trim+0x56>
 800687a:	bf00      	nop
 800687c:	20003f44 	.word	0x20003f44
 8006880:	20003f48 	.word	0x20003f48
 8006884:	0800cdaf 	.word	0x0800cdaf
 8006888:	0800ce94 	.word	0x0800ce94
 800688c:	0800c0d7 	.word	0x0800c0d7
 8006890:	0800ceab 	.word	0x0800ceab
 8006894:	20003f3c 	.word	0x20003f3c
 8006898:	20003f40 	.word	0x20003f40

0800689c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80068a0:	b148      	cbz	r0, 80068b6 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80068a2:	3003      	adds	r0, #3
 80068a4:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80068a8:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 80068aa:	2d0b      	cmp	r5, #11
 80068ac:	d905      	bls.n	80068ba <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80068ae:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80068b2:	d903      	bls.n	80068bc <mem_malloc+0x20>
    return NULL;
 80068b4:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 80068b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 80068ba:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 80068bc:	483c      	ldr	r0, [pc, #240]	; (80069b0 <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80068be:	4e3d      	ldr	r6, [pc, #244]	; (80069b4 <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 80068c0:	f004 faa5 	bl	800ae0e <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80068c4:	483c      	ldr	r0, [pc, #240]	; (80069b8 <mem_malloc+0x11c>)
 80068c6:	6831      	ldr	r1, [r6, #0]
 80068c8:	6807      	ldr	r7, [r0, #0]
 80068ca:	1a7b      	subs	r3, r7, r1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80068d2:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80068d6:	4543      	cmp	r3, r8
 80068d8:	d303      	bcc.n	80068e2 <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 80068da:	4835      	ldr	r0, [pc, #212]	; (80069b0 <mem_malloc+0x114>)
 80068dc:	f004 fa9c 	bl	800ae18 <sys_mutex_unlock>
 80068e0:	e7e8      	b.n	80068b4 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 80068e2:	18cc      	adds	r4, r1, r3
 80068e4:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 80068e8:	f894 c004 	ldrb.w	ip, [r4, #4]
 80068ec:	f1bc 0f00 	cmp.w	ip, #0
 80068f0:	d15b      	bne.n	80069aa <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80068f2:	eba9 0203 	sub.w	r2, r9, r3
 80068f6:	4472      	add	r2, lr
      if ((!mem->used) &&
 80068f8:	4295      	cmp	r5, r2
 80068fa:	d856      	bhi.n	80069aa <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80068fc:	f105 0814 	add.w	r8, r5, #20
 8006900:	4542      	cmp	r2, r8
 8006902:	d34c      	bcc.n	800699e <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006904:	f105 0208 	add.w	r2, r5, #8
 8006908:	441a      	add	r2, r3
 800690a:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800690c:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8006910:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 8006914:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8006918:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 800691c:	2301      	movs	r3, #1
          mem->next = ptr2;
 800691e:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8006920:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006922:	5a8b      	ldrh	r3, [r1, r2]
 8006924:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006928:	d001      	beq.n	800692e <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800692a:	4419      	add	r1, r3
 800692c:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 800692e:	42a7      	cmp	r7, r4
 8006930:	4f22      	ldr	r7, [pc, #136]	; (80069bc <mem_malloc+0x120>)
 8006932:	d111      	bne.n	8006958 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 8006934:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8006936:	6836      	ldr	r6, [r6, #0]
 8006938:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800693a:	791a      	ldrb	r2, [r3, #4]
 800693c:	b10a      	cbz	r2, 8006942 <mem_malloc+0xa6>
 800693e:	428b      	cmp	r3, r1
 8006940:	d130      	bne.n	80069a4 <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006942:	428b      	cmp	r3, r1
          lfree = cur;
 8006944:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006946:	d007      	beq.n	8006958 <mem_malloc+0xbc>
 8006948:	b132      	cbz	r2, 8006958 <mem_malloc+0xbc>
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <mem_malloc+0x124>)
 800694c:	491d      	ldr	r1, [pc, #116]	; (80069c4 <mem_malloc+0x128>)
 800694e:	481e      	ldr	r0, [pc, #120]	; (80069c8 <mem_malloc+0x12c>)
 8006950:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006954:	f005 f801 	bl	800b95a <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8006958:	4815      	ldr	r0, [pc, #84]	; (80069b0 <mem_malloc+0x114>)
 800695a:	f004 fa5d 	bl	800ae18 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800695e:	3508      	adds	r5, #8
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	4425      	add	r5, r4
 8006964:	42ab      	cmp	r3, r5
 8006966:	d206      	bcs.n	8006976 <mem_malloc+0xda>
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <mem_malloc+0x124>)
 800696a:	4918      	ldr	r1, [pc, #96]	; (80069cc <mem_malloc+0x130>)
 800696c:	4816      	ldr	r0, [pc, #88]	; (80069c8 <mem_malloc+0x12c>)
 800696e:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8006972:	f004 fff2 	bl	800b95a <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006976:	07a3      	lsls	r3, r4, #30
 8006978:	d00d      	beq.n	8006996 <mem_malloc+0xfa>
 800697a:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <mem_malloc+0x124>)
 800697c:	4914      	ldr	r1, [pc, #80]	; (80069d0 <mem_malloc+0x134>)
 800697e:	4812      	ldr	r0, [pc, #72]	; (80069c8 <mem_malloc+0x12c>)
 8006980:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006984:	f004 ffe9 	bl	800b95a <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <mem_malloc+0x124>)
 800698a:	4912      	ldr	r1, [pc, #72]	; (80069d4 <mem_malloc+0x138>)
 800698c:	480e      	ldr	r0, [pc, #56]	; (80069c8 <mem_malloc+0x12c>)
 800698e:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006992:	f004 ffe2 	bl	800b95a <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006996:	f104 0008 	add.w	r0, r4, #8
 800699a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800699e:	2301      	movs	r3, #1
 80069a0:	7123      	strb	r3, [r4, #4]
 80069a2:	e7c4      	b.n	800692e <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	4433      	add	r3, r6
 80069a8:	e7c7      	b.n	800693a <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80069aa:	4673      	mov	r3, lr
 80069ac:	e793      	b.n	80068d6 <mem_malloc+0x3a>
 80069ae:	bf00      	nop
 80069b0:	20003f40 	.word	0x20003f40
 80069b4:	20003f44 	.word	0x20003f44
 80069b8:	20003f3c 	.word	0x20003f3c
 80069bc:	20003f48 	.word	0x20003f48
 80069c0:	0800cdaf 	.word	0x0800cdaf
 80069c4:	0800cdf9 	.word	0x0800cdf9
 80069c8:	0800c0d7 	.word	0x0800c0d7
 80069cc:	0800ce12 	.word	0x0800ce12
 80069d0:	0800ce42 	.word	0x0800ce42
 80069d4:	0800ce71 	.word	0x0800ce71

080069d8 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80069dc:	f004 fa36 	bl	800ae4c <sys_arch_protect>

  memp = *desc->tab;
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 80069e4:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80069e6:	b15c      	cbz	r4, 8006a00 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80069ec:	07a3      	lsls	r3, r4, #30
 80069ee:	d006      	beq.n	80069fe <do_memp_malloc_pool.isra.0+0x26>
 80069f0:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <do_memp_malloc_pool.isra.0+0x30>)
 80069f2:	4906      	ldr	r1, [pc, #24]	; (8006a0c <do_memp_malloc_pool.isra.0+0x34>)
 80069f4:	4806      	ldr	r0, [pc, #24]	; (8006a10 <do_memp_malloc_pool.isra.0+0x38>)
 80069f6:	f240 1249 	movw	r2, #329	; 0x149
 80069fa:	f004 ffae 	bl	800b95a <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80069fe:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8006a00:	f004 fa30 	bl	800ae64 <sys_arch_unprotect>
  return NULL;
}
 8006a04:	4620      	mov	r0, r4
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	0800ceeb 	.word	0x0800ceeb
 8006a0c:	0800cf1b 	.word	0x0800cf1b
 8006a10:	0800c0d7 	.word	0x0800c0d7

08006a14 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8006a14:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006a16:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006a1c:	d006      	beq.n	8006a2c <do_memp_free_pool.isra.1+0x18>
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <do_memp_free_pool.isra.1+0x2c>)
 8006a20:	4908      	ldr	r1, [pc, #32]	; (8006a44 <do_memp_free_pool.isra.1+0x30>)
 8006a22:	4809      	ldr	r0, [pc, #36]	; (8006a48 <do_memp_free_pool.isra.1+0x34>)
 8006a24:	f240 129d 	movw	r2, #413	; 0x19d
 8006a28:	f004 ff97 	bl	800b95a <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8006a2c:	f004 fa0e 	bl	800ae4c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8006a36:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8006a3c:	f004 ba12 	b.w	800ae64 <sys_arch_unprotect>
 8006a40:	0800ceeb 	.word	0x0800ceeb
 8006a44:	0800cecb 	.word	0x0800cecb
 8006a48:	0800c0d7 	.word	0x0800c0d7

08006a4c <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006a4c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8006a4e:	6881      	ldr	r1, [r0, #8]
{
 8006a50:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8006a52:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006a54:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006a56:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8006a58:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006a5e:	42a2      	cmp	r2, r4
 8006a60:	db00      	blt.n	8006a64 <memp_init_pool+0x18>
}
 8006a62:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8006a64:	680d      	ldr	r5, [r1, #0]
 8006a66:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a68:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8006a6a:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006a6c:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a6e:	442b      	add	r3, r5
 8006a70:	e7f5      	b.n	8006a5e <memp_init_pool+0x12>
	...

08006a74 <memp_init>:
{
 8006a74:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8006a76:	4d05      	ldr	r5, [pc, #20]	; (8006a8c <memp_init+0x18>)
{
 8006a78:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8006a7a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006a7e:	3401      	adds	r4, #1
 8006a80:	f7ff ffe4 	bl	8006a4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006a84:	2c0d      	cmp	r4, #13
 8006a86:	d1f8      	bne.n	8006a7a <memp_init+0x6>
}
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	0800d014 	.word	0x0800d014

08006a90 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a90:	280c      	cmp	r0, #12
{
 8006a92:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a94:	d807      	bhi.n	8006aa6 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <memp_malloc+0x28>)
 8006a98:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8006a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006aa0:	3008      	adds	r0, #8
 8006aa2:	f7ff bf99 	b.w	80069d8 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <memp_malloc+0x2c>)
 8006aa8:	4905      	ldr	r1, [pc, #20]	; (8006ac0 <memp_malloc+0x30>)
 8006aaa:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <memp_malloc+0x34>)
 8006aac:	f240 1287 	movw	r2, #391	; 0x187
 8006ab0:	f004 ff53 	bl	800b95a <iprintf>
}
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	bd08      	pop	{r3, pc}
 8006ab8:	0800d014 	.word	0x0800d014
 8006abc:	0800ceeb 	.word	0x0800ceeb
 8006ac0:	0800cff7 	.word	0x0800cff7
 8006ac4:	0800c0d7 	.word	0x0800c0d7

08006ac8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ac8:	280c      	cmp	r0, #12
 8006aca:	d906      	bls.n	8006ada <memp_free+0x12>
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <memp_free+0x24>)
 8006ace:	4908      	ldr	r1, [pc, #32]	; (8006af0 <memp_free+0x28>)
 8006ad0:	4808      	ldr	r0, [pc, #32]	; (8006af4 <memp_free+0x2c>)
 8006ad2:	f240 12db 	movw	r2, #475	; 0x1db
 8006ad6:	f004 bf40 	b.w	800b95a <iprintf>

  if (mem == NULL) {
 8006ada:	b129      	cbz	r1, 8006ae8 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <memp_free+0x30>)
 8006ade:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006ae2:	3008      	adds	r0, #8
 8006ae4:	f7ff bf96 	b.w	8006a14 <do_memp_free_pool.isra.1>
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	0800ceeb 	.word	0x0800ceeb
 8006af0:	0800cfdc 	.word	0x0800cfdc
 8006af4:	0800c0d7 	.word	0x0800c0d7
 8006af8:	0800d014 	.word	0x0800d014

08006afc <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006afc:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006b00:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8006b02:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006b04:	d502      	bpl.n	8006b0c <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8006b06:	3104      	adds	r1, #4
 8006b08:	f7fe bcb8 	b.w	800547c <etharp_request>
 8006b0c:	4770      	bx	lr

08006b0e <netif_init>:
{
 8006b0e:	4770      	bx	lr

08006b10 <netif_set_ipaddr>:
{
 8006b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b12:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006b14:	460c      	mov	r4, r1
 8006b16:	b1b9      	cbz	r1, 8006b48 <netif_set_ipaddr+0x38>
 8006b18:	680b      	ldr	r3, [r1, #0]
 8006b1a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	686b      	ldr	r3, [r5, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d00f      	beq.n	8006b44 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006b24:	1d2e      	adds	r6, r5, #4
 8006b26:	a901      	add	r1, sp, #4
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f001 fb39 	bl	80081a0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006b2e:	a901      	add	r1, sp, #4
 8006b30:	4630      	mov	r0, r6
 8006b32:	f004 f809 	bl	800ab48 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006b36:	b104      	cbz	r4, 8006b3a <netif_set_ipaddr+0x2a>
 8006b38:	6824      	ldr	r4, [r4, #0]
 8006b3a:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006b3c:	b114      	cbz	r4, 8006b44 <netif_set_ipaddr+0x34>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f7ff ffdc 	bl	8006afc <netif_issue_reports.part.0>
}
 8006b44:	b002      	add	sp, #8
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006b48:	4b01      	ldr	r3, [pc, #4]	; (8006b50 <netif_set_ipaddr+0x40>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	e7e5      	b.n	8006b1a <netif_set_ipaddr+0xa>
 8006b4e:	bf00      	nop
 8006b50:	0800cb50 	.word	0x0800cb50

08006b54 <netif_set_addr>:
{
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4606      	mov	r6, r0
 8006b58:	4615      	mov	r5, r2
 8006b5a:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8006b5c:	b109      	cbz	r1, 8006b62 <netif_set_addr+0xe>
 8006b5e:	680b      	ldr	r3, [r1, #0]
 8006b60:	b94b      	cbnz	r3, 8006b76 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffd4 	bl	8006b10 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006b68:	b105      	cbz	r5, 8006b6c <netif_set_addr+0x18>
 8006b6a:	682d      	ldr	r5, [r5, #0]
 8006b6c:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006b6e:	b104      	cbz	r4, 8006b72 <netif_set_addr+0x1e>
 8006b70:	6824      	ldr	r4, [r4, #0]
 8006b72:	60f4      	str	r4, [r6, #12]
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006b76:	b102      	cbz	r2, 8006b7a <netif_set_addr+0x26>
 8006b78:	6815      	ldr	r5, [r2, #0]
 8006b7a:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006b7c:	b104      	cbz	r4, 8006b80 <netif_set_addr+0x2c>
 8006b7e:	6824      	ldr	r4, [r4, #0]
 8006b80:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8006b82:	4630      	mov	r0, r6
}
 8006b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8006b88:	f7ff bfc2 	b.w	8006b10 <netif_set_ipaddr>

08006b8c <netif_add>:
{
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b92:	4604      	mov	r4, r0
 8006b94:	460f      	mov	r7, r1
 8006b96:	4690      	mov	r8, r2
 8006b98:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8006b9a:	b92e      	cbnz	r6, 8006ba8 <netif_add+0x1c>
 8006b9c:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <netif_add+0x68>)
 8006b9e:	4916      	ldr	r1, [pc, #88]	; (8006bf8 <netif_add+0x6c>)
 8006ba0:	4816      	ldr	r0, [pc, #88]	; (8006bfc <netif_add+0x70>)
 8006ba2:	22fb      	movs	r2, #251	; 0xfb
 8006ba4:	f004 fed9 	bl	800b95a <iprintf>
  netif->num = netif_num++;
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8006bb4:	7813      	ldrb	r3, [r2, #0]
 8006bb6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006bba:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8006bbc:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8006bc0:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8006bc2:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006bc4:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006bc6:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006bc8:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006bca:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8006bcc:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7ff ffbd 	bl	8006b54 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8006bda:	4620      	mov	r0, r4
 8006bdc:	47b0      	blx	r6
 8006bde:	b930      	cbnz	r0, 8006bee <netif_add+0x62>
  netif->next = netif_list;
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <netif_add+0x78>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8006be6:	601c      	str	r4, [r3, #0]
}
 8006be8:	4620      	mov	r0, r4
 8006bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006bee:	462c      	mov	r4, r5
 8006bf0:	e7fa      	b.n	8006be8 <netif_add+0x5c>
 8006bf2:	bf00      	nop
 8006bf4:	0800d048 	.word	0x0800d048
 8006bf8:	0800d079 	.word	0x0800d079
 8006bfc:	0800c0d7 	.word	0x0800c0d7
 8006c00:	20003f80 	.word	0x20003f80
 8006c04:	20007968 	.word	0x20007968

08006c08 <netif_set_default>:
  netif_default = netif;
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <netif_set_default+0x8>)
 8006c0a:	6018      	str	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	2000796c 	.word	0x2000796c

08006c14 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006c14:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006c18:	07d1      	lsls	r1, r2, #31
 8006c1a:	d409      	bmi.n	8006c30 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8006c1c:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006c20:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8006c22:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006c26:	d503      	bpl.n	8006c30 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006c28:	6843      	ldr	r3, [r0, #4]
 8006c2a:	b10b      	cbz	r3, 8006c30 <netif_set_up+0x1c>
 8006c2c:	f7ff bf66 	b.w	8006afc <netif_issue_reports.part.0>
 8006c30:	4770      	bx	lr

08006c32 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8006c32:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006c36:	07d9      	lsls	r1, r3, #31
 8006c38:	d507      	bpl.n	8006c4a <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8006c3a:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006c3e:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8006c40:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006c44:	d501      	bpl.n	8006c4a <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8006c46:	f7fe bb67 	b.w	8005318 <etharp_cleanup_netif>
 8006c4a:	4770      	bx	lr

08006c4c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8006c4c:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006c4e:	f004 f8fd 	bl	800ae4c <sys_arch_protect>
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <pbuf_free_ooseq_callback+0x2c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	f004 f904 	bl	800ae64 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <pbuf_free_ooseq_callback+0x30>)
 8006c5e:	681c      	ldr	r4, [r3, #0]
 8006c60:	b904      	cbnz	r4, 8006c64 <pbuf_free_ooseq_callback+0x18>
 8006c62:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8006c64:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006c66:	b120      	cbz	r0, 8006c72 <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8006c68:	f000 fc74 	bl	8007554 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6723      	str	r3, [r4, #112]	; 0x70
 8006c70:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006c72:	68e4      	ldr	r4, [r4, #12]
 8006c74:	e7f4      	b.n	8006c60 <pbuf_free_ooseq_callback+0x14>
 8006c76:	bf00      	nop
 8006c78:	20007970 	.word	0x20007970
 8006c7c:	20007978 	.word	0x20007978

08006c80 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006c80:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c82:	4604      	mov	r4, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d12f      	bne.n	8006ce8 <pbuf_header_impl+0x68>
 8006c88:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <pbuf_header_impl+0x88>)
 8006c8a:	4920      	ldr	r1, [pc, #128]	; (8006d0c <pbuf_header_impl+0x8c>)
 8006c8c:	4820      	ldr	r0, [pc, #128]	; (8006d10 <pbuf_header_impl+0x90>)
 8006c8e:	f240 223f 	movw	r2, #575	; 0x23f
 8006c92:	f004 fe62 	bl	800b95a <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006c96:	2000      	movs	r0, #0
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8006c9a:	b288      	uxth	r0, r1
  type = p->type;
 8006c9c:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 8006c9e:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006ca0:	b10d      	cbz	r5, 8006ca6 <pbuf_header_impl+0x26>
 8006ca2:	2d03      	cmp	r5, #3
 8006ca4:	d106      	bne.n	8006cb4 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006ca6:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006ca8:	f104 0210 	add.w	r2, r4, #16
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d20a      	bcs.n	8006cc6 <pbuf_header_impl+0x46>
      return 1;
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006cb4:	3d01      	subs	r5, #1
 8006cb6:	2d01      	cmp	r5, #1
 8006cb8:	d811      	bhi.n	8006cde <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	da0c      	bge.n	8006cd8 <pbuf_header_impl+0x58>
 8006cbe:	8962      	ldrh	r2, [r4, #10]
 8006cc0:	4282      	cmp	r2, r0
 8006cc2:	d3f5      	bcc.n	8006cb0 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006cc4:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 8006cc6:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006cc8:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8006cca:	8963      	ldrh	r3, [r4, #10]
 8006ccc:	b289      	uxth	r1, r1
 8006cce:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 8006cd0:	4401      	add	r1, r0
  p->len += header_size_increment;
 8006cd2:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8006cd4:	8121      	strh	r1, [r4, #8]
 8006cd6:	e7de      	b.n	8006c96 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	d1f3      	bne.n	8006cc4 <pbuf_header_impl+0x44>
 8006cdc:	e7e8      	b.n	8006cb0 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <pbuf_header_impl+0x88>)
 8006ce0:	490c      	ldr	r1, [pc, #48]	; (8006d14 <pbuf_header_impl+0x94>)
 8006ce2:	f240 2277 	movw	r2, #631	; 0x277
 8006ce6:	e00b      	b.n	8006d00 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d0d4      	beq.n	8006c96 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8006cec:	dad5      	bge.n	8006c9a <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8006cee:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006cf0:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8006cf2:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006cf4:	4283      	cmp	r3, r0
 8006cf6:	d2d1      	bcs.n	8006c9c <pbuf_header_impl+0x1c>
 8006cf8:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <pbuf_header_impl+0x88>)
 8006cfa:	4907      	ldr	r1, [pc, #28]	; (8006d18 <pbuf_header_impl+0x98>)
 8006cfc:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8006d00:	4803      	ldr	r0, [pc, #12]	; (8006d10 <pbuf_header_impl+0x90>)
 8006d02:	f004 fe2a 	bl	800b95a <iprintf>
 8006d06:	e7d3      	b.n	8006cb0 <pbuf_header_impl+0x30>
 8006d08:	0800d2f5 	.word	0x0800d2f5
 8006d0c:	0800d35f 	.word	0x0800d35f
 8006d10:	0800c0d7 	.word	0x0800c0d7
 8006d14:	0800d343 	.word	0x0800d343
 8006d18:	0800d325 	.word	0x0800d325

08006d1c <pbuf_pool_is_empty>:
{
 8006d1c:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 8006d1e:	4d0c      	ldr	r5, [pc, #48]	; (8006d50 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 8006d20:	f004 f894 	bl	800ae4c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8006d24:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8006d26:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8006d28:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8006d2a:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8006d2c:	f004 f89a 	bl	800ae64 <sys_arch_unprotect>
  if (!queued) {
 8006d30:	b964      	cbnz	r4, 8006d4c <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8006d32:	4622      	mov	r2, r4
 8006d34:	4621      	mov	r1, r4
 8006d36:	4807      	ldr	r0, [pc, #28]	; (8006d54 <pbuf_pool_is_empty+0x38>)
 8006d38:	f7fe f94e 	bl	8004fd8 <tcpip_callback_with_block>
 8006d3c:	b130      	cbz	r0, 8006d4c <pbuf_pool_is_empty+0x30>
 8006d3e:	f004 f885 	bl	800ae4c <sys_arch_protect>
 8006d42:	702c      	strb	r4, [r5, #0]
}
 8006d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8006d48:	f004 b88c 	b.w	800ae64 <sys_arch_unprotect>
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	bf00      	nop
 8006d50:	20007970 	.word	0x20007970
 8006d54:	08006c4d 	.word	0x08006c4d

08006d58 <pbuf_alloced_custom>:
{
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8006d5c:	2804      	cmp	r0, #4
 8006d5e:	d81e      	bhi.n	8006d9e <pbuf_alloced_custom+0x46>
 8006d60:	e8df f000 	tbb	[pc, r0]
 8006d64:	1b280326 	.word	0x1b280326
 8006d68:	1b          	.byte	0x1b
 8006d69:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006d6a:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d6c:	3403      	adds	r4, #3
 8006d6e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8006d72:	f024 0403 	bic.w	r4, r4, #3
 8006d76:	190e      	adds	r6, r1, r4
 8006d78:	4286      	cmp	r6, r0
 8006d7a:	f04f 0000 	mov.w	r0, #0
 8006d7e:	d80b      	bhi.n	8006d98 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8006d80:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8006d82:	b1cd      	cbz	r5, 8006db8 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d84:	442c      	add	r4, r5
 8006d86:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006d88:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8006d8a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006d8c:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006d8e:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006d90:	8119      	strh	r1, [r3, #8]
 8006d92:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8006d94:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8006d96:	4618      	mov	r0, r3
}
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8006d9a:	2400      	movs	r4, #0
    break;
 8006d9c:	e7e6      	b.n	8006d6c <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <pbuf_alloced_custom+0x64>)
 8006da0:	4907      	ldr	r1, [pc, #28]	; (8006dc0 <pbuf_alloced_custom+0x68>)
 8006da2:	4808      	ldr	r0, [pc, #32]	; (8006dc4 <pbuf_alloced_custom+0x6c>)
 8006da4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006da8:	f004 fdd7 	bl	800b95a <iprintf>
    return NULL;
 8006dac:	2000      	movs	r0, #0
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006db0:	2436      	movs	r4, #54	; 0x36
 8006db2:	e7db      	b.n	8006d6c <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006db4:	240e      	movs	r4, #14
 8006db6:	e7d9      	b.n	8006d6c <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8006db8:	605d      	str	r5, [r3, #4]
 8006dba:	e7e5      	b.n	8006d88 <pbuf_alloced_custom+0x30>
 8006dbc:	0800d2f5 	.word	0x0800d2f5
 8006dc0:	0800d138 	.word	0x0800d138
 8006dc4:	0800c0d7 	.word	0x0800c0d7

08006dc8 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f7ff bf59 	b.w	8006c80 <pbuf_header_impl>

08006dce <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f7ff bf56 	b.w	8006c80 <pbuf_header_impl>

08006dd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006dd8:	4604      	mov	r4, r0
 8006dda:	b950      	cbnz	r0, 8006df2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006ddc:	4b2c      	ldr	r3, [pc, #176]	; (8006e90 <pbuf_free+0xbc>)
 8006dde:	492d      	ldr	r1, [pc, #180]	; (8006e94 <pbuf_free+0xc0>)
 8006de0:	482d      	ldr	r0, [pc, #180]	; (8006e98 <pbuf_free+0xc4>)
 8006de2:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006de6:	f004 fdb8 	bl	800b95a <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006dea:	4627      	mov	r7, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006dec:	4638      	mov	r0, r7
 8006dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006df2:	7b03      	ldrb	r3, [r0, #12]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d906      	bls.n	8006e06 <pbuf_free+0x32>
 8006df8:	4b25      	ldr	r3, [pc, #148]	; (8006e90 <pbuf_free+0xbc>)
 8006dfa:	4928      	ldr	r1, [pc, #160]	; (8006e9c <pbuf_free+0xc8>)
 8006dfc:	4826      	ldr	r0, [pc, #152]	; (8006e98 <pbuf_free+0xc4>)
 8006dfe:	f240 22de 	movw	r2, #734	; 0x2de
 8006e02:	f004 fdaa 	bl	800b95a <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e06:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006e90 <pbuf_free+0xbc>
 8006e0a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006ea4 <pbuf_free+0xd0>
 8006e0e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8006e98 <pbuf_free+0xc4>
{
 8006e12:	2600      	movs	r6, #0
 8006e14:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	d0e8      	beq.n	8006dec <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 8006e1a:	f004 f817 	bl	800ae4c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e1e:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8006e20:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e22:	b933      	cbnz	r3, 8006e32 <pbuf_free+0x5e>
 8006e24:	4643      	mov	r3, r8
 8006e26:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006e2a:	4651      	mov	r1, sl
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f004 fd94 	bl	800b95a <iprintf>
    ref = --(p->ref);
 8006e32:	89e5      	ldrh	r5, [r4, #14]
 8006e34:	3d01      	subs	r5, #1
 8006e36:	b2ad      	uxth	r5, r5
 8006e38:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8006e3a:	4658      	mov	r0, fp
 8006e3c:	f004 f812 	bl	800ae64 <sys_arch_unprotect>
    if (ref == 0) {
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	d1d3      	bne.n	8006dec <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e44:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8006e46:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e48:	079b      	lsls	r3, r3, #30
 8006e4a:	d50e      	bpl.n	8006e6a <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	b933      	cbnz	r3, 8006e5e <pbuf_free+0x8a>
 8006e50:	4643      	mov	r3, r8
 8006e52:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006e56:	4912      	ldr	r1, [pc, #72]	; (8006ea0 <pbuf_free+0xcc>)
 8006e58:	4648      	mov	r0, r9
 8006e5a:	f004 fd7e 	bl	800b95a <iprintf>
        pc->custom_free_function(p);
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	4620      	mov	r0, r4
 8006e62:	4798      	blx	r3
 8006e64:	3601      	adds	r6, #1
      p = q;
 8006e66:	462c      	mov	r4, r5
 8006e68:	e7d4      	b.n	8006e14 <pbuf_free+0x40>
      type = p->type;
 8006e6a:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d104      	bne.n	8006e7a <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 8006e70:	4621      	mov	r1, r4
 8006e72:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8006e74:	f7ff fe28 	bl	8006ac8 <memp_free>
 8006e78:	e7f4      	b.n	8006e64 <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d802      	bhi.n	8006e86 <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 8006e80:	4621      	mov	r1, r4
 8006e82:	200b      	movs	r0, #11
 8006e84:	e7f6      	b.n	8006e74 <pbuf_free+0xa0>
          mem_free(p);
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff fbc4 	bl	8006614 <mem_free>
 8006e8c:	e7ea      	b.n	8006e64 <pbuf_free+0x90>
 8006e8e:	bf00      	nop
 8006e90:	0800d2f5 	.word	0x0800d2f5
 8006e94:	0800d35f 	.word	0x0800d35f
 8006e98:	0800c0d7 	.word	0x0800c0d7
 8006e9c:	0800d2a9 	.word	0x0800d2a9
 8006ea0:	0800d2d4 	.word	0x0800d2d4
 8006ea4:	0800d2be 	.word	0x0800d2be

08006ea8 <pbuf_alloc>:
{
 8006ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	460e      	mov	r6, r1
 8006eae:	4617      	mov	r7, r2
  switch (layer) {
 8006eb0:	2804      	cmp	r0, #4
 8006eb2:	d80e      	bhi.n	8006ed2 <pbuf_alloc+0x2a>
 8006eb4:	e8df f000 	tbb	[pc, r0]
 8006eb8:	0b170315 	.word	0x0b170315
 8006ebc:	0b          	.byte	0x0b
 8006ebd:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006ebe:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8006ec0:	2f03      	cmp	r7, #3
 8006ec2:	f200 80ba 	bhi.w	800703a <pbuf_alloc+0x192>
 8006ec6:	e8df f007 	tbb	[pc, r7]
 8006eca:	ab90      	.short	0xab90
 8006ecc:	10ab      	.short	0x10ab
    offset = 0;
 8006ece:	2500      	movs	r5, #0
    break;
 8006ed0:	e7f6      	b.n	8006ec0 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8006ed2:	4b5c      	ldr	r3, [pc, #368]	; (8007044 <pbuf_alloc+0x19c>)
 8006ed4:	495c      	ldr	r1, [pc, #368]	; (8007048 <pbuf_alloc+0x1a0>)
 8006ed6:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006eda:	485c      	ldr	r0, [pc, #368]	; (800704c <pbuf_alloc+0x1a4>)
 8006edc:	f004 fd3d 	bl	800b95a <iprintf>
 8006ee0:	e04a      	b.n	8006f78 <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006ee2:	2536      	movs	r5, #54	; 0x36
 8006ee4:	e7ec      	b.n	8006ec0 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006ee6:	250e      	movs	r5, #14
 8006ee8:	e7ea      	b.n	8006ec0 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006eea:	200c      	movs	r0, #12
 8006eec:	f7ff fdd0 	bl	8006a90 <memp_malloc>
    if (p == NULL) {
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	b920      	cbnz	r0, 8006efe <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 8006ef4:	f7ff ff12 	bl	8006d1c <pbuf_pool_is_empty>
}
 8006ef8:	4620      	mov	r0, r4
 8006efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8006efe:	2303      	movs	r3, #3
 8006f00:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006f06:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006f08:	3503      	adds	r5, #3
 8006f0a:	f025 0503 	bic.w	r5, r5, #3
 8006f0e:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 8006f12:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006f14:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006f18:	bf28      	it	cs
 8006f1a:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006f22:	f500 7718 	add.w	r7, r0, #608	; 0x260
 8006f26:	442b      	add	r3, r5
 8006f28:	429f      	cmp	r7, r3
    p->tot_len = length;
 8006f2a:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006f2c:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006f2e:	d206      	bcs.n	8006f3e <pbuf_alloc+0x96>
 8006f30:	4b44      	ldr	r3, [pc, #272]	; (8007044 <pbuf_alloc+0x19c>)
 8006f32:	4947      	ldr	r1, [pc, #284]	; (8007050 <pbuf_alloc+0x1a8>)
 8006f34:	4845      	ldr	r0, [pc, #276]	; (800704c <pbuf_alloc+0x1a4>)
 8006f36:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006f3a:	f004 fd0e 	bl	800b95a <iprintf>
    p->ref = 1;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8006f42:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f44:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8007044 <pbuf_alloc+0x19c>
 8006f48:	f8df a110 	ldr.w	sl, [pc, #272]	; 800705c <pbuf_alloc+0x1b4>
 8006f4c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800704c <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 8006f50:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8006f52:	46a3      	mov	fp, r4
 8006f54:	2e00      	cmp	r6, #0
 8006f56:	dc04      	bgt.n	8006f62 <pbuf_alloc+0xba>
  p->ref = 1;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	7363      	strb	r3, [r4, #13]
  return p;
 8006f60:	e7ca      	b.n	8006ef8 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006f62:	200c      	movs	r0, #12
 8006f64:	f7ff fd94 	bl	8006a90 <memp_malloc>
 8006f68:	2300      	movs	r3, #0
      if (q == NULL) {
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	b930      	cbnz	r0, 8006f7c <pbuf_alloc+0xd4>
        PBUF_POOL_IS_EMPTY();
 8006f6e:	f7ff fed5 	bl	8006d1c <pbuf_pool_is_empty>
        pbuf_free(p);
 8006f72:	4620      	mov	r0, r4
 8006f74:	f7ff ff2e 	bl	8006dd4 <pbuf_free>
    return NULL;
 8006f78:	2400      	movs	r4, #0
 8006f7a:	e7bd      	b.n	8006ef8 <pbuf_alloc+0x50>
      q->flags = 0;
 8006f7c:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8006f7e:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8006f84:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f86:	429e      	cmp	r6, r3
      q->type = type;
 8006f88:	7302      	strb	r2, [r0, #12]
      r->next = q;
 8006f8a:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f8e:	d106      	bne.n	8006f9e <pbuf_alloc+0xf6>
 8006f90:	4643      	mov	r3, r8
 8006f92:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006f96:	4651      	mov	r1, sl
 8006f98:	4648      	mov	r0, r9
 8006f9a:	f004 fcde 	bl	800b95a <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006f9e:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006fa0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8006fa4:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006fa6:	bf28      	it	cs
 8006fa8:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006fac:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006fae:	f105 0310 	add.w	r3, r5, #16
 8006fb2:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006fb4:	079b      	lsls	r3, r3, #30
 8006fb6:	d006      	beq.n	8006fc6 <pbuf_alloc+0x11e>
 8006fb8:	4643      	mov	r3, r8
 8006fba:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006fbe:	4925      	ldr	r1, [pc, #148]	; (8007054 <pbuf_alloc+0x1ac>)
 8006fc0:	4648      	mov	r0, r9
 8006fc2:	f004 fcca 	bl	800b95a <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006fc6:	8962      	ldrh	r2, [r4, #10]
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	429f      	cmp	r7, r3
 8006fce:	d206      	bcs.n	8006fde <pbuf_alloc+0x136>
 8006fd0:	4643      	mov	r3, r8
 8006fd2:	f240 1255 	movw	r2, #341	; 0x155
 8006fd6:	491e      	ldr	r1, [pc, #120]	; (8007050 <pbuf_alloc+0x1a8>)
 8006fd8:	4648      	mov	r0, r9
 8006fda:	f004 fcbe 	bl	800b95a <iprintf>
      q->ref = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8006fe2:	896b      	ldrh	r3, [r5, #10]
 8006fe4:	46ab      	mov	fp, r5
 8006fe6:	1af6      	subs	r6, r6, r3
 8006fe8:	e7b4      	b.n	8006f54 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006fea:	f105 0013 	add.w	r0, r5, #19
 8006fee:	1cf3      	adds	r3, r6, #3
 8006ff0:	f023 0303 	bic.w	r3, r3, #3
 8006ff4:	f020 0003 	bic.w	r0, r0, #3
 8006ff8:	4418      	add	r0, r3
 8006ffa:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006ffc:	4298      	cmp	r0, r3
 8006ffe:	d3bb      	bcc.n	8006f78 <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007000:	f7ff fc4c 	bl	800689c <mem_malloc>
    if (p == NULL) {
 8007004:	4604      	mov	r4, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d0b6      	beq.n	8006f78 <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800700a:	4405      	add	r5, r0
 800700c:	3513      	adds	r5, #19
    p->next = NULL;
 800700e:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007010:	f025 0503 	bic.w	r5, r5, #3
 8007014:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8007016:	8106      	strh	r6, [r0, #8]
 8007018:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800701a:	6003      	str	r3, [r0, #0]
    p->type = type;
 800701c:	7303      	strb	r3, [r0, #12]
 800701e:	e79b      	b.n	8006f58 <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007020:	200b      	movs	r0, #11
 8007022:	f7ff fd35 	bl	8006a90 <memp_malloc>
    if (p == NULL) {
 8007026:	4604      	mov	r4, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	d0a5      	beq.n	8006f78 <pbuf_alloc+0xd0>
    p->payload = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8007030:	8106      	strh	r6, [r0, #8]
 8007032:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8007034:	6003      	str	r3, [r0, #0]
    p->type = type;
 8007036:	7307      	strb	r7, [r0, #12]
    break;
 8007038:	e78e      	b.n	8006f58 <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800703a:	4b02      	ldr	r3, [pc, #8]	; (8007044 <pbuf_alloc+0x19c>)
 800703c:	4906      	ldr	r1, [pc, #24]	; (8007058 <pbuf_alloc+0x1b0>)
 800703e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007042:	e74a      	b.n	8006eda <pbuf_alloc+0x32>
 8007044:	0800d2f5 	.word	0x0800d2f5
 8007048:	0800d090 	.word	0x0800d090
 800704c:	0800c0d7 	.word	0x0800c0d7
 8007050:	0800d0ab 	.word	0x0800d0ab
 8007054:	0800d0f0 	.word	0x0800d0f0
 8007058:	0800d11d 	.word	0x0800d11d
 800705c:	0800d0dc 	.word	0x0800d0dc

08007060 <pbuf_realloc>:
{
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007066:	4604      	mov	r4, r0
 8007068:	b930      	cbnz	r0, 8007078 <pbuf_realloc+0x18>
 800706a:	4b2e      	ldr	r3, [pc, #184]	; (8007124 <pbuf_realloc+0xc4>)
 800706c:	492e      	ldr	r1, [pc, #184]	; (8007128 <pbuf_realloc+0xc8>)
 800706e:	482f      	ldr	r0, [pc, #188]	; (800712c <pbuf_realloc+0xcc>)
 8007070:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007074:	f004 fc71 	bl	800b95a <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007078:	7b23      	ldrb	r3, [r4, #12]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d906      	bls.n	800708c <pbuf_realloc+0x2c>
 800707e:	4b29      	ldr	r3, [pc, #164]	; (8007124 <pbuf_realloc+0xc4>)
 8007080:	492b      	ldr	r1, [pc, #172]	; (8007130 <pbuf_realloc+0xd0>)
 8007082:	482a      	ldr	r0, [pc, #168]	; (800712c <pbuf_realloc+0xcc>)
 8007084:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007088:	f004 fc67 	bl	800b95a <iprintf>
  if (new_len >= p->tot_len) {
 800708c:	8926      	ldrh	r6, [r4, #8]
 800708e:	42ae      	cmp	r6, r5
 8007090:	d945      	bls.n	800711e <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007092:	4f24      	ldr	r7, [pc, #144]	; (8007124 <pbuf_realloc+0xc4>)
 8007094:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800713c <pbuf_realloc+0xdc>
 8007098:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800712c <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 800709c:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800709e:	8963      	ldrh	r3, [r4, #10]
 80070a0:	429d      	cmp	r5, r3
 80070a2:	d819      	bhi.n	80070d8 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80070a4:	7b22      	ldrb	r2, [r4, #12]
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	d131      	bne.n	800710e <pbuf_realloc+0xae>
 80070aa:	429d      	cmp	r5, r3
 80070ac:	d02f      	beq.n	800710e <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80070ae:	7b63      	ldrb	r3, [r4, #13]
 80070b0:	079b      	lsls	r3, r3, #30
 80070b2:	d42c      	bmi.n	800710e <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80070b4:	6861      	ldr	r1, [r4, #4]
 80070b6:	1b09      	subs	r1, r1, r4
 80070b8:	4429      	add	r1, r5
 80070ba:	4620      	mov	r0, r4
 80070bc:	b289      	uxth	r1, r1
 80070be:	f7ff fb61 	bl	8006784 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80070c2:	4604      	mov	r4, r0
 80070c4:	bb18      	cbnz	r0, 800710e <pbuf_realloc+0xae>
 80070c6:	4b17      	ldr	r3, [pc, #92]	; (8007124 <pbuf_realloc+0xc4>)
 80070c8:	491a      	ldr	r1, [pc, #104]	; (8007134 <pbuf_realloc+0xd4>)
 80070ca:	4818      	ldr	r0, [pc, #96]	; (800712c <pbuf_realloc+0xcc>)
 80070cc:	f240 221d 	movw	r2, #541	; 0x21d
 80070d0:	f004 fc43 	bl	800b95a <iprintf>
  q->len = rem_len;
 80070d4:	8164      	strh	r4, [r4, #10]
 80070d6:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 80070d8:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80070da:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80070de:	429e      	cmp	r6, r3
    rem_len -= q->len;
 80070e0:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80070e2:	dd06      	ble.n	80070f2 <pbuf_realloc+0x92>
 80070e4:	463b      	mov	r3, r7
 80070e6:	f240 220b 	movw	r2, #523	; 0x20b
 80070ea:	4649      	mov	r1, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	f004 fc34 	bl	800b95a <iprintf>
    q->tot_len += (u16_t)grow;
 80070f2:	8923      	ldrh	r3, [r4, #8]
 80070f4:	4433      	add	r3, r6
 80070f6:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80070f8:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80070fa:	2c00      	cmp	r4, #0
 80070fc:	d1cf      	bne.n	800709e <pbuf_realloc+0x3e>
 80070fe:	463b      	mov	r3, r7
 8007100:	f240 220f 	movw	r2, #527	; 0x20f
 8007104:	490c      	ldr	r1, [pc, #48]	; (8007138 <pbuf_realloc+0xd8>)
 8007106:	4640      	mov	r0, r8
 8007108:	f004 fc27 	bl	800b95a <iprintf>
 800710c:	e7c7      	b.n	800709e <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800710e:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8007110:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007112:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007114:	b108      	cbz	r0, 800711a <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8007116:	f7ff fe5d 	bl	8006dd4 <pbuf_free>
  q->next = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007122:	bf00      	nop
 8007124:	0800d2f5 	.word	0x0800d2f5
 8007128:	0800d351 	.word	0x0800d351
 800712c:	0800c0d7 	.word	0x0800c0d7
 8007130:	0800d369 	.word	0x0800d369
 8007134:	0800d3ad 	.word	0x0800d3ad
 8007138:	0800d395 	.word	0x0800d395
 800713c:	0800d384 	.word	0x0800d384

08007140 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007140:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8007142:	2200      	movs	r2, #0
 8007144:	b290      	uxth	r0, r2
 8007146:	3201      	adds	r2, #1
 8007148:	b903      	cbnz	r3, 800714c <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800714a:	4770      	bx	lr
    p = p->next;
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	e7f9      	b.n	8007144 <pbuf_clen+0x4>

08007150 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007150:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8007152:	4604      	mov	r4, r0
 8007154:	b188      	cbz	r0, 800717a <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 8007156:	f003 fe79 	bl	800ae4c <sys_arch_protect>
 800715a:	89e3      	ldrh	r3, [r4, #14]
 800715c:	3301      	adds	r3, #1
 800715e:	81e3      	strh	r3, [r4, #14]
 8007160:	f003 fe80 	bl	800ae64 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007164:	89e3      	ldrh	r3, [r4, #14]
 8007166:	b943      	cbnz	r3, 800717a <pbuf_ref+0x2a>
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <pbuf_ref+0x2c>)
 800716a:	4905      	ldr	r1, [pc, #20]	; (8007180 <pbuf_ref+0x30>)
 800716c:	4805      	ldr	r0, [pc, #20]	; (8007184 <pbuf_ref+0x34>)
 800716e:	f240 3239 	movw	r2, #825	; 0x339
  }
}
 8007172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007176:	f004 bbf0 	b.w	800b95a <iprintf>
 800717a:	bd10      	pop	{r4, pc}
 800717c:	0800d2f5 	.word	0x0800d2f5
 8007180:	0800d3c9 	.word	0x0800d3c9
 8007184:	0800c0d7 	.word	0x0800c0d7

08007188 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800718c:	4604      	mov	r4, r0
 800718e:	b100      	cbz	r0, 8007192 <pbuf_cat+0xa>
 8007190:	b969      	cbnz	r1, 80071ae <pbuf_cat+0x26>
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <pbuf_cat+0x60>)
 8007194:	4915      	ldr	r1, [pc, #84]	; (80071ec <pbuf_cat+0x64>)
 8007196:	4816      	ldr	r0, [pc, #88]	; (80071f0 <pbuf_cat+0x68>)
 8007198:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800719c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80071a0:	f004 bbdb 	b.w	800b95a <iprintf>
    p->tot_len += t->tot_len;
 80071a4:	8923      	ldrh	r3, [r4, #8]
 80071a6:	8929      	ldrh	r1, [r5, #8]
 80071a8:	440b      	add	r3, r1
 80071aa:	8123      	strh	r3, [r4, #8]
 80071ac:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	d1f7      	bne.n	80071a4 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80071b4:	8922      	ldrh	r2, [r4, #8]
 80071b6:	8963      	ldrh	r3, [r4, #10]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d006      	beq.n	80071ca <pbuf_cat+0x42>
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <pbuf_cat+0x60>)
 80071be:	490d      	ldr	r1, [pc, #52]	; (80071f4 <pbuf_cat+0x6c>)
 80071c0:	480b      	ldr	r0, [pc, #44]	; (80071f0 <pbuf_cat+0x68>)
 80071c2:	f240 3255 	movw	r2, #853	; 0x355
 80071c6:	f004 fbc8 	bl	800b95a <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	b133      	cbz	r3, 80071dc <pbuf_cat+0x54>
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <pbuf_cat+0x60>)
 80071d0:	4909      	ldr	r1, [pc, #36]	; (80071f8 <pbuf_cat+0x70>)
 80071d2:	4807      	ldr	r0, [pc, #28]	; (80071f0 <pbuf_cat+0x68>)
 80071d4:	f240 3256 	movw	r2, #854	; 0x356
 80071d8:	f004 fbbf 	bl	800b95a <iprintf>
  p->tot_len += t->tot_len;
 80071dc:	892a      	ldrh	r2, [r5, #8]
 80071de:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80071e0:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80071e2:	4413      	add	r3, r2
 80071e4:	8123      	strh	r3, [r4, #8]
  p->next = t;
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	0800d2f5 	.word	0x0800d2f5
 80071ec:	0800d15c 	.word	0x0800d15c
 80071f0:	0800c0d7 	.word	0x0800c0d7
 80071f4:	0800d191 	.word	0x0800d191
 80071f8:	0800d1be 	.word	0x0800d1be

080071fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80071fc:	b510      	push	{r4, lr}
 80071fe:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8007200:	f7ff ffc2 	bl	8007188 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007204:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800720a:	f7ff bfa1 	b.w	8007150 <pbuf_ref>
	...

08007210 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007216:	4605      	mov	r5, r0
 8007218:	b120      	cbz	r0, 8007224 <pbuf_copy+0x14>
 800721a:	b119      	cbz	r1, 8007224 <pbuf_copy+0x14>
 800721c:	8902      	ldrh	r2, [r0, #8]
 800721e:	890b      	ldrh	r3, [r1, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	d20a      	bcs.n	800723a <pbuf_copy+0x2a>
 8007224:	4b38      	ldr	r3, [pc, #224]	; (8007308 <pbuf_copy+0xf8>)
 8007226:	4939      	ldr	r1, [pc, #228]	; (800730c <pbuf_copy+0xfc>)
 8007228:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800722c:	4838      	ldr	r0, [pc, #224]	; (8007310 <pbuf_copy+0x100>)
 800722e:	f004 fb94 	bl	800b95a <iprintf>
 8007232:	f06f 000f 	mvn.w	r0, #15
 8007236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800723e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007308 <pbuf_copy+0xf8>
 8007242:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8007320 <pbuf_copy+0x110>
 8007246:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8007310 <pbuf_copy+0x100>
 800724a:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800724c:	896e      	ldrh	r6, [r5, #10]
 800724e:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007250:	6868      	ldr	r0, [r5, #4]
 8007252:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007254:	1bf6      	subs	r6, r6, r7
 8007256:	eba3 030b 	sub.w	r3, r3, fp
 800725a:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 800725c:	bfac      	ite	ge
 800725e:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8007260:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007262:	4632      	mov	r2, r6
 8007264:	4459      	add	r1, fp
 8007266:	4438      	add	r0, r7
 8007268:	f004 fcdf 	bl	800bc2a <memcpy>
    offset_to += len;
 800726c:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800726e:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8007270:	b2bf      	uxth	r7, r7
    offset_from += len;
 8007272:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007274:	42bb      	cmp	r3, r7
    offset_from += len;
 8007276:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800727a:	d206      	bcs.n	800728a <pbuf_copy+0x7a>
 800727c:	4643      	mov	r3, r8
 800727e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007282:	4651      	mov	r1, sl
 8007284:	4648      	mov	r0, r9
 8007286:	f004 fb68 	bl	800b95a <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800728a:	8963      	ldrh	r3, [r4, #10]
 800728c:	455b      	cmp	r3, fp
 800728e:	d206      	bcs.n	800729e <pbuf_copy+0x8e>
 8007290:	4643      	mov	r3, r8
 8007292:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007296:	491f      	ldr	r1, [pc, #124]	; (8007314 <pbuf_copy+0x104>)
 8007298:	4648      	mov	r0, r9
 800729a:	f004 fb5e 	bl	800b95a <iprintf>
    if (offset_from >= p_from->len) {
 800729e:	8963      	ldrh	r3, [r4, #10]
 80072a0:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 80072a2:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80072a4:	bf9c      	itt	ls
 80072a6:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80072a8:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 80072ac:	42bb      	cmp	r3, r7
 80072ae:	d11e      	bne.n	80072ee <pbuf_copy+0xde>
      p_to = p_to->next;
 80072b0:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80072b2:	b9dd      	cbnz	r5, 80072ec <pbuf_copy+0xdc>
 80072b4:	b1bc      	cbz	r4, 80072e6 <pbuf_copy+0xd6>
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <pbuf_copy+0xf8>)
 80072b8:	4917      	ldr	r1, [pc, #92]	; (8007318 <pbuf_copy+0x108>)
 80072ba:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80072be:	e7b5      	b.n	800722c <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80072c0:	8962      	ldrh	r2, [r4, #10]
 80072c2:	8923      	ldrh	r3, [r4, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d114      	bne.n	80072f2 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	b193      	cbz	r3, 80072f2 <pbuf_copy+0xe2>
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <pbuf_copy+0xf8>)
 80072ce:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072d2:	4912      	ldr	r1, [pc, #72]	; (800731c <pbuf_copy+0x10c>)
 80072d4:	480e      	ldr	r0, [pc, #56]	; (8007310 <pbuf_copy+0x100>)
 80072d6:	f004 fb40 	bl	800b95a <iprintf>
 80072da:	f06f 0005 	mvn.w	r0, #5
 80072de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d1b2      	bne.n	800724c <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 80072ec:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80072ee:	2c00      	cmp	r4, #0
 80072f0:	d1e6      	bne.n	80072c0 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80072f2:	896a      	ldrh	r2, [r5, #10]
 80072f4:	892b      	ldrh	r3, [r5, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d1f3      	bne.n	80072e2 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <pbuf_copy+0xd2>
 8007300:	4b01      	ldr	r3, [pc, #4]	; (8007308 <pbuf_copy+0xf8>)
 8007302:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007306:	e7e4      	b.n	80072d2 <pbuf_copy+0xc2>
 8007308:	0800d2f5 	.word	0x0800d2f5
 800730c:	0800d1ce 	.word	0x0800d1ce
 8007310:	0800c0d7 	.word	0x0800c0d7
 8007314:	0800d215 	.word	0x0800d215
 8007318:	0800d230 	.word	0x0800d230
 800731c:	0800d23d 	.word	0x0800d23d
 8007320:	0800d1fe 	.word	0x0800d1fe

08007324 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	460f      	mov	r7, r1
 800732a:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800732c:	4606      	mov	r6, r0
 800732e:	b950      	cbnz	r0, 8007346 <pbuf_copy_partial+0x22>
 8007330:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <pbuf_copy_partial+0x7c>)
 8007332:	491c      	ldr	r1, [pc, #112]	; (80073a4 <pbuf_copy_partial+0x80>)
 8007334:	481c      	ldr	r0, [pc, #112]	; (80073a8 <pbuf_copy_partial+0x84>)
 8007336:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800733a:	f004 fb0e 	bl	800b95a <iprintf>
 800733e:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007340:	4628      	mov	r0, r5
 8007342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007346:	b169      	cbz	r1, 8007364 <pbuf_copy_partial+0x40>
 8007348:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800734a:	f1b8 0f00 	cmp.w	r8, #0
 800734e:	d0f7      	beq.n	8007340 <pbuf_copy_partial+0x1c>
 8007350:	2e00      	cmp	r6, #0
 8007352:	d0f5      	beq.n	8007340 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8007354:	b17b      	cbz	r3, 8007376 <pbuf_copy_partial+0x52>
 8007356:	8971      	ldrh	r1, [r6, #10]
 8007358:	428b      	cmp	r3, r1
 800735a:	d30c      	bcc.n	8007376 <pbuf_copy_partial+0x52>
      offset -= p->len;
 800735c:	1a5b      	subs	r3, r3, r1
 800735e:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007360:	6836      	ldr	r6, [r6, #0]
 8007362:	e7f2      	b.n	800734a <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <pbuf_copy_partial+0x7c>)
 8007366:	4911      	ldr	r1, [pc, #68]	; (80073ac <pbuf_copy_partial+0x88>)
 8007368:	480f      	ldr	r0, [pc, #60]	; (80073a8 <pbuf_copy_partial+0x84>)
 800736a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800736e:	f004 faf4 	bl	800b95a <iprintf>
 8007372:	463d      	mov	r5, r7
 8007374:	e7e4      	b.n	8007340 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8007376:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007378:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 800737a:	1ae4      	subs	r4, r4, r3
 800737c:	b2a4      	uxth	r4, r4
 800737e:	4544      	cmp	r4, r8
 8007380:	bf28      	it	cs
 8007382:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007384:	4622      	mov	r2, r4
 8007386:	4419      	add	r1, r3
 8007388:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 800738a:	4425      	add	r5, r4
      len -= buf_copy_len;
 800738c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007390:	f004 fc4b 	bl	800bc2a <memcpy>
      copied_total += buf_copy_len;
 8007394:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8007396:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	e7e0      	b.n	8007360 <pbuf_copy_partial+0x3c>
 800739e:	bf00      	nop
 80073a0:	0800d2f5 	.word	0x0800d2f5
 80073a4:	0800d267 	.word	0x0800d267
 80073a8:	0800c0d7 	.word	0x0800c0d7
 80073ac:	0800d286 	.word	0x0800d286

080073b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80073b0:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <tcp_new_port+0x48>)
 80073b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b4:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80073b6:	4e11      	ldr	r6, [pc, #68]	; (80073fc <tcp_new_port+0x4c>)
{
 80073b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80073bc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80073c0:	42a8      	cmp	r0, r5
 80073c2:	bf1a      	itte	ne
 80073c4:	3001      	addne	r0, #1
 80073c6:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80073c8:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 80073cc:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80073ce:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 80073d2:	6824      	ldr	r4, [r4, #0]
 80073d4:	b924      	cbnz	r4, 80073e0 <tcp_new_port+0x30>
 80073d6:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80073d8:	2904      	cmp	r1, #4
 80073da:	d1f8      	bne.n	80073ce <tcp_new_port+0x1e>
 80073dc:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80073de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 80073e0:	8ae7      	ldrh	r7, [r4, #22]
 80073e2:	4287      	cmp	r7, r0
 80073e4:	d106      	bne.n	80073f4 <tcp_new_port+0x44>
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e8      	bne.n	80073c0 <tcp_new_port+0x10>
 80073ee:	8010      	strh	r0, [r2, #0]
          return 0;
 80073f0:	4618      	mov	r0, r3
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80073f4:	68e4      	ldr	r4, [r4, #12]
 80073f6:	e7ed      	b.n	80073d4 <tcp_new_port+0x24>
 80073f8:	2000000c 	.word	0x2000000c
 80073fc:	0800d4d4 	.word	0x0800d4d4

08007400 <tcp_close_shutdown_fin>:
{
 8007400:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007402:	4604      	mov	r4, r0
 8007404:	b930      	cbnz	r0, 8007414 <tcp_close_shutdown_fin+0x14>
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <tcp_close_shutdown_fin+0x54>)
 8007408:	4913      	ldr	r1, [pc, #76]	; (8007458 <tcp_close_shutdown_fin+0x58>)
 800740a:	4814      	ldr	r0, [pc, #80]	; (800745c <tcp_close_shutdown_fin+0x5c>)
 800740c:	f240 124d 	movw	r2, #333	; 0x14d
 8007410:	f004 faa3 	bl	800b95a <iprintf>
  switch (pcb->state) {
 8007414:	7d23      	ldrb	r3, [r4, #20]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d003      	beq.n	8007422 <tcp_close_shutdown_fin+0x22>
 800741a:	2b07      	cmp	r3, #7
 800741c:	d00c      	beq.n	8007438 <tcp_close_shutdown_fin+0x38>
 800741e:	2b03      	cmp	r3, #3
 8007420:	d108      	bne.n	8007434 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8007422:	4620      	mov	r0, r4
 8007424:	f002 fd76 	bl	8009f14 <tcp_send_fin>
    if (err == ERR_OK) {
 8007428:	b988      	cbnz	r0, 800744e <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 800742a:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 800742c:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800742e:	4620      	mov	r0, r4
 8007430:	f002 fdc8 	bl	8009fc4 <tcp_output>
 8007434:	2000      	movs	r0, #0
 8007436:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8007438:	4620      	mov	r0, r4
 800743a:	f002 fd6b 	bl	8009f14 <tcp_send_fin>
    if (err == ERR_OK) {
 800743e:	b930      	cbnz	r0, 800744e <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8007440:	2309      	movs	r3, #9
 8007442:	e7f3      	b.n	800742c <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8007444:	7ea3      	ldrb	r3, [r4, #26]
 8007446:	f043 0308 	orr.w	r3, r3, #8
 800744a:	76a3      	strb	r3, [r4, #26]
 800744c:	e7f2      	b.n	8007434 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	d0f8      	beq.n	8007444 <tcp_close_shutdown_fin+0x44>
}
 8007452:	bd10      	pop	{r4, pc}
 8007454:	0800d432 	.word	0x0800d432
 8007458:	0800d461 	.word	0x0800d461
 800745c:	0800c0d7 	.word	0x0800c0d7

08007460 <tcp_init>:
{
 8007460:	4770      	bx	lr
	...

08007464 <tcp_update_rcv_ann_wnd>:
{
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007468:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800746a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800746c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800746e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007470:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007472:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007476:	4428      	add	r0, r5
 8007478:	bf94      	ite	ls
 800747a:	1a82      	subls	r2, r0, r2
 800747c:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8007480:	2a00      	cmp	r2, #0
 8007482:	db01      	blt.n	8007488 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007484:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007486:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007488:	1aea      	subs	r2, r5, r3
 800748a:	2a00      	cmp	r2, #0
 800748c:	dd02      	ble.n	8007494 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 800748e:	2000      	movs	r0, #0
 8007490:	8560      	strh	r0, [r4, #42]	; 0x2a
 8007492:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007494:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007496:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800749a:	d306      	bcc.n	80074aa <tcp_update_rcv_ann_wnd+0x46>
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <tcp_update_rcv_ann_wnd+0x4c>)
 800749e:	4905      	ldr	r1, [pc, #20]	; (80074b4 <tcp_update_rcv_ann_wnd+0x50>)
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <tcp_update_rcv_ann_wnd+0x54>)
 80074a2:	f44f 7242 	mov.w	r2, #776	; 0x308
 80074a6:	f004 fa58 	bl	800b95a <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80074aa:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80074ac:	2000      	movs	r0, #0
}
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	0800d432 	.word	0x0800d432
 80074b4:	0800d738 	.word	0x0800d738
 80074b8:	0800c0d7 	.word	0x0800c0d7

080074bc <tcp_recved>:
{
 80074bc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80074be:	7d03      	ldrb	r3, [r0, #20]
 80074c0:	2b01      	cmp	r3, #1
{
 80074c2:	4604      	mov	r4, r0
 80074c4:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80074c6:	d106      	bne.n	80074d6 <tcp_recved+0x1a>
 80074c8:	4b17      	ldr	r3, [pc, #92]	; (8007528 <tcp_recved+0x6c>)
 80074ca:	4918      	ldr	r1, [pc, #96]	; (800752c <tcp_recved+0x70>)
 80074cc:	4818      	ldr	r0, [pc, #96]	; (8007530 <tcp_recved+0x74>)
 80074ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80074d2:	f004 fa42 	bl	800b95a <iprintf>
  pcb->rcv_wnd += len;
 80074d6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80074d8:	4429      	add	r1, r5
 80074da:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80074dc:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 80074e0:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80074e2:	d911      	bls.n	8007508 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80074e4:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80074e8:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff ffba 	bl	8007464 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80074f0:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80074f4:	db17      	blt.n	8007526 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 80074f6:	7ea3      	ldrb	r3, [r4, #26]
 80074f8:	f043 0302 	orr.w	r3, r3, #2
 80074fc:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80074fe:	4620      	mov	r0, r4
}
 8007500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8007504:	f002 bd5e 	b.w	8009fc4 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8007508:	2900      	cmp	r1, #0
 800750a:	d1ee      	bne.n	80074ea <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800750c:	7d23      	ldrb	r3, [r4, #20]
 800750e:	2b07      	cmp	r3, #7
 8007510:	d0e8      	beq.n	80074e4 <tcp_recved+0x28>
 8007512:	2b09      	cmp	r3, #9
 8007514:	d0e6      	beq.n	80074e4 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007516:	4b04      	ldr	r3, [pc, #16]	; (8007528 <tcp_recved+0x6c>)
 8007518:	4906      	ldr	r1, [pc, #24]	; (8007534 <tcp_recved+0x78>)
 800751a:	4805      	ldr	r0, [pc, #20]	; (8007530 <tcp_recved+0x74>)
 800751c:	f240 322d 	movw	r2, #813	; 0x32d
 8007520:	f004 fa1b 	bl	800b95a <iprintf>
 8007524:	e7e1      	b.n	80074ea <tcp_recved+0x2e>
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	0800d432 	.word	0x0800d432
 800752c:	0800d578 	.word	0x0800d578
 8007530:	0800c0d7 	.word	0x0800c0d7
 8007534:	0800d59e 	.word	0x0800d59e

08007538 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007538:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800753a:	4604      	mov	r4, r0
 800753c:	b148      	cbz	r0, 8007552 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800753e:	6840      	ldr	r0, [r0, #4]
 8007540:	b108      	cbz	r0, 8007546 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8007542:	f7ff fc47 	bl	8006dd4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007546:	4621      	mov	r1, r4
 8007548:	2003      	movs	r0, #3
  }
}
 800754a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800754e:	f7ff babb 	b.w	8006ac8 <memp_free>
 8007552:	bd10      	pop	{r4, pc}

08007554 <tcp_segs_free>:
{
 8007554:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8007556:	b900      	cbnz	r0, 800755a <tcp_segs_free+0x6>
}
 8007558:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800755a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800755c:	f7ff ffec 	bl	8007538 <tcp_seg_free>
    seg = next;
 8007560:	4620      	mov	r0, r4
 8007562:	e7f8      	b.n	8007556 <tcp_segs_free+0x2>

08007564 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007568:	2003      	movs	r0, #3
 800756a:	f7ff fa91 	bl	8006a90 <memp_malloc>
  if (cseg == NULL) {
 800756e:	4605      	mov	r5, r0
 8007570:	b160      	cbz	r0, 800758c <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007572:	4620      	mov	r0, r4
 8007574:	462b      	mov	r3, r5
 8007576:	f104 0210 	add.w	r2, r4, #16
 800757a:	f850 1b04 	ldr.w	r1, [r0], #4
 800757e:	f843 1b04 	str.w	r1, [r3], #4
 8007582:	4290      	cmp	r0, r2
 8007584:	d1f9      	bne.n	800757a <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8007586:	6868      	ldr	r0, [r5, #4]
 8007588:	f7ff fde2 	bl	8007150 <pbuf_ref>
  return cseg;
}
 800758c:	4628      	mov	r0, r5
 800758e:	bd38      	pop	{r3, r4, r5, pc}

08007590 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007590:	b100      	cbz	r0, 8007594 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8007592:	6101      	str	r1, [r0, #16]
 8007594:	4770      	bx	lr
	...

08007598 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800759c:	4604      	mov	r4, r0
 800759e:	b158      	cbz	r0, 80075b8 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80075a0:	7d03      	ldrb	r3, [r0, #20]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d106      	bne.n	80075b4 <tcp_recv+0x1c>
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <tcp_recv+0x24>)
 80075a8:	4905      	ldr	r1, [pc, #20]	; (80075c0 <tcp_recv+0x28>)
 80075aa:	4806      	ldr	r0, [pc, #24]	; (80075c4 <tcp_recv+0x2c>)
 80075ac:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80075b0:	f004 f9d3 	bl	800b95a <iprintf>
    pcb->recv = recv;
 80075b4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80075b8:	bd38      	pop	{r3, r4, r5, pc}
 80075ba:	bf00      	nop
 80075bc:	0800d432 	.word	0x0800d432
 80075c0:	0800d551 	.word	0x0800d551
 80075c4:	0800c0d7 	.word	0x0800c0d7

080075c8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80075cc:	4604      	mov	r4, r0
 80075ce:	b150      	cbz	r0, 80075e6 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80075d0:	7d03      	ldrb	r3, [r0, #20]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d106      	bne.n	80075e4 <tcp_sent+0x1c>
 80075d6:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <tcp_sent+0x20>)
 80075d8:	4904      	ldr	r1, [pc, #16]	; (80075ec <tcp_sent+0x24>)
 80075da:	4805      	ldr	r0, [pc, #20]	; (80075f0 <tcp_sent+0x28>)
 80075dc:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80075e0:	f004 f9bb 	bl	800b95a <iprintf>
    pcb->sent = sent;
 80075e4:	67e5      	str	r5, [r4, #124]	; 0x7c
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	0800d432 	.word	0x0800d432
 80075ec:	0800d5bf 	.word	0x0800d5bf
 80075f0:	0800c0d7 	.word	0x0800c0d7

080075f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80075f8:	4604      	mov	r4, r0
 80075fa:	b158      	cbz	r0, 8007614 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80075fc:	7d03      	ldrb	r3, [r0, #20]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d106      	bne.n	8007610 <tcp_err+0x1c>
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <tcp_err+0x24>)
 8007604:	4905      	ldr	r1, [pc, #20]	; (800761c <tcp_err+0x28>)
 8007606:	4806      	ldr	r0, [pc, #24]	; (8007620 <tcp_err+0x2c>)
 8007608:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800760c:	f004 f9a5 	bl	800b95a <iprintf>
    pcb->errf = err;
 8007610:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	0800d432 	.word	0x0800d432
 800761c:	0800d49d 	.word	0x0800d49d
 8007620:	0800c0d7 	.word	0x0800c0d7

08007624 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007624:	b118      	cbz	r0, 800762e <tcp_accept+0xa>
 8007626:	7d03      	ldrb	r3, [r0, #20]
 8007628:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 800762a:	bf08      	it	eq
 800762c:	6181      	streq	r1, [r0, #24]
 800762e:	4770      	bx	lr

08007630 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007630:	7d03      	ldrb	r3, [r0, #20]
 8007632:	2b01      	cmp	r3, #1
{
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4604      	mov	r4, r0
 8007638:	460e      	mov	r6, r1
 800763a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800763c:	d106      	bne.n	800764c <tcp_poll+0x1c>
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <tcp_poll+0x24>)
 8007640:	4905      	ldr	r1, [pc, #20]	; (8007658 <tcp_poll+0x28>)
 8007642:	4806      	ldr	r0, [pc, #24]	; (800765c <tcp_poll+0x2c>)
 8007644:	f240 7203 	movw	r2, #1795	; 0x703
 8007648:	f004 f987 	bl	800b95a <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800764c:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 800764e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	0800d432 	.word	0x0800d432
 8007658:	0800d533 	.word	0x0800d533
 800765c:	0800c0d7 	.word	0x0800c0d7

08007660 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007660:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8007662:	7d03      	ldrb	r3, [r0, #20]
 8007664:	2b01      	cmp	r3, #1
{
 8007666:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8007668:	d919      	bls.n	800769e <tcp_pcb_purge+0x3e>
 800766a:	2b0a      	cmp	r3, #10
 800766c:	d017      	beq.n	800769e <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800766e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007670:	b118      	cbz	r0, 800767a <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007672:	f7ff fbaf 	bl	8006dd4 <pbuf_free>
      pcb->refused_data = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800767a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800767c:	f7ff ff6a 	bl	8007554 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007680:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007686:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007688:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 800768a:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 800768c:	f7ff ff62 	bl	8007554 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007690:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007692:	f7ff ff5f 	bl	8007554 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007696:	66a5      	str	r5, [r4, #104]	; 0x68
 8007698:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800769a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800769e:	bd38      	pop	{r3, r4, r5, pc}

080076a0 <tcp_slowtmr>:
{
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80076a4:	4eb0      	ldr	r6, [pc, #704]	; (8007968 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 80076a6:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 800799c <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 80076aa:	6833      	ldr	r3, [r6, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80076b0:	4bae      	ldr	r3, [pc, #696]	; (800796c <tcp_slowtmr+0x2cc>)
 80076b2:	781a      	ldrb	r2, [r3, #0]
{
 80076b4:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 80076b6:	3201      	adds	r2, #1
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 80076bc:	4fac      	ldr	r7, [pc, #688]	; (8007970 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80076be:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80079a0 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 80076c2:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 80076c4:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80076c8:	b96c      	cbnz	r4, 80076e6 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80076ca:	4faa      	ldr	r7, [pc, #680]	; (8007974 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076cc:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80079a0 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 80076d0:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076d2:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80079a4 <tcp_slowtmr+0x304>
 80076d6:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 800797c <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 80076da:	2d00      	cmp	r5, #0
 80076dc:	f040 8185 	bne.w	80079ea <tcp_slowtmr+0x34a>
}
 80076e0:	b005      	add	sp, #20
 80076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80076e6:	7d23      	ldrb	r3, [r4, #20]
 80076e8:	b933      	cbnz	r3, 80076f8 <tcp_slowtmr+0x58>
 80076ea:	464b      	mov	r3, r9
 80076ec:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80076f0:	49a1      	ldr	r1, [pc, #644]	; (8007978 <tcp_slowtmr+0x2d8>)
 80076f2:	48a2      	ldr	r0, [pc, #648]	; (800797c <tcp_slowtmr+0x2dc>)
 80076f4:	f004 f931 	bl	800b95a <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80076f8:	7d23      	ldrb	r3, [r4, #20]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d106      	bne.n	800770c <tcp_slowtmr+0x6c>
 80076fe:	464b      	mov	r3, r9
 8007700:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007704:	499e      	ldr	r1, [pc, #632]	; (8007980 <tcp_slowtmr+0x2e0>)
 8007706:	489d      	ldr	r0, [pc, #628]	; (800797c <tcp_slowtmr+0x2dc>)
 8007708:	f004 f927 	bl	800b95a <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800770c:	7d23      	ldrb	r3, [r4, #20]
 800770e:	2b0a      	cmp	r3, #10
 8007710:	d106      	bne.n	8007720 <tcp_slowtmr+0x80>
 8007712:	464b      	mov	r3, r9
 8007714:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007718:	499a      	ldr	r1, [pc, #616]	; (8007984 <tcp_slowtmr+0x2e4>)
 800771a:	4898      	ldr	r0, [pc, #608]	; (800797c <tcp_slowtmr+0x2dc>)
 800771c:	f004 f91d 	bl	800b95a <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	7f62      	ldrb	r2, [r4, #29]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d104      	bne.n	8007734 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800772a:	68e5      	ldr	r5, [r4, #12]
 800772c:	4644      	mov	r4, r8
      continue;
 800772e:	46a0      	mov	r8, r4
 8007730:	462c      	mov	r4, r5
 8007732:	e7c9      	b.n	80076c8 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007734:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8007736:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007738:	2902      	cmp	r1, #2
 800773a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800773e:	d102      	bne.n	8007746 <tcp_slowtmr+0xa6>
 8007740:	2a05      	cmp	r2, #5
 8007742:	f200 80e6 	bhi.w	8007912 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007746:	2a0b      	cmp	r2, #11
 8007748:	f200 80e3 	bhi.w	8007912 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 800774c:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8007750:	f1bb 0f00 	cmp.w	fp, #0
 8007754:	f000 80a6 	beq.w	80078a4 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007758:	488b      	ldr	r0, [pc, #556]	; (8007988 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 800775a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800775e:	4483      	add	fp, r0
 8007760:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8007764:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 8007766:	bf84      	itt	hi
 8007768:	3301      	addhi	r3, #1
 800776a:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800776e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8007772:	4293      	cmp	r3, r2
 8007774:	f080 8085 	bcs.w	8007882 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8007778:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 800777c:	7d23      	ldrb	r3, [r4, #20]
 800777e:	2b06      	cmp	r3, #6
 8007780:	d10b      	bne.n	800779a <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8007782:	7ea2      	ldrb	r2, [r4, #26]
 8007784:	06d2      	lsls	r2, r2, #27
 8007786:	d508      	bpl.n	800779a <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007788:	6832      	ldr	r2, [r6, #0]
 800778a:	6a21      	ldr	r1, [r4, #32]
 800778c:	1a52      	subs	r2, r2, r1
 800778e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8007790:	bf84      	itt	hi
 8007792:	f10b 0b01 	addhi.w	fp, fp, #1
 8007796:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800779a:	7a25      	ldrb	r5, [r4, #8]
 800779c:	f015 0508 	ands.w	r5, r5, #8
 80077a0:	d019      	beq.n	80077d6 <tcp_slowtmr+0x136>
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d002      	beq.n	80077ac <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 80077a6:	2b07      	cmp	r3, #7
 80077a8:	f040 80c8 	bne.w	800793c <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077ac:	6831      	ldr	r1, [r6, #0]
 80077ae:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80077b0:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077b4:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80077b6:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 80077ba:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80077be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077c2:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077c6:	4291      	cmp	r1, r2
 80077c8:	f240 80a6 	bls.w	8007918 <tcp_slowtmr+0x278>
        ++pcb_remove;
 80077cc:	f10b 0b01 	add.w	fp, fp, #1
 80077d0:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80077d4:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80077d6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80077d8:	b168      	cbz	r0, 80077f6 <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	6a22      	ldr	r2, [r4, #32]
 80077de:	1a9a      	subs	r2, r3, r2
 80077e0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80077e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80077e8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80077ec:	d303      	bcc.n	80077f6 <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 80077ee:	f7ff feb1 	bl	8007554 <tcp_segs_free>
      pcb->ooseq = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 80077f6:	7d23      	ldrb	r3, [r4, #20]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	f040 80a1 	bne.w	8007940 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077fe:	6833      	ldr	r3, [r6, #0]
 8007800:	6a22      	ldr	r2, [r4, #32]
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007806:	d803      	bhi.n	8007810 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8007808:	f1bb 0f00 	cmp.w	fp, #0
 800780c:	f000 80cc 	beq.w	80079a8 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8007810:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8007812:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8007816:	f7ff ff23 	bl	8007660 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800781a:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 800781c:	f1b8 0f00 	cmp.w	r8, #0
 8007820:	f000 8096 	beq.w	8007950 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007824:	429c      	cmp	r4, r3
 8007826:	d106      	bne.n	8007836 <tcp_slowtmr+0x196>
 8007828:	464b      	mov	r3, r9
 800782a:	f240 4289 	movw	r2, #1161	; 0x489
 800782e:	4957      	ldr	r1, [pc, #348]	; (800798c <tcp_slowtmr+0x2ec>)
 8007830:	4852      	ldr	r0, [pc, #328]	; (800797c <tcp_slowtmr+0x2dc>)
 8007832:	f004 f892 	bl	800b95a <iprintf>
        prev->next = pcb->next;
 8007836:	68e3      	ldr	r3, [r4, #12]
 8007838:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 800783c:	b14d      	cbz	r5, 8007852 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800783e:	8b23      	ldrh	r3, [r4, #24]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	8ae3      	ldrh	r3, [r4, #22]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4622      	mov	r2, r4
 8007848:	1d23      	adds	r3, r4, #4
 800784a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800784c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800784e:	f002 fd37 	bl	800a2c0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007856:	4621      	mov	r1, r4
 8007858:	2001      	movs	r0, #1
      pcb = pcb->next;
 800785a:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800785c:	f7ff f934 	bl	8006ac8 <memp_free>
      tcp_active_pcbs_changed = 0;
 8007860:	2200      	movs	r2, #0
 8007862:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007866:	f1bb 0f00 	cmp.w	fp, #0
 800786a:	d004      	beq.n	8007876 <tcp_slowtmr+0x1d6>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	f06f 010c 	mvn.w	r1, #12
 8007872:	4618      	mov	r0, r3
 8007874:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8007876:	f89a 3000 	ldrb.w	r3, [sl]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f43f af56 	beq.w	800772c <tcp_slowtmr+0x8c>
 8007880:	e71c      	b.n	80076bc <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007882:	4620      	mov	r0, r4
 8007884:	f002 fe0c 	bl	800a4a0 <tcp_zero_window_probe>
 8007888:	2800      	cmp	r0, #0
 800788a:	f47f af75 	bne.w	8007778 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800788e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8007892:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007896:	2b06      	cmp	r3, #6
 8007898:	f63f af6e 	bhi.w	8007778 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 800789c:	3301      	adds	r3, #1
 800789e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80078a2:	e769      	b.n	8007778 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 80078a4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80078a8:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80078aa:	bfa4      	itt	ge
 80078ac:	3301      	addge	r3, #1
 80078ae:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80078b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f43f af60 	beq.w	8007778 <tcp_slowtmr+0xd8>
 80078b8:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80078bc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80078c0:	4298      	cmp	r0, r3
 80078c2:	f6ff af59 	blt.w	8007778 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 80078c6:	2902      	cmp	r1, #2
 80078c8:	d00a      	beq.n	80078e0 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80078ca:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80078ce:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80078d2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80078d6:	492e      	ldr	r1, [pc, #184]	; (8007990 <tcp_slowtmr+0x2f0>)
 80078d8:	5c8a      	ldrb	r2, [r1, r2]
 80078da:	4093      	lsls	r3, r2
 80078dc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80078e0:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80078e2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80078e6:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80078e8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80078ec:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 80078ee:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bf28      	it	cs
 80078f6:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80078f8:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 80078fa:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80078fc:	b292      	uxth	r2, r2
 80078fe:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8007900:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8007904:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 8007906:	bf38      	it	cc
 8007908:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 800790c:	f002 fd32 	bl	800a374 <tcp_rexmit_rto>
 8007910:	e734      	b.n	800777c <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8007912:	f04f 0b01 	mov.w	fp, #1
 8007916:	e731      	b.n	800777c <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007918:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <tcp_slowtmr+0x2f4>)
 800791e:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8007922:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007926:	4299      	cmp	r1, r3
 8007928:	d908      	bls.n	800793c <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800792a:	4620      	mov	r0, r4
 800792c:	f002 fd8e 	bl	800a44c <tcp_keepalive>
        if (err == ERR_OK) {
 8007930:	b920      	cbnz	r0, 800793c <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8007932:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007936:	3301      	adds	r3, #1
 8007938:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 800793c:	2500      	movs	r5, #0
 800793e:	e74a      	b.n	80077d6 <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8007940:	2b09      	cmp	r3, #9
 8007942:	f47f af61 	bne.w	8007808 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007946:	6833      	ldr	r3, [r6, #0]
 8007948:	6a22      	ldr	r2, [r4, #32]
 800794a:	1a9b      	subs	r3, r3, r2
 800794c:	2bf0      	cmp	r3, #240	; 0xf0
 800794e:	e75a      	b.n	8007806 <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007950:	429c      	cmp	r4, r3
 8007952:	d006      	beq.n	8007962 <tcp_slowtmr+0x2c2>
 8007954:	464b      	mov	r3, r9
 8007956:	f240 428d 	movw	r2, #1165	; 0x48d
 800795a:	490f      	ldr	r1, [pc, #60]	; (8007998 <tcp_slowtmr+0x2f8>)
 800795c:	4807      	ldr	r0, [pc, #28]	; (800797c <tcp_slowtmr+0x2dc>)
 800795e:	f003 fffc 	bl	800b95a <iprintf>
        tcp_active_pcbs = pcb->next;
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	603b      	str	r3, [r7, #0]
 8007966:	e769      	b.n	800783c <tcp_slowtmr+0x19c>
 8007968:	2000797c 	.word	0x2000797c
 800796c:	20003f82 	.word	0x20003f82
 8007970:	20007978 	.word	0x20007978
 8007974:	20007988 	.word	0x20007988
 8007978:	0800d5e6 	.word	0x0800d5e6
 800797c:	0800c0d7 	.word	0x0800c0d7
 8007980:	0800d610 	.word	0x0800d610
 8007984:	0800d63a 	.word	0x0800d63a
 8007988:	0800d52c 	.word	0x0800d52c
 800798c:	0800d667 	.word	0x0800d667
 8007990:	0800d40c 	.word	0x0800d40c
 8007994:	000124f8 	.word	0x000124f8
 8007998:	0800d692 	.word	0x0800d692
 800799c:	20007974 	.word	0x20007974
 80079a0:	0800d432 	.word	0x0800d432
 80079a4:	0800d6bc 	.word	0x0800d6bc
      ++prev->polltmr;
 80079a8:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80079aa:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 80079ac:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80079ae:	3301      	adds	r3, #1
 80079b0:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80079b2:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80079b4:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80079b6:	f63f aeba 	bhi.w	800772e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80079ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80079be:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80079c2:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80079c6:	b173      	cbz	r3, 80079e6 <tcp_slowtmr+0x346>
 80079c8:	4621      	mov	r1, r4
 80079ca:	6920      	ldr	r0, [r4, #16]
 80079cc:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80079ce:	f89a 3000 	ldrb.w	r3, [sl]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f47f ae72 	bne.w	80076bc <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80079d8:	2800      	cmp	r0, #0
 80079da:	f47f aea8 	bne.w	800772e <tcp_slowtmr+0x8e>
          tcp_output(prev);
 80079de:	4620      	mov	r0, r4
 80079e0:	f002 faf0 	bl	8009fc4 <tcp_output>
 80079e4:	e6a3      	b.n	800772e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80079e6:	4658      	mov	r0, fp
 80079e8:	e7f1      	b.n	80079ce <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80079ea:	7d2b      	ldrb	r3, [r5, #20]
 80079ec:	2b0a      	cmp	r3, #10
 80079ee:	d006      	beq.n	80079fe <tcp_slowtmr+0x35e>
 80079f0:	4643      	mov	r3, r8
 80079f2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80079f6:	4651      	mov	r1, sl
 80079f8:	4648      	mov	r0, r9
 80079fa:	f003 ffae 	bl	800b95a <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80079fe:	6833      	ldr	r3, [r6, #0]
 8007a00:	6a2a      	ldr	r2, [r5, #32]
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	2bf0      	cmp	r3, #240	; 0xf0
 8007a06:	d816      	bhi.n	8007a36 <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8007a08:	462c      	mov	r4, r5
 8007a0a:	68ed      	ldr	r5, [r5, #12]
 8007a0c:	e665      	b.n	80076da <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	429d      	cmp	r5, r3
 8007a12:	d106      	bne.n	8007a22 <tcp_slowtmr+0x382>
 8007a14:	4643      	mov	r3, r8
 8007a16:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007a1a:	4910      	ldr	r1, [pc, #64]	; (8007a5c <tcp_slowtmr+0x3bc>)
 8007a1c:	4648      	mov	r0, r9
 8007a1e:	f003 ff9c 	bl	800b95a <iprintf>
        prev->next = pcb->next;
 8007a22:	68eb      	ldr	r3, [r5, #12]
 8007a24:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8007a26:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f7ff f84b 	bl	8006ac8 <memp_free>
      pcb = pcb->next;
 8007a32:	465d      	mov	r5, fp
 8007a34:	e651      	b.n	80076da <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8007a36:	4628      	mov	r0, r5
 8007a38:	f7ff fe12 	bl	8007660 <tcp_pcb_purge>
      if (prev != NULL) {
 8007a3c:	2c00      	cmp	r4, #0
 8007a3e:	d1e6      	bne.n	8007a0e <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	429d      	cmp	r5, r3
 8007a44:	d006      	beq.n	8007a54 <tcp_slowtmr+0x3b4>
 8007a46:	4643      	mov	r3, r8
 8007a48:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8007a4c:	4904      	ldr	r1, [pc, #16]	; (8007a60 <tcp_slowtmr+0x3c0>)
 8007a4e:	4648      	mov	r0, r9
 8007a50:	f003 ff83 	bl	800b95a <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007a54:	68eb      	ldr	r3, [r5, #12]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	e7e5      	b.n	8007a26 <tcp_slowtmr+0x386>
 8007a5a:	bf00      	nop
 8007a5c:	0800d6eb 	.word	0x0800d6eb
 8007a60:	0800d712 	.word	0x0800d712

08007a64 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8007a64:	6803      	ldr	r3, [r0, #0]
 8007a66:	428b      	cmp	r3, r1
{
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8007a6c:	d137      	bne.n	8007ade <tcp_pcb_remove+0x7a>
 8007a6e:	68cb      	ldr	r3, [r1, #12]
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8007a76:	4620      	mov	r0, r4
 8007a78:	f7ff fdf2 	bl	8007660 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007a7c:	7d23      	ldrb	r3, [r4, #20]
 8007a7e:	2b0a      	cmp	r3, #10
 8007a80:	d00a      	beq.n	8007a98 <tcp_pcb_remove+0x34>
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d008      	beq.n	8007a98 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8007a86:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8007a88:	07da      	lsls	r2, r3, #31
 8007a8a:	d505      	bpl.n	8007a98 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8007a8c:	f043 0302 	orr.w	r3, r3, #2
 8007a90:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007a92:	4620      	mov	r0, r4
 8007a94:	f002 fa96 	bl	8009fc4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007a98:	7d23      	ldrb	r3, [r4, #20]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d01a      	beq.n	8007ad4 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007a9e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007aa0:	b133      	cbz	r3, 8007ab0 <tcp_pcb_remove+0x4c>
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <tcp_pcb_remove+0x8c>)
 8007aa4:	4913      	ldr	r1, [pc, #76]	; (8007af4 <tcp_pcb_remove+0x90>)
 8007aa6:	4814      	ldr	r0, [pc, #80]	; (8007af8 <tcp_pcb_remove+0x94>)
 8007aa8:	f240 7253 	movw	r2, #1875	; 0x753
 8007aac:	f003 ff55 	bl	800b95a <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007ab0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007ab2:	b133      	cbz	r3, 8007ac2 <tcp_pcb_remove+0x5e>
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <tcp_pcb_remove+0x8c>)
 8007ab6:	4911      	ldr	r1, [pc, #68]	; (8007afc <tcp_pcb_remove+0x98>)
 8007ab8:	480f      	ldr	r0, [pc, #60]	; (8007af8 <tcp_pcb_remove+0x94>)
 8007aba:	f240 7254 	movw	r2, #1876	; 0x754
 8007abe:	f003 ff4c 	bl	800b95a <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007ac2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007ac4:	b133      	cbz	r3, 8007ad4 <tcp_pcb_remove+0x70>
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <tcp_pcb_remove+0x8c>)
 8007ac8:	490d      	ldr	r1, [pc, #52]	; (8007b00 <tcp_pcb_remove+0x9c>)
 8007aca:	480b      	ldr	r0, [pc, #44]	; (8007af8 <tcp_pcb_remove+0x94>)
 8007acc:	f240 7256 	movw	r2, #1878	; 0x756
 8007ad0:	f003 ff43 	bl	800b95a <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007ad8:	82e3      	strh	r3, [r4, #22]
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0c7      	beq.n	8007a72 <tcp_pcb_remove+0xe>
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	4294      	cmp	r4, r2
 8007ae6:	d1f9      	bne.n	8007adc <tcp_pcb_remove+0x78>
 8007ae8:	68e2      	ldr	r2, [r4, #12]
 8007aea:	60da      	str	r2, [r3, #12]
 8007aec:	e7c1      	b.n	8007a72 <tcp_pcb_remove+0xe>
 8007aee:	bf00      	nop
 8007af0:	0800d432 	.word	0x0800d432
 8007af4:	0800d4e4 	.word	0x0800d4e4
 8007af8:	0800c0d7 	.word	0x0800c0d7
 8007afc:	0800d4fc 	.word	0x0800d4fc
 8007b00:	0800d515 	.word	0x0800d515

08007b04 <tcp_close_shutdown>:
{
 8007b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b06:	7d03      	ldrb	r3, [r0, #20]
 8007b08:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	d049      	beq.n	8007ba2 <tcp_close_shutdown+0x9e>
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d001      	beq.n	8007b16 <tcp_close_shutdown+0x12>
 8007b12:	2b07      	cmp	r3, #7
 8007b14:	d145      	bne.n	8007ba2 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007b16:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007b18:	b91a      	cbnz	r2, 8007b22 <tcp_close_shutdown+0x1e>
 8007b1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007b1c:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8007b20:	d03f      	beq.n	8007ba2 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007b22:	7ea3      	ldrb	r3, [r4, #26]
 8007b24:	06db      	lsls	r3, r3, #27
 8007b26:	d406      	bmi.n	8007b36 <tcp_close_shutdown+0x32>
 8007b28:	4b3f      	ldr	r3, [pc, #252]	; (8007c28 <tcp_close_shutdown+0x124>)
 8007b2a:	4940      	ldr	r1, [pc, #256]	; (8007c2c <tcp_close_shutdown+0x128>)
 8007b2c:	4840      	ldr	r0, [pc, #256]	; (8007c30 <tcp_close_shutdown+0x12c>)
 8007b2e:	f240 120f 	movw	r2, #271	; 0x10f
 8007b32:	f003 ff12 	bl	800b95a <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007b36:	8b23      	ldrh	r3, [r4, #24]
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	8ae3      	ldrh	r3, [r4, #22]
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4622      	mov	r2, r4
 8007b40:	1d23      	adds	r3, r4, #4
 8007b42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b44:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007b46:	f002 fbbb 	bl	800a2c0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f7ff fd88 	bl	8007660 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007b50:	4a38      	ldr	r2, [pc, #224]	; (8007c34 <tcp_close_shutdown+0x130>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	429c      	cmp	r4, r3
 8007b56:	d115      	bne.n	8007b84 <tcp_close_shutdown+0x80>
 8007b58:	68e3      	ldr	r3, [r4, #12]
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60e3      	str	r3, [r4, #12]
 8007b60:	4b35      	ldr	r3, [pc, #212]	; (8007c38 <tcp_close_shutdown+0x134>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007b66:	7d23      	ldrb	r3, [r4, #20]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d113      	bne.n	8007b94 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8007b6c:	230a      	movs	r3, #10
 8007b6e:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007b70:	4b32      	ldr	r3, [pc, #200]	; (8007c3c <tcp_close_shutdown+0x138>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	60e2      	str	r2, [r4, #12]
 8007b76:	601c      	str	r4, [r3, #0]
 8007b78:	f002 fd44 	bl	800a604 <tcp_timer_needed>
}
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	b003      	add	sp, #12
 8007b80:	bd30      	pop	{r4, r5, pc}
 8007b82:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0e9      	beq.n	8007b5c <tcp_close_shutdown+0x58>
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	4294      	cmp	r4, r2
 8007b8c:	d1f9      	bne.n	8007b82 <tcp_close_shutdown+0x7e>
 8007b8e:	68e2      	ldr	r2, [r4, #12]
 8007b90:	60da      	str	r2, [r3, #12]
 8007b92:	e7e3      	b.n	8007b5c <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8007b94:	4b2a      	ldr	r3, [pc, #168]	; (8007c40 <tcp_close_shutdown+0x13c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d117      	bne.n	8007bcc <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8007b9c:	f001 fda6 	bl	80096ec <tcp_trigger_input_pcb_close>
 8007ba0:	e7ec      	b.n	8007b7c <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d020      	beq.n	8007be8 <tcp_close_shutdown+0xe4>
 8007ba6:	d307      	bcc.n	8007bb8 <tcp_close_shutdown+0xb4>
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d033      	beq.n	8007c14 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8007bac:	4620      	mov	r0, r4
}
 8007bae:	b003      	add	sp, #12
 8007bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8007bb4:	f7ff bc24 	b.w	8007400 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8007bb8:	8ae3      	ldrh	r3, [r4, #22]
 8007bba:	b13b      	cbz	r3, 8007bcc <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007bbc:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <tcp_close_shutdown+0x140>)
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	d109      	bne.n	8007bd8 <tcp_close_shutdown+0xd4>
 8007bc4:	68e3      	ldr	r3, [r4, #12]
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8007bcc:	4621      	mov	r1, r4
 8007bce:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8007bd0:	f7fe ff7a 	bl	8006ac8 <memp_free>
    break;
 8007bd4:	e7d2      	b.n	8007b7c <tcp_close_shutdown+0x78>
 8007bd6:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0f5      	beq.n	8007bc8 <tcp_close_shutdown+0xc4>
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	4294      	cmp	r4, r2
 8007be0:	d1f9      	bne.n	8007bd6 <tcp_close_shutdown+0xd2>
 8007be2:	68e2      	ldr	r2, [r4, #12]
 8007be4:	60da      	str	r2, [r3, #12]
 8007be6:	e7ef      	b.n	8007bc8 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007be8:	4917      	ldr	r1, [pc, #92]	; (8007c48 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8007bea:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007bec:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007bf0:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007bf2:	b94a      	cbnz	r2, 8007c08 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d1f8      	bne.n	8007bec <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4813      	ldr	r0, [pc, #76]	; (8007c4c <tcp_close_shutdown+0x148>)
 8007bfe:	f7ff ff31 	bl	8007a64 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007c02:	4621      	mov	r1, r4
 8007c04:	2002      	movs	r0, #2
 8007c06:	e7e3      	b.n	8007bd0 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8007c08:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8007c0a:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8007c0c:	bf08      	it	eq
 8007c0e:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007c10:	68d2      	ldr	r2, [r2, #12]
 8007c12:	e7ee      	b.n	8007bf2 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007c14:	4621      	mov	r1, r4
 8007c16:	4807      	ldr	r0, [pc, #28]	; (8007c34 <tcp_close_shutdown+0x130>)
 8007c18:	f7ff ff24 	bl	8007a64 <tcp_pcb_remove>
 8007c1c:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <tcp_close_shutdown+0x134>)
 8007c1e:	2001      	movs	r0, #1
 8007c20:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8007c22:	4621      	mov	r1, r4
 8007c24:	e7d4      	b.n	8007bd0 <tcp_close_shutdown+0xcc>
 8007c26:	bf00      	nop
 8007c28:	0800d432 	.word	0x0800d432
 8007c2c:	0800d419 	.word	0x0800d419
 8007c30:	0800c0d7 	.word	0x0800c0d7
 8007c34:	20007978 	.word	0x20007978
 8007c38:	20007974 	.word	0x20007974
 8007c3c:	20007988 	.word	0x20007988
 8007c40:	2000798c 	.word	0x2000798c
 8007c44:	20007984 	.word	0x20007984
 8007c48:	0800d4d4 	.word	0x0800d4d4
 8007c4c:	20007980 	.word	0x20007980

08007c50 <tcp_close>:
  if (pcb->state != LISTEN) {
 8007c50:	7d03      	ldrb	r3, [r0, #20]
 8007c52:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8007c54:	bf1e      	ittt	ne
 8007c56:	7e83      	ldrbne	r3, [r0, #26]
 8007c58:	f043 0310 	orrne.w	r3, r3, #16
 8007c5c:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8007c5e:	2101      	movs	r1, #1
 8007c60:	f7ff bf50 	b.w	8007b04 <tcp_close_shutdown>

08007c64 <tcp_recv_null>:
{
 8007c64:	b510      	push	{r4, lr}
 8007c66:	4608      	mov	r0, r1
  if (p != NULL) {
 8007c68:	4614      	mov	r4, r2
 8007c6a:	b13a      	cbz	r2, 8007c7c <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8007c6c:	8911      	ldrh	r1, [r2, #8]
 8007c6e:	f7ff fc25 	bl	80074bc <tcp_recved>
    pbuf_free(p);
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7ff f8ae 	bl	8006dd4 <pbuf_free>
}
 8007c78:	2000      	movs	r0, #0
 8007c7a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1fb      	bne.n	8007c78 <tcp_recv_null+0x14>
}
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007c84:	f7ff bfe4 	b.w	8007c50 <tcp_close>

08007c88 <tcp_process_refused_data>:
{
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8007c8a:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c8c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8007c90:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007c92:	2300      	movs	r3, #0
{
 8007c94:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 8007c96:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c98:	b1dd      	cbz	r5, 8007cd2 <tcp_process_refused_data+0x4a>
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	6900      	ldr	r0, [r0, #16]
 8007ca0:	47a8      	blx	r5
 8007ca2:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007ca4:	b9e0      	cbnz	r0, 8007ce0 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007ca6:	06bb      	lsls	r3, r7, #26
 8007ca8:	d511      	bpl.n	8007cce <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007caa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007cac:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007cb0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8007cb4:	bf1c      	itt	ne
 8007cb6:	3301      	addne	r3, #1
 8007cb8:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007cba:	b146      	cbz	r6, 8007cce <tcp_process_refused_data+0x46>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	6920      	ldr	r0, [r4, #16]
 8007cc4:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007cc6:	300d      	adds	r0, #13
 8007cc8:	d101      	bne.n	8007cce <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8007cca:	f06f 050c 	mvn.w	r5, #12
}
 8007cce:	4628      	mov	r0, r5
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7ff ffc3 	bl	8007c64 <tcp_recv_null>
 8007cde:	e7e0      	b.n	8007ca2 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8007ce0:	f110 050d 	adds.w	r5, r0, #13
 8007ce4:	d0f1      	beq.n	8007cca <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8007ce6:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8007ce8:	f06f 0504 	mvn.w	r5, #4
 8007cec:	e7ef      	b.n	8007cce <tcp_process_refused_data+0x46>
	...

08007cf0 <tcp_fasttmr>:
{
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8007cf4:	4d1b      	ldr	r5, [pc, #108]	; (8007d64 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8007cf6:	4f1c      	ldr	r7, [pc, #112]	; (8007d68 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8007cf8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8007cfa:	4e1c      	ldr	r6, [pc, #112]	; (8007d6c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8007d00:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8007d02:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007d06:	b90c      	cbnz	r4, 8007d0c <tcp_fasttmr+0x1c>
}
 8007d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8007d0c:	782b      	ldrb	r3, [r5, #0]
 8007d0e:	7f62      	ldrb	r2, [r4, #29]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d024      	beq.n	8007d5e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007d14:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8007d16:	7ea3      	ldrb	r3, [r4, #26]
 8007d18:	07d9      	lsls	r1, r3, #31
 8007d1a:	d509      	bpl.n	8007d30 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8007d1c:	f043 0302 	orr.w	r3, r3, #2
 8007d20:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8007d22:	4620      	mov	r0, r4
 8007d24:	f002 f94e 	bl	8009fc4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007d28:	7ea3      	ldrb	r3, [r4, #26]
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8007d30:	7ea3      	ldrb	r3, [r4, #26]
 8007d32:	071a      	lsls	r2, r3, #28
 8007d34:	d505      	bpl.n	8007d42 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8007d36:	f023 0308 	bic.w	r3, r3, #8
 8007d3a:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7ff fb5f 	bl	8007400 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8007d42:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8007d44:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007d48:	b13b      	cbz	r3, 8007d5a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8007d4a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8007d4c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8007d50:	f7ff ff9a 	bl	8007c88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007d54:	7833      	ldrb	r3, [r6, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1d2      	bne.n	8007d00 <tcp_fasttmr+0x10>
{
 8007d5a:	464c      	mov	r4, r9
 8007d5c:	e7d3      	b.n	8007d06 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8007d5e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8007d62:	e7fa      	b.n	8007d5a <tcp_fasttmr+0x6a>
 8007d64:	20003f82 	.word	0x20003f82
 8007d68:	20007978 	.word	0x20007978
 8007d6c:	20007974 	.word	0x20007974

08007d70 <tcp_tmr>:
{
 8007d70:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8007d72:	f7ff ffbd 	bl	8007cf0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8007d76:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <tcp_tmr+0x20>)
 8007d78:	7813      	ldrb	r3, [r2, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	7013      	strb	r3, [r2, #0]
 8007d80:	07db      	lsls	r3, r3, #31
 8007d82:	d503      	bpl.n	8007d8c <tcp_tmr+0x1c>
}
 8007d84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8007d88:	f7ff bc8a 	b.w	80076a0 <tcp_slowtmr>
 8007d8c:	bd08      	pop	{r3, pc}
 8007d8e:	bf00      	nop
 8007d90:	20003f81 	.word	0x20003f81

08007d94 <tcp_shutdown>:
{
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4614      	mov	r4, r2
  if (pcb->state == LISTEN) {
 8007d98:	7d02      	ldrb	r2, [r0, #20]
 8007d9a:	2a01      	cmp	r2, #1
{
 8007d9c:	4605      	mov	r5, r0
  if (pcb->state == LISTEN) {
 8007d9e:	d01b      	beq.n	8007dd8 <tcp_shutdown+0x44>
  if (shut_rx) {
 8007da0:	b189      	cbz	r1, 8007dc6 <tcp_shutdown+0x32>
    pcb->flags |= TF_RXCLOSED;
 8007da2:	7e83      	ldrb	r3, [r0, #26]
 8007da4:	f043 0310 	orr.w	r3, r3, #16
 8007da8:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8007daa:	b124      	cbz	r4, 8007db6 <tcp_shutdown+0x22>
      return tcp_close_shutdown(pcb, 1);
 8007dac:	2101      	movs	r1, #1
}
 8007dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8007db2:	f7ff bea7 	b.w	8007b04 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8007db6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007db8:	b908      	cbnz	r0, 8007dbe <tcp_shutdown+0x2a>
  return ERR_OK;
 8007dba:	2000      	movs	r0, #0
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
      pbuf_free(pcb->refused_data);
 8007dbe:	f7ff f809 	bl	8006dd4 <pbuf_free>
      pcb->refused_data = NULL;
 8007dc2:	676c      	str	r4, [r5, #116]	; 0x74
 8007dc4:	e7f9      	b.n	8007dba <tcp_shutdown+0x26>
  if (shut_tx) {
 8007dc6:	2c00      	cmp	r4, #0
 8007dc8:	d0f7      	beq.n	8007dba <tcp_shutdown+0x26>
 8007dca:	2a07      	cmp	r2, #7
 8007dcc:	d804      	bhi.n	8007dd8 <tcp_shutdown+0x44>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4093      	lsls	r3, r2
 8007dd2:	f013 0f98 	tst.w	r3, #152	; 0x98
 8007dd6:	d1ea      	bne.n	8007dae <tcp_shutdown+0x1a>
    return ERR_CONN;
 8007dd8:	f06f 000a 	mvn.w	r0, #10
}
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
	...

08007de0 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007de0:	7d03      	ldrb	r3, [r0, #20]
 8007de2:	2b01      	cmp	r3, #1
{
 8007de4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	4604      	mov	r4, r0
 8007dea:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007dec:	d106      	bne.n	8007dfc <tcp_abandon+0x1c>
 8007dee:	4b30      	ldr	r3, [pc, #192]	; (8007eb0 <tcp_abandon+0xd0>)
 8007df0:	4930      	ldr	r1, [pc, #192]	; (8007eb4 <tcp_abandon+0xd4>)
 8007df2:	4831      	ldr	r0, [pc, #196]	; (8007eb8 <tcp_abandon+0xd8>)
 8007df4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007df8:	f003 fdaf 	bl	800b95a <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007dfc:	7d23      	ldrb	r3, [r4, #20]
 8007dfe:	2b0a      	cmp	r3, #10
 8007e00:	d10a      	bne.n	8007e18 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007e02:	4621      	mov	r1, r4
 8007e04:	482d      	ldr	r0, [pc, #180]	; (8007ebc <tcp_abandon+0xdc>)
 8007e06:	f7ff fe2d 	bl	8007a64 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	2001      	movs	r0, #1
}
 8007e0e:	b002      	add	sp, #8
 8007e10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8007e14:	f7fe be58 	b.w	8006ac8 <memp_free>
    seqno = pcb->snd_nxt;
 8007e18:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8007e1c:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007e20:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8007e24:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8007e28:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8007e2a:	b99b      	cbnz	r3, 8007e54 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8007e2c:	b13d      	cbz	r5, 8007e3e <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007e2e:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <tcp_abandon+0xe0>)
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d106      	bne.n	8007e44 <tcp_abandon+0x64>
 8007e36:	68e3      	ldr	r3, [r4, #12]
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8007e3e:	462e      	mov	r6, r5
 8007e40:	e00f      	b.n	8007e62 <tcp_abandon+0x82>
 8007e42:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0f8      	beq.n	8007e3a <tcp_abandon+0x5a>
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	4294      	cmp	r4, r2
 8007e4c:	d1f9      	bne.n	8007e42 <tcp_abandon+0x62>
 8007e4e:	68e2      	ldr	r2, [r4, #12]
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	e7f2      	b.n	8007e3a <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007e54:	4621      	mov	r1, r4
 8007e56:	481b      	ldr	r0, [pc, #108]	; (8007ec4 <tcp_abandon+0xe4>)
 8007e58:	f7ff fe04 	bl	8007a64 <tcp_pcb_remove>
 8007e5c:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <tcp_abandon+0xe8>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007e62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007e64:	b108      	cbz	r0, 8007e6a <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8007e66:	f7ff fb75 	bl	8007554 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007e6a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007e6c:	b108      	cbz	r0, 8007e72 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8007e6e:	f7ff fb71 	bl	8007554 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007e72:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007e74:	b108      	cbz	r0, 8007e7a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8007e76:	f7ff fb6d 	bl	8007554 <tcp_segs_free>
    if (send_rst) {
 8007e7a:	b146      	cbz	r6, 8007e8e <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007e7c:	8b23      	ldrh	r3, [r4, #24]
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	9500      	str	r5, [sp, #0]
 8007e82:	1d23      	adds	r3, r4, #4
 8007e84:	4622      	mov	r2, r4
 8007e86:	4651      	mov	r1, sl
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f002 fa19 	bl	800a2c0 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8007e8e:	4621      	mov	r1, r4
 8007e90:	2001      	movs	r0, #1
 8007e92:	f7fe fe19 	bl	8006ac8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007e96:	b13f      	cbz	r7, 8007ea8 <tcp_abandon+0xc8>
 8007e98:	f06f 010c 	mvn.w	r1, #12
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	463b      	mov	r3, r7
}
 8007ea0:	b002      	add	sp, #8
 8007ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007ea6:	4718      	bx	r3
}
 8007ea8:	b002      	add	sp, #8
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	bf00      	nop
 8007eb0:	0800d432 	.word	0x0800d432
 8007eb4:	0800d3db 	.word	0x0800d3db
 8007eb8:	0800c0d7 	.word	0x0800c0d7
 8007ebc:	20007988 	.word	0x20007988
 8007ec0:	20007984 	.word	0x20007984
 8007ec4:	20007978 	.word	0x20007978
 8007ec8:	20007974 	.word	0x20007974

08007ecc <tcp_abort>:
  tcp_abandon(pcb, 1);
 8007ecc:	2101      	movs	r1, #1
 8007ece:	f7ff bf87 	b.w	8007de0 <tcp_abandon>

08007ed2 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007ed2:	b538      	push	{r3, r4, r5, lr}
 8007ed4:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8007ed6:	b901      	cbnz	r1, 8007eda <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8007ed8:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007eda:	680a      	ldr	r2, [r1, #0]
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	68cc      	ldr	r4, [r1, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d102      	bne.n	8007eea <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	f7ff fff1 	bl	8007ecc <tcp_abort>
      pcb = pcb->next;
 8007eea:	4621      	mov	r1, r4
 8007eec:	e7f3      	b.n	8007ed6 <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08007ef0 <tcp_kill_state>:
{
 8007ef0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007ef2:	f1a0 0308 	sub.w	r3, r0, #8
 8007ef6:	2b01      	cmp	r3, #1
{
 8007ef8:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007efa:	d906      	bls.n	8007f0a <tcp_kill_state+0x1a>
 8007efc:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <tcp_kill_state+0x4c>)
 8007efe:	4910      	ldr	r1, [pc, #64]	; (8007f40 <tcp_kill_state+0x50>)
 8007f00:	4810      	ldr	r0, [pc, #64]	; (8007f44 <tcp_kill_state+0x54>)
 8007f02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f06:	f003 fd28 	bl	800b95a <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f0a:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <tcp_kill_state+0x58>)
 8007f0c:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <tcp_kill_state+0x5c>)
  inactivity = 0;
 8007f10:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f12:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8007f14:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f16:	b921      	cbnz	r1, 8007f22 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8007f18:	b170      	cbz	r0, 8007f38 <tcp_kill_state+0x48>
}
 8007f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8007f1e:	f7ff bf5f 	b.w	8007de0 <tcp_abandon>
    if (pcb->state == state) {
 8007f22:	7d0b      	ldrb	r3, [r1, #20]
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	d105      	bne.n	8007f34 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f28:	6a0b      	ldr	r3, [r1, #32]
 8007f2a:	1aeb      	subs	r3, r5, r3
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	bf9c      	itt	ls
 8007f30:	461a      	movls	r2, r3
 8007f32:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f34:	68c9      	ldr	r1, [r1, #12]
 8007f36:	e7ee      	b.n	8007f16 <tcp_kill_state+0x26>
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	bf00      	nop
 8007f3c:	0800d432 	.word	0x0800d432
 8007f40:	0800d4c3 	.word	0x0800d4c3
 8007f44:	0800c0d7 	.word	0x0800c0d7
 8007f48:	20007978 	.word	0x20007978
 8007f4c:	2000797c 	.word	0x2000797c

08007f50 <tcp_alloc>:
{
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f54:	2001      	movs	r0, #1
 8007f56:	f7fe fd9b 	bl	8006a90 <memp_malloc>
 8007f5a:	4d3b      	ldr	r5, [pc, #236]	; (8008048 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	bb90      	cbnz	r0, 8007fc6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f60:	4b3a      	ldr	r3, [pc, #232]	; (800804c <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f62:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f64:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007f66:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d158      	bne.n	800801e <tcp_alloc+0xce>
  if (inactive != NULL) {
 8007f6c:	b114      	cbz	r4, 8007f74 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff ffac 	bl	8007ecc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f74:	2001      	movs	r0, #1
 8007f76:	f7fe fd8b 	bl	8006a90 <memp_malloc>
    if (pcb == NULL) {
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	bb18      	cbnz	r0, 8007fc6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8007f7e:	2009      	movs	r0, #9
 8007f80:	f7ff ffb6 	bl	8007ef0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f84:	2001      	movs	r0, #1
 8007f86:	f7fe fd83 	bl	8006a90 <memp_malloc>
      if (pcb == NULL) {
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	b9d8      	cbnz	r0, 8007fc6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8007f8e:	2008      	movs	r0, #8
 8007f90:	f7ff ffae 	bl	8007ef0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f7fe fd7b 	bl	8006a90 <memp_malloc>
        if (pcb == NULL) {
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	b998      	cbnz	r0, 8007fc6 <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f9e:	4b2c      	ldr	r3, [pc, #176]	; (8008050 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007fa0:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fa4:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007fa6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8007faa:	bf0c      	ite	eq
 8007fac:	4631      	moveq	r1, r6
 8007fae:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d13c      	bne.n	800802e <tcp_alloc+0xde>
  if (inactive != NULL) {
 8007fb4:	b114      	cbz	r4, 8007fbc <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff ff88 	bl	8007ecc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7fe fd67 	bl	8006a90 <memp_malloc>
  if (pcb != NULL) {
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	b348      	cbz	r0, 800801a <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007fc6:	2298      	movs	r2, #152	; 0x98
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f003 fe38 	bl	800bc40 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007fd0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007fd4:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007fd6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007fd8:	22ff      	movs	r2, #255	; 0xff
 8007fda:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8007fdc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007fe0:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007fe2:	2206      	movs	r2, #6
 8007fe4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007fe8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fee:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007ff6:	682a      	ldr	r2, [r5, #0]
 8007ff8:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8007ffa:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 8007ffe:	4a15      	ldr	r2, [pc, #84]	; (8008054 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8008000:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8008004:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8008008:	4b13      	ldr	r3, [pc, #76]	; (8008058 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 800800a:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 800800c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008010:	4b12      	ldr	r3, [pc, #72]	; (800805c <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8008012:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 8008014:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008016:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 800801a:	4620      	mov	r0, r4
 800801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800801e:	6a1a      	ldr	r2, [r3, #32]
 8008020:	1a82      	subs	r2, r0, r2
 8008022:	428a      	cmp	r2, r1
 8008024:	bf24      	itt	cs
 8008026:	461c      	movcs	r4, r3
 8008028:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	e79c      	b.n	8007f68 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 800802e:	7d5f      	ldrb	r7, [r3, #21]
 8008030:	428f      	cmp	r7, r1
 8008032:	d807      	bhi.n	8008044 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008034:	6a1a      	ldr	r2, [r3, #32]
 8008036:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 800803a:	4282      	cmp	r2, r0
 800803c:	bf22      	ittt	cs
 800803e:	4639      	movcs	r1, r7
 8008040:	4610      	movcs	r0, r2
 8008042:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	e7b3      	b.n	8007fb0 <tcp_alloc+0x60>
 8008048:	2000797c 	.word	0x2000797c
 800804c:	20007988 	.word	0x20007988
 8008050:	20007978 	.word	0x20007978
 8008054:	20003f82 	.word	0x20003f82
 8008058:	08007c65 	.word	0x08007c65
 800805c:	006ddd00 	.word	0x006ddd00

08008060 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008060:	2040      	movs	r0, #64	; 0x40
 8008062:	f7ff bf75 	b.w	8007f50 <tcp_alloc>
	...

08008068 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008068:	4b03      	ldr	r3, [pc, #12]	; (8008078 <tcp_next_iss+0x10>)
 800806a:	4a04      	ldr	r2, [pc, #16]	; (800807c <tcp_next_iss+0x14>)
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	4410      	add	r0, r2
 8008072:	6018      	str	r0, [r3, #0]
}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000008 	.word	0x20000008
 800807c:	2000797c 	.word	0x2000797c

08008080 <tcp_eff_send_mss_impl>:
{
 8008080:	b510      	push	{r4, lr}
 8008082:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008084:	4608      	mov	r0, r1
 8008086:	f7fd fcbd 	bl	8005a04 <ip4_route>
    if (outif == NULL) {
 800808a:	b130      	cbz	r0, 800809a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 800808c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 800808e:	b123      	cbz	r3, 800809a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008090:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008092:	b29b      	uxth	r3, r3
 8008094:	429c      	cmp	r4, r3
 8008096:	bf28      	it	cs
 8008098:	461c      	movcs	r4, r3
}
 800809a:	4620      	mov	r0, r4
 800809c:	bd10      	pop	{r4, pc}
	...

080080a0 <tcp_connect>:
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	461d      	mov	r5, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80080a4:	4604      	mov	r4, r0
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d068      	beq.n	800817c <tcp_connect+0xdc>
 80080aa:	2900      	cmp	r1, #0
 80080ac:	d066      	beq.n	800817c <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80080ae:	7d03      	ldrb	r3, [r0, #20]
 80080b0:	b153      	cbz	r3, 80080c8 <tcp_connect+0x28>
 80080b2:	4b35      	ldr	r3, [pc, #212]	; (8008188 <tcp_connect+0xe8>)
 80080b4:	4935      	ldr	r1, [pc, #212]	; (800818c <tcp_connect+0xec>)
 80080b6:	4836      	ldr	r0, [pc, #216]	; (8008190 <tcp_connect+0xf0>)
 80080b8:	f44f 725e 	mov.w	r2, #888	; 0x378
 80080bc:	f003 fc4d 	bl	800b95a <iprintf>
 80080c0:	f06f 0509 	mvn.w	r5, #9
}
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80080c8:	680b      	ldr	r3, [r1, #0]
 80080ca:	6043      	str	r3, [r0, #4]
  if (ip_addr_isany(&pcb->local_ip)) {
 80080cc:	6803      	ldr	r3, [r0, #0]
  pcb->remote_port = port;
 80080ce:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 80080d0:	b933      	cbnz	r3, 80080e0 <tcp_connect+0x40>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 80080d2:	3004      	adds	r0, #4
 80080d4:	f7fd fc96 	bl	8005a04 <ip4_route>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d052      	beq.n	8008182 <tcp_connect+0xe2>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80080dc:	6843      	ldr	r3, [r0, #4]
 80080de:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 80080e0:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	d039      	beq.n	800815a <tcp_connect+0xba>
  iss = tcp_next_iss(pcb);
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff ffbe 	bl	8008068 <tcp_next_iss>
  pcb->snd_nxt = iss;
 80080ec:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->lastack = iss - 1;
 80080ee:	3801      	subs	r0, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80080f0:	f44f 6306 	mov.w	r3, #2144	; 0x860
  pcb->rcv_nxt = 0;
 80080f4:	2200      	movs	r2, #0
  pcb->lastack = iss - 1;
 80080f6:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80080f8:	6560      	str	r0, [r4, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 80080fa:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->mss = INITIAL_MSS;
 80080fc:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->rcv_nxt = 0;
 8008100:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008102:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008104:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008106:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8008108:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800810c:	1d21      	adds	r1, r4, #4
  pcb->mss = INITIAL_MSS;
 800810e:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008110:	f7ff ffb6 	bl	8008080 <tcp_eff_send_mss_impl>
  pcb->cwnd = 1;
 8008114:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008116:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->connected = connected;
 8008118:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  pcb->cwnd = 1;
 800811c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8008120:	2102      	movs	r1, #2
 8008122:	4620      	mov	r0, r4
 8008124:	f001 fe5e 	bl	8009de4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8008128:	4605      	mov	r5, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1ca      	bne.n	80080c4 <tcp_connect+0x24>
    pcb->state = SYN_SENT;
 800812e:	2302      	movs	r3, #2
 8008130:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8008132:	b12e      	cbz	r6, 8008140 <tcp_connect+0xa0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008134:	4a17      	ldr	r2, [pc, #92]	; (8008194 <tcp_connect+0xf4>)
 8008136:	6813      	ldr	r3, [r2, #0]
 8008138:	429c      	cmp	r4, r3
 800813a:	d117      	bne.n	800816c <tcp_connect+0xcc>
 800813c:	68e3      	ldr	r3, [r4, #12]
 800813e:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8008140:	4b15      	ldr	r3, [pc, #84]	; (8008198 <tcp_connect+0xf8>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	60e2      	str	r2, [r4, #12]
 8008146:	601c      	str	r4, [r3, #0]
 8008148:	f002 fa5c 	bl	800a604 <tcp_timer_needed>
 800814c:	4b13      	ldr	r3, [pc, #76]	; (800819c <tcp_connect+0xfc>)
 800814e:	2201      	movs	r2, #1
    tcp_output(pcb);
 8008150:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8008152:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8008154:	f001 ff36 	bl	8009fc4 <tcp_output>
 8008158:	e7b4      	b.n	80080c4 <tcp_connect+0x24>
    pcb->local_port = tcp_new_port();
 800815a:	f7ff f929 	bl	80073b0 <tcp_new_port>
 800815e:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8008160:	2800      	cmp	r0, #0
 8008162:	d1c0      	bne.n	80080e6 <tcp_connect+0x46>
      return ERR_BUF;
 8008164:	f06f 0501 	mvn.w	r5, #1
 8008168:	e7ac      	b.n	80080c4 <tcp_connect+0x24>
 800816a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0e7      	beq.n	8008140 <tcp_connect+0xa0>
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	4294      	cmp	r4, r2
 8008174:	d1f9      	bne.n	800816a <tcp_connect+0xca>
 8008176:	68e2      	ldr	r2, [r4, #12]
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	e7e1      	b.n	8008140 <tcp_connect+0xa0>
    return ERR_VAL;
 800817c:	f06f 0505 	mvn.w	r5, #5
 8008180:	e7a0      	b.n	80080c4 <tcp_connect+0x24>
      return ERR_RTE;
 8008182:	f06f 0503 	mvn.w	r5, #3
 8008186:	e79d      	b.n	80080c4 <tcp_connect+0x24>
 8008188:	0800d432 	.word	0x0800d432
 800818c:	0800d46d 	.word	0x0800d46d
 8008190:	0800c0d7 	.word	0x0800c0d7
 8008194:	20007984 	.word	0x20007984
 8008198:	20007978 	.word	0x20007978
 800819c:	20007974 	.word	0x20007974

080081a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80081a4:	4604      	mov	r4, r0
 80081a6:	b180      	cbz	r0, 80081ca <tcp_netif_ip_addr_changed+0x2a>
 80081a8:	6803      	ldr	r3, [r0, #0]
 80081aa:	b173      	cbz	r3, 80081ca <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <tcp_netif_ip_addr_changed+0x40>)
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	f7ff fe8f 	bl	8007ed2 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80081b4:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <tcp_netif_ip_addr_changed+0x44>)
 80081b6:	4620      	mov	r0, r4
 80081b8:	6819      	ldr	r1, [r3, #0]
 80081ba:	f7ff fe8a 	bl	8007ed2 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80081be:	b125      	cbz	r5, 80081ca <tcp_netif_ip_addr_changed+0x2a>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b113      	cbz	r3, 80081ca <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <tcp_netif_ip_addr_changed+0x48>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	b903      	cbnz	r3, 80081cc <tcp_netif_ip_addr_changed+0x2c>
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80081d0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80081d2:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80081d4:	bf04      	itt	eq
 80081d6:	6829      	ldreq	r1, [r5, #0]
 80081d8:	6019      	streq	r1, [r3, #0]
{
 80081da:	4613      	mov	r3, r2
 80081dc:	e7f4      	b.n	80081c8 <tcp_netif_ip_addr_changed+0x28>
 80081de:	bf00      	nop
 80081e0:	20007978 	.word	0x20007978
 80081e4:	20007984 	.word	0x20007984
 80081e8:	20007980 	.word	0x20007980

080081ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80081ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80081f0:	68c3      	ldr	r3, [r0, #12]
{
 80081f2:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80081f4:	8998      	ldrh	r0, [r3, #12]
{
 80081f6:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80081f8:	f7fc ff6e 	bl	80050d8 <lwip_htons>
 80081fc:	07c2      	lsls	r2, r0, #31
 80081fe:	d415      	bmi.n	800822c <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008200:	4e18      	ldr	r6, [pc, #96]	; (8008264 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8008202:	b1bc      	cbz	r4, 8008234 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008204:	68e7      	ldr	r7, [r4, #12]
 8008206:	6830      	ldr	r0, [r6, #0]
 8008208:	892b      	ldrh	r3, [r5, #8]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	8922      	ldrh	r2, [r4, #8]
 800820e:	4403      	add	r3, r0
 8008210:	440a      	add	r2, r1
 8008212:	1a9a      	subs	r2, r3, r2
    while (next &&
 8008214:	2a00      	cmp	r2, #0
 8008216:	da10      	bge.n	800823a <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008218:	1a5b      	subs	r3, r3, r1
    if (next &&
 800821a:	2b00      	cmp	r3, #0
 800821c:	dd0a      	ble.n	8008234 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800821e:	1a09      	subs	r1, r1, r0
 8008220:	b289      	uxth	r1, r1
 8008222:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008224:	6868      	ldr	r0, [r5, #4]
 8008226:	f7fe ff1b 	bl	8007060 <pbuf_realloc>
 800822a:	e003      	b.n	8008234 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff f991 	bl	8007554 <tcp_segs_free>
    next = NULL;
 8008232:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8008234:	602c      	str	r4, [r5, #0]
}
 8008236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800823a:	89b8      	ldrh	r0, [r7, #12]
 800823c:	f7fc ff4c 	bl	80050d8 <lwip_htons>
 8008240:	07c3      	lsls	r3, r0, #31
 8008242:	d509      	bpl.n	8008258 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008244:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008248:	2001      	movs	r0, #1
 800824a:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800824e:	f7fc ff43 	bl	80050d8 <lwip_htons>
 8008252:	4338      	orrs	r0, r7
 8008254:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8008258:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff f96c 	bl	8007538 <tcp_seg_free>
      next = next->next;
 8008260:	463c      	mov	r4, r7
 8008262:	e7ce      	b.n	8008202 <tcp_oos_insert_segment+0x16>
 8008264:	20003fa8 	.word	0x20003fa8

08008268 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008268:	7d03      	ldrb	r3, [r0, #20]
 800826a:	2b03      	cmp	r3, #3
{
 800826c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008272:	d806      	bhi.n	8008282 <tcp_receive+0x1a>
 8008274:	4b87      	ldr	r3, [pc, #540]	; (8008494 <tcp_receive+0x22c>)
 8008276:	4988      	ldr	r1, [pc, #544]	; (8008498 <tcp_receive+0x230>)
 8008278:	4888      	ldr	r0, [pc, #544]	; (800849c <tcp_receive+0x234>)
 800827a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800827e:	f003 fb6c 	bl	800b95a <iprintf>

  if (flags & TCP_ACK) {
 8008282:	4b87      	ldr	r3, [pc, #540]	; (80084a0 <tcp_receive+0x238>)
 8008284:	4e87      	ldr	r6, [pc, #540]	; (80084a4 <tcp_receive+0x23c>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	f013 0f10 	tst.w	r3, #16
 800828c:	f000 817c 	beq.w	8008588 <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008290:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008292:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008294:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008298:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800829a:	1a1d      	subs	r5, r3, r0
 800829c:	2d00      	cmp	r5, #0
 800829e:	4d82      	ldr	r5, [pc, #520]	; (80084a8 <tcp_receive+0x240>)
 80082a0:	db0d      	blt.n	80082be <tcp_receive+0x56>
 80082a2:	4283      	cmp	r3, r0
 80082a4:	d103      	bne.n	80082ae <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	1acb      	subs	r3, r1, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	db07      	blt.n	80082be <tcp_receive+0x56>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d11c      	bne.n	80082ee <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80082b4:	4b7d      	ldr	r3, [pc, #500]	; (80084ac <tcp_receive+0x244>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	89db      	ldrh	r3, [r3, #14]
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d917      	bls.n	80082ee <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80082be:	4b7b      	ldr	r3, [pc, #492]	; (80084ac <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80082c0:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 80082c8:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80082ca:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 80082cc:	6828      	ldr	r0, [r5, #0]
 80082ce:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80082d0:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 80082d4:	bf38      	it	cc
 80082d6:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 80082da:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80082de:	2f00      	cmp	r7, #0
 80082e0:	d13c      	bne.n	800835c <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 80082e2:	b920      	cbnz	r0, 80082ee <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80082e4:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 80082e8:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80082ea:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 80082f4:	4f6e      	ldr	r7, [pc, #440]	; (80084b0 <tcp_receive+0x248>)
 80082f6:	eba3 000e 	sub.w	r0, r3, lr
 80082fa:	2800      	cmp	r0, #0
 80082fc:	dc37      	bgt.n	800836e <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 80082fe:	486d      	ldr	r0, [pc, #436]	; (80084b4 <tcp_receive+0x24c>)
 8008300:	8800      	ldrh	r0, [r0, #0]
 8008302:	2800      	cmp	r0, #0
 8008304:	f040 846f 	bne.w	8008be6 <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008308:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800830a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800830c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008310:	4401      	add	r1, r0
 8008312:	428a      	cmp	r2, r1
 8008314:	f040 8467 	bne.w	8008be6 <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008318:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800831c:	2a00      	cmp	r2, #0
 800831e:	f2c0 8462 	blt.w	8008be6 <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008322:	4573      	cmp	r3, lr
 8008324:	f040 845f 	bne.w	8008be6 <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800832c:	1c53      	adds	r3, r2, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8008332:	bf38      	it	cc
 8008334:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008338:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800833c:	2b03      	cmp	r3, #3
 800833e:	d911      	bls.n	8008364 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008340:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008344:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008346:	4413      	add	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	429a      	cmp	r2, r3
 800834c:	d201      	bcs.n	8008352 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 800834e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008352:	f8df a140 	ldr.w	sl, [pc, #320]	; 8008494 <tcp_receive+0x22c>
 8008356:	f8df 9144 	ldr.w	r9, [pc, #324]	; 800849c <tcp_receive+0x234>
 800835a:	e108      	b.n	800856e <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 800835c:	2800      	cmp	r0, #0
 800835e:	d0c6      	beq.n	80082ee <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	e7c2      	b.n	80082ea <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8008364:	d1f5      	bne.n	8008352 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8008366:	4620      	mov	r0, r4
 8008368:	f002 f849 	bl	800a3fe <tcp_rexmit_fast>
 800836c:	e7f1      	b.n	8008352 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800836e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008370:	1a9a      	subs	r2, r3, r2
 8008372:	2a00      	cmp	r2, #0
 8008374:	f300 808a 	bgt.w	800848c <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8008378:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800837a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800837e:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8008380:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8008382:	bf41      	itttt	mi
 8008384:	f022 0204 	bicmi.w	r2, r2, #4
 8008388:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800838a:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 800838e:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8008392:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008394:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8008396:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008398:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800839c:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 800839e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80083a2:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80083a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80083aa:	d90f      	bls.n	80083cc <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 80083ac:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80083b0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80083b4:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80083b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80083b8:	bf9c      	itt	ls
 80083ba:	435b      	mulls	r3, r3
 80083bc:	fb93 f3f2 	sdivls	r3, r3, r2
 80083c0:	4413      	add	r3, r2
 80083c2:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80083c4:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 80083c6:	bf38      	it	cc
 80083c8:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80083cc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8008494 <tcp_receive+0x22c>
 80083d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800849c <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 80083d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80083d6:	b943      	cbnz	r3, 80083ea <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 80083d8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80083da:	2300      	movs	r3, #0
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d153      	bne.n	8008488 <tcp_receive+0x220>
        pcb->rtime = -1;
 80083e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083e4:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80083e6:	76e3      	strb	r3, [r4, #27]
 80083e8:	e7b3      	b.n	8008352 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	6858      	ldr	r0, [r3, #4]
 80083ee:	f7fc fe76 	bl	80050de <lwip_htonl>
 80083f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80083f4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	4683      	mov	fp, r0
 80083fc:	8998      	ldrh	r0, [r3, #12]
 80083fe:	f7fc fe6b 	bl	80050d8 <lwip_htons>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	f010 0003 	ands.w	r0, r0, #3
 8008408:	eba8 0803 	sub.w	r8, r8, r3
 800840c:	bf18      	it	ne
 800840e:	2001      	movne	r0, #1
 8008410:	44d8      	add	r8, fp
 8008412:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8008414:	f1b8 0f00 	cmp.w	r8, #0
 8008418:	dcde      	bgt.n	80083d8 <tcp_receive+0x170>
        next = pcb->unacked;
 800841a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800841e:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8008422:	f8d8 3000 	ldr.w	r3, [r8]
 8008426:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800842c:	f7fe fe88 	bl	8007140 <pbuf_clen>
 8008430:	4583      	cmp	fp, r0
 8008432:	d206      	bcs.n	8008442 <tcp_receive+0x1da>
 8008434:	464b      	mov	r3, r9
 8008436:	f240 429e 	movw	r2, #1182	; 0x49e
 800843a:	491f      	ldr	r1, [pc, #124]	; (80084b8 <tcp_receive+0x250>)
 800843c:	4650      	mov	r0, sl
 800843e:	f003 fa8c 	bl	800b95a <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008442:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008446:	f7fe fe7b 	bl	8007140 <pbuf_clen>
 800844a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 800844e:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008450:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8008452:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008456:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 800845a:	4413      	add	r3, r2
        tcp_seg_free(next);
 800845c:	4640      	mov	r0, r8
        recv_acked += next->len;
 800845e:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8008460:	f7ff f86a 	bl	8007538 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008464:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0b3      	beq.n	80083d4 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800846c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1b0      	bne.n	80083d4 <tcp_receive+0x16c>
 8008472:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1ad      	bne.n	80083d4 <tcp_receive+0x16c>
 8008478:	464b      	mov	r3, r9
 800847a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800847e:	490f      	ldr	r1, [pc, #60]	; (80084bc <tcp_receive+0x254>)
 8008480:	4650      	mov	r0, sl
 8008482:	f003 fa6a 	bl	800b95a <iprintf>
 8008486:	e7a5      	b.n	80083d4 <tcp_receive+0x16c>
        pcb->rtime = 0;
 8008488:	8623      	strh	r3, [r4, #48]	; 0x30
 800848a:	e7ac      	b.n	80083e6 <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 800848c:	4620      	mov	r0, r4
 800848e:	f001 fd63 	bl	8009f58 <tcp_send_empty_ack>
 8008492:	e75e      	b.n	8008352 <tcp_receive+0xea>
 8008494:	0800d908 	.word	0x0800d908
 8008498:	0800d93a 	.word	0x0800d93a
 800849c:	0800c0d7 	.word	0x0800c0d7
 80084a0:	20003f88 	.word	0x20003f88
 80084a4:	20003fa8 	.word	0x20003fa8
 80084a8:	20003f84 	.word	0x20003f84
 80084ac:	20003fb0 	.word	0x20003fb0
 80084b0:	20003f9c 	.word	0x20003f9c
 80084b4:	20003fbe 	.word	0x20003fbe
 80084b8:	0800d953 	.word	0x0800d953
 80084bc:	0800d97b 	.word	0x0800d97b
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80084c0:	682a      	ldr	r2, [r5, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	9201      	str	r2, [sp, #4]
 80084c6:	6858      	ldr	r0, [r3, #4]
 80084c8:	f7fc fe09 	bl	80050de <lwip_htonl>
 80084cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80084ce:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	4683      	mov	fp, r0
 80084d6:	8998      	ldrh	r0, [r3, #12]
 80084d8:	f7fc fdfe 	bl	80050d8 <lwip_htons>
 80084dc:	9a01      	ldr	r2, [sp, #4]
 80084de:	f010 0003 	ands.w	r0, r0, #3
 80084e2:	eba2 0808 	sub.w	r8, r2, r8
 80084e6:	bf18      	it	ne
 80084e8:	2001      	movne	r0, #1
 80084ea:	eba8 080b 	sub.w	r8, r8, fp
 80084ee:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80084f2:	f1b8 0f00 	cmp.w	r8, #0
 80084f6:	db3d      	blt.n	8008574 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dc38      	bgt.n	8008574 <tcp_receive+0x30c>
      next = pcb->unsent;
 8008502:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8008506:	f8d8 3000 	ldr.w	r3, [r8]
 800850a:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800850c:	b90b      	cbnz	r3, 8008512 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 800850e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008512:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008516:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800851a:	f7fe fe11 	bl	8007140 <pbuf_clen>
 800851e:	4583      	cmp	fp, r0
 8008520:	d206      	bcs.n	8008530 <tcp_receive+0x2c8>
 8008522:	4653      	mov	r3, sl
 8008524:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008528:	49ba      	ldr	r1, [pc, #744]	; (8008814 <tcp_receive+0x5ac>)
 800852a:	4648      	mov	r0, r9
 800852c:	f003 fa15 	bl	800b95a <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008530:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008534:	f7fe fe04 	bl	8007140 <pbuf_clen>
 8008538:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 800853c:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800853e:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8008540:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008544:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008548:	4413      	add	r3, r2
      tcp_seg_free(next);
 800854a:	4640      	mov	r0, r8
      recv_acked += next->len;
 800854c:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 800854e:	f7fe fff3 	bl	8007538 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008552:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008556:	b153      	cbz	r3, 800856e <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008558:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800855a:	b943      	cbnz	r3, 800856e <tcp_receive+0x306>
 800855c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800855e:	b933      	cbnz	r3, 800856e <tcp_receive+0x306>
 8008560:	4653      	mov	r3, sl
 8008562:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008566:	49ac      	ldr	r1, [pc, #688]	; (8008818 <tcp_receive+0x5b0>)
 8008568:	4648      	mov	r0, r9
 800856a:	f003 f9f6 	bl	800b95a <iprintf>
    while (pcb->unsent != NULL &&
 800856e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1a5      	bne.n	80084c0 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008574:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008578:	883a      	ldrh	r2, [r7, #0]
 800857a:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800857c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 800857e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008582:	2a00      	cmp	r2, #0
 8008584:	f040 8119 	bne.w	80087ba <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008588:	4fa4      	ldr	r7, [pc, #656]	; (800881c <tcp_receive+0x5b4>)
 800858a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800858c:	8838      	ldrh	r0, [r7, #0]
 800858e:	2800      	cmp	r0, #0
 8008590:	f000 831c 	beq.w	8008bcc <tcp_receive+0x964>
 8008594:	7d23      	ldrb	r3, [r4, #20]
 8008596:	2b06      	cmp	r3, #6
 8008598:	f200 8318 	bhi.w	8008bcc <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800859c:	6833      	ldr	r3, [r6, #0]
 800859e:	1ad5      	subs	r5, r2, r3
 80085a0:	2d01      	cmp	r5, #1
 80085a2:	f100 815c 	bmi.w	800885e <tcp_receive+0x5f6>
 80085a6:	f1c3 0101 	rsb	r1, r3, #1
 80085aa:	1a09      	subs	r1, r1, r0
 80085ac:	4411      	add	r1, r2
 80085ae:	2900      	cmp	r1, #0
 80085b0:	f300 8155 	bgt.w	800885e <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80085b4:	4b9a      	ldr	r3, [pc, #616]	; (8008820 <tcp_receive+0x5b8>)
 80085b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 80085ba:	46aa      	mov	sl, r5
 80085bc:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80085be:	f1b9 0f00 	cmp.w	r9, #0
 80085c2:	d106      	bne.n	80085d2 <tcp_receive+0x36a>
 80085c4:	4b97      	ldr	r3, [pc, #604]	; (8008824 <tcp_receive+0x5bc>)
 80085c6:	4998      	ldr	r1, [pc, #608]	; (8008828 <tcp_receive+0x5c0>)
 80085c8:	4898      	ldr	r0, [pc, #608]	; (800882c <tcp_receive+0x5c4>)
 80085ca:	f240 523c 	movw	r2, #1340	; 0x53c
 80085ce:	f003 f9c4 	bl	800b95a <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80085d2:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80085d6:	429d      	cmp	r5, r3
 80085d8:	dd06      	ble.n	80085e8 <tcp_receive+0x380>
 80085da:	4b92      	ldr	r3, [pc, #584]	; (8008824 <tcp_receive+0x5bc>)
 80085dc:	4994      	ldr	r1, [pc, #592]	; (8008830 <tcp_receive+0x5c8>)
 80085de:	4893      	ldr	r0, [pc, #588]	; (800882c <tcp_receive+0x5c4>)
 80085e0:	f240 523d 	movw	r2, #1341	; 0x53d
 80085e4:	f003 f9b9 	bl	800b95a <iprintf>
      if (inseg.p->len < off) {
 80085e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085ec:	8943      	ldrh	r3, [r0, #10]
 80085ee:	429d      	cmp	r5, r3
 80085f0:	f340 812a 	ble.w	8008848 <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80085f4:	8903      	ldrh	r3, [r0, #8]
 80085f6:	429d      	cmp	r5, r3
 80085f8:	dd06      	ble.n	8008608 <tcp_receive+0x3a0>
 80085fa:	4b8a      	ldr	r3, [pc, #552]	; (8008824 <tcp_receive+0x5bc>)
 80085fc:	498d      	ldr	r1, [pc, #564]	; (8008834 <tcp_receive+0x5cc>)
 80085fe:	488b      	ldr	r0, [pc, #556]	; (800882c <tcp_receive+0x5c4>)
 8008600:	f240 523f 	movw	r2, #1343	; 0x53f
 8008604:	f003 f9a9 	bl	800b95a <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008608:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800860c:	8919      	ldrh	r1, [r3, #8]
 800860e:	1b4d      	subs	r5, r1, r5
 8008610:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8008612:	2200      	movs	r2, #0
        while (p->len < off) {
 8008614:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8008618:	459a      	cmp	sl, r3
 800861a:	f300 80f2 	bgt.w	8008802 <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800861e:	f1ca 0100 	rsb	r1, sl, #0
 8008622:	b209      	sxth	r1, r1
 8008624:	4648      	mov	r0, r9
 8008626:	f7fe fbcf 	bl	8006dc8 <pbuf_header>
 800862a:	b130      	cbz	r0, 800863a <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800862c:	4b7d      	ldr	r3, [pc, #500]	; (8008824 <tcp_receive+0x5bc>)
 800862e:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008632:	4981      	ldr	r1, [pc, #516]	; (8008838 <tcp_receive+0x5d0>)
 8008634:	487d      	ldr	r0, [pc, #500]	; (800882c <tcp_receive+0x5c4>)
 8008636:	f003 f990 	bl	800b95a <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800863a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800863e:	6833      	ldr	r3, [r6, #0]
 8008640:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008642:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008644:	440b      	add	r3, r1
 8008646:	1a9b      	subs	r3, r3, r2
 8008648:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800864c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008650:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008652:	6831      	ldr	r1, [r6, #0]
 8008654:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008656:	1a8b      	subs	r3, r1, r2
 8008658:	2b00      	cmp	r3, #0
 800865a:	f2c0 82b1 	blt.w	8008bc0 <tcp_receive+0x958>
 800865e:	1c4b      	adds	r3, r1, #1
 8008660:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	1a1b      	subs	r3, r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	f300 82aa 	bgt.w	8008bc0 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800866c:	4291      	cmp	r1, r2
 800866e:	f040 81c9 	bne.w	8008a04 <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008672:	4d6b      	ldr	r5, [pc, #428]	; (8008820 <tcp_receive+0x5b8>)
 8008674:	68eb      	ldr	r3, [r5, #12]
 8008676:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800867a:	8998      	ldrh	r0, [r3, #12]
 800867c:	f7fc fd2c 	bl	80050d8 <lwip_htons>
 8008680:	f010 0003 	ands.w	r0, r0, #3
 8008684:	bf18      	it	ne
 8008686:	2001      	movne	r0, #1
 8008688:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 800868a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800868c:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800868e:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8008690:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008692:	d242      	bcs.n	800871a <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008694:	68eb      	ldr	r3, [r5, #12]
 8008696:	8998      	ldrh	r0, [r3, #12]
 8008698:	f7fc fd1e 	bl	80050d8 <lwip_htons>
 800869c:	07c2      	lsls	r2, r0, #31
 800869e:	d510      	bpl.n	80086c2 <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80086a0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80086a4:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80086a8:	4640      	mov	r0, r8
 80086aa:	f7fc fd15 	bl	80050d8 <lwip_htons>
 80086ae:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80086b2:	f7fc fd11 	bl	80050d8 <lwip_htons>
 80086b6:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80086ba:	ea40 0808 	orr.w	r8, r0, r8
 80086be:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80086c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80086c4:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80086c6:	68eb      	ldr	r3, [r5, #12]
 80086c8:	8998      	ldrh	r0, [r3, #12]
 80086ca:	f7fc fd05 	bl	80050d8 <lwip_htons>
 80086ce:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 80086d0:	bf48      	it	mi
 80086d2:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80086d4:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80086d6:	bf44      	itt	mi
 80086d8:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 80086dc:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80086de:	8929      	ldrh	r1, [r5, #8]
 80086e0:	f7fe fcbe 	bl	8007060 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80086e4:	68eb      	ldr	r3, [r5, #12]
 80086e6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80086ea:	8998      	ldrh	r0, [r3, #12]
 80086ec:	f7fc fcf4 	bl	80050d8 <lwip_htons>
 80086f0:	f010 0003 	ands.w	r0, r0, #3
 80086f4:	bf18      	it	ne
 80086f6:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80086f8:	6833      	ldr	r3, [r6, #0]
 80086fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80086fc:	4440      	add	r0, r8
 80086fe:	b280      	uxth	r0, r0
 8008700:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008702:	4418      	add	r0, r3
 8008704:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008706:	4413      	add	r3, r2
 8008708:	4298      	cmp	r0, r3
 800870a:	d006      	beq.n	800871a <tcp_receive+0x4b2>
 800870c:	4b45      	ldr	r3, [pc, #276]	; (8008824 <tcp_receive+0x5bc>)
 800870e:	494b      	ldr	r1, [pc, #300]	; (800883c <tcp_receive+0x5d4>)
 8008710:	4846      	ldr	r0, [pc, #280]	; (800882c <tcp_receive+0x5c4>)
 8008712:	f240 527f 	movw	r2, #1407	; 0x57f
 8008716:	f003 f920 	bl	800b95a <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800871a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80ad 	beq.w	800887c <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008722:	68eb      	ldr	r3, [r5, #12]
 8008724:	8998      	ldrh	r0, [r3, #12]
 8008726:	f7fc fcd7 	bl	80050d8 <lwip_htons>
 800872a:	07c0      	lsls	r0, r0, #31
 800872c:	f100 80a3 	bmi.w	8008876 <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8008730:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008734:	f1b8 0f00 	cmp.w	r8, #0
 8008738:	d03c      	beq.n	80087b4 <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800873a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800873e:	6830      	ldr	r0, [r6, #0]
 8008740:	883b      	ldrh	r3, [r7, #0]
 8008742:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008746:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800874a:	4403      	add	r3, r0
 800874c:	4411      	add	r1, r2
 800874e:	1a59      	subs	r1, r3, r1
            while (next &&
 8008750:	2900      	cmp	r1, #0
 8008752:	f280 80cf 	bge.w	80088f4 <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8008756:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008758:	2b00      	cmp	r3, #0
 800875a:	dd2b      	ble.n	80087b4 <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800875c:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800875e:	1a12      	subs	r2, r2, r0
 8008760:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008762:	8998      	ldrh	r0, [r3, #12]
 8008764:	f7fc fcb8 	bl	80050d8 <lwip_htons>
 8008768:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 800876a:	bf48      	it	mi
 800876c:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800876e:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8008770:	bf44      	itt	mi
 8008772:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8008776:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008778:	8929      	ldrh	r1, [r5, #8]
 800877a:	f7fe fc71 	bl	8007060 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800877e:	68eb      	ldr	r3, [r5, #12]
 8008780:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8008784:	8998      	ldrh	r0, [r3, #12]
 8008786:	f7fc fca7 	bl	80050d8 <lwip_htons>
 800878a:	f010 0003 	ands.w	r0, r0, #3
 800878e:	bf18      	it	ne
 8008790:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008792:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8008794:	4448      	add	r0, r9
 8008796:	b280      	uxth	r0, r0
 8008798:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800879a:	4418      	add	r0, r3
 800879c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4298      	cmp	r0, r3
 80087a4:	d006      	beq.n	80087b4 <tcp_receive+0x54c>
 80087a6:	4b1f      	ldr	r3, [pc, #124]	; (8008824 <tcp_receive+0x5bc>)
 80087a8:	4925      	ldr	r1, [pc, #148]	; (8008840 <tcp_receive+0x5d8>)
 80087aa:	4820      	ldr	r0, [pc, #128]	; (800882c <tcp_receive+0x5c4>)
 80087ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80087b0:	f003 f8d3 	bl	800b95a <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80087b4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80087b8:	e060      	b.n	800887c <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80087ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80087bc:	6829      	ldr	r1, [r5, #0]
 80087be:	1a5b      	subs	r3, r3, r1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f6bf aee1 	bge.w	8008588 <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80087c6:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 80087c8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80087cc:	6819      	ldr	r1, [r3, #0]
 80087ce:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 80087d0:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 80087d4:	b289      	uxth	r1, r1
 80087d6:	b20b      	sxth	r3, r1
      if (m < 0) {
 80087d8:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 80087da:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 80087de:	4408      	add	r0, r1
        m = -m;
 80087e0:	bfbc      	itt	lt
 80087e2:	4249      	neglt	r1, r1
 80087e4:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80087e6:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 80087ea:	4413      	add	r3, r2
      pcb->sa += m;
 80087ec:	b200      	sxth	r0, r0
      pcb->sv += m;
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80087f2:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80087f6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80087fa:	2300      	movs	r3, #0
      pcb->sa += m;
 80087fc:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80087fe:	6363      	str	r3, [r4, #52]	; 0x34
 8008800:	e6c2      	b.n	8008588 <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 8008802:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8008806:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 800880a:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 800880e:	f8d9 9000 	ldr.w	r9, [r9]
 8008812:	e6ff      	b.n	8008614 <tcp_receive+0x3ac>
 8008814:	0800d953 	.word	0x0800d953
 8008818:	0800d97b 	.word	0x0800d97b
 800881c:	20003fbe 	.word	0x20003fbe
 8008820:	20003f8c 	.word	0x20003f8c
 8008824:	0800d908 	.word	0x0800d908
 8008828:	0800d99b 	.word	0x0800d99b
 800882c:	0800c0d7 	.word	0x0800c0d7
 8008830:	0800d9ab 	.word	0x0800d9ab
 8008834:	0800d9ba 	.word	0x0800d9ba
 8008838:	0800d9ca 	.word	0x0800d9ca
 800883c:	0800d9dd 	.word	0x0800d9dd
 8008840:	0800da14 	.word	0x0800da14
 8008844:	2000797c 	.word	0x2000797c
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008848:	4269      	negs	r1, r5
 800884a:	b209      	sxth	r1, r1
 800884c:	f7fe fabc 	bl	8006dc8 <pbuf_header>
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f aef2 	beq.w	800863a <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 8008856:	4b9c      	ldr	r3, [pc, #624]	; (8008ac8 <tcp_receive+0x860>)
 8008858:	f240 5251 	movw	r2, #1361	; 0x551
 800885c:	e6e9      	b.n	8008632 <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8008862:	bfbe      	ittt	lt
 8008864:	7ea3      	ldrblt	r3, [r4, #26]
 8008866:	f043 0302 	orrlt.w	r3, r3, #2
 800886a:	76a3      	strblt	r3, [r4, #26]
 800886c:	e6f1      	b.n	8008652 <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 800886e:	6803      	ldr	r3, [r0, #0]
 8008870:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008872:	f7fe fe61 	bl	8007538 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008876:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008878:	2800      	cmp	r0, #0
 800887a:	d1f8      	bne.n	800886e <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800887c:	883a      	ldrh	r2, [r7, #0]
 800887e:	6833      	ldr	r3, [r6, #0]
 8008880:	4413      	add	r3, r2
 8008882:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008884:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008886:	4293      	cmp	r3, r2
 8008888:	d206      	bcs.n	8008898 <tcp_receive+0x630>
 800888a:	4b8f      	ldr	r3, [pc, #572]	; (8008ac8 <tcp_receive+0x860>)
 800888c:	498f      	ldr	r1, [pc, #572]	; (8008acc <tcp_receive+0x864>)
 800888e:	4890      	ldr	r0, [pc, #576]	; (8008ad0 <tcp_receive+0x868>)
 8008890:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008894:	f003 f861 	bl	800b95a <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008898:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800889a:	883a      	ldrh	r2, [r7, #0]
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7fe fddf 	bl	8007464 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80088a6:	686b      	ldr	r3, [r5, #4]
 80088a8:	891a      	ldrh	r2, [r3, #8]
 80088aa:	b11a      	cbz	r2, 80088b4 <tcp_receive+0x64c>
          recv_data = inseg.p;
 80088ac:	4a89      	ldr	r2, [pc, #548]	; (8008ad4 <tcp_receive+0x86c>)
 80088ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088b4:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80088b6:	4f84      	ldr	r7, [pc, #528]	; (8008ac8 <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088b8:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80088ba:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8008ae0 <tcp_receive+0x878>
 80088be:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008ad0 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088c2:	f7fc fc09 	bl	80050d8 <lwip_htons>
 80088c6:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 80088c8:	bf41      	itttt	mi
 80088ca:	4a83      	ldrmi	r2, [pc, #524]	; (8008ad8 <tcp_receive+0x870>)
 80088cc:	7813      	ldrbmi	r3, [r2, #0]
 80088ce:	f043 0320 	orrmi.w	r3, r3, #32
 80088d2:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80088d4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80088d6:	b125      	cbz	r5, 80088e2 <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80088d8:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80088da:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80088dc:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80088de:	428b      	cmp	r3, r1
 80088e0:	d033      	beq.n	800894a <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80088e2:	7ea3      	ldrb	r3, [r4, #26]
 80088e4:	07d9      	lsls	r1, r3, #31
 80088e6:	f140 8087 	bpl.w	80089f8 <tcp_receive+0x790>
 80088ea:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80088ee:	f043 0302 	orr.w	r3, r3, #2
 80088f2:	e083      	b.n	80089fc <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80088f4:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80088f8:	f7fc fbee 	bl	80050d8 <lwip_htons>
 80088fc:	07c1      	lsls	r1, r0, #31
 80088fe:	d51d      	bpl.n	800893c <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008900:	68eb      	ldr	r3, [r5, #12]
 8008902:	8998      	ldrh	r0, [r3, #12]
 8008904:	f7fc fbe8 	bl	80050d8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008908:	0782      	lsls	r2, r0, #30
 800890a:	d417      	bmi.n	800893c <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800890c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008910:	2001      	movs	r0, #1
 8008912:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8008916:	f7fc fbdf 	bl	80050d8 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 800891a:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800891c:	ea49 0000 	orr.w	r0, r9, r0
 8008920:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008924:	8998      	ldrh	r0, [r3, #12]
 8008926:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800892a:	f7fc fbd5 	bl	80050d8 <lwip_htons>
 800892e:	f010 0003 	ands.w	r0, r0, #3
 8008932:	bf18      	it	ne
 8008934:	2001      	movne	r0, #1
 8008936:	4481      	add	r9, r0
 8008938:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 800893c:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8008940:	4640      	mov	r0, r8
 8008942:	f7fe fdf9 	bl	8007538 <tcp_seg_free>
              next = next->next;
 8008946:	46c8      	mov	r8, r9
 8008948:	e6f4      	b.n	8008734 <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800894a:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800894c:	8990      	ldrh	r0, [r2, #12]
 800894e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008952:	f7fc fbc1 	bl	80050d8 <lwip_htons>
 8008956:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008958:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800895c:	f010 0003 	ands.w	r0, r0, #3
 8008960:	bf18      	it	ne
 8008962:	2001      	movne	r0, #1
 8008964:	449a      	add	sl, r3
 8008966:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008968:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800896a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800896c:	8998      	ldrh	r0, [r3, #12]
 800896e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8008972:	f7fc fbb1 	bl	80050d8 <lwip_htons>
 8008976:	f010 0003 	ands.w	r0, r0, #3
 800897a:	bf18      	it	ne
 800897c:	2001      	movne	r0, #1
 800897e:	4458      	add	r0, fp
 8008980:	4582      	cmp	sl, r0
 8008982:	d206      	bcs.n	8008992 <tcp_receive+0x72a>
 8008984:	463b      	mov	r3, r7
 8008986:	f240 52de 	movw	r2, #1502	; 0x5de
 800898a:	4641      	mov	r1, r8
 800898c:	4648      	mov	r0, r9
 800898e:	f002 ffe4 	bl	800b95a <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008992:	68eb      	ldr	r3, [r5, #12]
 8008994:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008998:	8998      	ldrh	r0, [r3, #12]
 800899a:	f7fc fb9d 	bl	80050d8 <lwip_htons>
 800899e:	f010 0003 	ands.w	r0, r0, #3
 80089a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089a4:	bf18      	it	ne
 80089a6:	2001      	movne	r0, #1
 80089a8:	4450      	add	r0, sl
 80089aa:	1a18      	subs	r0, r3, r0
 80089ac:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7fe fd58 	bl	8007464 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80089b4:	6869      	ldr	r1, [r5, #4]
 80089b6:	890b      	ldrh	r3, [r1, #8]
 80089b8:	b133      	cbz	r3, 80089c8 <tcp_receive+0x760>
            if (recv_data) {
 80089ba:	4b46      	ldr	r3, [pc, #280]	; (8008ad4 <tcp_receive+0x86c>)
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	b1c8      	cbz	r0, 80089f4 <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 80089c0:	f7fe fbe2 	bl	8007188 <pbuf_cat>
            cseg->p = NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80089c8:	68eb      	ldr	r3, [r5, #12]
 80089ca:	8998      	ldrh	r0, [r3, #12]
 80089cc:	f7fc fb84 	bl	80050d8 <lwip_htons>
 80089d0:	07c0      	lsls	r0, r0, #31
 80089d2:	d509      	bpl.n	80089e8 <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 80089d4:	4a40      	ldr	r2, [pc, #256]	; (8008ad8 <tcp_receive+0x870>)
 80089d6:	7813      	ldrb	r3, [r2, #0]
 80089d8:	f043 0320 	orr.w	r3, r3, #32
 80089dc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80089de:	7d23      	ldrb	r3, [r4, #20]
 80089e0:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80089e2:	bf04      	itt	eq
 80089e4:	2307      	moveq	r3, #7
 80089e6:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80089ec:	4628      	mov	r0, r5
 80089ee:	f7fe fda3 	bl	8007538 <tcp_seg_free>
 80089f2:	e76f      	b.n	80088d4 <tcp_receive+0x66c>
              recv_data = cseg->p;
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	e7e5      	b.n	80089c4 <tcp_receive+0x75c>
        tcp_ack(pcb);
 80089f8:	f043 0301 	orr.w	r3, r3, #1
 80089fc:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 80089fe:	b003      	add	sp, #12
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8008a04:	4620      	mov	r0, r4
 8008a06:	f001 faa7 	bl	8009f58 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8008a0a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008a0c:	b925      	cbnz	r5, 8008a18 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008a0e:	4833      	ldr	r0, [pc, #204]	; (8008adc <tcp_receive+0x874>)
 8008a10:	f7fe fda8 	bl	8007564 <tcp_seg_copy>
 8008a14:	6720      	str	r0, [r4, #112]	; 0x70
 8008a16:	e7f2      	b.n	80089fe <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 8008a18:	6833      	ldr	r3, [r6, #0]
 8008a1a:	f04f 0800 	mov.w	r8, #0
 8008a1e:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8008a22:	f103 0c01 	add.w	ip, r3, #1
 8008a26:	68e8      	ldr	r0, [r5, #12]
 8008a28:	6842      	ldr	r2, [r0, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d117      	bne.n	8008a5e <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 8008a2e:	482b      	ldr	r0, [pc, #172]	; (8008adc <tcp_receive+0x874>)
 8008a30:	892b      	ldrh	r3, [r5, #8]
 8008a32:	8902      	ldrh	r2, [r0, #8]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d9e2      	bls.n	80089fe <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 8008a38:	f7fe fd94 	bl	8007564 <tcp_seg_copy>
                if (cseg != NULL) {
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d0de      	beq.n	80089fe <tcp_receive+0x796>
                  if (prev != NULL) {
 8008a40:	f1b8 0f00 	cmp.w	r8, #0
 8008a44:	d009      	beq.n	8008a5a <tcp_receive+0x7f2>
                    prev->next = cseg;
 8008a46:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8008a4a:	4629      	mov	r1, r5
}
 8008a4c:	b003      	add	sp, #12
 8008a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8008a52:	f7ff bbcb 	b.w	80081ec <tcp_oos_insert_segment>
 8008a56:	460d      	mov	r5, r1
 8008a58:	e7e5      	b.n	8008a26 <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 8008a5a:	6720      	str	r0, [r4, #112]	; 0x70
 8008a5c:	e7f5      	b.n	8008a4a <tcp_receive+0x7e2>
              if (prev == NULL) {
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d109      	bne.n	8008a78 <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008a64:	1a99      	subs	r1, r3, r2
 8008a66:	2900      	cmp	r1, #0
 8008a68:	da3c      	bge.n	8008ae4 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8008a6a:	481c      	ldr	r0, [pc, #112]	; (8008adc <tcp_receive+0x874>)
 8008a6c:	f7fe fd7a 	bl	8007564 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0c4      	beq.n	80089fe <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 8008a74:	6720      	str	r0, [r4, #112]	; 0x70
 8008a76:	e7e8      	b.n	8008a4a <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008a78:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8008a7c:	6849      	ldr	r1, [r1, #4]
 8008a7e:	ebae 0101 	sub.w	r1, lr, r1
 8008a82:	2900      	cmp	r1, #0
 8008a84:	db2e      	blt.n	8008ae4 <tcp_receive+0x87c>
 8008a86:	ebac 0102 	sub.w	r1, ip, r2
 8008a8a:	2900      	cmp	r1, #0
 8008a8c:	dc2a      	bgt.n	8008ae4 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8008a8e:	4813      	ldr	r0, [pc, #76]	; (8008adc <tcp_receive+0x874>)
 8008a90:	f7fe fd68 	bl	8007564 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008a94:	4604      	mov	r4, r0
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0b1      	beq.n	80089fe <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008a9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a9e:	6831      	ldr	r1, [r6, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	1a5b      	subs	r3, r3, r1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd07      	ble.n	8008abe <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008aae:	1a89      	subs	r1, r1, r2
 8008ab0:	b289      	uxth	r1, r1
 8008ab2:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008ab6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008aba:	f7fe fad1 	bl	8007060 <pbuf_realloc>
                    prev->next = cseg;
 8008abe:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	e7c1      	b.n	8008a4c <tcp_receive+0x7e4>
 8008ac8:	0800d908 	.word	0x0800d908
 8008acc:	0800da4f 	.word	0x0800da4f
 8008ad0:	0800c0d7 	.word	0x0800c0d7
 8008ad4:	20003fa0 	.word	0x20003fa0
 8008ad8:	20003fa4 	.word	0x20003fa4
 8008adc:	20003f8c 	.word	0x20003f8c
 8008ae0:	0800da6e 	.word	0x0800da6e
              if (next->next == NULL &&
 8008ae4:	6829      	ldr	r1, [r5, #0]
 8008ae6:	46a8      	mov	r8, r5
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	d1b4      	bne.n	8008a56 <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008aec:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dd85      	ble.n	80089fe <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008af2:	8980      	ldrh	r0, [r0, #12]
 8008af4:	f7fc faf0 	bl	80050d8 <lwip_htons>
 8008af8:	07c2      	lsls	r2, r0, #31
 8008afa:	d480      	bmi.n	80089fe <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 8008afc:	483c      	ldr	r0, [pc, #240]	; (8008bf0 <tcp_receive+0x988>)
 8008afe:	f7fe fd31 	bl	8007564 <tcp_seg_copy>
 8008b02:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f43f af7a 	beq.w	80089fe <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008b0a:	68eb      	ldr	r3, [r5, #12]
 8008b0c:	6831      	ldr	r1, [r6, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	892b      	ldrh	r3, [r5, #8]
 8008b12:	4413      	add	r3, r2
 8008b14:	1a5b      	subs	r3, r3, r1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dd05      	ble.n	8008b26 <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008b1a:	1a89      	subs	r1, r1, r2
 8008b1c:	b289      	uxth	r1, r1
 8008b1e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008b20:	6868      	ldr	r0, [r5, #4]
 8008b22:	f7fe fa9d 	bl	8007060 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008b26:	6832      	ldr	r2, [r6, #0]
 8008b28:	883b      	ldrh	r3, [r7, #0]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008b32:	1a9b      	subs	r3, r3, r2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f77f af62 	ble.w	80089fe <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	8998      	ldrh	r0, [r3, #12]
 8008b40:	f7fc faca 	bl	80050d8 <lwip_htons>
 8008b44:	07c3      	lsls	r3, r0, #31
 8008b46:	d511      	bpl.n	8008b6c <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8008b4e:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008b52:	4640      	mov	r0, r8
 8008b54:	f7fc fac0 	bl	80050d8 <lwip_htons>
 8008b58:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008b5c:	f7fc fabc 	bl	80050d8 <lwip_htons>
 8008b60:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008b64:	ea40 0808 	orr.w	r8, r0, r8
 8008b68:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	1a89      	subs	r1, r1, r2
 8008b74:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8008b76:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008b78:	4411      	add	r1, r2
 8008b7a:	b289      	uxth	r1, r1
 8008b7c:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008b7e:	f7fe fa6f 	bl	8007060 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	891d      	ldrh	r5, [r3, #8]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	8998      	ldrh	r0, [r3, #12]
 8008b8a:	f7fc faa5 	bl	80050d8 <lwip_htons>
 8008b8e:	f010 0003 	ands.w	r0, r0, #3
 8008b92:	bf18      	it	ne
 8008b94:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008b96:	6833      	ldr	r3, [r6, #0]
 8008b98:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8008b9a:	4428      	add	r0, r5
 8008b9c:	b280      	uxth	r0, r0
 8008b9e:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ba0:	4418      	add	r0, r3
 8008ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ba4:	4413      	add	r3, r2
 8008ba6:	4298      	cmp	r0, r3
 8008ba8:	f43f af29 	beq.w	80089fe <tcp_receive+0x796>
 8008bac:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <tcp_receive+0x98c>)
 8008bae:	4912      	ldr	r1, [pc, #72]	; (8008bf8 <tcp_receive+0x990>)
 8008bb0:	4812      	ldr	r0, [pc, #72]	; (8008bfc <tcp_receive+0x994>)
 8008bb2:	f240 627b 	movw	r2, #1659	; 0x67b
}
 8008bb6:	b003      	add	sp, #12
 8008bb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008bbc:	f002 becd 	b.w	800b95a <iprintf>
      tcp_send_empty_ack(pcb);
 8008bc0:	4620      	mov	r0, r4
}
 8008bc2:	b003      	add	sp, #12
 8008bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8008bc8:	f001 b9c6 	b.w	8009f58 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008bcc:	6833      	ldr	r3, [r6, #0]
 8008bce:	1a99      	subs	r1, r3, r2
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	db06      	blt.n	8008be2 <tcp_receive+0x97a>
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f77f af0e 	ble.w	80089fe <tcp_receive+0x796>
      tcp_ack_now(pcb);
 8008be2:	7ea3      	ldrb	r3, [r4, #26]
 8008be4:	e683      	b.n	80088ee <tcp_receive+0x686>
        pcb->dupacks = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bec:	f7ff bbb1 	b.w	8008352 <tcp_receive+0xea>
 8008bf0:	20003f8c 	.word	0x20003f8c
 8008bf4:	0800d908 	.word	0x0800d908
 8008bf8:	0800d9dd 	.word	0x0800d9dd
 8008bfc:	0800c0d7 	.word	0x0800c0d7

08008c00 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <tcp_getoptbyte+0x30>)
 8008c02:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <tcp_getoptbyte+0x34>)
 8008c04:	6819      	ldr	r1, [r3, #0]
{
 8008c06:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008c08:	b121      	cbz	r1, 8008c14 <tcp_getoptbyte+0x14>
 8008c0a:	480b      	ldr	r0, [pc, #44]	; (8008c38 <tcp_getoptbyte+0x38>)
 8008c0c:	8813      	ldrh	r3, [r2, #0]
 8008c0e:	8800      	ldrh	r0, [r0, #0]
 8008c10:	4283      	cmp	r3, r0
 8008c12:	d207      	bcs.n	8008c24 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008c14:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8008c16:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008c18:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008c1a:	440b      	add	r3, r1
 8008c1c:	1c48      	adds	r0, r1, #1
 8008c1e:	8010      	strh	r0, [r2, #0]
 8008c20:	7d18      	ldrb	r0, [r3, #20]
 8008c22:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008c24:	1c5c      	adds	r4, r3, #1
 8008c26:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8008c28:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008c2a:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8008c2c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008c2e:	bd10      	pop	{r4, pc}
 8008c30:	20003fb8 	.word	0x20003fb8
 8008c34:	20003fac 	.word	0x20003fac
 8008c38:	20003fb4 	.word	0x20003fb4
 8008c3c:	20003fb0 	.word	0x20003fb0

08008c40 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008c42:	4d19      	ldr	r5, [pc, #100]	; (8008ca8 <tcp_parseopt.isra.1.part.2+0x68>)
 8008c44:	4e19      	ldr	r6, [pc, #100]	; (8008cac <tcp_parseopt.isra.1.part.2+0x6c>)
 8008c46:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8008c48:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008c4a:	802b      	strh	r3, [r5, #0]
 8008c4c:	8834      	ldrh	r4, [r6, #0]
 8008c4e:	882b      	ldrh	r3, [r5, #0]
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d300      	bcc.n	8008c56 <tcp_parseopt.isra.1.part.2+0x16>
 8008c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8008c56:	f7ff ffd3 	bl	8008c00 <tcp_getoptbyte>
      switch (opt) {
 8008c5a:	2801      	cmp	r0, #1
 8008c5c:	d0f6      	beq.n	8008c4c <tcp_parseopt.isra.1.part.2+0xc>
 8008c5e:	d3f9      	bcc.n	8008c54 <tcp_parseopt.isra.1.part.2+0x14>
 8008c60:	2802      	cmp	r0, #2
 8008c62:	d117      	bne.n	8008c94 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008c64:	f7ff ffcc 	bl	8008c00 <tcp_getoptbyte>
 8008c68:	2804      	cmp	r0, #4
 8008c6a:	d1f3      	bne.n	8008c54 <tcp_parseopt.isra.1.part.2+0x14>
 8008c6c:	882b      	ldrh	r3, [r5, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	daef      	bge.n	8008c54 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008c74:	f7ff ffc4 	bl	8008c00 <tcp_getoptbyte>
 8008c78:	0200      	lsls	r0, r0, #8
 8008c7a:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8008c7c:	f7ff ffc0 	bl	8008c00 <tcp_getoptbyte>
 8008c80:	4320      	orrs	r0, r4
 8008c82:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008c84:	1e43      	subs	r3, r0, #1
 8008c86:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c8a:	bf28      	it	cs
 8008c8c:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8008c90:	8038      	strh	r0, [r7, #0]
 8008c92:	e7db      	b.n	8008c4c <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008c94:	f7ff ffb4 	bl	8008c00 <tcp_getoptbyte>
        if (data < 2) {
 8008c98:	2801      	cmp	r0, #1
 8008c9a:	d9db      	bls.n	8008c54 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008c9c:	882b      	ldrh	r3, [r5, #0]
 8008c9e:	3b02      	subs	r3, #2
 8008ca0:	4418      	add	r0, r3
 8008ca2:	8028      	strh	r0, [r5, #0]
 8008ca4:	e7d2      	b.n	8008c4c <tcp_parseopt.isra.1.part.2+0xc>
 8008ca6:	bf00      	nop
 8008ca8:	20003fac 	.word	0x20003fac
 8008cac:	20003fbc 	.word	0x20003fbc

08008cb0 <tcp_input_delayed_close>:
{
 8008cb0:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8008cb2:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <tcp_input_delayed_close+0x38>)
{
 8008cb4:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8008cb6:	7818      	ldrb	r0, [r3, #0]
 8008cb8:	f010 0010 	ands.w	r0, r0, #16
 8008cbc:	d012      	beq.n	8008ce4 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008cbe:	7ea3      	ldrb	r3, [r4, #26]
 8008cc0:	06db      	lsls	r3, r3, #27
 8008cc2:	d406      	bmi.n	8008cd2 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008cc4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008cc8:	b11b      	cbz	r3, 8008cd2 <tcp_input_delayed_close+0x22>
 8008cca:	f06f 010e 	mvn.w	r1, #14
 8008cce:	6920      	ldr	r0, [r4, #16]
 8008cd0:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4805      	ldr	r0, [pc, #20]	; (8008cec <tcp_input_delayed_close+0x3c>)
 8008cd6:	f7fe fec5 	bl	8007a64 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008cda:	2001      	movs	r0, #1
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f7fd fef3 	bl	8006ac8 <memp_free>
 8008ce2:	2001      	movs	r0, #1
}
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20003fa4 	.word	0x20003fa4
 8008cec:	20007978 	.word	0x20007978

08008cf0 <tcp_input>:
{
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8008cf4:	4e9f      	ldr	r6, [pc, #636]	; (8008f74 <tcp_input+0x284>)
 8008cf6:	6843      	ldr	r3, [r0, #4]
 8008cf8:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008cfa:	8943      	ldrh	r3, [r0, #10]
 8008cfc:	2b13      	cmp	r3, #19
{
 8008cfe:	b089      	sub	sp, #36	; 0x24
 8008d00:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8008d02:	f240 81b2 	bls.w	800906a <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008d06:	4f9c      	ldr	r7, [pc, #624]	; (8008f78 <tcp_input+0x288>)
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7fc fff1 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 8008d10:	46b8      	mov	r8, r7
 8008d12:	4604      	mov	r4, r0
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f040 81a8 	bne.w	800906a <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008d20:	2be0      	cmp	r3, #224	; 0xe0
 8008d22:	f000 81a2 	beq.w	800906a <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008d26:	6833      	ldr	r3, [r6, #0]
 8008d28:	8998      	ldrh	r0, [r3, #12]
 8008d2a:	f7fc f9d5 	bl	80050d8 <lwip_htons>
 8008d2e:	0a81      	lsrs	r1, r0, #10
 8008d30:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008d34:	2913      	cmp	r1, #19
 8008d36:	f240 8198 	bls.w	800906a <tcp_input+0x37a>
 8008d3a:	892b      	ldrh	r3, [r5, #8]
 8008d3c:	b289      	uxth	r1, r1
 8008d3e:	428b      	cmp	r3, r1
 8008d40:	f0c0 8193 	bcc.w	800906a <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 8008d44:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008d46:	4a8d      	ldr	r2, [pc, #564]	; (8008f7c <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8008d48:	4f8d      	ldr	r7, [pc, #564]	; (8008f80 <tcp_input+0x290>)
 8008d4a:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008d4c:	f1a1 0314 	sub.w	r3, r1, #20
 8008d50:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8008d52:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8008d54:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008d56:	8013      	strh	r3, [r2, #0]
 8008d58:	4c8a      	ldr	r4, [pc, #552]	; (8008f84 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8008d5a:	d344      	bcc.n	8008de6 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008d5c:	4249      	negs	r1, r1
 8008d5e:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8008d60:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008d62:	f7fe f831 	bl	8006dc8 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008d66:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008d68:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8008fd8 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008d6c:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d6e:	4f86      	ldr	r7, [pc, #536]	; (8008f88 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008d70:	f7fc f9b2 	bl	80050d8 <lwip_htons>
 8008d74:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008d76:	6834      	ldr	r4, [r6, #0]
 8008d78:	8860      	ldrh	r0, [r4, #2]
 8008d7a:	f7fc f9ad 	bl	80050d8 <lwip_htons>
 8008d7e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008d80:	6834      	ldr	r4, [r6, #0]
 8008d82:	6860      	ldr	r0, [r4, #4]
 8008d84:	f7fc f9ab 	bl	80050de <lwip_htonl>
 8008d88:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d8a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008d8c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d90:	68a0      	ldr	r0, [r4, #8]
 8008d92:	f7fc f9a4 	bl	80050de <lwip_htonl>
 8008d96:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008d98:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d9a:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008d9c:	89e0      	ldrh	r0, [r4, #14]
 8008d9e:	f7fc f99b 	bl	80050d8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8008da2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008da4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8008da6:	8998      	ldrh	r0, [r3, #12]
 8008da8:	f7fc f996 	bl	80050d8 <lwip_htons>
 8008dac:	b2c0      	uxtb	r0, r0
 8008dae:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008db2:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8008db4:	4a75      	ldr	r2, [pc, #468]	; (8008f8c <tcp_input+0x29c>)
 8008db6:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008db8:	f010 0003 	ands.w	r0, r0, #3
 8008dbc:	bf18      	it	ne
 8008dbe:	2001      	movne	r0, #1
 8008dc0:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dc2:	4973      	ldr	r1, [pc, #460]	; (8008f90 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8008dc4:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008dc6:	4b73      	ldr	r3, [pc, #460]	; (8008f94 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dc8:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008dca:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8008dcc:	f04f 0a00 	mov.w	sl, #0
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dd4:	2c00      	cmp	r4, #0
 8008dd6:	d140      	bne.n	8008e5a <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dd8:	4b6f      	ldr	r3, [pc, #444]	; (8008f98 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008dda:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8008f9c <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dde:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008de0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8008fdc <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008de4:	e148      	b.n	8009078 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b92b      	cbnz	r3, 8008df6 <tcp_input+0x106>
 8008dea:	4b6c      	ldr	r3, [pc, #432]	; (8008f9c <tcp_input+0x2ac>)
 8008dec:	496c      	ldr	r1, [pc, #432]	; (8008fa0 <tcp_input+0x2b0>)
 8008dee:	486d      	ldr	r0, [pc, #436]	; (8008fa4 <tcp_input+0x2b4>)
 8008df0:	22b2      	movs	r2, #178	; 0xb2
 8008df2:	f002 fdb2 	bl	800b95a <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8008df6:	f06f 0113 	mvn.w	r1, #19
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7fd ffe4 	bl	8006dc8 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008e00:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8008e02:	8969      	ldrh	r1, [r5, #10]
 8008e04:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008e06:	881c      	ldrh	r4, [r3, #0]
 8008e08:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008e0a:	4249      	negs	r1, r1
 8008e0c:	b209      	sxth	r1, r1
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7fd ffda 	bl	8006dc8 <pbuf_header>
    if (opt2len > p->next->len) {
 8008e14:	6828      	ldr	r0, [r5, #0]
 8008e16:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008e18:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	f0c0 8125 	bcc.w	800906a <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8008e20:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008e22:	6843      	ldr	r3, [r0, #4]
 8008e24:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008e26:	b209      	sxth	r1, r1
 8008e28:	f7fd ffce 	bl	8006dc8 <pbuf_header>
    p->tot_len -= opt2len;
 8008e2c:	892b      	ldrh	r3, [r5, #8]
 8008e2e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008e30:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8008e32:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008e34:	b12b      	cbz	r3, 8008e42 <tcp_input+0x152>
 8008e36:	4b59      	ldr	r3, [pc, #356]	; (8008f9c <tcp_input+0x2ac>)
 8008e38:	495b      	ldr	r1, [pc, #364]	; (8008fa8 <tcp_input+0x2b8>)
 8008e3a:	485a      	ldr	r0, [pc, #360]	; (8008fa4 <tcp_input+0x2b4>)
 8008e3c:	22cf      	movs	r2, #207	; 0xcf
 8008e3e:	f002 fd8c 	bl	800b95a <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	892a      	ldrh	r2, [r5, #8]
 8008e46:	891b      	ldrh	r3, [r3, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d08c      	beq.n	8008d66 <tcp_input+0x76>
 8008e4c:	4b53      	ldr	r3, [pc, #332]	; (8008f9c <tcp_input+0x2ac>)
 8008e4e:	4957      	ldr	r1, [pc, #348]	; (8008fac <tcp_input+0x2bc>)
 8008e50:	4854      	ldr	r0, [pc, #336]	; (8008fa4 <tcp_input+0x2b4>)
 8008e52:	22d0      	movs	r2, #208	; 0xd0
 8008e54:	f002 fd81 	bl	800b95a <iprintf>
 8008e58:	e785      	b.n	8008d66 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008e5a:	7d23      	ldrb	r3, [r4, #20]
 8008e5c:	b92b      	cbnz	r3, 8008e6a <tcp_input+0x17a>
 8008e5e:	4b4f      	ldr	r3, [pc, #316]	; (8008f9c <tcp_input+0x2ac>)
 8008e60:	4953      	ldr	r1, [pc, #332]	; (8008fb0 <tcp_input+0x2c0>)
 8008e62:	4850      	ldr	r0, [pc, #320]	; (8008fa4 <tcp_input+0x2b4>)
 8008e64:	22e2      	movs	r2, #226	; 0xe2
 8008e66:	f002 fd78 	bl	800b95a <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008e6a:	7d23      	ldrb	r3, [r4, #20]
 8008e6c:	2b0a      	cmp	r3, #10
 8008e6e:	d105      	bne.n	8008e7c <tcp_input+0x18c>
 8008e70:	4b4a      	ldr	r3, [pc, #296]	; (8008f9c <tcp_input+0x2ac>)
 8008e72:	4950      	ldr	r1, [pc, #320]	; (8008fb4 <tcp_input+0x2c4>)
 8008e74:	484b      	ldr	r0, [pc, #300]	; (8008fa4 <tcp_input+0x2b4>)
 8008e76:	22e3      	movs	r2, #227	; 0xe3
 8008e78:	f002 fd6f 	bl	800b95a <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008e7c:	7d23      	ldrb	r3, [r4, #20]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d105      	bne.n	8008e8e <tcp_input+0x19e>
 8008e82:	4b46      	ldr	r3, [pc, #280]	; (8008f9c <tcp_input+0x2ac>)
 8008e84:	494c      	ldr	r1, [pc, #304]	; (8008fb8 <tcp_input+0x2c8>)
 8008e86:	4847      	ldr	r0, [pc, #284]	; (8008fa4 <tcp_input+0x2b4>)
 8008e88:	22e4      	movs	r2, #228	; 0xe4
 8008e8a:	f002 fd66 	bl	800b95a <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8008e8e:	6832      	ldr	r2, [r6, #0]
 8008e90:	8b21      	ldrh	r1, [r4, #24]
 8008e92:	8813      	ldrh	r3, [r2, #0]
 8008e94:	4299      	cmp	r1, r3
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	d169      	bne.n	8008f6e <tcp_input+0x27e>
 8008e9a:	8ae1      	ldrh	r1, [r4, #22]
 8008e9c:	8852      	ldrh	r2, [r2, #2]
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	d165      	bne.n	8008f6e <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8008ea2:	6861      	ldr	r1, [r4, #4]
 8008ea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ea8:	4291      	cmp	r1, r2
 8008eaa:	d160      	bne.n	8008f6e <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008eac:	6821      	ldr	r1, [r4, #0]
 8008eae:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8008eb2:	4291      	cmp	r1, r2
 8008eb4:	d15b      	bne.n	8008f6e <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	f040 8406 	bne.w	80096c8 <tcp_input+0x9d8>
 8008ebc:	4b37      	ldr	r3, [pc, #220]	; (8008f9c <tcp_input+0x2ac>)
 8008ebe:	493f      	ldr	r1, [pc, #252]	; (8008fbc <tcp_input+0x2cc>)
 8008ec0:	4838      	ldr	r0, [pc, #224]	; (8008fa4 <tcp_input+0x2b4>)
 8008ec2:	22ec      	movs	r2, #236	; 0xec
 8008ec4:	f002 fd49 	bl	800b95a <iprintf>
      if (prev != NULL) {
 8008ec8:	f1ba 0f00 	cmp.w	sl, #0
 8008ecc:	d007      	beq.n	8008ede <tcp_input+0x1ee>
        prev->next = pcb->next;
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8008ed4:	f8d9 3000 	ldr.w	r3, [r9]
 8008ed8:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8008eda:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008ede:	68e3      	ldr	r3, [r4, #12]
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	d105      	bne.n	8008ef0 <tcp_input+0x200>
 8008ee4:	4b2d      	ldr	r3, [pc, #180]	; (8008f9c <tcp_input+0x2ac>)
 8008ee6:	4936      	ldr	r1, [pc, #216]	; (8008fc0 <tcp_input+0x2d0>)
 8008ee8:	482e      	ldr	r0, [pc, #184]	; (8008fa4 <tcp_input+0x2b4>)
 8008eea:	22f4      	movs	r2, #244	; 0xf4
 8008eec:	f002 fd35 	bl	800b95a <iprintf>
    inseg.next = NULL;
 8008ef0:	4b34      	ldr	r3, [pc, #208]	; (8008fc4 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8008ef2:	8929      	ldrh	r1, [r5, #8]
 8008ef4:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 8008ef6:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 8008ef8:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 8008efa:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 8008efc:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8008efe:	4832      	ldr	r0, [pc, #200]	; (8008fc8 <tcp_input+0x2d8>)
    recv_acked = 0;
 8008f00:	4932      	ldr	r1, [pc, #200]	; (8008fcc <tcp_input+0x2dc>)
    inseg.p = p;
 8008f02:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8008f04:	4b32      	ldr	r3, [pc, #200]	; (8008fd0 <tcp_input+0x2e0>)
    recv_flags = 0;
 8008f06:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8008f08:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 8008f0a:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8008f0c:	9a03      	ldr	r2, [sp, #12]
 8008f0e:	9105      	str	r1, [sp, #20]
 8008f10:	7812      	ldrb	r2, [r2, #0]
 8008f12:	f012 0f08 	tst.w	r2, #8
 8008f16:	4680      	mov	r8, r0
 8008f18:	469a      	mov	sl, r3
 8008f1a:	d003      	beq.n	8008f24 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8008f1c:	7b6b      	ldrb	r3, [r5, #13]
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8008f24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008f26:	4d2b      	ldr	r5, [pc, #172]	; (8008fd4 <tcp_input+0x2e4>)
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8137 	beq.w	800919c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7fe feaa 	bl	8007c88 <tcp_process_refused_data>
 8008f34:	300d      	adds	r0, #13
 8008f36:	d008      	beq.n	8008f4a <tcp_input+0x25a>
 8008f38:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 812e 	beq.w	800919c <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f40:	9b04      	ldr	r3, [sp, #16]
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8129 	beq.w	800919c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8008f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f4c:	b913      	cbnz	r3, 8008f54 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 f802 	bl	8009f58 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8008f54:	2400      	movs	r4, #0
 8008f56:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8008f58:	4d1a      	ldr	r5, [pc, #104]	; (8008fc4 <tcp_input+0x2d4>)
    recv_data = NULL;
 8008f5a:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8008f5e:	6868      	ldr	r0, [r5, #4]
 8008f60:	b110      	cbz	r0, 8008f68 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8008f62:	f7fd ff37 	bl	8006dd4 <pbuf_free>
      inseg.p = NULL;
 8008f66:	606c      	str	r4, [r5, #4]
}
 8008f68:	b009      	add	sp, #36	; 0x24
 8008f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f6e:	46a2      	mov	sl, r4
 8008f70:	461c      	mov	r4, r3
 8008f72:	e72f      	b.n	8008dd4 <tcp_input+0xe4>
 8008f74:	20003fb0 	.word	0x20003fb0
 8008f78:	20004274 	.word	0x20004274
 8008f7c:	20003fbc 	.word	0x20003fbc
 8008f80:	20003fb8 	.word	0x20003fb8
 8008f84:	20003fb4 	.word	0x20003fb4
 8008f88:	20003f84 	.word	0x20003f84
 8008f8c:	20003f88 	.word	0x20003f88
 8008f90:	20007978 	.word	0x20007978
 8008f94:	20003fbe 	.word	0x20003fbe
 8008f98:	20007988 	.word	0x20007988
 8008f9c:	0800d908 	.word	0x0800d908
 8008fa0:	0800d752 	.word	0x0800d752
 8008fa4:	0800c0d7 	.word	0x0800c0d7
 8008fa8:	0800d762 	.word	0x0800d762
 8008fac:	0800d76e 	.word	0x0800d76e
 8008fb0:	0800d78d 	.word	0x0800d78d
 8008fb4:	0800d7b4 	.word	0x0800d7b4
 8008fb8:	0800d7de 	.word	0x0800d7de
 8008fbc:	0800d805 	.word	0x0800d805
 8008fc0:	0800d830 	.word	0x0800d830
 8008fc4:	20003f8c 	.word	0x20003f8c
 8008fc8:	20003fa4 	.word	0x20003fa4
 8008fcc:	20003f9c 	.word	0x20003f9c
 8008fd0:	20003fa0 	.word	0x20003fa0
 8008fd4:	2000798c 	.word	0x2000798c
 8008fd8:	20003fa8 	.word	0x20003fa8
 8008fdc:	0800d85a 	.word	0x0800d85a
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fe0:	7d23      	ldrb	r3, [r4, #20]
 8008fe2:	2b0a      	cmp	r3, #10
 8008fe4:	d005      	beq.n	8008ff2 <tcp_input+0x302>
 8008fe6:	4653      	mov	r3, sl
 8008fe8:	22fe      	movs	r2, #254	; 0xfe
 8008fea:	4649      	mov	r1, r9
 8008fec:	489d      	ldr	r0, [pc, #628]	; (8009264 <tcp_input+0x574>)
 8008fee:	f002 fcb4 	bl	800b95a <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8008ff2:	6833      	ldr	r3, [r6, #0]
 8008ff4:	8b22      	ldrh	r2, [r4, #24]
 8008ff6:	8818      	ldrh	r0, [r3, #0]
 8008ff8:	4290      	cmp	r0, r2
 8008ffa:	d13c      	bne.n	8009076 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8008ffc:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8008ffe:	885a      	ldrh	r2, [r3, #2]
 8009000:	428a      	cmp	r2, r1
 8009002:	d138      	bne.n	8009076 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8009004:	6861      	ldr	r1, [r4, #4]
 8009006:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800900a:	4299      	cmp	r1, r3
 800900c:	d133      	bne.n	8009076 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800900e:	6821      	ldr	r1, [r4, #0]
 8009010:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009014:	4299      	cmp	r1, r3
 8009016:	d12e      	bne.n	8009076 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	0759      	lsls	r1, r3, #29
 800901e:	d424      	bmi.n	800906a <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8009020:	079e      	lsls	r6, r3, #30
 8009022:	d513      	bpl.n	800904c <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009024:	f8db 1000 	ldr.w	r1, [fp]
 8009028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800902a:	1acb      	subs	r3, r1, r3
 800902c:	d413      	bmi.n	8009056 <tcp_input+0x366>
 800902e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8009030:	1b9b      	subs	r3, r3, r6
 8009032:	2b00      	cmp	r3, #0
 8009034:	dc0f      	bgt.n	8009056 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	881c      	ldrh	r4, [r3, #0]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800903e:	4b8a      	ldr	r3, [pc, #552]	; (8009268 <tcp_input+0x578>)
 8009040:	4421      	add	r1, r4
 8009042:	1d1a      	adds	r2, r3, #4
 8009044:	6838      	ldr	r0, [r7, #0]
 8009046:	f001 f93b 	bl	800a2c0 <tcp_rst>
 800904a:	e00e      	b.n	800906a <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 800904c:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 800904e:	bf42      	ittt	mi
 8009050:	4b86      	ldrmi	r3, [pc, #536]	; (800926c <tcp_input+0x57c>)
 8009052:	681b      	ldrmi	r3, [r3, #0]
 8009054:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8009056:	9b04      	ldr	r3, [sp, #16]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b133      	cbz	r3, 800906a <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 800905c:	7ea3      	ldrb	r3, [r4, #26]
 800905e:	f043 0302 	orr.w	r3, r3, #2
 8009062:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8009064:	4620      	mov	r0, r4
 8009066:	f000 ffad 	bl	8009fc4 <tcp_output>
  pbuf_free(p);
 800906a:	4628      	mov	r0, r5
}
 800906c:	b009      	add	sp, #36	; 0x24
 800906e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009072:	f7fd beaf 	b.w	8006dd4 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009076:	68e4      	ldr	r4, [r4, #12]
 8009078:	2c00      	cmp	r4, #0
 800907a:	d1b1      	bne.n	8008fe0 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800907c:	4b7c      	ldr	r3, [pc, #496]	; (8009270 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 800907e:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009080:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009082:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009086:	4689      	mov	r9, r1
 8009088:	f1b9 0f00 	cmp.w	r9, #0
 800908c:	d111      	bne.n	80090b2 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800908e:	8990      	ldrh	r0, [r2, #12]
 8009090:	f7fc f822 	bl	80050d8 <lwip_htons>
 8009094:	0743      	lsls	r3, r0, #29
 8009096:	d4e8      	bmi.n	800906a <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009098:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800909a:	9a04      	ldr	r2, [sp, #16]
 800909c:	f8db 1000 	ldr.w	r1, [fp]
 80090a0:	8810      	ldrh	r0, [r2, #0]
 80090a2:	881a      	ldrh	r2, [r3, #0]
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	885b      	ldrh	r3, [r3, #2]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4b6f      	ldr	r3, [pc, #444]	; (8009268 <tcp_input+0x578>)
 80090ac:	4401      	add	r1, r0
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	e7c8      	b.n	8009044 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 80090b2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80090b6:	8853      	ldrh	r3, [r2, #2]
 80090b8:	4283      	cmp	r3, r0
 80090ba:	d107      	bne.n	80090cc <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80090bc:	f8d9 3000 	ldr.w	r3, [r9]
 80090c0:	4573      	cmp	r3, lr
 80090c2:	f000 82dd 	beq.w	8009680 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 82da 	beq.w	8009680 <tcp_input+0x990>
 80090cc:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80090ce:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80090d2:	e7d9      	b.n	8009088 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 80090d4:	0798      	lsls	r0, r3, #30
 80090d6:	d5c8      	bpl.n	800906a <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 80090d8:	f899 0015 	ldrb.w	r0, [r9, #21]
 80090dc:	f7fe ff38 	bl	8007f50 <tcp_alloc>
    if (npcb == NULL) {
 80090e0:	4604      	mov	r4, r0
 80090e2:	b950      	cbnz	r0, 80090fa <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80090e4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0be      	beq.n	800906a <tcp_input+0x37a>
 80090ec:	4601      	mov	r1, r0
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80090f6:	4798      	blx	r3
 80090f8:	e7b7      	b.n	800906a <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80090fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80090fe:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009100:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009102:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009106:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8009108:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800910c:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800910e:	7813      	ldrb	r3, [r2, #0]
 8009110:	7852      	ldrb	r2, [r2, #1]
 8009112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009116:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009118:	2303      	movs	r3, #3
 800911a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800911c:	f8db 3000 	ldr.w	r3, [fp]
 8009120:	3301      	adds	r3, #1
 8009122:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009124:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009126:	f7fe ff9f 	bl	8008068 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800912a:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800912e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009130:	3b01      	subs	r3, #1
 8009132:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009134:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8009138:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800913a:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800913c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800913e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8009140:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009144:	f899 3008 	ldrb.w	r3, [r9, #8]
 8009148:	f003 030c 	and.w	r3, r3, #12
 800914c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800914e:	4b49      	ldr	r3, [pc, #292]	; (8009274 <tcp_input+0x584>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	60e2      	str	r2, [r4, #12]
 8009154:	601c      	str	r4, [r3, #0]
 8009156:	f001 fa55 	bl	800a604 <tcp_timer_needed>
 800915a:	4b47      	ldr	r3, [pc, #284]	; (8009278 <tcp_input+0x588>)
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b11b      	cbz	r3, 800916e <tcp_input+0x47e>
 8009166:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800916a:	f7ff fd69 	bl	8008c40 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 800916e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009170:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8009172:	89db      	ldrh	r3, [r3, #14]
 8009174:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009178:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800917a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800917e:	f7fe ff7f 	bl	8008080 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009182:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009184:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fe2c 	bl	8009de4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800918c:	2800      	cmp	r0, #0
 800918e:	f43f af69 	beq.w	8009064 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8009192:	2100      	movs	r1, #0
 8009194:	4620      	mov	r0, r4
 8009196:	f7fe fe23 	bl	8007de0 <tcp_abandon>
 800919a:	e766      	b.n	800906a <tcp_input+0x37a>
  if (flags & TCP_RST) {
 800919c:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 800919e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	0759      	lsls	r1, r3, #29
 80091a4:	d535      	bpl.n	8009212 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 80091a6:	7d21      	ldrb	r1, [r4, #20]
 80091a8:	2902      	cmp	r1, #2
 80091aa:	d122      	bne.n	80091f2 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 80091ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d109      	bne.n	80091c8 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 80091b4:	f898 3000 	ldrb.w	r3, [r8]
 80091b8:	f043 0308 	orr.w	r3, r3, #8
 80091bc:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80091c0:	7ea3      	ldrb	r3, [r4, #26]
 80091c2:	f023 0301 	bic.w	r3, r3, #1
 80091c6:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80091c8:	f898 3000 	ldrb.w	r3, [r8]
 80091cc:	0719      	lsls	r1, r3, #28
 80091ce:	f140 81ed 	bpl.w	80095ac <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80091d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80091d6:	b11b      	cbz	r3, 80091e0 <tcp_input+0x4f0>
 80091d8:	f06f 010d 	mvn.w	r1, #13
 80091dc:	6920      	ldr	r0, [r4, #16]
 80091de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091e0:	4621      	mov	r1, r4
 80091e2:	4824      	ldr	r0, [pc, #144]	; (8009274 <tcp_input+0x584>)
 80091e4:	f7fe fc3e 	bl	8007a64 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80091e8:	4621      	mov	r1, r4
 80091ea:	2001      	movs	r0, #1
 80091ec:	f7fd fc6c 	bl	8006ac8 <memp_free>
 80091f0:	e6b0      	b.n	8008f54 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 80091f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091f4:	f8db 3000 	ldr.w	r3, [fp]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	f000 825a 	beq.w	80096b2 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80091fe:	1a9b      	subs	r3, r3, r2
 8009200:	d4e2      	bmi.n	80091c8 <tcp_input+0x4d8>
 8009202:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	2b00      	cmp	r3, #0
 8009208:	dcde      	bgt.n	80091c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800920a:	7ea3      	ldrb	r3, [r4, #26]
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	e7d9      	b.n	80091c6 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009212:	f013 0102 	ands.w	r1, r3, #2
 8009216:	d003      	beq.n	8009220 <tcp_input+0x530>
 8009218:	7d22      	ldrb	r2, [r4, #20]
 800921a:	3a02      	subs	r2, #2
 800921c:	2a01      	cmp	r2, #1
 800921e:	d8f4      	bhi.n	800920a <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009220:	7ea2      	ldrb	r2, [r4, #26]
 8009222:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8009224:	bf5e      	ittt	pl
 8009226:	4a11      	ldrpl	r2, [pc, #68]	; (800926c <tcp_input+0x57c>)
 8009228:	6812      	ldrpl	r2, [r2, #0]
 800922a:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800922c:	2200      	movs	r2, #0
 800922e:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8009232:	9a06      	ldr	r2, [sp, #24]
 8009234:	8812      	ldrh	r2, [r2, #0]
 8009236:	b13a      	cbz	r2, 8009248 <tcp_input+0x558>
 8009238:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800923c:	9107      	str	r1, [sp, #28]
 800923e:	9306      	str	r3, [sp, #24]
 8009240:	f7ff fcfe 	bl	8008c40 <tcp_parseopt.isra.1.part.2>
 8009244:	9907      	ldr	r1, [sp, #28]
 8009246:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8009248:	7d22      	ldrb	r2, [r4, #20]
 800924a:	3a02      	subs	r2, #2
 800924c:	2a07      	cmp	r2, #7
 800924e:	d8bb      	bhi.n	80091c8 <tcp_input+0x4d8>
 8009250:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009254:	00940014 	.word	0x00940014
 8009258:	010000fc 	.word	0x010000fc
 800925c:	00fc014a 	.word	0x00fc014a
 8009260:	01830164 	.word	0x01830164
 8009264:	0800c0d7 	.word	0x0800c0d7
 8009268:	20004284 	.word	0x20004284
 800926c:	2000797c 	.word	0x2000797c
 8009270:	20007980 	.word	0x20007980
 8009274:	20007978 	.word	0x20007978
 8009278:	20007974 	.word	0x20007974
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800927c:	f003 0212 	and.w	r2, r3, #18
 8009280:	2a12      	cmp	r2, #18
 8009282:	d15e      	bne.n	8009342 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8009284:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	3201      	adds	r2, #1
 800928a:	428a      	cmp	r2, r1
 800928c:	d159      	bne.n	8009342 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 800928e:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8009292:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8009294:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8009296:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8009298:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800929a:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800929c:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800929e:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80092a0:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80092a2:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 80092a4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80092a8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 80092ac:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80092ae:	18e1      	adds	r1, r4, r3
 80092b0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80092b2:	f7fe fee5 	bl	8008080 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80092ba:	0043      	lsls	r3, r0, #1
 80092bc:	4293      	cmp	r3, r2
 80092be:	bf38      	it	cc
 80092c0:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80092c2:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092c4:	0080      	lsls	r0, r0, #2
 80092c6:	4283      	cmp	r3, r0
 80092c8:	bf28      	it	cs
 80092ca:	4603      	movcs	r3, r0
 80092cc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80092d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80092d4:	b933      	cbnz	r3, 80092e4 <tcp_input+0x5f4>
 80092d6:	4bad      	ldr	r3, [pc, #692]	; (800958c <tcp_input+0x89c>)
 80092d8:	49ad      	ldr	r1, [pc, #692]	; (8009590 <tcp_input+0x8a0>)
 80092da:	48ae      	ldr	r0, [pc, #696]	; (8009594 <tcp_input+0x8a4>)
 80092dc:	f240 321a 	movw	r2, #794	; 0x31a
 80092e0:	f002 fb3b 	bl	800b95a <iprintf>
      --pcb->snd_queuelen;
 80092e4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80092e8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80092ea:	3b01      	subs	r3, #1
 80092ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80092f0:	b9fe      	cbnz	r6, 8009332 <tcp_input+0x642>
        rseg = pcb->unsent;
 80092f2:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80092f4:	b936      	cbnz	r6, 8009304 <tcp_input+0x614>
 80092f6:	4ba5      	ldr	r3, [pc, #660]	; (800958c <tcp_input+0x89c>)
 80092f8:	49a7      	ldr	r1, [pc, #668]	; (8009598 <tcp_input+0x8a8>)
 80092fa:	48a6      	ldr	r0, [pc, #664]	; (8009594 <tcp_input+0x8a4>)
 80092fc:	f240 3222 	movw	r2, #802	; 0x322
 8009300:	f002 fb2b 	bl	800b95a <iprintf>
        pcb->unsent = rseg->next;
 8009304:	6833      	ldr	r3, [r6, #0]
 8009306:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8009308:	4630      	mov	r0, r6
 800930a:	f7fe f915 	bl	8007538 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800930e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009310:	b993      	cbnz	r3, 8009338 <tcp_input+0x648>
        pcb->rtime = -1;
 8009312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009316:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009318:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800931c:	2b00      	cmp	r3, #0
 800931e:	f43f af74 	beq.w	800920a <tcp_input+0x51a>
 8009322:	2200      	movs	r2, #0
 8009324:	4621      	mov	r1, r4
 8009326:	6920      	ldr	r0, [r4, #16]
 8009328:	4798      	blx	r3
      if (err == ERR_ABRT) {
 800932a:	300d      	adds	r0, #13
 800932c:	f47f af6d 	bne.w	800920a <tcp_input+0x51a>
 8009330:	e610      	b.n	8008f54 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8009332:	6833      	ldr	r3, [r6, #0]
 8009334:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009336:	e7e7      	b.n	8009308 <tcp_input+0x618>
        pcb->rtime = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800933c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009340:	e7ea      	b.n	8009318 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8009342:	06db      	lsls	r3, r3, #27
 8009344:	f57f af40 	bpl.w	80091c8 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009348:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	f8db 1000 	ldr.w	r1, [fp]
 8009350:	8810      	ldrh	r0, [r2, #0]
 8009352:	881a      	ldrh	r2, [r3, #0]
 8009354:	9201      	str	r2, [sp, #4]
 8009356:	885b      	ldrh	r3, [r3, #2]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4b90      	ldr	r3, [pc, #576]	; (800959c <tcp_input+0x8ac>)
 800935c:	4401      	add	r1, r0
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	6838      	ldr	r0, [r7, #0]
 8009362:	f000 ffad 	bl	800a2c0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009366:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800936a:	2b05      	cmp	r3, #5
 800936c:	f63f af2c 	bhi.w	80091c8 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fffd 	bl	800a374 <tcp_rexmit_rto>
 800937a:	e725      	b.n	80091c8 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 800937c:	06d8      	lsls	r0, r3, #27
 800937e:	d557      	bpl.n	8009430 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009382:	6838      	ldr	r0, [r7, #0]
 8009384:	43db      	mvns	r3, r3
 8009386:	42c3      	cmn	r3, r0
 8009388:	d443      	bmi.n	8009412 <tcp_input+0x722>
 800938a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800938c:	1ac3      	subs	r3, r0, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	dc3f      	bgt.n	8009412 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8009392:	2304      	movs	r3, #4
 8009394:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009396:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009398:	b143      	cbz	r3, 80093ac <tcp_input+0x6bc>
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	b933      	cbnz	r3, 80093ac <tcp_input+0x6bc>
 800939e:	4b7b      	ldr	r3, [pc, #492]	; (800958c <tcp_input+0x89c>)
 80093a0:	497f      	ldr	r1, [pc, #508]	; (80095a0 <tcp_input+0x8b0>)
 80093a2:	487c      	ldr	r0, [pc, #496]	; (8009594 <tcp_input+0x8a4>)
 80093a4:	f240 3251 	movw	r2, #849	; 0x351
 80093a8:	f002 fad7 	bl	800b95a <iprintf>
        if (pcb->listener == NULL) {
 80093ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80093ae:	b91b      	cbnz	r3, 80093b8 <tcp_input+0x6c8>
            tcp_abort(pcb);
 80093b0:	4620      	mov	r0, r4
 80093b2:	f7fe fd8b 	bl	8007ecc <tcp_abort>
            goto aborted;
 80093b6:	e5cd      	b.n	8008f54 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0f8      	beq.n	80093b0 <tcp_input+0x6c0>
 80093be:	2200      	movs	r2, #0
 80093c0:	4621      	mov	r1, r4
 80093c2:	6920      	ldr	r0, [r4, #16]
 80093c4:	4798      	blx	r3
        if (err != ERR_OK) {
 80093c6:	b110      	cbz	r0, 80093ce <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 80093c8:	300d      	adds	r0, #13
 80093ca:	d1f1      	bne.n	80093b0 <tcp_input+0x6c0>
 80093cc:	e5c2      	b.n	8008f54 <tcp_input+0x264>
        tcp_receive(pcb);
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7fe ff4a 	bl	8008268 <tcp_receive>
        if (recv_acked != 0) {
 80093d4:	9b05      	ldr	r3, [sp, #20]
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	b113      	cbz	r3, 80093e0 <tcp_input+0x6f0>
          recv_acked--;
 80093da:	9a05      	ldr	r2, [sp, #20]
 80093dc:	3b01      	subs	r3, #1
 80093de:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80093e0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80093e2:	f241 111c 	movw	r1, #4380	; 0x111c
 80093e6:	0053      	lsls	r3, r2, #1
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf38      	it	cc
 80093ec:	460b      	movcc	r3, r1
 80093ee:	0092      	lsls	r2, r2, #2
 80093f0:	4293      	cmp	r3, r2
 80093f2:	bf28      	it	cs
 80093f4:	4613      	movcs	r3, r2
 80093f6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80093fa:	f898 3000 	ldrb.w	r3, [r8]
 80093fe:	069a      	lsls	r2, r3, #26
 8009400:	f57f aee2 	bpl.w	80091c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009404:	7ea3      	ldrb	r3, [r4, #26]
 8009406:	f043 0302 	orr.w	r3, r3, #2
 800940a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800940c:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 800940e:	7523      	strb	r3, [r4, #20]
 8009410:	e6da      	b.n	80091c8 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009412:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009414:	9a04      	ldr	r2, [sp, #16]
 8009416:	f8db 1000 	ldr.w	r1, [fp]
 800941a:	8816      	ldrh	r6, [r2, #0]
 800941c:	881a      	ldrh	r2, [r3, #0]
 800941e:	9201      	str	r2, [sp, #4]
 8009420:	885b      	ldrh	r3, [r3, #2]
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4b5d      	ldr	r3, [pc, #372]	; (800959c <tcp_input+0x8ac>)
 8009426:	4431      	add	r1, r6
 8009428:	1d1a      	adds	r2, r3, #4
 800942a:	f000 ff49 	bl	800a2c0 <tcp_rst>
 800942e:	e6cb      	b.n	80091c8 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009430:	2900      	cmp	r1, #0
 8009432:	f43f aec9 	beq.w	80091c8 <tcp_input+0x4d8>
 8009436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009438:	f8db 2000 	ldr.w	r2, [fp]
 800943c:	3b01      	subs	r3, #1
 800943e:	4293      	cmp	r3, r2
 8009440:	f47f aec2 	bne.w	80091c8 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8009444:	4620      	mov	r0, r4
 8009446:	f000 ffb1 	bl	800a3ac <tcp_rexmit>
 800944a:	e6bd      	b.n	80091c8 <tcp_input+0x4d8>
    tcp_receive(pcb);
 800944c:	4620      	mov	r0, r4
 800944e:	f7fe ff0b 	bl	8008268 <tcp_receive>
 8009452:	e7d2      	b.n	80093fa <tcp_input+0x70a>
    tcp_receive(pcb);
 8009454:	4620      	mov	r0, r4
 8009456:	f7fe ff07 	bl	8008268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800945a:	f898 3000 	ldrb.w	r3, [r8]
 800945e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8009466:	d031      	beq.n	80094cc <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009468:	f013 0f10 	tst.w	r3, #16
 800946c:	7ea3      	ldrb	r3, [r4, #26]
 800946e:	d028      	beq.n	80094c2 <tcp_input+0x7d2>
 8009470:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	4291      	cmp	r1, r2
 8009476:	d124      	bne.n	80094c2 <tcp_input+0x7d2>
 8009478:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800947a:	bb12      	cbnz	r2, 80094c2 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 800947c:	f043 0302 	orr.w	r3, r3, #2
 8009480:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009482:	4620      	mov	r0, r4
 8009484:	f7fe f8ec 	bl	8007660 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009488:	f8d9 3000 	ldr.w	r3, [r9]
 800948c:	429c      	cmp	r4, r3
 800948e:	d10a      	bne.n	80094a6 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8009490:	68e3      	ldr	r3, [r4, #12]
 8009492:	f8c9 3000 	str.w	r3, [r9]
 8009496:	e008      	b.n	80094aa <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	4294      	cmp	r4, r2
 800949c:	d102      	bne.n	80094a4 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 800949e:	68e2      	ldr	r2, [r4, #12]
 80094a0:	60da      	str	r2, [r3, #12]
 80094a2:	e002      	b.n	80094aa <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80094a4:	4613      	mov	r3, r2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f6      	bne.n	8009498 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 80094aa:	4b3e      	ldr	r3, [pc, #248]	; (80095a4 <tcp_input+0x8b4>)
 80094ac:	2201      	movs	r2, #1
 80094ae:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80094b0:	230a      	movs	r3, #10
 80094b2:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80094b4:	4b3c      	ldr	r3, [pc, #240]	; (80095a8 <tcp_input+0x8b8>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	60e2      	str	r2, [r4, #12]
 80094ba:	601c      	str	r4, [r3, #0]
 80094bc:	f001 f8a2 	bl	800a604 <tcp_timer_needed>
 80094c0:	e682      	b.n	80091c8 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 80094c2:	f043 0302 	orr.w	r3, r3, #2
 80094c6:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80094c8:	2308      	movs	r3, #8
 80094ca:	e7a0      	b.n	800940e <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094cc:	06db      	lsls	r3, r3, #27
 80094ce:	f57f ae7b 	bpl.w	80091c8 <tcp_input+0x4d8>
 80094d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	f47f ae76 	bne.w	80091c8 <tcp_input+0x4d8>
 80094dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f47f ae72 	bne.w	80091c8 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 80094e4:	2306      	movs	r3, #6
 80094e6:	e792      	b.n	800940e <tcp_input+0x71e>
    tcp_receive(pcb);
 80094e8:	4620      	mov	r0, r4
 80094ea:	f7fe febd 	bl	8008268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80094ee:	f898 3000 	ldrb.w	r3, [r8]
 80094f2:	069f      	lsls	r7, r3, #26
 80094f4:	f57f ae68 	bpl.w	80091c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80094f8:	7ea3      	ldrb	r3, [r4, #26]
 80094fa:	f043 0302 	orr.w	r3, r3, #2
 80094fe:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009500:	4620      	mov	r0, r4
 8009502:	f7fe f8ad 	bl	8007660 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009506:	f8d9 3000 	ldr.w	r3, [r9]
 800950a:	429c      	cmp	r4, r3
 800950c:	d0c0      	beq.n	8009490 <tcp_input+0x7a0>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0cb      	beq.n	80094aa <tcp_input+0x7ba>
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	4294      	cmp	r4, r2
 8009516:	d0c2      	beq.n	800949e <tcp_input+0x7ae>
 8009518:	4613      	mov	r3, r2
 800951a:	e7f8      	b.n	800950e <tcp_input+0x81e>
    tcp_receive(pcb);
 800951c:	4620      	mov	r0, r4
 800951e:	f7fe fea3 	bl	8008268 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	06de      	lsls	r6, r3, #27
 8009528:	f57f ae4e 	bpl.w	80091c8 <tcp_input+0x4d8>
 800952c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	f47f ae49 	bne.w	80091c8 <tcp_input+0x4d8>
 8009536:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009538:	2b00      	cmp	r3, #0
 800953a:	f47f ae45 	bne.w	80091c8 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 800953e:	4620      	mov	r0, r4
 8009540:	f7fe f88e 	bl	8007660 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009544:	f8d9 3000 	ldr.w	r3, [r9]
 8009548:	429c      	cmp	r4, r3
 800954a:	d0a1      	beq.n	8009490 <tcp_input+0x7a0>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0ac      	beq.n	80094aa <tcp_input+0x7ba>
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	4294      	cmp	r4, r2
 8009554:	d0a3      	beq.n	800949e <tcp_input+0x7ae>
 8009556:	4613      	mov	r3, r2
 8009558:	e7f8      	b.n	800954c <tcp_input+0x85c>
    tcp_receive(pcb);
 800955a:	4620      	mov	r0, r4
 800955c:	f7fe fe84 	bl	8008268 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	06d8      	lsls	r0, r3, #27
 8009566:	f57f ae2f 	bpl.w	80091c8 <tcp_input+0x4d8>
 800956a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	f47f ae2a 	bne.w	80091c8 <tcp_input+0x4d8>
 8009574:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f ae26 	bne.w	80091c8 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 800957c:	f898 3000 	ldrb.w	r3, [r8]
 8009580:	f043 0310 	orr.w	r3, r3, #16
 8009584:	f888 3000 	strb.w	r3, [r8]
 8009588:	e61e      	b.n	80091c8 <tcp_input+0x4d8>
 800958a:	bf00      	nop
 800958c:	0800d908 	.word	0x0800d908
 8009590:	0800d8a7 	.word	0x0800d8a7
 8009594:	0800c0d7 	.word	0x0800c0d7
 8009598:	0800d8bd 	.word	0x0800d8bd
 800959c:	20004284 	.word	0x20004284
 80095a0:	0800d8d0 	.word	0x0800d8d0
 80095a4:	20007974 	.word	0x20007974
 80095a8:	20007988 	.word	0x20007988
        if (recv_acked > 0) {
 80095ac:	9b05      	ldr	r3, [sp, #20]
 80095ae:	881a      	ldrh	r2, [r3, #0]
 80095b0:	b122      	cbz	r2, 80095bc <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80095b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80095b4:	b9eb      	cbnz	r3, 80095f2 <tcp_input+0x902>
          recv_acked = 0;
 80095b6:	9a05      	ldr	r2, [sp, #20]
 80095b8:	2300      	movs	r3, #0
 80095ba:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80095bc:	4620      	mov	r0, r4
 80095be:	f7ff fb77 	bl	8008cb0 <tcp_input_delayed_close>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f47f acc6 	bne.w	8008f54 <tcp_input+0x264>
        if (recv_data != NULL) {
 80095c8:	f8da 3000 	ldr.w	r3, [sl]
 80095cc:	b33b      	cbz	r3, 800961e <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80095ce:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80095d0:	b133      	cbz	r3, 80095e0 <tcp_input+0x8f0>
 80095d2:	4b40      	ldr	r3, [pc, #256]	; (80096d4 <tcp_input+0x9e4>)
 80095d4:	4940      	ldr	r1, [pc, #256]	; (80096d8 <tcp_input+0x9e8>)
 80095d6:	4841      	ldr	r0, [pc, #260]	; (80096dc <tcp_input+0x9ec>)
 80095d8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80095dc:	f002 f9bd 	bl	800b95a <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80095e0:	7ea3      	ldrb	r3, [r4, #26]
 80095e2:	f013 0310 	ands.w	r3, r3, #16
 80095e6:	d00a      	beq.n	80095fe <tcp_input+0x90e>
            pbuf_free(recv_data);
 80095e8:	f8da 0000 	ldr.w	r0, [sl]
 80095ec:	f7fd fbf2 	bl	8006dd4 <pbuf_free>
 80095f0:	e6de      	b.n	80093b0 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80095f2:	4621      	mov	r1, r4
 80095f4:	6920      	ldr	r0, [r4, #16]
 80095f6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80095f8:	300d      	adds	r0, #13
 80095fa:	d1dc      	bne.n	80095b6 <tcp_input+0x8c6>
 80095fc:	e4aa      	b.n	8008f54 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80095fe:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8009602:	b31e      	cbz	r6, 800964c <tcp_input+0x95c>
 8009604:	f8da 2000 	ldr.w	r2, [sl]
 8009608:	6920      	ldr	r0, [r4, #16]
 800960a:	4621      	mov	r1, r4
 800960c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800960e:	f110 0f0d 	cmn.w	r0, #13
 8009612:	f43f ac9f 	beq.w	8008f54 <tcp_input+0x264>
          if (err != ERR_OK) {
 8009616:	b110      	cbz	r0, 800961e <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8009618:	f8da 3000 	ldr.w	r3, [sl]
 800961c:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800961e:	f898 3000 	ldrb.w	r3, [r8]
 8009622:	069a      	lsls	r2, r3, #26
 8009624:	d505      	bpl.n	8009632 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8009626:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009628:	b1c3      	cbz	r3, 800965c <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800962a:	7b5a      	ldrb	r2, [r3, #13]
 800962c:	f042 0220 	orr.w	r2, r2, #32
 8009630:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8009632:	4b2b      	ldr	r3, [pc, #172]	; (80096e0 <tcp_input+0x9f0>)
 8009634:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8009636:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009638:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800963a:	f7ff fb39 	bl	8008cb0 <tcp_input_delayed_close>
 800963e:	2800      	cmp	r0, #0
 8009640:	f47f ac88 	bne.w	8008f54 <tcp_input+0x264>
        tcp_output(pcb);
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fcbd 	bl	8009fc4 <tcp_output>
 800964a:	e483      	b.n	8008f54 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800964c:	4633      	mov	r3, r6
 800964e:	f8da 2000 	ldr.w	r2, [sl]
 8009652:	4621      	mov	r1, r4
 8009654:	4630      	mov	r0, r6
 8009656:	f7fe fb05 	bl	8007c64 <tcp_recv_null>
 800965a:	e7d8      	b.n	800960e <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800965c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800965e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009662:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8009666:	bf1c      	itt	ne
 8009668:	3301      	addne	r3, #1
 800966a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800966c:	2e00      	cmp	r6, #0
 800966e:	d0e0      	beq.n	8009632 <tcp_input+0x942>
 8009670:	2300      	movs	r3, #0
 8009672:	461a      	mov	r2, r3
 8009674:	4621      	mov	r1, r4
 8009676:	6920      	ldr	r0, [r4, #16]
 8009678:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800967a:	300d      	adds	r0, #13
 800967c:	d1d9      	bne.n	8009632 <tcp_input+0x942>
 800967e:	e469      	b.n	8008f54 <tcp_input+0x264>
      if (prev != NULL) {
 8009680:	b13c      	cbz	r4, 8009692 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009682:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009686:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009688:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800968a:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800968e:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8009692:	9b03      	ldr	r3, [sp, #12]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	0759      	lsls	r1, r3, #29
 8009698:	f53f ace7 	bmi.w	800906a <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 800969c:	06dc      	lsls	r4, r3, #27
 800969e:	f57f ad19 	bpl.w	80090d4 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	f8db 1000 	ldr.w	r1, [fp]
 80096a8:	881c      	ldrh	r4, [r3, #0]
 80096aa:	8813      	ldrh	r3, [r2, #0]
 80096ac:	e88d 0009 	stmia.w	sp, {r0, r3}
 80096b0:	e4c5      	b.n	800903e <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80096b2:	2900      	cmp	r1, #0
 80096b4:	f47f ad7e 	bne.w	80091b4 <tcp_input+0x4c4>
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <tcp_input+0x9e4>)
 80096ba:	490b      	ldr	r1, [pc, #44]	; (80096e8 <tcp_input+0x9f8>)
 80096bc:	4807      	ldr	r0, [pc, #28]	; (80096dc <tcp_input+0x9ec>)
 80096be:	f240 22e7 	movw	r2, #743	; 0x2e7
 80096c2:	f002 f94a 	bl	800b95a <iprintf>
 80096c6:	e575      	b.n	80091b4 <tcp_input+0x4c4>
      if (prev != NULL) {
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	f47f abff 	bne.w	8008ece <tcp_input+0x1de>
 80096d0:	e40e      	b.n	8008ef0 <tcp_input+0x200>
 80096d2:	bf00      	nop
 80096d4:	0800d908 	.word	0x0800d908
 80096d8:	0800d8ee 	.word	0x0800d8ee
 80096dc:	0800c0d7 	.word	0x0800c0d7
 80096e0:	2000798c 	.word	0x2000798c
 80096e4:	20007980 	.word	0x20007980
 80096e8:	0800d887 	.word	0x0800d887

080096ec <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80096ec:	4a02      	ldr	r2, [pc, #8]	; (80096f8 <tcp_trigger_input_pcb_close+0xc>)
 80096ee:	7813      	ldrb	r3, [r2, #0]
 80096f0:	f043 0310 	orr.w	r3, r3, #16
 80096f4:	7013      	strb	r3, [r2, #0]
 80096f6:	4770      	bx	lr
 80096f8:	20003fa4 	.word	0x20003fa4

080096fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009700:	4294      	cmp	r4, r2
{
 8009702:	461e      	mov	r6, r3
 8009704:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8009708:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 800970a:	d228      	bcs.n	800975e <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800970c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8009710:	07ad      	lsls	r5, r5, #30
 8009712:	d407      	bmi.n	8009724 <tcp_pbuf_prealloc+0x28>
 8009714:	7e9d      	ldrb	r5, [r3, #26]
 8009716:	066d      	lsls	r5, r5, #25
 8009718:	d421      	bmi.n	800975e <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 800971a:	b119      	cbz	r1, 8009724 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 800971c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800971e:	b909      	cbnz	r1, 8009724 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8009720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009722:	b1e3      	cbz	r3, 800975e <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009724:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8009728:	f023 0103 	bic.w	r1, r3, #3
 800972c:	428a      	cmp	r2, r1
 800972e:	bf28      	it	cs
 8009730:	460a      	movcs	r2, r1
 8009732:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009734:	2200      	movs	r2, #0
 8009736:	f7fd fbb7 	bl	8006ea8 <pbuf_alloc>
  if (p == NULL) {
 800973a:	4605      	mov	r5, r0
 800973c:	b168      	cbz	r0, 800975a <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800973e:	6803      	ldr	r3, [r0, #0]
 8009740:	b133      	cbz	r3, 8009750 <tcp_pbuf_prealloc+0x54>
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <tcp_pbuf_prealloc+0x68>)
 8009744:	4908      	ldr	r1, [pc, #32]	; (8009768 <tcp_pbuf_prealloc+0x6c>)
 8009746:	4809      	ldr	r0, [pc, #36]	; (800976c <tcp_pbuf_prealloc+0x70>)
 8009748:	f44f 7288 	mov.w	r2, #272	; 0x110
 800974c:	f002 f905 	bl	800b95a <iprintf>
  *oversize = p->len - length;
 8009750:	896b      	ldrh	r3, [r5, #10]
 8009752:	1b1b      	subs	r3, r3, r4
 8009754:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009756:	812c      	strh	r4, [r5, #8]
 8009758:	816c      	strh	r4, [r5, #10]
  return p;
}
 800975a:	4628      	mov	r0, r5
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	4621      	mov	r1, r4
 8009760:	e7e8      	b.n	8009734 <tcp_pbuf_prealloc+0x38>
 8009762:	bf00      	nop
 8009764:	0800dc0b 	.word	0x0800dc0b
 8009768:	0800dc3e 	.word	0x0800dc3e
 800976c:	0800c0d7 	.word	0x0800c0d7

08009770 <tcp_create_segment>:
{
 8009770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	f89d a020 	ldrb.w	sl, [sp, #32]
 8009778:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800977a:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800977e:	f04f 0003 	mov.w	r0, #3
{
 8009782:	460f      	mov	r7, r1
 8009784:	4616      	mov	r6, r2
 8009786:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009788:	bf14      	ite	ne
 800978a:	2504      	movne	r5, #4
 800978c:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800978e:	f7fd f97f 	bl	8006a90 <memp_malloc>
 8009792:	4604      	mov	r4, r0
 8009794:	b928      	cbnz	r0, 80097a2 <tcp_create_segment+0x32>
    pbuf_free(p);
 8009796:	4638      	mov	r0, r7
 8009798:	f7fd fb1c 	bl	8006dd4 <pbuf_free>
}
 800979c:	4620      	mov	r0, r4
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 80097a2:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 80097a6:	2300      	movs	r3, #0
  seg->p = p;
 80097a8:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80097ac:	893b      	ldrh	r3, [r7, #8]
 80097ae:	fa1f fa85 	uxth.w	sl, r5
 80097b2:	4553      	cmp	r3, sl
 80097b4:	d205      	bcs.n	80097c2 <tcp_create_segment+0x52>
 80097b6:	4b1f      	ldr	r3, [pc, #124]	; (8009834 <tcp_create_segment+0xc4>)
 80097b8:	491f      	ldr	r1, [pc, #124]	; (8009838 <tcp_create_segment+0xc8>)
 80097ba:	4820      	ldr	r0, [pc, #128]	; (800983c <tcp_create_segment+0xcc>)
 80097bc:	22ba      	movs	r2, #186	; 0xba
 80097be:	f002 f8cc 	bl	800b95a <iprintf>
  seg->len = p->tot_len - optlen;
 80097c2:	893b      	ldrh	r3, [r7, #8]
 80097c4:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 80097c8:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 80097ca:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80097cc:	2114      	movs	r1, #20
 80097ce:	f7fd fafb 	bl	8006dc8 <pbuf_header>
 80097d2:	4607      	mov	r7, r0
 80097d4:	b120      	cbz	r0, 80097e0 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7fd feae 	bl	8007538 <tcp_seg_free>
    return NULL;
 80097dc:	2400      	movs	r4, #0
 80097de:	e7dd      	b.n	800979c <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80097e0:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80097e2:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80097e6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80097ea:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80097ee:	f7fb fc73 	bl	80050d8 <lwip_htons>
 80097f2:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80097f6:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80097fa:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80097fe:	f7fb fc6b 	bl	80050d8 <lwip_htons>
 8009802:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009806:	4648      	mov	r0, r9
 8009808:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800980c:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800980e:	f7fb fc66 	bl	80050de <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009812:	3505      	adds	r5, #5
 8009814:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009818:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800981c:	b2a8      	uxth	r0, r5
 800981e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009822:	f7fb fc59 	bl	80050d8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8009826:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009828:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800982c:	749f      	strb	r7, [r3, #18]
 800982e:	74df      	strb	r7, [r3, #19]
  return seg;
 8009830:	e7b4      	b.n	800979c <tcp_create_segment+0x2c>
 8009832:	bf00      	nop
 8009834:	0800dc0b 	.word	0x0800dc0b
 8009838:	0800da93 	.word	0x0800da93
 800983c:	0800c0d7 	.word	0x0800c0d7

08009840 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009840:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009844:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009846:	4605      	mov	r5, r0
 8009848:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800984a:	2001      	movs	r0, #1
 800984c:	2200      	movs	r2, #0
 800984e:	f7fd fb2b 	bl	8006ea8 <pbuf_alloc>
  if (p != NULL) {
 8009852:	4606      	mov	r6, r0
 8009854:	b340      	cbz	r0, 80098a8 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009856:	8943      	ldrh	r3, [r0, #10]
 8009858:	2b13      	cmp	r3, #19
 800985a:	dc05      	bgt.n	8009868 <tcp_output_alloc_header.constprop.0+0x28>
 800985c:	4b13      	ldr	r3, [pc, #76]	; (80098ac <tcp_output_alloc_header.constprop.0+0x6c>)
 800985e:	4914      	ldr	r1, [pc, #80]	; (80098b0 <tcp_output_alloc_header.constprop.0+0x70>)
 8009860:	4814      	ldr	r0, [pc, #80]	; (80098b4 <tcp_output_alloc_header.constprop.0+0x74>)
 8009862:	2273      	movs	r2, #115	; 0x73
 8009864:	f002 f879 	bl	800b95a <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8009868:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800986a:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800986c:	f7fb fc34 	bl	80050d8 <lwip_htons>
 8009870:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009872:	8b28      	ldrh	r0, [r5, #24]
 8009874:	f7fb fc30 	bl	80050d8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8009878:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800987a:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800987c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800987e:	f7fb fc2e 	bl	80050de <lwip_htonl>
 8009882:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009884:	f245 0010 	movw	r0, #20496	; 0x5010
 8009888:	f7fb fc26 	bl	80050d8 <lwip_htons>
 800988c:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800988e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8009890:	f7fb fc22 	bl	80050d8 <lwip_htons>
    tcphdr->chksum = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	7423      	strb	r3, [r4, #16]
 8009898:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800989a:	74a3      	strb	r3, [r4, #18]
 800989c:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800989e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 80098a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80098a2:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80098a4:	4413      	add	r3, r2
 80098a6:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80098a8:	4630      	mov	r0, r6
 80098aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ac:	0800dc0b 	.word	0x0800dc0b
 80098b0:	0800dbdd 	.word	0x0800dbdd
 80098b4:	0800c0d7 	.word	0x0800c0d7

080098b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	b091      	sub	sp, #68	; 0x44
 80098be:	4605      	mov	r5, r0
 80098c0:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80098c8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 80098cc:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80098ce:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80098d0:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	4293      	cmp	r3, r2
 80098d6:	bf28      	it	cs
 80098d8:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bf08      	it	eq
 80098de:	4613      	moveq	r3, r2
 80098e0:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80098e2:	b959      	cbnz	r1, 80098fc <tcp_write+0x44>
 80098e4:	4ba1      	ldr	r3, [pc, #644]	; (8009b6c <tcp_write+0x2b4>)
 80098e6:	49a2      	ldr	r1, [pc, #648]	; (8009b70 <tcp_write+0x2b8>)
 80098e8:	48a2      	ldr	r0, [pc, #648]	; (8009b74 <tcp_write+0x2bc>)
 80098ea:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80098ee:	f002 f834 	bl	800b95a <iprintf>
 80098f2:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80098f6:	b011      	add	sp, #68	; 0x44
 80098f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80098fc:	7d2b      	ldrb	r3, [r5, #20]
 80098fe:	2b07      	cmp	r3, #7
 8009900:	d003      	beq.n	800990a <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 8009902:	3b02      	subs	r3, #2
 8009904:	2b02      	cmp	r3, #2
 8009906:	f200 8254 	bhi.w	8009db2 <tcp_write+0x4fa>
  } else if (len == 0) {
 800990a:	9b05      	ldr	r3, [sp, #20]
 800990c:	b1db      	cbz	r3, 8009946 <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 800990e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8009912:	9a05      	ldr	r2, [sp, #20]
 8009914:	4293      	cmp	r3, r2
 8009916:	d206      	bcs.n	8009926 <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 8009918:	7eab      	ldrb	r3, [r5, #26]
 800991a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800991e:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 8009920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009924:	e7e7      	b.n	80098f6 <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009926:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800992a:	2a08      	cmp	r2, #8
 800992c:	d8f4      	bhi.n	8009918 <tcp_write+0x60>
 800992e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8009930:	b30a      	cbz	r2, 8009976 <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009932:	b943      	cbnz	r3, 8009946 <tcp_write+0x8e>
 8009934:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009936:	b933      	cbnz	r3, 8009946 <tcp_write+0x8e>
 8009938:	4b8c      	ldr	r3, [pc, #560]	; (8009b6c <tcp_write+0x2b4>)
 800993a:	498f      	ldr	r1, [pc, #572]	; (8009b78 <tcp_write+0x2c0>)
 800993c:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009940:	488c      	ldr	r0, [pc, #560]	; (8009b74 <tcp_write+0x2bc>)
 8009942:	f002 f80a 	bl	800b95a <iprintf>
  if (pcb->unsent != NULL) {
 8009946:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8009948:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800994c:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800994e:	b9dc      	cbnz	r4, 8009988 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009950:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 8009954:	f1b8 0f00 	cmp.w	r8, #0
 8009958:	f000 8103 	beq.w	8009b62 <tcp_write+0x2aa>
 800995c:	4b83      	ldr	r3, [pc, #524]	; (8009b6c <tcp_write+0x2b4>)
 800995e:	4987      	ldr	r1, [pc, #540]	; (8009b7c <tcp_write+0x2c4>)
 8009960:	4884      	ldr	r0, [pc, #528]	; (8009b74 <tcp_write+0x2bc>)
 8009962:	f240 2225 	movw	r2, #549	; 0x225
 8009966:	f001 fff8 	bl	800b95a <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800996a:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 800996c:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 800996e:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8009970:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 8009972:	46a1      	mov	r9, r4
 8009974:	e094      	b.n	8009aa0 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009976:	b913      	cbnz	r3, 800997e <tcp_write+0xc6>
 8009978:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0e3      	beq.n	8009946 <tcp_write+0x8e>
 800997e:	4b7b      	ldr	r3, [pc, #492]	; (8009b6c <tcp_write+0x2b4>)
 8009980:	497f      	ldr	r1, [pc, #508]	; (8009b80 <tcp_write+0x2c8>)
 8009982:	f240 1259 	movw	r2, #345	; 0x159
 8009986:	e7db      	b.n	8009940 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8009988:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800998a:	f8d7 b000 	ldr.w	fp, [r7]
 800998e:	f1bb 0f00 	cmp.w	fp, #0
 8009992:	f040 80b6 	bne.w	8009b02 <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009996:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009998:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800999a:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800999e:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80099a0:	bf14      	ite	ne
 80099a2:	2404      	movne	r4, #4
 80099a4:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80099a6:	4423      	add	r3, r4
 80099a8:	429a      	cmp	r2, r3
 80099aa:	da06      	bge.n	80099ba <tcp_write+0x102>
 80099ac:	4b6f      	ldr	r3, [pc, #444]	; (8009b6c <tcp_write+0x2b4>)
 80099ae:	4975      	ldr	r1, [pc, #468]	; (8009b84 <tcp_write+0x2cc>)
 80099b0:	4870      	ldr	r0, [pc, #448]	; (8009b74 <tcp_write+0x2bc>)
 80099b2:	f240 12c7 	movw	r2, #455	; 0x1c7
 80099b6:	f001 ffd0 	bl	800b95a <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80099ba:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 80099be:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 80099c0:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 80099c4:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 80099c8:	eba3 0909 	sub.w	r9, r3, r9
 80099cc:	eba9 0904 	sub.w	r9, r9, r4
 80099d0:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 80099d4:	2e00      	cmp	r6, #0
 80099d6:	f000 8096 	beq.w	8009b06 <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80099da:	45b1      	cmp	r9, r6
 80099dc:	d206      	bcs.n	80099ec <tcp_write+0x134>
 80099de:	4b63      	ldr	r3, [pc, #396]	; (8009b6c <tcp_write+0x2b4>)
 80099e0:	4969      	ldr	r1, [pc, #420]	; (8009b88 <tcp_write+0x2d0>)
 80099e2:	4864      	ldr	r0, [pc, #400]	; (8009b74 <tcp_write+0x2bc>)
 80099e4:	f240 12d9 	movw	r2, #473	; 0x1d9
 80099e8:	f001 ffb7 	bl	800b95a <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80099ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80099f0:	9a05      	ldr	r2, [sp, #20]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	bf28      	it	cs
 80099f6:	461a      	movcs	r2, r3
 80099f8:	454a      	cmp	r2, r9
 80099fa:	4616      	mov	r6, r2
 80099fc:	bfa8      	it	ge
 80099fe:	464e      	movge	r6, r9
      oversize -= oversize_used;
 8009a00:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 8009a02:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8009a06:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8009a0a:	fa1f f989 	uxth.w	r9, r9
 8009a0e:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009a10:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009a14:	b153      	cbz	r3, 8009a2c <tcp_write+0x174>
 8009a16:	9b05      	ldr	r3, [sp, #20]
 8009a18:	429e      	cmp	r6, r3
 8009a1a:	f000 81cd 	beq.w	8009db8 <tcp_write+0x500>
 8009a1e:	4b53      	ldr	r3, [pc, #332]	; (8009b6c <tcp_write+0x2b4>)
 8009a20:	495a      	ldr	r1, [pc, #360]	; (8009b8c <tcp_write+0x2d4>)
 8009a22:	4854      	ldr	r0, [pc, #336]	; (8009b74 <tcp_write+0x2bc>)
 8009a24:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009a28:	f001 ff97 	bl	800b95a <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	f080 81c2 	bcs.w	8009db8 <tcp_write+0x500>
 8009a34:	f1b9 0f00 	cmp.w	r9, #0
 8009a38:	f000 808f 	beq.w	8009b5a <tcp_write+0x2a2>
 8009a3c:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8009a40:	f1ba 0f00 	cmp.w	sl, #0
 8009a44:	f000 808a 	beq.w	8009b5c <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009a48:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009a4c:	454c      	cmp	r4, r9
 8009a4e:	bfa8      	it	ge
 8009a50:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009a52:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009a54:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009a58:	d557      	bpl.n	8009b0a <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	9302      	str	r3, [sp, #8]
 8009a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	464a      	mov	r2, r9
 8009a64:	9500      	str	r5, [sp, #0]
 8009a66:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	2004      	movs	r0, #4
 8009a6e:	f7ff fe45 	bl	80096fc <tcp_pbuf_prealloc>
 8009a72:	4681      	mov	r9, r0
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f000 8199 	beq.w	8009dac <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	6840      	ldr	r0, [r0, #4]
 8009a7e:	4642      	mov	r2, r8
 8009a80:	1999      	adds	r1, r3, r6
 8009a82:	f002 f8d2 	bl	800bc2a <memcpy>
        queuelen += pbuf_clen(concat_p);
 8009a86:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8009a88:	f7fd fb5a 	bl	8007140 <pbuf_clen>
 8009a8c:	9b06      	ldr	r3, [sp, #24]
 8009a8e:	4403      	add	r3, r0
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8009a94:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8009a98:	44b0      	add	r8, r6
 8009a9a:	fa1f f888 	uxth.w	r8, r8
 8009a9e:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa2:	f04f 0b00 	mov.w	fp, #0
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009aae:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8009ab0:	9b05      	ldr	r3, [sp, #20]
 8009ab2:	4598      	cmp	r8, r3
 8009ab4:	d370      	bcc.n	8009b98 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 8009ab6:	b146      	cbz	r6, 8009aca <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 8009ab8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8009abc:	f1b8 0f00 	cmp.w	r8, #0
 8009ac0:	f040 8110 	bne.w	8009ce4 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 8009ac4:	893b      	ldrh	r3, [r7, #8]
 8009ac6:	441e      	add	r6, r3
 8009ac8:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8009aca:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009ace:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 8009ad2:	f1b9 0f00 	cmp.w	r9, #0
 8009ad6:	f000 811e 	beq.w	8009d16 <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009ada:	b937      	cbnz	r7, 8009aea <tcp_write+0x232>
 8009adc:	4b23      	ldr	r3, [pc, #140]	; (8009b6c <tcp_write+0x2b4>)
 8009ade:	492c      	ldr	r1, [pc, #176]	; (8009b90 <tcp_write+0x2d8>)
 8009ae0:	4824      	ldr	r0, [pc, #144]	; (8009b74 <tcp_write+0x2bc>)
 8009ae2:	f240 22bb 	movw	r2, #699	; 0x2bb
 8009ae6:	f001 ff38 	bl	800b95a <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8009aea:	4649      	mov	r1, r9
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7fd fb4b 	bl	8007188 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009af2:	893b      	ldrh	r3, [r7, #8]
 8009af4:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8009af8:	4413      	add	r3, r2
 8009afa:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8009afc:	f8c7 b000 	str.w	fp, [r7]
 8009b00:	e12b      	b.n	8009d5a <tcp_write+0x4a2>
 8009b02:	465f      	mov	r7, fp
 8009b04:	e741      	b.n	800998a <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009b06:	4634      	mov	r4, r6
 8009b08:	e782      	b.n	8009a10 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 9000 	ldr.w	r9, [r3]
 8009b10:	f1b9 0f00 	cmp.w	r9, #0
 8009b14:	d112      	bne.n	8009b3c <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009b16:	7b1a      	ldrb	r2, [r3, #12]
 8009b18:	2a01      	cmp	r2, #1
 8009b1a:	d111      	bne.n	8009b40 <tcp_write+0x288>
 8009b1c:	895a      	ldrh	r2, [r3, #10]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	4413      	add	r3, r2
 8009b22:	9a08      	ldr	r2, [sp, #32]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d10b      	bne.n	8009b40 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009b28:	b136      	cbz	r6, 8009b38 <tcp_write+0x280>
 8009b2a:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <tcp_write+0x2b4>)
 8009b2c:	4919      	ldr	r1, [pc, #100]	; (8009b94 <tcp_write+0x2dc>)
 8009b2e:	4811      	ldr	r0, [pc, #68]	; (8009b74 <tcp_write+0x2bc>)
 8009b30:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8009b34:	f001 ff11 	bl	800b95a <iprintf>
          extendlen = seglen;
 8009b38:	46c2      	mov	sl, r8
 8009b3a:	e7ad      	b.n	8009a98 <tcp_write+0x1e0>
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	e7e5      	b.n	8009b0c <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009b40:	2201      	movs	r2, #1
 8009b42:	4641      	mov	r1, r8
 8009b44:	2004      	movs	r0, #4
 8009b46:	f7fd f9af 	bl	8006ea8 <pbuf_alloc>
 8009b4a:	4681      	mov	r9, r0
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f000 812d 	beq.w	8009dac <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009b52:	9b08      	ldr	r3, [sp, #32]
 8009b54:	4433      	add	r3, r6
 8009b56:	6043      	str	r3, [r0, #4]
 8009b58:	e796      	b.n	8009a88 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8009b5a:	46ca      	mov	sl, r9
 8009b5c:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8009b5e:	46d1      	mov	r9, sl
 8009b60:	e79e      	b.n	8009aa0 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 8009b62:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8009b64:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009b66:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8009b68:	46c1      	mov	r9, r8
 8009b6a:	e799      	b.n	8009aa0 <tcp_write+0x1e8>
 8009b6c:	0800dc0b 	.word	0x0800dc0b
 8009b70:	0800dc52 	.word	0x0800dc52
 8009b74:	0800c0d7 	.word	0x0800c0d7
 8009b78:	0800dc83 	.word	0x0800dc83
 8009b7c:	0800dd6d 	.word	0x0800dd6d
 8009b80:	0800dcbd 	.word	0x0800dcbd
 8009b84:	0800dcef 	.word	0x0800dcef
 8009b88:	0800dd06 	.word	0x0800dd06
 8009b8c:	0800dd26 	.word	0x0800dd26
 8009b90:	0800ddf9 	.word	0x0800ddf9
 8009b94:	0800dd44 	.word	0x0800dd44
    u16_t left = len - pos;
 8009b98:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009b9a:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8009b9c:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	bf28      	it	cs
 8009ba6:	4613      	movcs	r3, r2
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bae:	b363      	cbz	r3, 8009c0a <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009bb0:	fabb f38b 	clz	r3, fp
 8009bb4:	095b      	lsrs	r3, r3, #5
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	9500      	str	r5, [sp, #0]
 8009bbe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f7ff fd99 	bl	80096fc <tcp_pbuf_prealloc>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d03b      	beq.n	8009c48 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009bd0:	8943      	ldrh	r3, [r0, #10]
 8009bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d206      	bcs.n	8009be6 <tcp_write+0x32e>
 8009bd8:	4b7b      	ldr	r3, [pc, #492]	; (8009dc8 <tcp_write+0x510>)
 8009bda:	497c      	ldr	r1, [pc, #496]	; (8009dcc <tcp_write+0x514>)
 8009bdc:	487c      	ldr	r0, [pc, #496]	; (8009dd0 <tcp_write+0x518>)
 8009bde:	f240 2241 	movw	r2, #577	; 0x241
 8009be2:	f001 feba 	bl	800b95a <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009be6:	9b08      	ldr	r3, [sp, #32]
 8009be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bea:	6860      	ldr	r0, [r4, #4]
 8009bec:	eb03 0108 	add.w	r1, r3, r8
 8009bf0:	f002 f81b 	bl	800bc2a <memcpy>
    queuelen += pbuf_clen(p);
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7fd faa3 	bl	8007140 <pbuf_clen>
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	4403      	add	r3, r0
 8009bfe:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009c00:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8009c02:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009c04:	d949      	bls.n	8009c9a <tcp_write+0x3e2>
      pbuf_free(p);
 8009c06:	4620      	mov	r0, r4
 8009c08:	e01c      	b.n	8009c44 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009c0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009c0e:	b133      	cbz	r3, 8009c1e <tcp_write+0x366>
 8009c10:	4b6d      	ldr	r3, [pc, #436]	; (8009dc8 <tcp_write+0x510>)
 8009c12:	4970      	ldr	r1, [pc, #448]	; (8009dd4 <tcp_write+0x51c>)
 8009c14:	486e      	ldr	r0, [pc, #440]	; (8009dd0 <tcp_write+0x518>)
 8009c16:	f240 224b 	movw	r2, #587	; 0x24b
 8009c1a:	f001 fe9e 	bl	800b95a <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009c1e:	2201      	movs	r2, #1
 8009c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c22:	2000      	movs	r0, #0
 8009c24:	f7fd f940 	bl	8006ea8 <pbuf_alloc>
 8009c28:	b170      	cbz	r0, 8009c48 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009c2a:	9a08      	ldr	r2, [sp, #32]
 8009c2c:	900d      	str	r0, [sp, #52]	; 0x34
 8009c2e:	4442      	add	r2, r8
 8009c30:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009c32:	2200      	movs	r2, #0
 8009c34:	4611      	mov	r1, r2
 8009c36:	4610      	mov	r0, r2
 8009c38:	f7fd f936 	bl	8006ea8 <pbuf_alloc>
 8009c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c3e:	4604      	mov	r4, r0
 8009c40:	bb38      	cbnz	r0, 8009c92 <tcp_write+0x3da>
        pbuf_free(p2);
 8009c42:	4618      	mov	r0, r3
      pbuf_free(p);
 8009c44:	f7fd f8c6 	bl	8006dd4 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8009c48:	7eab      	ldrb	r3, [r5, #26]
 8009c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c4e:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	d002      	beq.n	8009c5c <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8009c56:	4648      	mov	r0, r9
 8009c58:	f7fd f8bc 	bl	8006dd4 <pbuf_free>
  if (queue != NULL) {
 8009c5c:	f1bb 0f00 	cmp.w	fp, #0
 8009c60:	d002      	beq.n	8009c68 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8009c62:	4658      	mov	r0, fp
 8009c64:	f7fd fc76 	bl	8007554 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8009c68:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f43f ae57 	beq.w	8009920 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009c72:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f47f ae53 	bne.w	8009920 <tcp_write+0x68>
 8009c7a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f47f ae4f 	bne.w	8009920 <tcp_write+0x68>
 8009c82:	4b51      	ldr	r3, [pc, #324]	; (8009dc8 <tcp_write+0x510>)
 8009c84:	4954      	ldr	r1, [pc, #336]	; (8009dd8 <tcp_write+0x520>)
 8009c86:	4852      	ldr	r0, [pc, #328]	; (8009dd0 <tcp_write+0x518>)
 8009c88:	f240 3202 	movw	r2, #770	; 0x302
 8009c8c:	f001 fe65 	bl	800b95a <iprintf>
 8009c90:	e646      	b.n	8009920 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8009c92:	4619      	mov	r1, r3
 8009c94:	f7fd fa78 	bl	8007188 <pbuf_cat>
 8009c98:	e7ac      	b.n	8009bf4 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009c9a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	9200      	str	r2, [sp, #0]
 8009ca2:	4443      	add	r3, r8
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7ff fd63 	bl	8009770 <tcp_create_segment>
 8009caa:	4604      	mov	r4, r0
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d0cb      	beq.n	8009c48 <tcp_write+0x390>
    if (queue == NULL) {
 8009cb0:	f1bb 0f00 	cmp.w	fp, #0
 8009cb4:	d010      	beq.n	8009cd8 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb8:	b933      	cbnz	r3, 8009cc8 <tcp_write+0x410>
 8009cba:	4b43      	ldr	r3, [pc, #268]	; (8009dc8 <tcp_write+0x510>)
 8009cbc:	4947      	ldr	r1, [pc, #284]	; (8009ddc <tcp_write+0x524>)
 8009cbe:	4844      	ldr	r0, [pc, #272]	; (8009dd0 <tcp_write+0x518>)
 8009cc0:	f240 2285 	movw	r2, #645	; 0x285
 8009cc4:	f001 fe49 	bl	800b95a <iprintf>
      prev_seg->next = seg;
 8009cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cca:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8009ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cce:	940b      	str	r4, [sp, #44]	; 0x2c
 8009cd0:	4498      	add	r8, r3
 8009cd2:	fa1f f888 	uxth.w	r8, r8
 8009cd6:	e6eb      	b.n	8009ab0 <tcp_write+0x1f8>
 8009cd8:	4683      	mov	fp, r0
 8009cda:	e7f7      	b.n	8009ccc <tcp_write+0x414>
  if (oversize_used > 0) {
 8009cdc:	f04f 0a00 	mov.w	sl, #0
 8009ce0:	46d1      	mov	r9, sl
 8009ce2:	e6e9      	b.n	8009ab8 <tcp_write+0x200>
      p->tot_len += oversize_used;
 8009ce4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009ce8:	4433      	add	r3, r6
 8009cea:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8009cee:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf2:	b96b      	cbnz	r3, 8009d10 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009cf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cf8:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8009cfc:	9908      	ldr	r1, [sp, #32]
 8009cfe:	4418      	add	r0, r3
 8009d00:	4632      	mov	r2, r6
 8009d02:	f001 ff92 	bl	800bc2a <memcpy>
        p->len += oversize_used;
 8009d06:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009d0a:	4433      	add	r3, r6
 8009d0c:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009d10:	f8d8 8000 	ldr.w	r8, [r8]
 8009d14:	e6d2      	b.n	8009abc <tcp_write+0x204>
  } else if (extendlen > 0) {
 8009d16:	f1ba 0f00 	cmp.w	sl, #0
 8009d1a:	d019      	beq.n	8009d50 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009d1c:	b10f      	cbz	r7, 8009d22 <tcp_write+0x46a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	b933      	cbnz	r3, 8009d30 <tcp_write+0x478>
 8009d22:	4b29      	ldr	r3, [pc, #164]	; (8009dc8 <tcp_write+0x510>)
 8009d24:	492e      	ldr	r1, [pc, #184]	; (8009de0 <tcp_write+0x528>)
 8009d26:	482a      	ldr	r0, [pc, #168]	; (8009dd0 <tcp_write+0x518>)
 8009d28:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009d2c:	f001 fe15 	bl	800b95a <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	891a      	ldrh	r2, [r3, #8]
 8009d34:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8009d36:	4452      	add	r2, sl
 8009d38:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009d3a:	b939      	cbnz	r1, 8009d4c <tcp_write+0x494>
    p->len += extendlen;
 8009d3c:	895a      	ldrh	r2, [r3, #10]
 8009d3e:	4452      	add	r2, sl
 8009d40:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009d42:	893b      	ldrh	r3, [r7, #8]
 8009d44:	449a      	add	sl, r3
 8009d46:	f8a7 a008 	strh.w	sl, [r7, #8]
 8009d4a:	e6d7      	b.n	8009afc <tcp_write+0x244>
      p->tot_len += extendlen;
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	e7f0      	b.n	8009d32 <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8009d50:	2f00      	cmp	r7, #0
 8009d52:	f47f aed3 	bne.w	8009afc <tcp_write+0x244>
    pcb->unsent = queue;
 8009d56:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8009d5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009d5c:	9a05      	ldr	r2, [sp, #20]
 8009d5e:	4413      	add	r3, r2
 8009d60:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8009d62:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8009d6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009d70:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	b153      	cbz	r3, 8009d8e <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009d78:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009d7a:	b943      	cbnz	r3, 8009d8e <tcp_write+0x4d6>
 8009d7c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009d7e:	b933      	cbnz	r3, 8009d8e <tcp_write+0x4d6>
 8009d80:	4b11      	ldr	r3, [pc, #68]	; (8009dc8 <tcp_write+0x510>)
 8009d82:	4915      	ldr	r1, [pc, #84]	; (8009dd8 <tcp_write+0x520>)
 8009d84:	4812      	ldr	r0, [pc, #72]	; (8009dd0 <tcp_write+0x518>)
 8009d86:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009d8a:	f001 fde6 	bl	800b95a <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8009d8e:	b15c      	cbz	r4, 8009da8 <tcp_write+0x4f0>
 8009d90:	68e4      	ldr	r4, [r4, #12]
 8009d92:	b14c      	cbz	r4, 8009da8 <tcp_write+0x4f0>
 8009d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d96:	f013 0602 	ands.w	r6, r3, #2
 8009d9a:	d105      	bne.n	8009da8 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009d9c:	2008      	movs	r0, #8
 8009d9e:	89a5      	ldrh	r5, [r4, #12]
 8009da0:	f7fb f99a 	bl	80050d8 <lwip_htons>
 8009da4:	4328      	orrs	r0, r5
 8009da6:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8009da8:	2000      	movs	r0, #0
 8009daa:	e5a4      	b.n	80098f6 <tcp_write+0x3e>
      p->tot_len += extendlen;
 8009dac:	f04f 0900 	mov.w	r9, #0
 8009db0:	e74a      	b.n	8009c48 <tcp_write+0x390>
    return ERR_CONN;
 8009db2:	f06f 000a 	mvn.w	r0, #10
 8009db6:	e59e      	b.n	80098f6 <tcp_write+0x3e>
  if (oversize_used > 0) {
 8009db8:	2e00      	cmp	r6, #0
 8009dba:	d18f      	bne.n	8009cdc <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8009dbc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009dc0:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8009dc4:	e69a      	b.n	8009afc <tcp_write+0x244>
 8009dc6:	bf00      	nop
 8009dc8:	0800dc0b 	.word	0x0800dc0b
 8009dcc:	0800dd9c 	.word	0x0800dd9c
 8009dd0:	0800c0d7 	.word	0x0800c0d7
 8009dd4:	0800ddda 	.word	0x0800ddda
 8009dd8:	0800de66 	.word	0x0800de66
 8009ddc:	0800dde8 	.word	0x0800dde8
 8009de0:	0800de31 	.word	0x0800de31

08009de4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009de8:	f011 0803 	ands.w	r8, r1, #3
{
 8009dec:	4604      	mov	r4, r0
 8009dee:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009df0:	d106      	bne.n	8009e00 <tcp_enqueue_flags+0x1c>
 8009df2:	4b41      	ldr	r3, [pc, #260]	; (8009ef8 <tcp_enqueue_flags+0x114>)
 8009df4:	4941      	ldr	r1, [pc, #260]	; (8009efc <tcp_enqueue_flags+0x118>)
 8009df6:	4842      	ldr	r0, [pc, #264]	; (8009f00 <tcp_enqueue_flags+0x11c>)
 8009df8:	f240 321b 	movw	r2, #795	; 0x31b
 8009dfc:	f001 fdad 	bl	800b95a <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009e00:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	d90a      	bls.n	8009e1e <tcp_enqueue_flags+0x3a>
 8009e08:	07f1      	lsls	r1, r6, #31
 8009e0a:	d408      	bmi.n	8009e1e <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8009e0c:	7ea3      	ldrb	r3, [r4, #26]
 8009e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e12:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8009e18:	b003      	add	sp, #12
 8009e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1e:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 8009e22:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e24:	bf14      	ite	ne
 8009e26:	2704      	movne	r7, #4
 8009e28:	2700      	moveq	r7, #0
 8009e2a:	f04f 0200 	mov.w	r2, #0
 8009e2e:	4639      	mov	r1, r7
 8009e30:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8009e32:	bf14      	ite	ne
 8009e34:	f04f 0901 	movne.w	r9, #1
 8009e38:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e3c:	f7fd f834 	bl	8006ea8 <pbuf_alloc>
 8009e40:	4605      	mov	r5, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0e2      	beq.n	8009e0c <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009e46:	8943      	ldrh	r3, [r0, #10]
 8009e48:	42bb      	cmp	r3, r7
 8009e4a:	d206      	bcs.n	8009e5a <tcp_enqueue_flags+0x76>
 8009e4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <tcp_enqueue_flags+0x114>)
 8009e4e:	492d      	ldr	r1, [pc, #180]	; (8009f04 <tcp_enqueue_flags+0x120>)
 8009e50:	482b      	ldr	r0, [pc, #172]	; (8009f00 <tcp_enqueue_flags+0x11c>)
 8009e52:	f240 3241 	movw	r2, #833	; 0x341
 8009e56:	f001 fd80 	bl	800b95a <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009e5a:	f8cd 9000 	str.w	r9, [sp]
 8009e5e:	4629      	mov	r1, r5
 8009e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e62:	4632      	mov	r2, r6
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7ff fc83 	bl	8009770 <tcp_create_segment>
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0cd      	beq.n	8009e0c <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009e70:	68c3      	ldr	r3, [r0, #12]
 8009e72:	079a      	lsls	r2, r3, #30
 8009e74:	d006      	beq.n	8009e84 <tcp_enqueue_flags+0xa0>
 8009e76:	4b20      	ldr	r3, [pc, #128]	; (8009ef8 <tcp_enqueue_flags+0x114>)
 8009e78:	4923      	ldr	r1, [pc, #140]	; (8009f08 <tcp_enqueue_flags+0x124>)
 8009e7a:	4821      	ldr	r0, [pc, #132]	; (8009f00 <tcp_enqueue_flags+0x11c>)
 8009e7c:	f240 3249 	movw	r2, #841	; 0x349
 8009e80:	f001 fd6b 	bl	800b95a <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009e84:	892b      	ldrh	r3, [r5, #8]
 8009e86:	b133      	cbz	r3, 8009e96 <tcp_enqueue_flags+0xb2>
 8009e88:	4b1b      	ldr	r3, [pc, #108]	; (8009ef8 <tcp_enqueue_flags+0x114>)
 8009e8a:	4920      	ldr	r1, [pc, #128]	; (8009f0c <tcp_enqueue_flags+0x128>)
 8009e8c:	481c      	ldr	r0, [pc, #112]	; (8009f00 <tcp_enqueue_flags+0x11c>)
 8009e8e:	f240 324a 	movw	r2, #842	; 0x34a
 8009e92:	f001 fd62 	bl	800b95a <iprintf>
  if (pcb->unsent == NULL) {
 8009e96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009e98:	bb4b      	cbnz	r3, 8009eee <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8009e9a:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	d002      	beq.n	8009eae <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8009ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eaa:	3301      	adds	r3, #1
 8009eac:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8009eae:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8009eb0:	bf42      	ittt	mi
 8009eb2:	7ea3      	ldrbmi	r3, [r4, #26]
 8009eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8009eb8:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009eba:	6868      	ldr	r0, [r5, #4]
 8009ebc:	f7fd f940 	bl	8007140 <pbuf_clen>
 8009ec0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009ec4:	4418      	add	r0, r3
 8009ec6:	b280      	uxth	r0, r0
 8009ec8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d0a3      	beq.n	8009e18 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009ed0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009ed2:	b948      	cbnz	r0, 8009ee8 <tcp_enqueue_flags+0x104>
 8009ed4:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8009ed6:	2c00      	cmp	r4, #0
 8009ed8:	d19e      	bne.n	8009e18 <tcp_enqueue_flags+0x34>
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <tcp_enqueue_flags+0x114>)
 8009edc:	490c      	ldr	r1, [pc, #48]	; (8009f10 <tcp_enqueue_flags+0x12c>)
 8009ede:	4808      	ldr	r0, [pc, #32]	; (8009f00 <tcp_enqueue_flags+0x11c>)
 8009ee0:	f240 326d 	movw	r2, #877	; 0x36d
 8009ee4:	f001 fd39 	bl	800b95a <iprintf>
  return ERR_OK;
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e795      	b.n	8009e18 <tcp_enqueue_flags+0x34>
 8009eec:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	d1fb      	bne.n	8009eec <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8009ef4:	601d      	str	r5, [r3, #0]
 8009ef6:	e7d1      	b.n	8009e9c <tcp_enqueue_flags+0xb8>
 8009ef8:	0800dc0b 	.word	0x0800dc0b
 8009efc:	0800daa8 	.word	0x0800daa8
 8009f00:	0800c0d7 	.word	0x0800c0d7
 8009f04:	0800dafd 	.word	0x0800dafd
 8009f08:	0800db36 	.word	0x0800db36
 8009f0c:	0800db4e 	.word	0x0800db4e
 8009f10:	0800db78 	.word	0x0800db78

08009f14 <tcp_send_fin>:
{
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8009f16:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8009f18:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8009f1a:	b934      	cbnz	r4, 8009f2a <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	2101      	movs	r1, #1
}
 8009f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009f24:	f7ff bf5e 	b.w	8009de4 <tcp_enqueue_flags>
 8009f28:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1fb      	bne.n	8009f28 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009f30:	68e3      	ldr	r3, [r4, #12]
 8009f32:	8998      	ldrh	r0, [r3, #12]
 8009f34:	f7fb f8d0 	bl	80050d8 <lwip_htons>
 8009f38:	f010 0707 	ands.w	r7, r0, #7
 8009f3c:	d1ee      	bne.n	8009f1c <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009f3e:	68e6      	ldr	r6, [r4, #12]
 8009f40:	2001      	movs	r0, #1
 8009f42:	89b4      	ldrh	r4, [r6, #12]
 8009f44:	f7fb f8c8 	bl	80050d8 <lwip_htons>
 8009f48:	4320      	orrs	r0, r4
 8009f4a:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8009f4c:	7eab      	ldrb	r3, [r5, #26]
 8009f4e:	f043 0320 	orr.w	r3, r3, #32
 8009f52:	76ab      	strb	r3, [r5, #26]
}
 8009f54:	4638      	mov	r0, r7
 8009f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009f58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f5a:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009f5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009f5e:	f7fb f8be 	bl	80050de <lwip_htonl>
 8009f62:	2100      	movs	r1, #0
 8009f64:	4602      	mov	r2, r0
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff fc6a 	bl	8009840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	b940      	cbnz	r0, 8009f82 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009f70:	7ea3      	ldrb	r3, [r4, #26]
 8009f72:	f043 0303 	orr.w	r3, r3, #3
 8009f76:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009f78:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	b004      	add	sp, #16
 8009f80:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009f82:	1d25      	adds	r5, r4, #4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f7fb fd3d 	bl	8005a04 <ip4_route>
  if (netif == NULL) {
 8009f8a:	b1a0      	cbz	r0, 8009fb6 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009f8c:	2206      	movs	r2, #6
 8009f8e:	9201      	str	r2, [sp, #4]
 8009f90:	7a62      	ldrb	r2, [r4, #9]
 8009f92:	9002      	str	r0, [sp, #8]
 8009f94:	9200      	str	r2, [sp, #0]
 8009f96:	7aa3      	ldrb	r3, [r4, #10]
 8009f98:	462a      	mov	r2, r5
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7fb fe97 	bl	8005cd0 <ip4_output_if>
 8009fa2:	4605      	mov	r5, r0
  pbuf_free(p);
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7fc ff15 	bl	8006dd4 <pbuf_free>
 8009faa:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8009fac:	b135      	cbz	r5, 8009fbc <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009fae:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009fb2:	76a3      	strb	r3, [r4, #26]
 8009fb4:	e7e2      	b.n	8009f7c <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8009fb6:	f06f 0503 	mvn.w	r5, #3
 8009fba:	e7f3      	b.n	8009fa4 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009fbc:	f023 0303 	bic.w	r3, r3, #3
 8009fc0:	e7f7      	b.n	8009fb2 <tcp_send_empty_ack+0x5a>
	...

08009fc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009fc8:	7d03      	ldrb	r3, [r0, #20]
 8009fca:	2b01      	cmp	r3, #1
{
 8009fcc:	b087      	sub	sp, #28
 8009fce:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009fd0:	d106      	bne.n	8009fe0 <tcp_output+0x1c>
 8009fd2:	4ba5      	ldr	r3, [pc, #660]	; (800a268 <tcp_output+0x2a4>)
 8009fd4:	49a5      	ldr	r1, [pc, #660]	; (800a26c <tcp_output+0x2a8>)
 8009fd6:	48a6      	ldr	r0, [pc, #664]	; (800a270 <tcp_output+0x2ac>)
 8009fd8:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009fdc:	f001 fcbd 	bl	800b95a <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009fe0:	4ba4      	ldr	r3, [pc, #656]	; (800a274 <tcp_output+0x2b0>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	429c      	cmp	r4, r3
 8009fe6:	d052      	beq.n	800a08e <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009fe8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009fec:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8009ff0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009ff2:	429f      	cmp	r7, r3
 8009ff4:	bf28      	it	cs
 8009ff6:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009ff8:	7ea3      	ldrb	r3, [r4, #26]
 8009ffa:	0799      	lsls	r1, r3, #30
 8009ffc:	d510      	bpl.n	800a020 <tcp_output+0x5c>
 8009ffe:	b92d      	cbnz	r5, 800a00c <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800a000:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800a002:	b007      	add	sp, #28
 800a004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800a008:	f7ff bfa6 	b.w	8009f58 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a00c:	68eb      	ldr	r3, [r5, #12]
 800a00e:	6858      	ldr	r0, [r3, #4]
 800a010:	f7fb f865 	bl	80050de <lwip_htonl>
 800a014:	892b      	ldrh	r3, [r5, #8]
 800a016:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	4418      	add	r0, r3
     (seg == NULL ||
 800a01c:	4287      	cmp	r7, r0
 800a01e:	d3ef      	bcc.n	800a000 <tcp_output+0x3c>
  useg = pcb->unacked;
 800a020:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800a022:	2e00      	cmp	r6, #0
 800a024:	d136      	bne.n	800a094 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a026:	f104 0804 	add.w	r8, r4, #4
 800a02a:	4640      	mov	r0, r8
 800a02c:	f7fb fcea 	bl	8005a04 <ip4_route>
  if (netif == NULL) {
 800a030:	4681      	mov	r9, r0
 800a032:	2800      	cmp	r0, #0
 800a034:	f000 813c 	beq.w	800a2b0 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a038:	b10c      	cbz	r4, 800a03e <tcp_output+0x7a>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	b913      	cbnz	r3, 800a044 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a03e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a042:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 800a044:	b1d5      	cbz	r5, 800a07c <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a046:	68eb      	ldr	r3, [r5, #12]
 800a048:	6858      	ldr	r0, [r3, #4]
 800a04a:	f7fb f848 	bl	80050de <lwip_htonl>
 800a04e:	892b      	ldrh	r3, [r5, #8]
 800a050:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	4418      	add	r0, r3
  if (seg != NULL &&
 800a056:	4287      	cmp	r7, r0
 800a058:	d26f      	bcs.n	800a13a <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a05a:	2f00      	cmp	r7, #0
 800a05c:	d06d      	beq.n	800a13a <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a05e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800a062:	429f      	cmp	r7, r3
 800a064:	d169      	bne.n	800a13a <tcp_output+0x176>
 800a066:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d166      	bne.n	800a13a <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 800a06c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a070:	b923      	cbnz	r3, 800a07c <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800a072:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 800a076:	2301      	movs	r3, #1
 800a078:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800a07c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a07e:	b913      	cbnz	r3, 800a086 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800a086:	7ea3      	ldrb	r3, [r4, #26]
 800a088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a08c:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800a08e:	2000      	movs	r0, #0
 800a090:	e0e6      	b.n	800a260 <tcp_output+0x29c>
 800a092:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800a094:	6833      	ldr	r3, [r6, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1fb      	bne.n	800a092 <tcp_output+0xce>
 800a09a:	e7c4      	b.n	800a026 <tcp_output+0x62>
    pcb->unsent = seg->next;
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a0a0:	7d23      	ldrb	r3, [r4, #20]
 800a0a2:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a0a4:	bf1e      	ittt	ne
 800a0a6:	7ea3      	ldrbne	r3, [r4, #26]
 800a0a8:	f023 0303 	bicne.w	r3, r3, #3
 800a0ac:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a0ae:	68eb      	ldr	r3, [r5, #12]
 800a0b0:	6858      	ldr	r0, [r3, #4]
 800a0b2:	f7fb f814 	bl	80050de <lwip_htonl>
 800a0b6:	68e9      	ldr	r1, [r5, #12]
 800a0b8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a0bc:	4683      	mov	fp, r0
 800a0be:	8988      	ldrh	r0, [r1, #12]
 800a0c0:	f7fb f80a 	bl	80050d8 <lwip_htons>
 800a0c4:	f010 0003 	ands.w	r0, r0, #3
 800a0c8:	eb0b 030a 	add.w	r3, fp, sl
 800a0cc:	bf18      	it	ne
 800a0ce:	2001      	movne	r0, #1
 800a0d0:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a0d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a0d4:	68ea      	ldr	r2, [r5, #12]
 800a0d6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a0da:	1a1b      	subs	r3, r3, r0
 800a0dc:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800a0de:	bfb8      	it	lt
 800a0e0:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a0e2:	8990      	ldrh	r0, [r2, #12]
 800a0e4:	f7fa fff8 	bl	80050d8 <lwip_htons>
 800a0e8:	f010 0003 	ands.w	r0, r0, #3
 800a0ec:	bf18      	it	ne
 800a0ee:	2001      	movne	r0, #1
 800a0f0:	eb10 0f0a 	cmn.w	r0, sl
 800a0f4:	f000 80d8 	beq.w	800a2a8 <tcp_output+0x2e4>
      seg->next = NULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800a0fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a0fe:	b913      	cbnz	r3, 800a106 <tcp_output+0x142>
        pcb->unacked = seg;
 800a100:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800a102:	462e      	mov	r6, r5
 800a104:	e016      	b.n	800a134 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a106:	68eb      	ldr	r3, [r5, #12]
 800a108:	6858      	ldr	r0, [r3, #4]
 800a10a:	f7fa ffe8 	bl	80050de <lwip_htonl>
 800a10e:	68f2      	ldr	r2, [r6, #12]
 800a110:	4682      	mov	sl, r0
 800a112:	6850      	ldr	r0, [r2, #4]
 800a114:	f7fa ffe3 	bl	80050de <lwip_htonl>
 800a118:	ebaa 0000 	sub.w	r0, sl, r0
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f280 80c1 	bge.w	800a2a4 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a122:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	2a00      	cmp	r2, #0
 800a12a:	f040 80a9 	bne.w	800a280 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800a132:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800a134:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 800a136:	2d00      	cmp	r5, #0
 800a138:	d0a2      	beq.n	800a080 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a13a:	68eb      	ldr	r3, [r5, #12]
 800a13c:	6858      	ldr	r0, [r3, #4]
 800a13e:	f7fa ffce 	bl	80050de <lwip_htonl>
 800a142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a144:	1ac0      	subs	r0, r0, r3
 800a146:	892b      	ldrh	r3, [r5, #8]
 800a148:	4418      	add	r0, r3
  while (seg != NULL &&
 800a14a:	4287      	cmp	r7, r0
 800a14c:	d396      	bcc.n	800a07c <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800a14e:	68eb      	ldr	r3, [r5, #12]
 800a150:	8998      	ldrh	r0, [r3, #12]
 800a152:	f7fa ffc1 	bl	80050d8 <lwip_htons>
 800a156:	0742      	lsls	r2, r0, #29
 800a158:	d506      	bpl.n	800a168 <tcp_output+0x1a4>
 800a15a:	4b43      	ldr	r3, [pc, #268]	; (800a268 <tcp_output+0x2a4>)
 800a15c:	4946      	ldr	r1, [pc, #280]	; (800a278 <tcp_output+0x2b4>)
 800a15e:	4844      	ldr	r0, [pc, #272]	; (800a270 <tcp_output+0x2ac>)
 800a160:	f240 4246 	movw	r2, #1094	; 0x446
 800a164:	f001 fbf9 	bl	800b95a <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a168:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a16a:	b19b      	cbz	r3, 800a194 <tcp_output+0x1d0>
 800a16c:	7ea2      	ldrb	r2, [r4, #26]
 800a16e:	f012 0f44 	tst.w	r2, #68	; 0x44
 800a172:	d10f      	bne.n	800a194 <tcp_output+0x1d0>
 800a174:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a176:	b12b      	cbz	r3, 800a184 <tcp_output+0x1c0>
 800a178:	6819      	ldr	r1, [r3, #0]
 800a17a:	b959      	cbnz	r1, 800a194 <tcp_output+0x1d0>
 800a17c:	8919      	ldrh	r1, [r3, #8]
 800a17e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a180:	4299      	cmp	r1, r3
 800a182:	d207      	bcs.n	800a194 <tcp_output+0x1d0>
 800a184:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a188:	b123      	cbz	r3, 800a194 <tcp_output+0x1d0>
 800a18a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a18e:	2b08      	cmp	r3, #8
 800a190:	f240 8091 	bls.w	800a2b6 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 800a194:	7d23      	ldrb	r3, [r4, #20]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d00a      	beq.n	800a1b0 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a19a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a19e:	2010      	movs	r0, #16
 800a1a0:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800a1a4:	f7fa ff98 	bl	80050d8 <lwip_htons>
 800a1a8:	ea4b 0000 	orr.w	r0, fp, r0
 800a1ac:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a1b0:	686b      	ldr	r3, [r5, #4]
 800a1b2:	89db      	ldrh	r3, [r3, #14]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	f47f af71 	bne.w	800a09c <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a1ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1bc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a1c0:	f7fa ff8d 	bl	80050de <lwip_htonl>
 800a1c4:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a1c8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800a1ca:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a1ce:	f7fa ff83 	bl	80050d8 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a1d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a1d6:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a1da:	4413      	add	r3, r2
 800a1dc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a1de:	7aab      	ldrb	r3, [r5, #10]
 800a1e0:	07db      	lsls	r3, r3, #31
 800a1e2:	d50c      	bpl.n	800a1fe <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a1e4:	4641      	mov	r1, r8
 800a1e6:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a1ea:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a1ee:	f7fd ff47 	bl	8008080 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a1f2:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a1f6:	f7fa ff72 	bl	80050de <lwip_htonl>
 800a1fa:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a1fe:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a202:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800a204:	bfbc      	itt	lt
 800a206:	2300      	movlt	r3, #0
 800a208:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a20c:	b93b      	cbnz	r3, 800a21e <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800a20e:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <tcp_output+0x2b8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a214:	68eb      	ldr	r3, [r5, #12]
 800a216:	6858      	ldr	r0, [r3, #4]
 800a218:	f7fa ff61 	bl	80050de <lwip_htonl>
 800a21c:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a21e:	6868      	ldr	r0, [r5, #4]
 800a220:	68ea      	ldr	r2, [r5, #12]
 800a222:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a224:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800a226:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800a22c:	1ac9      	subs	r1, r1, r3
 800a22e:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800a230:	8901      	ldrh	r1, [r0, #8]
 800a232:	1acb      	subs	r3, r1, r3
 800a234:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	7413      	strb	r3, [r2, #16]
 800a23a:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a23c:	2206      	movs	r2, #6
 800a23e:	9201      	str	r2, [sp, #4]
 800a240:	7a62      	ldrb	r2, [r4, #9]
 800a242:	9200      	str	r2, [sp, #0]
 800a244:	7aa3      	ldrb	r3, [r4, #10]
 800a246:	f8cd 9008 	str.w	r9, [sp, #8]
 800a24a:	4642      	mov	r2, r8
 800a24c:	4621      	mov	r1, r4
 800a24e:	f7fb fd3f 	bl	8005cd0 <ip4_output_if>
    if (err != ERR_OK) {
 800a252:	2800      	cmp	r0, #0
 800a254:	f43f af22 	beq.w	800a09c <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 800a258:	7ea3      	ldrb	r3, [r4, #26]
 800a25a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a25e:	76a3      	strb	r3, [r4, #26]
}
 800a260:	b007      	add	sp, #28
 800a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a266:	bf00      	nop
 800a268:	0800dc0b 	.word	0x0800dc0b
 800a26c:	0800dba0 	.word	0x0800dba0
 800a270:	0800c0d7 	.word	0x0800c0d7
 800a274:	2000798c 	.word	0x2000798c
 800a278:	0800dbc6 	.word	0x0800dbc6
 800a27c:	2000797c 	.word	0x2000797c
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a280:	68d2      	ldr	r2, [r2, #12]
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	6850      	ldr	r0, [r2, #4]
 800a286:	f7fa ff2a 	bl	80050de <lwip_htonl>
 800a28a:	68e9      	ldr	r1, [r5, #12]
 800a28c:	4682      	mov	sl, r0
 800a28e:	6848      	ldr	r0, [r1, #4]
 800a290:	f7fa ff25 	bl	80050de <lwip_htonl>
 800a294:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800a298:	2800      	cmp	r0, #0
 800a29a:	9b05      	ldr	r3, [sp, #20]
 800a29c:	f6bf af47 	bge.w	800a12e <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	e740      	b.n	800a126 <tcp_output+0x162>
          useg->next = seg;
 800a2a4:	6035      	str	r5, [r6, #0]
 800a2a6:	e72c      	b.n	800a102 <tcp_output+0x13e>
      tcp_seg_free(seg);
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f7fd f945 	bl	8007538 <tcp_seg_free>
 800a2ae:	e741      	b.n	800a134 <tcp_output+0x170>
    return ERR_RTE;
 800a2b0:	f06f 0003 	mvn.w	r0, #3
 800a2b4:	e7d4      	b.n	800a260 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a2b6:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800a2ba:	f47f af6b 	bne.w	800a194 <tcp_output+0x1d0>
 800a2be:	e6dd      	b.n	800a07c <tcp_output+0xb8>

0800a2c0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	b085      	sub	sp, #20
 800a2c6:	4681      	mov	r9, r0
 800a2c8:	460e      	mov	r6, r1
 800a2ca:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a2cc:	2114      	movs	r1, #20
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2001      	movs	r0, #1
{
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800a2d8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a2dc:	f7fc fde4 	bl	8006ea8 <pbuf_alloc>
  if (p == NULL) {
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d03c      	beq.n	800a360 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a2e6:	8943      	ldrh	r3, [r0, #10]
 800a2e8:	2b13      	cmp	r3, #19
 800a2ea:	d806      	bhi.n	800a2fa <tcp_rst+0x3a>
 800a2ec:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <tcp_rst+0xa8>)
 800a2ee:	491f      	ldr	r1, [pc, #124]	; (800a36c <tcp_rst+0xac>)
 800a2f0:	481f      	ldr	r0, [pc, #124]	; (800a370 <tcp_rst+0xb0>)
 800a2f2:	f240 524d 	movw	r2, #1357	; 0x54d
 800a2f6:	f001 fb30 	bl	800b95a <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 800a2fa:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 800a2fc:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800a2fe:	f7fa feeb 	bl	80050d8 <lwip_htons>
 800a302:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a304:	4650      	mov	r0, sl
 800a306:	f7fa fee7 	bl	80050d8 <lwip_htons>
 800a30a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a30c:	4648      	mov	r0, r9
 800a30e:	f7fa fee6 	bl	80050de <lwip_htonl>
 800a312:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a314:	4630      	mov	r0, r6
 800a316:	f7fa fee2 	bl	80050de <lwip_htonl>
 800a31a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a31c:	f245 0014 	movw	r0, #20500	; 0x5014
 800a320:	f7fa feda 	bl	80050d8 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a324:	2308      	movs	r3, #8
 800a326:	2600      	movs	r6, #0
 800a328:	73a3      	strb	r3, [r4, #14]
 800a32a:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a32c:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a32e:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800a330:	7426      	strb	r6, [r4, #16]
 800a332:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800a334:	74a6      	strb	r6, [r4, #18]
 800a336:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a338:	4638      	mov	r0, r7
 800a33a:	f7fb fb63 	bl	8005a04 <ip4_route>
  if (netif != NULL) {
 800a33e:	b148      	cbz	r0, 800a354 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a340:	2306      	movs	r3, #6
 800a342:	9002      	str	r0, [sp, #8]
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	9600      	str	r6, [sp, #0]
 800a348:	23ff      	movs	r3, #255	; 0xff
 800a34a:	463a      	mov	r2, r7
 800a34c:	4641      	mov	r1, r8
 800a34e:	4628      	mov	r0, r5
 800a350:	f7fb fcbe 	bl	8005cd0 <ip4_output_if>
  }
  pbuf_free(p);
 800a354:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a356:	b005      	add	sp, #20
 800a358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a35c:	f7fc bd3a 	b.w	8006dd4 <pbuf_free>
}
 800a360:	b005      	add	sp, #20
 800a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a366:	bf00      	nop
 800a368:	0800dc0b 	.word	0x0800dc0b
 800a36c:	0800dbdd 	.word	0x0800dbdd
 800a370:	0800c0d7 	.word	0x0800c0d7

0800a374 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a374:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800a376:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800a378:	b1aa      	cbz	r2, 800a3a6 <tcp_rexmit_rto+0x32>
 800a37a:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a37c:	680b      	ldr	r3, [r1, #0]
 800a37e:	b983      	cbnz	r3, 800a3a2 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a380:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800a382:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a384:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a386:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800a38a:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800a38c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800a38e:	bf1c      	itt	ne
 800a390:	3301      	addne	r3, #1
 800a392:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800a39a:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800a39e:	f7ff be11 	b.w	8009fc4 <tcp_output>
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	e7ea      	b.n	800a37c <tcp_rexmit_rto+0x8>
}
 800a3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a3ae:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800a3b0:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800a3b2:	b1ad      	cbz	r5, 800a3e0 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a3b8:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 800a3bc:	6833      	ldr	r3, [r6, #0]
 800a3be:	b983      	cbnz	r3, 800a3e2 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800a3c0:	6833      	ldr	r3, [r6, #0]
 800a3c2:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800a3c4:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a3ca:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a3ce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a3d2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800a3d4:	bf1c      	itt	ne
 800a3d6:	3301      	addne	r3, #1
 800a3d8:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	6858      	ldr	r0, [r3, #4]
 800a3e6:	f7fa fe7a 	bl	80050de <lwip_htonl>
 800a3ea:	68eb      	ldr	r3, [r5, #12]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	6858      	ldr	r0, [r3, #4]
 800a3f0:	f7fa fe75 	bl	80050de <lwip_htonl>
 800a3f4:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	dae2      	bge.n	800a3c0 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800a3fa:	6836      	ldr	r6, [r6, #0]
 800a3fc:	e7de      	b.n	800a3bc <tcp_rexmit+0x10>

0800a3fe <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a3fe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800a400:	b510      	push	{r4, lr}
 800a402:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a404:	b30b      	cbz	r3, 800a44a <tcp_rexmit_fast+0x4c>
 800a406:	7e83      	ldrb	r3, [r0, #26]
 800a408:	075b      	lsls	r3, r3, #29
 800a40a:	d41e      	bmi.n	800a44a <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a40c:	f7ff ffce 	bl	800a3ac <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a410:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800a414:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a418:	4293      	cmp	r3, r2
 800a41a:	bf38      	it	cc
 800a41c:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a41e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a420:	bf28      	it	cs
 800a422:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a424:	0059      	lsls	r1, r3, #1
 800a426:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a428:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a42c:	bf38      	it	cc
 800a42e:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a432:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a436:	440b      	add	r3, r1
 800a438:	4413      	add	r3, r2
 800a43a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a43e:	7ea3      	ldrb	r3, [r4, #26]
 800a440:	f043 0304 	orr.w	r3, r3, #4
 800a444:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	8623      	strh	r3, [r4, #48]	; 0x30
 800a44a:	bd10      	pop	{r4, pc}

0800a44c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a44c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a44e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a450:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a452:	3801      	subs	r0, #1
 800a454:	f7fa fe43 	bl	80050de <lwip_htonl>
 800a458:	2100      	movs	r1, #0
 800a45a:	4602      	mov	r2, r0
 800a45c:	4620      	mov	r0, r4
 800a45e:	f7ff f9ef 	bl	8009840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a462:	4605      	mov	r5, r0
 800a464:	b1c8      	cbz	r0, 800a49a <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a466:	1d26      	adds	r6, r4, #4
 800a468:	4630      	mov	r0, r6
 800a46a:	f7fb facb 	bl	8005a04 <ip4_route>
  if (netif == NULL) {
 800a46e:	b188      	cbz	r0, 800a494 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a470:	2100      	movs	r1, #0
 800a472:	2206      	movs	r2, #6
 800a474:	7aa3      	ldrb	r3, [r4, #10]
 800a476:	9002      	str	r0, [sp, #8]
 800a478:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a47c:	4628      	mov	r0, r5
 800a47e:	4621      	mov	r1, r4
 800a480:	4632      	mov	r2, r6
 800a482:	f7fb fc25 	bl	8005cd0 <ip4_output_if>
 800a486:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a488:	4628      	mov	r0, r5
 800a48a:	f7fc fca3 	bl	8006dd4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a48e:	4620      	mov	r0, r4
 800a490:	b004      	add	sp, #16
 800a492:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800a494:	f06f 0403 	mvn.w	r4, #3
 800a498:	e7f6      	b.n	800a488 <tcp_keepalive+0x3c>
    return ERR_MEM;
 800a49a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a49e:	e7f6      	b.n	800a48e <tcp_keepalive+0x42>

0800a4a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a4a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a4a4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800a4a6:	4606      	mov	r6, r0

  if (seg == NULL) {
 800a4a8:	b914      	cbnz	r4, 800a4b0 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800a4aa:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800a4ac:	2c00      	cmp	r4, #0
 800a4ae:	d042      	beq.n	800a536 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a4b0:	68e3      	ldr	r3, [r4, #12]
 800a4b2:	8998      	ldrh	r0, [r3, #12]
 800a4b4:	f7fa fe10 	bl	80050d8 <lwip_htons>
 800a4b8:	f010 0501 	ands.w	r5, r0, #1
 800a4bc:	bf18      	it	ne
 800a4be:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a4c0:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a4c2:	bf1c      	itt	ne
 800a4c4:	fab5 f585 	clzne	r5, r5
 800a4c8:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	f085 0101 	eor.w	r1, r5, #1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff f9b5 	bl	8009840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d03e      	beq.n	800a55a <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a4dc:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a4e0:	b36d      	cbz	r5, 800a53e <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a4e2:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800a4e6:	2011      	movs	r0, #17
 800a4e8:	f7fa fdf6 	bl	80050d8 <lwip_htons>
 800a4ec:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a4f0:	b2ad      	uxth	r5, r5
 800a4f2:	4328      	orrs	r0, r5
 800a4f4:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a4f8:	68e3      	ldr	r3, [r4, #12]
 800a4fa:	6858      	ldr	r0, [r3, #4]
 800a4fc:	f7fa fdef 	bl	80050de <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a500:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a502:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a504:	1a1b      	subs	r3, r3, r0
 800a506:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a508:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 800a50c:	bfb8      	it	lt
 800a50e:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a510:	4620      	mov	r0, r4
 800a512:	f7fb fa77 	bl	8005a04 <ip4_route>
  if (netif == NULL) {
 800a516:	b1e8      	cbz	r0, 800a554 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a518:	2100      	movs	r1, #0
 800a51a:	2206      	movs	r2, #6
 800a51c:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a520:	9002      	str	r0, [sp, #8]
 800a522:	4622      	mov	r2, r4
 800a524:	7ab3      	ldrb	r3, [r6, #10]
 800a526:	4631      	mov	r1, r6
 800a528:	4638      	mov	r0, r7
 800a52a:	f7fb fbd1 	bl	8005cd0 <ip4_output_if>
 800a52e:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a530:	4638      	mov	r0, r7
 800a532:	f7fc fc4f 	bl	8006dd4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a536:	4620      	mov	r0, r4
 800a538:	b004      	add	sp, #16
 800a53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a53e:	6860      	ldr	r0, [r4, #4]
 800a540:	8922      	ldrh	r2, [r4, #8]
 800a542:	8903      	ldrh	r3, [r0, #8]
 800a544:	1a9b      	subs	r3, r3, r2
 800a546:	b29b      	uxth	r3, r3
 800a548:	2201      	movs	r2, #1
 800a54a:	f108 0114 	add.w	r1, r8, #20
 800a54e:	f7fc fee9 	bl	8007324 <pbuf_copy_partial>
 800a552:	e7d1      	b.n	800a4f8 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800a554:	f06f 0403 	mvn.w	r4, #3
 800a558:	e7ea      	b.n	800a530 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 800a55a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a55e:	e7ea      	b.n	800a536 <tcp_zero_window_probe+0x96>

0800a560 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a564:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a566:	200a      	movs	r0, #10
{
 800a568:	460f      	mov	r7, r1
 800a56a:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a56c:	f7fc fa90 	bl	8006a90 <memp_malloc>
  if (timeout == NULL) {
 800a570:	4604      	mov	r4, r0
 800a572:	b938      	cbnz	r0, 800a584 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a574:	4b1e      	ldr	r3, [pc, #120]	; (800a5f0 <sys_timeout+0x90>)
 800a576:	491f      	ldr	r1, [pc, #124]	; (800a5f4 <sys_timeout+0x94>)
 800a578:	481f      	ldr	r0, [pc, #124]	; (800a5f8 <sys_timeout+0x98>)
 800a57a:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 800a57c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a580:	f001 b9eb 	b.w	800b95a <iprintf>
  now = sys_now();
 800a584:	f000 feb8 	bl	800b2f8 <sys_now>
  if (next_timeout == NULL) {
 800a588:	4a1c      	ldr	r2, [pc, #112]	; (800a5fc <sys_timeout+0x9c>)
 800a58a:	491d      	ldr	r1, [pc, #116]	; (800a600 <sys_timeout+0xa0>)
 800a58c:	6813      	ldr	r3, [r2, #0]
 800a58e:	b95b      	cbnz	r3, 800a5a8 <sys_timeout+0x48>
    timeouts_last_time = now;
 800a590:	6008      	str	r0, [r1, #0]
    diff = 0;
 800a592:	4618      	mov	r0, r3
  timeout->next = NULL;
 800a594:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800a596:	4428      	add	r0, r5
  timeout->next = NULL;
 800a598:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 800a59a:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 800a59c:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800a59e:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800a5a0:	b92b      	cbnz	r3, 800a5ae <sys_timeout+0x4e>
    next_timeout = timeout;
 800a5a2:	6014      	str	r4, [r2, #0]
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800a5a8:	6809      	ldr	r1, [r1, #0]
 800a5aa:	1a40      	subs	r0, r0, r1
 800a5ac:	e7f2      	b.n	800a594 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800a5ae:	6859      	ldr	r1, [r3, #4]
 800a5b0:	428d      	cmp	r5, r1
 800a5b2:	d217      	bcs.n	800a5e4 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800a5b4:	1b4d      	subs	r5, r1, r5
 800a5b6:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	e7f2      	b.n	800a5a2 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 800a5bc:	684e      	ldr	r6, [r1, #4]
 800a5be:	42b2      	cmp	r2, r6
 800a5c0:	d312      	bcc.n	800a5e8 <sys_timeout+0x88>
 800a5c2:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800a5c4:	6841      	ldr	r1, [r0, #4]
 800a5c6:	6862      	ldr	r2, [r4, #4]
 800a5c8:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800a5ca:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800a5cc:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a5ce:	2900      	cmp	r1, #0
 800a5d0:	d1f4      	bne.n	800a5bc <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800a5d2:	4295      	cmp	r5, r2
 800a5d4:	d202      	bcs.n	800a5dc <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	441d      	add	r5, r3
 800a5da:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800a5dc:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800a5de:	6004      	str	r4, [r0, #0]
        break;
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	e7ed      	b.n	800a5c4 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 800a5e8:	1ab2      	subs	r2, r6, r2
 800a5ea:	604a      	str	r2, [r1, #4]
 800a5ec:	e7f6      	b.n	800a5dc <sys_timeout+0x7c>
 800a5ee:	bf00      	nop
 800a5f0:	0800de9c 	.word	0x0800de9c
 800a5f4:	0800ded0 	.word	0x0800ded0
 800a5f8:	0800c0d7 	.word	0x0800c0d7
 800a5fc:	20003fc0 	.word	0x20003fc0
 800a600:	20003fc8 	.word	0x20003fc8

0800a604 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a604:	4b08      	ldr	r3, [pc, #32]	; (800a628 <tcp_timer_needed+0x24>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	b962      	cbnz	r2, 800a624 <tcp_timer_needed+0x20>
 800a60a:	4a08      	ldr	r2, [pc, #32]	; (800a62c <tcp_timer_needed+0x28>)
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	b912      	cbnz	r2, 800a616 <tcp_timer_needed+0x12>
 800a610:	4a07      	ldr	r2, [pc, #28]	; (800a630 <tcp_timer_needed+0x2c>)
 800a612:	6812      	ldr	r2, [r2, #0]
 800a614:	b132      	cbz	r2, 800a624 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a616:	2201      	movs	r2, #1
 800a618:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a61a:	4906      	ldr	r1, [pc, #24]	; (800a634 <tcp_timer_needed+0x30>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	20fa      	movs	r0, #250	; 0xfa
 800a620:	f7ff bf9e 	b.w	800a560 <sys_timeout>
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	20003fc4 	.word	0x20003fc4
 800a62c:	20007978 	.word	0x20007978
 800a630:	20007988 	.word	0x20007988
 800a634:	0800a639 	.word	0x0800a639

0800a638 <tcpip_tcp_timer>:
{
 800a638:	b508      	push	{r3, lr}
  tcp_tmr();
 800a63a:	f7fd fb99 	bl	8007d70 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a63e:	4b08      	ldr	r3, [pc, #32]	; (800a660 <tcpip_tcp_timer+0x28>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	b913      	cbnz	r3, 800a64a <tcpip_tcp_timer+0x12>
 800a644:	4b07      	ldr	r3, [pc, #28]	; (800a664 <tcpip_tcp_timer+0x2c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	b133      	cbz	r3, 800a658 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a64a:	2200      	movs	r2, #0
 800a64c:	4906      	ldr	r1, [pc, #24]	; (800a668 <tcpip_tcp_timer+0x30>)
 800a64e:	20fa      	movs	r0, #250	; 0xfa
}
 800a650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a654:	f7ff bf84 	b.w	800a560 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800a658:	4a04      	ldr	r2, [pc, #16]	; (800a66c <tcpip_tcp_timer+0x34>)
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	bd08      	pop	{r3, pc}
 800a65e:	bf00      	nop
 800a660:	20007978 	.word	0x20007978
 800a664:	20007988 	.word	0x20007988
 800a668:	0800a639 	.word	0x0800a639
 800a66c:	20003fc4 	.word	0x20003fc4

0800a670 <sys_timeouts_init>:
{
 800a670:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a672:	4d0a      	ldr	r5, [pc, #40]	; (800a69c <sys_timeouts_init+0x2c>)
 800a674:	4c0a      	ldr	r4, [pc, #40]	; (800a6a0 <sys_timeouts_init+0x30>)
 800a676:	f105 0208 	add.w	r2, r5, #8
 800a67a:	4621      	mov	r1, r4
 800a67c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a680:	f7ff ff6e 	bl	800a560 <sys_timeout>
 800a684:	f105 0210 	add.w	r2, r5, #16
 800a688:	4621      	mov	r1, r4
 800a68a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a68e:	f7ff ff67 	bl	800a560 <sys_timeout>
  timeouts_last_time = sys_now();
 800a692:	f000 fe31 	bl	800b2f8 <sys_now>
 800a696:	4b03      	ldr	r3, [pc, #12]	; (800a6a4 <sys_timeouts_init+0x34>)
 800a698:	6018      	str	r0, [r3, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	0800de84 	.word	0x0800de84
 800a6a0:	0800a6a9 	.word	0x0800a6a9
 800a6a4:	20003fc8 	.word	0x20003fc8

0800a6a8 <cyclic_timer>:
{
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	4604      	mov	r4, r0
  cyclic->handler();
 800a6ac:	6843      	ldr	r3, [r0, #4]
 800a6ae:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	6820      	ldr	r0, [r4, #0]
 800a6b4:	4902      	ldr	r1, [pc, #8]	; (800a6c0 <cyclic_timer+0x18>)
}
 800a6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a6ba:	f7ff bf51 	b.w	800a560 <sys_timeout>
 800a6be:	bf00      	nop
 800a6c0:	0800a6a9 	.word	0x0800a6a9

0800a6c4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800a6c8:	4d24      	ldr	r5, [pc, #144]	; (800a75c <sys_timeouts_mbox_fetch+0x98>)
  diff = sys_now() - timeouts_last_time;
 800a6ca:	4c25      	ldr	r4, [pc, #148]	; (800a760 <sys_timeouts_mbox_fetch+0x9c>)
{
 800a6cc:	4681      	mov	r9, r0
 800a6ce:	468a      	mov	sl, r1
 800a6d0:	462e      	mov	r6, r5
  if (!next_timeout) {
 800a6d2:	682a      	ldr	r2, [r5, #0]
 800a6d4:	b932      	cbnz	r2, 800a6e4 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a6d6:	4651      	mov	r1, sl
 800a6d8:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800a6da:	b003      	add	sp, #12
 800a6dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a6e0:	f000 bafe 	b.w	800ace0 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 800a6e4:	f000 fe08 	bl	800b2f8 <sys_now>
 800a6e8:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 800a6ea:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 800a6ec:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	4290      	cmp	r0, r2
 800a6f2:	d928      	bls.n	800a746 <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0eb      	beq.n	800a6d2 <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 800a6fa:	f000 fdfd 	bl	800b2f8 <sys_now>
    diff = now - timeouts_last_time;
 800a6fe:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 800a700:	4f18      	ldr	r7, [pc, #96]	; (800a764 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 800a702:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 800a706:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a708:	2900      	cmp	r1, #0
 800a70a:	d0e2      	beq.n	800a6d2 <sys_timeouts_mbox_fetch+0xe>
 800a70c:	684a      	ldr	r2, [r1, #4]
 800a70e:	455a      	cmp	r2, fp
 800a710:	d8df      	bhi.n	800a6d2 <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 800a712:	6820      	ldr	r0, [r4, #0]
        handler = tmptimeout->h;
 800a714:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 800a718:	68cb      	ldr	r3, [r1, #12]
 800a71a:	9301      	str	r3, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 800a71c:	4410      	add	r0, r2
 800a71e:	6020      	str	r0, [r4, #0]
        diff -= tmptimeout->time;
 800a720:	ebab 0b02 	sub.w	fp, fp, r2
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a724:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800a726:	680a      	ldr	r2, [r1, #0]
 800a728:	6032      	str	r2, [r6, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a72a:	f7fc f9cd 	bl	8006ac8 <memp_free>
        if (handler != NULL) {
 800a72e:	f1b8 0f00 	cmp.w	r8, #0
 800a732:	d0e8      	beq.n	800a706 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 800a734:	4638      	mov	r0, r7
 800a736:	f000 fb6a 	bl	800ae0e <sys_mutex_lock>
          handler(arg);
 800a73a:	9801      	ldr	r0, [sp, #4]
 800a73c:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 800a73e:	4638      	mov	r0, r7
 800a740:	f000 fb6a 	bl	800ae18 <sys_mutex_unlock>
 800a744:	e7df      	b.n	800a706 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800a746:	1a12      	subs	r2, r2, r0
 800a748:	d0d4      	beq.n	800a6f4 <sys_timeouts_mbox_fetch+0x30>
 800a74a:	4651      	mov	r1, sl
 800a74c:	4648      	mov	r0, r9
 800a74e:	f000 fac7 	bl	800ace0 <sys_arch_mbox_fetch>
 800a752:	3001      	adds	r0, #1
 800a754:	d0ce      	beq.n	800a6f4 <sys_timeouts_mbox_fetch+0x30>
}
 800a756:	b003      	add	sp, #12
 800a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75c:	20003fc0 	.word	0x20003fc0
 800a760:	20003fc8 	.word	0x20003fc8
 800a764:	20004270 	.word	0x20004270

0800a768 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a768:	4770      	bx	lr
	...

0800a76c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a770:	8943      	ldrh	r3, [r0, #10]
 800a772:	2b07      	cmp	r3, #7
{
 800a774:	b085      	sub	sp, #20
 800a776:	4605      	mov	r5, r0
 800a778:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800a77a:	d805      	bhi.n	800a788 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a77c:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a77e:	b005      	add	sp, #20
 800a780:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800a784:	f7fc bb26 	b.w	8006dd4 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a788:	4e3e      	ldr	r6, [pc, #248]	; (800a884 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800a78a:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a78c:	6831      	ldr	r1, [r6, #0]
 800a78e:	6970      	ldr	r0, [r6, #20]
 800a790:	f7fb faaf 	bl	8005cf2 <ip4_addr_isbroadcast_u32>
 800a794:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800a796:	8820      	ldrh	r0, [r4, #0]
 800a798:	f7fa fc9e 	bl	80050d8 <lwip_htons>
 800a79c:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800a79e:	8860      	ldrh	r0, [r4, #2]
 800a7a0:	f7fa fc9a 	bl	80050d8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7a4:	4a38      	ldr	r2, [pc, #224]	; (800a888 <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a7a6:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a7a8:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800a7ac:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800a7ae:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7b0:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 800a7b2:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7b4:	4603      	mov	r3, r0
  prev = NULL;
 800a7b6:	46a4      	mov	ip, r4
 800a7b8:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7ba:	b92b      	cbnz	r3, 800a7c8 <udp_input+0x5c>
  if (pcb != NULL) {
 800a7bc:	bb0c      	cbnz	r4, 800a802 <udp_input+0x96>
  if (for_us) {
 800a7be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a7c2:	428b      	cmp	r3, r1
 800a7c4:	d1da      	bne.n	800a77c <udp_input+0x10>
 800a7c6:	e01c      	b.n	800a802 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800a7c8:	8a5a      	ldrh	r2, [r3, #18]
 800a7ca:	4552      	cmp	r2, sl
 800a7cc:	d12b      	bne.n	800a826 <udp_input+0xba>
 800a7ce:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800a7d0:	b32f      	cbz	r7, 800a81e <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a7d2:	b13a      	cbz	r2, 800a7e4 <udp_input+0x78>
 800a7d4:	1c4e      	adds	r6, r1, #1
 800a7d6:	d005      	beq.n	800a7e4 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a7d8:	404a      	eors	r2, r1
 800a7da:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a7dc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a7e0:	4216      	tst	r6, r2
 800a7e2:	d120      	bne.n	800a826 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a7e4:	7c1a      	ldrb	r2, [r3, #16]
 800a7e6:	0752      	lsls	r2, r2, #29
 800a7e8:	d402      	bmi.n	800a7f0 <udp_input+0x84>
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	bf08      	it	eq
 800a7ee:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800a7f0:	8a9a      	ldrh	r2, [r3, #20]
 800a7f2:	4542      	cmp	r2, r8
 800a7f4:	d117      	bne.n	800a826 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a7f6:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a7f8:	b9c2      	cbnz	r2, 800a82c <udp_input+0xc0>
        if (prev != NULL) {
 800a7fa:	f1bc 0f00 	cmp.w	ip, #0
 800a7fe:	d118      	bne.n	800a832 <udp_input+0xc6>
 800a800:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800a802:	f06f 0107 	mvn.w	r1, #7
 800a806:	4628      	mov	r0, r5
 800a808:	f7fc fade 	bl	8006dc8 <pbuf_header>
 800a80c:	b1c0      	cbz	r0, 800a840 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a80e:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <udp_input+0x120>)
 800a810:	491f      	ldr	r1, [pc, #124]	; (800a890 <udp_input+0x124>)
 800a812:	4820      	ldr	r0, [pc, #128]	; (800a894 <udp_input+0x128>)
 800a814:	f240 1255 	movw	r2, #341	; 0x155
 800a818:	f001 f89f 	bl	800b95a <iprintf>
 800a81c:	e7ae      	b.n	800a77c <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a81e:	2a00      	cmp	r2, #0
 800a820:	d0e0      	beq.n	800a7e4 <udp_input+0x78>
 800a822:	428a      	cmp	r2, r1
 800a824:	d0de      	beq.n	800a7e4 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a826:	469c      	mov	ip, r3
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	e7c6      	b.n	800a7ba <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a82c:	4572      	cmp	r2, lr
 800a82e:	d1fa      	bne.n	800a826 <udp_input+0xba>
 800a830:	e7e3      	b.n	800a7fa <udp_input+0x8e>
          prev->next = pcb->next;
 800a832:	68da      	ldr	r2, [r3, #12]
 800a834:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 800a838:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 800a83c:	60d8      	str	r0, [r3, #12]
 800a83e:	e7df      	b.n	800a800 <udp_input+0x94>
    if (pcb != NULL) {
 800a840:	b164      	cbz	r4, 800a85c <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800a842:	69a6      	ldr	r6, [r4, #24]
 800a844:	2e00      	cmp	r6, #0
 800a846:	d099      	beq.n	800a77c <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a848:	f8cd 8000 	str.w	r8, [sp]
 800a84c:	4b12      	ldr	r3, [pc, #72]	; (800a898 <udp_input+0x12c>)
 800a84e:	69e0      	ldr	r0, [r4, #28]
 800a850:	462a      	mov	r2, r5
 800a852:	4621      	mov	r1, r4
 800a854:	47b0      	blx	r6
}
 800a856:	b005      	add	sp, #20
 800a858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a85c:	2f00      	cmp	r7, #0
 800a85e:	d18d      	bne.n	800a77c <udp_input+0x10>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a868:	2be0      	cmp	r3, #224	; 0xe0
 800a86a:	d087      	beq.n	800a77c <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	8999      	ldrh	r1, [r3, #12]
 800a870:	3108      	adds	r1, #8
 800a872:	b209      	sxth	r1, r1
 800a874:	4628      	mov	r0, r5
 800a876:	f7fc faaa 	bl	8006dce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a87a:	2103      	movs	r1, #3
 800a87c:	4628      	mov	r0, r5
 800a87e:	f7fb f8b7 	bl	80059f0 <icmp_dest_unreach>
 800a882:	e77b      	b.n	800a77c <udp_input+0x10>
 800a884:	20004274 	.word	0x20004274
 800a888:	20007990 	.word	0x20007990
 800a88c:	0800df0d 	.word	0x0800df0d
 800a890:	0800df3c 	.word	0x0800df3c
 800a894:	0800c0d7 	.word	0x0800c0d7
 800a898:	20004284 	.word	0x20004284

0800a89c <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800a89c:	4b26      	ldr	r3, [pc, #152]	; (800a938 <udp_bind+0x9c>)
{
 800a89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	bf08      	it	eq
 800a8a6:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d040      	beq.n	800a92e <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8ac:	4e23      	ldr	r6, [pc, #140]	; (800a93c <udp_bind+0xa0>)
 800a8ae:	f8d6 e000 	ldr.w	lr, [r6]
 800a8b2:	4675      	mov	r5, lr
 800a8b4:	b96d      	cbnz	r5, 800a8d2 <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a8b6:	b192      	cbz	r2, 800a8de <udp_bind+0x42>
 800a8b8:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8ba:	b1fb      	cbz	r3, 800a8fc <udp_bind+0x60>
      if (pcb != ipcb) {
 800a8bc:	4283      	cmp	r3, r0
 800a8be:	d006      	beq.n	800a8ce <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a8c0:	8a5c      	ldrh	r4, [r3, #18]
 800a8c2:	4294      	cmp	r4, r2
 800a8c4:	d103      	bne.n	800a8ce <udp_bind+0x32>
 800a8c6:	681f      	ldr	r7, [r3, #0]
 800a8c8:	680c      	ldr	r4, [r1, #0]
 800a8ca:	42a7      	cmp	r7, r4
 800a8cc:	d029      	beq.n	800a922 <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	e7f3      	b.n	800a8ba <udp_bind+0x1e>
    if (pcb == ipcb) {
 800a8d2:	4285      	cmp	r5, r0
 800a8d4:	d001      	beq.n	800a8da <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8d6:	68ed      	ldr	r5, [r5, #12]
 800a8d8:	e7ec      	b.n	800a8b4 <udp_bind+0x18>
      rebind = 1;
 800a8da:	2501      	movs	r5, #1
 800a8dc:	e7eb      	b.n	800a8b6 <udp_bind+0x1a>
 800a8de:	4b18      	ldr	r3, [pc, #96]	; (800a940 <udp_bind+0xa4>)
 800a8e0:	881a      	ldrh	r2, [r3, #0]
  if (port == 0) {
 800a8e2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a8e6:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800a8ea:	4562      	cmp	r2, ip
 800a8ec:	bf1a      	itte	ne
 800a8ee:	3201      	addne	r2, #1
 800a8f0:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a8f2:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8f6:	4677      	mov	r7, lr
 800a8f8:	b957      	cbnz	r7, 800a910 <udp_bind+0x74>
 800a8fa:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a8fc:	680b      	ldr	r3, [r1, #0]
 800a8fe:	6003      	str	r3, [r0, #0]

  pcb->local_port = port;
 800a900:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a902:	b915      	cbnz	r5, 800a90a <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a904:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800a908:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a90a:	2000      	movs	r0, #0
 800a90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800a910:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800a914:	4590      	cmp	r8, r2
 800a916:	d108      	bne.n	800a92a <udp_bind+0x8e>
 800a918:	3c01      	subs	r4, #1
 800a91a:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a91c:	2c00      	cmp	r4, #0
 800a91e:	d1e4      	bne.n	800a8ea <udp_bind+0x4e>
 800a920:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800a922:	f06f 0007 	mvn.w	r0, #7
 800a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a92a:	68ff      	ldr	r7, [r7, #12]
 800a92c:	e7e4      	b.n	800a8f8 <udp_bind+0x5c>
    return ERR_VAL;
 800a92e:	f06f 0005 	mvn.w	r0, #5
}
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a936:	bf00      	nop
 800a938:	0800cb50 	.word	0x0800cb50
 800a93c:	20007990 	.word	0x20007990
 800a940:	2000000e 	.word	0x2000000e

0800a944 <udp_sendto_if_src>:
{
 800a944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a948:	460e      	mov	r6, r1
 800a94a:	b085      	sub	sp, #20
 800a94c:	4690      	mov	r8, r2
 800a94e:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800a950:	4607      	mov	r7, r0
 800a952:	2800      	cmp	r0, #0
 800a954:	d050      	beq.n	800a9f8 <udp_sendto_if_src+0xb4>
 800a956:	2a00      	cmp	r2, #0
 800a958:	d04e      	beq.n	800a9f8 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 800a95a:	8a42      	ldrh	r2, [r0, #18]
 800a95c:	2a00      	cmp	r2, #0
 800a95e:	d033      	beq.n	800a9c8 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 800a960:	2108      	movs	r1, #8
 800a962:	4630      	mov	r0, r6
 800a964:	f7fc fa30 	bl	8006dc8 <pbuf_header>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d137      	bne.n	800a9dc <udp_sendto_if_src+0x98>
 800a96c:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a96e:	8963      	ldrh	r3, [r4, #10]
 800a970:	2b07      	cmp	r3, #7
 800a972:	d806      	bhi.n	800a982 <udp_sendto_if_src+0x3e>
 800a974:	4b23      	ldr	r3, [pc, #140]	; (800aa04 <udp_sendto_if_src+0xc0>)
 800a976:	4924      	ldr	r1, [pc, #144]	; (800aa08 <udp_sendto_if_src+0xc4>)
 800a978:	4824      	ldr	r0, [pc, #144]	; (800aa0c <udp_sendto_if_src+0xc8>)
 800a97a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a97e:	f000 ffec 	bl	800b95a <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 800a982:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 800a984:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800a986:	f7fa fba7 	bl	80050d8 <lwip_htons>
 800a98a:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a98c:	4648      	mov	r0, r9
 800a98e:	f7fa fba3 	bl	80050d8 <lwip_htons>
  udphdr->chksum = 0x0000;
 800a992:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800a994:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 800a996:	71ab      	strb	r3, [r5, #6]
 800a998:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800a99a:	8920      	ldrh	r0, [r4, #8]
 800a99c:	f7fa fb9c 	bl	80050d8 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 800a9a2:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a9a4:	7abb      	ldrb	r3, [r7, #10]
 800a9a6:	9202      	str	r2, [sp, #8]
 800a9a8:	2211      	movs	r2, #17
 800a9aa:	9201      	str	r2, [sp, #4]
 800a9ac:	7a7a      	ldrb	r2, [r7, #9]
 800a9ae:	9200      	str	r2, [sp, #0]
 800a9b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9b2:	4642      	mov	r2, r8
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7fb f913 	bl	8005be0 <ip4_output_if_src>
  if (q != p) {
 800a9ba:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a9bc:	4605      	mov	r5, r0
  if (q != p) {
 800a9be:	d009      	beq.n	800a9d4 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7fc fa07 	bl	8006dd4 <pbuf_free>
 800a9c6:	e005      	b.n	800a9d4 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	f7ff ff67 	bl	800a89c <udp_bind>
    if (err != ERR_OK) {
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d0c5      	beq.n	800a960 <udp_sendto_if_src+0x1c>
}
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	b005      	add	sp, #20
 800a9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2108      	movs	r1, #8
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	f7fc fa61 	bl	8006ea8 <pbuf_alloc>
    if (q == NULL) {
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	b148      	cbz	r0, 800a9fe <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800a9ea:	8933      	ldrh	r3, [r6, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0be      	beq.n	800a96e <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	f7fc fc03 	bl	80071fc <pbuf_chain>
 800a9f6:	e7ba      	b.n	800a96e <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 800a9f8:	f06f 0505 	mvn.w	r5, #5
 800a9fc:	e7ea      	b.n	800a9d4 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 800a9fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aa02:	e7e7      	b.n	800a9d4 <udp_sendto_if_src+0x90>
 800aa04:	0800df0d 	.word	0x0800df0d
 800aa08:	0800df50 	.word	0x0800df50
 800aa0c:	0800c0d7 	.word	0x0800c0d7

0800aa10 <udp_sendto_if>:
{
 800aa10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa12:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800aa14:	b190      	cbz	r0, 800aa3c <udp_sendto_if+0x2c>
 800aa16:	b18a      	cbz	r2, 800aa3c <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa18:	6805      	ldr	r5, [r0, #0]
 800aa1a:	b11d      	cbz	r5, 800aa24 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800aa1c:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa20:	2ee0      	cmp	r6, #224	; 0xe0
 800aa22:	d106      	bne.n	800aa32 <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800aa24:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800aa26:	e88d 0030 	stmia.w	sp, {r4, r5}
 800aa2a:	f7ff ff8b 	bl	800a944 <udp_sendto_if_src>
}
 800aa2e:	b002      	add	sp, #8
 800aa30:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800aa32:	6866      	ldr	r6, [r4, #4]
 800aa34:	42b5      	cmp	r5, r6
 800aa36:	d104      	bne.n	800aa42 <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa38:	4605      	mov	r5, r0
 800aa3a:	e7f4      	b.n	800aa26 <udp_sendto_if+0x16>
    return ERR_VAL;
 800aa3c:	f06f 0005 	mvn.w	r0, #5
 800aa40:	e7f5      	b.n	800aa2e <udp_sendto_if+0x1e>
      return ERR_RTE;
 800aa42:	f06f 0003 	mvn.w	r0, #3
 800aa46:	e7f2      	b.n	800aa2e <udp_sendto_if+0x1e>

0800aa48 <udp_sendto>:
{
 800aa48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa4a:	460e      	mov	r6, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	461f      	mov	r7, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800aa50:	4605      	mov	r5, r0
 800aa52:	b168      	cbz	r0, 800aa70 <udp_sendto+0x28>
 800aa54:	b162      	cbz	r2, 800aa70 <udp_sendto+0x28>
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7fa ffd4 	bl	8005a04 <ip4_route>
  if (netif == NULL) {
 800aa5c:	b158      	cbz	r0, 800aa76 <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800aa5e:	9000      	str	r0, [sp, #0]
 800aa60:	463b      	mov	r3, r7
 800aa62:	4622      	mov	r2, r4
 800aa64:	4631      	mov	r1, r6
 800aa66:	4628      	mov	r0, r5
 800aa68:	f7ff ffd2 	bl	800aa10 <udp_sendto_if>
}
 800aa6c:	b003      	add	sp, #12
 800aa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800aa70:	f06f 0005 	mvn.w	r0, #5
 800aa74:	e7fa      	b.n	800aa6c <udp_sendto+0x24>
    return ERR_RTE;
 800aa76:	f06f 0003 	mvn.w	r0, #3
 800aa7a:	e7f7      	b.n	800aa6c <udp_sendto+0x24>

0800aa7c <udp_send>:
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	b118      	cbz	r0, 800aa88 <udp_send+0xc>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800aa80:	8a83      	ldrh	r3, [r0, #20]
 800aa82:	3204      	adds	r2, #4
 800aa84:	f7ff bfe0 	b.w	800aa48 <udp_sendto>
}
 800aa88:	f06f 0005 	mvn.w	r0, #5
 800aa8c:	4770      	bx	lr
	...

0800aa90 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	460d      	mov	r5, r1
 800aa94:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800aa96:	4604      	mov	r4, r0
 800aa98:	b1d0      	cbz	r0, 800aad0 <udp_connect+0x40>
 800aa9a:	b1c9      	cbz	r1, 800aad0 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800aa9c:	8a42      	ldrh	r2, [r0, #18]
 800aa9e:	b16a      	cbz	r2, 800aabc <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800aaa4:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 800aaa6:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800aaa8:	f043 0304 	orr.w	r3, r3, #4
 800aaac:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800aaae:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <udp_connect+0x4c>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4610      	mov	r0, r2
 800aab4:	b940      	cbnz	r0, 800aac8 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800aab6:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800aab8:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800aaba:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800aabc:	4601      	mov	r1, r0
 800aabe:	f7ff feed 	bl	800a89c <udp_bind>
    if (err != ERR_OK) {
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d0ec      	beq.n	800aaa0 <udp_connect+0x10>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800aac8:	42a0      	cmp	r0, r4
 800aaca:	d004      	beq.n	800aad6 <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800aacc:	68c0      	ldr	r0, [r0, #12]
 800aace:	e7f1      	b.n	800aab4 <udp_connect+0x24>
    return ERR_VAL;
 800aad0:	f06f 0005 	mvn.w	r0, #5
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800aad6:	2000      	movs	r0, #0
}
 800aad8:	bd70      	pop	{r4, r5, r6, pc}
 800aada:	bf00      	nop
 800aadc:	20007990 	.word	0x20007990

0800aae0 <udp_disconnect>:
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800aae0:	2300      	movs	r3, #0
 800aae2:	6043      	str	r3, [r0, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800aae4:	8283      	strh	r3, [r0, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800aae6:	7c03      	ldrb	r3, [r0, #16]
 800aae8:	f023 0304 	bic.w	r3, r3, #4
 800aaec:	7403      	strb	r3, [r0, #16]
 800aaee:	4770      	bx	lr

0800aaf0 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800aaf0:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800aaf2:	61c2      	str	r2, [r0, #28]
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800aaf8:	4a0a      	ldr	r2, [pc, #40]	; (800ab24 <udp_remove+0x2c>)
 800aafa:	6813      	ldr	r3, [r2, #0]
 800aafc:	4283      	cmp	r3, r0
{
 800aafe:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800ab00:	d104      	bne.n	800ab0c <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ab02:	68c3      	ldr	r3, [r0, #12]
 800ab04:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ab06:	2000      	movs	r0, #0
 800ab08:	f7fb bfde 	b.w	8006ac8 <memp_free>
{
 800ab0c:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0f9      	beq.n	800ab06 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0f6      	beq.n	800ab06 <udp_remove+0xe>
 800ab18:	4299      	cmp	r1, r3
 800ab1a:	d1f7      	bne.n	800ab0c <udp_remove+0x14>
        pcb2->next = pcb->next;
 800ab1c:	68cb      	ldr	r3, [r1, #12]
 800ab1e:	60d3      	str	r3, [r2, #12]
        break;
 800ab20:	e7f1      	b.n	800ab06 <udp_remove+0xe>
 800ab22:	bf00      	nop
 800ab24:	20007990 	.word	0x20007990

0800ab28 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ab28:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	f7fb ffb0 	bl	8006a90 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ab30:	4604      	mov	r4, r0
 800ab32:	b128      	cbz	r0, 800ab40 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ab34:	2220      	movs	r2, #32
 800ab36:	2100      	movs	r1, #0
 800ab38:	f001 f882 	bl	800bc40 <memset>
    pcb->ttl = UDP_TTL;
 800ab3c:	23ff      	movs	r3, #255	; 0xff
 800ab3e:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd10      	pop	{r4, pc}

0800ab44 <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 800ab44:	f7ff bff0 	b.w	800ab28 <udp_new>

0800ab48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ab48:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ab4a:	b138      	cbz	r0, 800ab5c <udp_netif_ip_addr_changed+0x14>
 800ab4c:	6803      	ldr	r3, [r0, #0]
 800ab4e:	b12b      	cbz	r3, 800ab5c <udp_netif_ip_addr_changed+0x14>
 800ab50:	b121      	cbz	r1, 800ab5c <udp_netif_ip_addr_changed+0x14>
 800ab52:	680b      	ldr	r3, [r1, #0]
 800ab54:	b113      	cbz	r3, 800ab5c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <udp_netif_ip_addr_changed+0x28>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	b903      	cbnz	r3, 800ab5e <udp_netif_ip_addr_changed+0x16>
 800ab5c:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ab5e:	681c      	ldr	r4, [r3, #0]
 800ab60:	6802      	ldr	r2, [r0, #0]
 800ab62:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ab64:	bf04      	itt	eq
 800ab66:	680a      	ldreq	r2, [r1, #0]
 800ab68:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	e7f5      	b.n	800ab5a <udp_netif_ip_addr_changed+0x12>
 800ab6e:	bf00      	nop
 800ab70:	20007990 	.word	0x20007990

0800ab74 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ab74:	8943      	ldrh	r3, [r0, #10]
 800ab76:	2b0e      	cmp	r3, #14
{
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800ab7e:	d914      	bls.n	800abaa <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ab80:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ab82:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800ab84:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800ab86:	07d9      	lsls	r1, r3, #31
 800ab88:	d50a      	bpl.n	800aba0 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d111      	bne.n	800abb2 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ab8e:	7843      	ldrb	r3, [r0, #1]
 800ab90:	b933      	cbnz	r3, 800aba0 <ethernet_input+0x2c>
 800ab92:	7883      	ldrb	r3, [r0, #2]
 800ab94:	2b5e      	cmp	r3, #94	; 0x5e
 800ab96:	d103      	bne.n	800aba0 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ab98:	7b63      	ldrb	r3, [r4, #13]
 800ab9a:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ab9e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800aba0:	2e08      	cmp	r6, #8
 800aba2:	d010      	beq.n	800abc6 <ethernet_input+0x52>
 800aba4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800aba8:	d01e      	beq.n	800abe8 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800abaa:	4620      	mov	r0, r4
 800abac:	f7fc f912 	bl	8006dd4 <pbuf_free>
  return ERR_OK;
 800abb0:	e018      	b.n	800abe4 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800abb2:	2206      	movs	r2, #6
 800abb4:	4914      	ldr	r1, [pc, #80]	; (800ac08 <ethernet_input+0x94>)
 800abb6:	f001 f829 	bl	800bc0c <memcmp>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d1f0      	bne.n	800aba0 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800abbe:	7b63      	ldrb	r3, [r4, #13]
 800abc0:	f043 0308 	orr.w	r3, r3, #8
 800abc4:	e7eb      	b.n	800ab9e <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800abc6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800abca:	071a      	lsls	r2, r3, #28
 800abcc:	d5ed      	bpl.n	800abaa <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800abce:	f06f 010d 	mvn.w	r1, #13
 800abd2:	4620      	mov	r0, r4
 800abd4:	f7fc f8f8 	bl	8006dc8 <pbuf_header>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d1e6      	bne.n	800abaa <ethernet_input+0x36>
        ip4_input(p, netif);
 800abdc:	4629      	mov	r1, r5
 800abde:	4620      	mov	r0, r4
 800abe0:	f7fa ff3c 	bl	8005a5c <ip4_input>
}
 800abe4:	2000      	movs	r0, #0
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800abe8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800abec:	071b      	lsls	r3, r3, #28
 800abee:	d5dc      	bpl.n	800abaa <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800abf0:	f06f 010d 	mvn.w	r1, #13
 800abf4:	4620      	mov	r0, r4
 800abf6:	f7fc f8e7 	bl	8006dc8 <pbuf_header>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1d5      	bne.n	800abaa <ethernet_input+0x36>
        etharp_input(p, netif);
 800abfe:	4629      	mov	r1, r5
 800ac00:	4620      	mov	r0, r4
 800ac02:	f7fa fb9d 	bl	8005340 <etharp_input>
      break;
 800ac06:	e7ed      	b.n	800abe4 <ethernet_input+0x70>
 800ac08:	0800df7e 	.word	0x0800df7e

0800ac0c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ac12:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800ac16:	460d      	mov	r5, r1
 800ac18:	4616      	mov	r6, r2
 800ac1a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800ac1c:	f7fa fa5c 	bl	80050d8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ac20:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800ac22:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ac24:	4628      	mov	r0, r5
 800ac26:	f7fc f8cf 	bl	8006dc8 <pbuf_header>
 800ac2a:	b9e0      	cbnz	r0, 800ac66 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800ac2c:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800ac2e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	600b      	str	r3, [r1, #0]
 800ac36:	88bb      	ldrh	r3, [r7, #4]
 800ac38:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ac3a:	6833      	ldr	r3, [r6, #0]
 800ac3c:	f8c1 3006 	str.w	r3, [r1, #6]
 800ac40:	88b3      	ldrh	r3, [r6, #4]
 800ac42:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ac44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800ac48:	2b06      	cmp	r3, #6
 800ac4a:	d006      	beq.n	800ac5a <ethernet_output+0x4e>
 800ac4c:	4b08      	ldr	r3, [pc, #32]	; (800ac70 <ethernet_output+0x64>)
 800ac4e:	4909      	ldr	r1, [pc, #36]	; (800ac74 <ethernet_output+0x68>)
 800ac50:	4809      	ldr	r0, [pc, #36]	; (800ac78 <ethernet_output+0x6c>)
 800ac52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac56:	f000 fe80 	bl	800b95a <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ac5a:	69a3      	ldr	r3, [r4, #24]
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800ac60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800ac64:	4718      	bx	r3
}
 800ac66:	f06f 0001 	mvn.w	r0, #1
 800ac6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6e:	bf00      	nop
 800ac70:	0800df84 	.word	0x0800df84
 800ac74:	0800dfb9 	.word	0x0800dfb9
 800ac78:	0800c0d7 	.word	0x0800c0d7

0800ac7c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800ac7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac7e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800ac80:	9100      	str	r1, [sp, #0]
 800ac82:	2304      	movs	r3, #4
 800ac84:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ac86:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	9102      	str	r1, [sp, #8]
 800ac8c:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ac8e:	f7f7 f95f 	bl	8001f50 <osMessageCreate>
 800ac92:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800ac94:	fab0 f080 	clz	r0, r0
 800ac98:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800ac9a:	4240      	negs	r0, r0
 800ac9c:	b004      	add	sp, #16
 800ac9e:	bd10      	pop	{r4, pc}

0800aca0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800aca0:	b510      	push	{r4, lr}
 800aca2:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800aca4:	6800      	ldr	r0, [r0, #0]
 800aca6:	f7f7 f9c9 	bl	800203c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800acaa:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800acac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800acb0:	f7f7 b9cb 	b.w	800204a <osMessageDelete>

0800acb4 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800acba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acbe:	4629      	mov	r1, r5
 800acc0:	6820      	ldr	r0, [r4, #0]
 800acc2:	f7f7 f959 	bl	8001f78 <osMessagePut>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d1f7      	bne.n	800acba <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800acca:	bd38      	pop	{r3, r4, r5, pc}

0800accc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800accc:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800acce:	2200      	movs	r2, #0
 800acd0:	6800      	ldr	r0, [r0, #0]
 800acd2:	f7f7 f951 	bl	8001f78 <osMessagePut>
 800acd6:	3000      	adds	r0, #0
 800acd8:	bf18      	it	ne
 800acda:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800acdc:	4240      	negs	r0, r0
 800acde:	bd08      	pop	{r3, pc}

0800ace0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace2:	b085      	sub	sp, #20
 800ace4:	4606      	mov	r6, r0
 800ace6:	460d      	mov	r5, r1
 800ace8:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800acea:	f7f7 f85a 	bl	8001da2 <osKernelSysTick>
 800acee:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800acf0:	b177      	cbz	r7, 800ad10 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800acf2:	463a      	mov	r2, r7
 800acf4:	6831      	ldr	r1, [r6, #0]
 800acf6:	a801      	add	r0, sp, #4
 800acf8:	f7f7 f966 	bl	8001fc8 <osMessageGet>

    if(event.status == osEventMessage)
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	2b10      	cmp	r3, #16
 800ad00:	d10d      	bne.n	800ad1e <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800ad06:	f7f7 f84c 	bl	8001da2 <osKernelSysTick>
 800ad0a:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ad0c:	b005      	add	sp, #20
 800ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800ad10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad14:	6831      	ldr	r1, [r6, #0]
 800ad16:	a801      	add	r0, sp, #4
 800ad18:	f7f7 f956 	bl	8001fc8 <osMessageGet>
 800ad1c:	e7f1      	b.n	800ad02 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800ad1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad22:	e7f3      	b.n	800ad0c <sys_arch_mbox_fetch+0x2c>

0800ad24 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ad24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad26:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800ad28:	2200      	movs	r2, #0
 800ad2a:	6801      	ldr	r1, [r0, #0]
 800ad2c:	a801      	add	r0, sp, #4
 800ad2e:	f7f7 f94b 	bl	8001fc8 <osMessageGet>

  if(event.status == osEventMessage)
 800ad32:	9b01      	ldr	r3, [sp, #4]
 800ad34:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800ad36:	bf03      	ittte	eq
 800ad38:	9b02      	ldreq	r3, [sp, #8]
 800ad3a:	6023      	streq	r3, [r4, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800ad3c:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800ad3e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
}
 800ad42:	b004      	add	sp, #16
 800ad44:	bd10      	pop	{r4, pc}

0800ad46 <sys_mbox_valid>:
 800ad46:	6800      	ldr	r0, [r0, #0]
 800ad48:	3000      	adds	r0, #0
 800ad4a:	bf18      	it	ne
 800ad4c:	2001      	movne	r0, #1
 800ad4e:	4770      	bx	lr

0800ad50 <sys_mbox_set_invalid>:
 800ad50:	2300      	movs	r3, #0
 800ad52:	6003      	str	r3, [r0, #0]
 800ad54:	4770      	bx	lr

0800ad56 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ad56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad58:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800ad5a:	2400      	movs	r4, #0
{
 800ad5c:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ad5e:	4668      	mov	r0, sp
 800ad60:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800ad62:	9400      	str	r4, [sp, #0]
 800ad64:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ad66:	f7f7 f881 	bl	8001e6c <osSemaphoreCreate>
 800ad6a:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800ad6c:	b130      	cbz	r0, 800ad7c <sys_sem_new+0x26>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ad6e:	b945      	cbnz	r5, 800ad82 <sys_sem_new+0x2c>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f7 f8a1 	bl	8001eb8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ad76:	4628      	mov	r0, r5
}
 800ad78:	b002      	add	sp, #8
 800ad7a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800ad7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad80:	e7fa      	b.n	800ad78 <sys_sem_new+0x22>
  return ERR_OK;
 800ad82:	4620      	mov	r0, r4
 800ad84:	e7f8      	b.n	800ad78 <sys_sem_new+0x22>

0800ad86 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ad86:	b570      	push	{r4, r5, r6, lr}
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800ad8c:	f7f7 f809 	bl	8001da2 <osKernelSysTick>
 800ad90:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ad92:	b146      	cbz	r6, 800ada6 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800ad94:	4631      	mov	r1, r6
 800ad96:	6828      	ldr	r0, [r5, #0]
 800ad98:	f7f7 f88e 	bl	8001eb8 <osSemaphoreWait>
 800ad9c:	b958      	cbnz	r0, 800adb6 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800ad9e:	f7f7 f800 	bl	8001da2 <osKernelSysTick>
 800ada2:	1b00      	subs	r0, r0, r4
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800ada6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800adaa:	6828      	ldr	r0, [r5, #0]
 800adac:	f7f7 f884 	bl	8001eb8 <osSemaphoreWait>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1f8      	bne.n	800ada6 <sys_arch_sem_wait+0x20>
 800adb4:	e7f3      	b.n	800ad9e <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800adba:	bd70      	pop	{r4, r5, r6, pc}

0800adbc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800adbc:	6800      	ldr	r0, [r0, #0]
 800adbe:	f7f7 b8a1 	b.w	8001f04 <osSemaphoreRelease>

0800adc2 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800adc2:	6800      	ldr	r0, [r0, #0]
 800adc4:	f7f7 b94b 	b.w	800205e <osSemaphoreDelete>

0800adc8 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800adc8:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800adca:	3000      	adds	r0, #0
 800adcc:	bf18      	it	ne
 800adce:	2001      	movne	r0, #1
 800add0:	4770      	bx	lr

0800add2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800add2:	2300      	movs	r3, #0
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	4770      	bx	lr

0800add8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800add8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800adda:	4803      	ldr	r0, [pc, #12]	; (800ade8 <sys_init+0x10>)
 800addc:	f7f7 f818 	bl	8001e10 <osMutexCreate>
 800ade0:	4b02      	ldr	r3, [pc, #8]	; (800adec <sys_init+0x14>)
 800ade2:	6018      	str	r0, [r3, #0]
 800ade4:	bd08      	pop	{r3, pc}
 800ade6:	bf00      	nop
 800ade8:	0800dff0 	.word	0x0800dff0
 800adec:	20007998 	.word	0x20007998

0800adf0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800adf0:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800adf2:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800adf4:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800adf6:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800adfc:	f7f7 f808 	bl	8001e10 <osMutexCreate>
 800ae00:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800ae02:	fab0 f080 	clz	r0, r0
 800ae06:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ae08:	4240      	negs	r0, r0
 800ae0a:	b002      	add	sp, #8
 800ae0c:	bd10      	pop	{r4, pc}

0800ae0e <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800ae0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ae12:	6800      	ldr	r0, [r0, #0]
 800ae14:	f7f7 b804 	b.w	8001e20 <osMutexWait>

0800ae18 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800ae18:	6800      	ldr	r0, [r0, #0]
 800ae1a:	f7f7 b897 	b.w	8001f4c <osMutexRelease>

0800ae1e <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ae1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae20:	b089      	sub	sp, #36	; 0x24
 800ae22:	4607      	mov	r7, r0
 800ae24:	460e      	mov	r6, r1
 800ae26:	4614      	mov	r4, r2
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ae28:	2100      	movs	r1, #0
 800ae2a:	221c      	movs	r2, #28
 800ae2c:	a801      	add	r0, sp, #4
{
 800ae2e:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ae30:	f000 ff06 	bl	800bc40 <memset>
 800ae34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae36:	9701      	str	r7, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 800ae38:	4621      	mov	r1, r4
 800ae3a:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ae3c:	9602      	str	r6, [sp, #8]
 800ae3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ae42:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800ae44:	f7f6 ffb4 	bl	8001db0 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800ae48:	b009      	add	sp, #36	; 0x24
 800ae4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae4c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ae4c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ae4e:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <sys_arch_protect+0x14>)
 800ae50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f7f6 ffe3 	bl	8001e20 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	bd08      	pop	{r3, pc}
 800ae5e:	bf00      	nop
 800ae60:	20007998 	.word	0x20007998

0800ae64 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800ae64:	4b01      	ldr	r3, [pc, #4]	; (800ae6c <sys_arch_unprotect+0x8>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	f7f7 b870 	b.w	8001f4c <osMutexRelease>
 800ae6c:	20007998 	.word	0x20007998

0800ae70 <connexion>:
#include <inet.h>
#include <string.h>
#include <errno.h>
//#include "lwip.h"

int connexion(const char *addr, int port) {
 800ae70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ae72:	4606      	mov	r6, r0
 800ae74:	460d      	mov	r5, r1
	int return_connect_create;
	int loc_socket_desc;


	//Creation d'une socket
	loc_socket_desc = socket(AF_INET, SOCK_STREAM, 0);
 800ae76:	2200      	movs	r2, #0
 800ae78:	2101      	movs	r1, #1
 800ae7a:	2002      	movs	r0, #2
 800ae7c:	f7f9 fff0 	bl	8004e60 <lwip_socket>

	if(loc_socket_desc ==-1)
 800ae80:	1c43      	adds	r3, r0, #1
	loc_socket_desc = socket(AF_INET, SOCK_STREAM, 0);
 800ae82:	4604      	mov	r4, r0
	if(loc_socket_desc ==-1)
 800ae84:	d10f      	bne.n	800aea6 <connexion+0x36>
	{
		printf(" %d, %s", errno, strerror(errno));
 800ae86:	4b13      	ldr	r3, [pc, #76]	; (800aed4 <connexion+0x64>)
 800ae88:	681d      	ldr	r5, [r3, #0]
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f001 f8c6 	bl	800c01c <strerror>
 800ae90:	4629      	mov	r1, r5
 800ae92:	4602      	mov	r2, r0
 800ae94:	4810      	ldr	r0, [pc, #64]	; (800aed8 <connexion+0x68>)
 800ae96:	f000 fd60 	bl	800b95a <iprintf>
		printf("\nSocket non créé\n");
 800ae9a:	4810      	ldr	r0, [pc, #64]	; (800aedc <connexion+0x6c>)
			close(loc_socket_desc);
			loc_socket_desc =-1;
		}
		else
		{
			printf("\nConnecté\n");
 800ae9c:	f000 fd9c 	bl	800b9d8 <puts>

		}
	}

	return loc_socket_desc;
}
 800aea0:	4620      	mov	r0, r4
 800aea2:	b004      	add	sp, #16
 800aea4:	bd70      	pop	{r4, r5, r6, pc}
		printf("\nSocket créé\n");
 800aea6:	480e      	ldr	r0, [pc, #56]	; (800aee0 <connexion+0x70>)
 800aea8:	f000 fd96 	bl	800b9d8 <puts>
		server.sin_addr.s_addr = inet_addr(addr);
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7fa ffd5 	bl	8005e5c <ipaddr_addr>
		server.sin_family = AF_INET;
 800aeb2:	2302      	movs	r3, #2
		server.sin_addr.s_addr = inet_addr(addr);
 800aeb4:	9001      	str	r0, [sp, #4]
		server.sin_port = htons(port);
 800aeb6:	b2a8      	uxth	r0, r5
		server.sin_family = AF_INET;
 800aeb8:	f88d 3001 	strb.w	r3, [sp, #1]
		server.sin_port = htons(port);
 800aebc:	f7fa f90c 	bl	80050d8 <lwip_htons>
		return_connect_create = connect (loc_socket_desc, (struct sockaddr *)&server, sizeof (server)) <0;
 800aec0:	2210      	movs	r2, #16
		server.sin_port = htons(port);
 800aec2:	f8ad 0002 	strh.w	r0, [sp, #2]
		return_connect_create = connect (loc_socket_desc, (struct sockaddr *)&server, sizeof (server)) <0;
 800aec6:	4669      	mov	r1, sp
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7f9 fed3 	bl	8004c74 <lwip_connect>
			printf("\nConnecté\n");
 800aece:	4805      	ldr	r0, [pc, #20]	; (800aee4 <connexion+0x74>)
 800aed0:	e7e4      	b.n	800ae9c <connexion+0x2c>
 800aed2:	bf00      	nop
 800aed4:	20007994 	.word	0x20007994
 800aed8:	0800dff8 	.word	0x0800dff8
 800aedc:	0800e000 	.word	0x0800e000
 800aee0:	0800e013 	.word	0x0800e013
 800aee4:	0800e022 	.word	0x0800e022

0800aee8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800aee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800aeec:	4a25      	ldr	r2, [pc, #148]	; (800af84 <low_level_output+0x9c>)
 800aeee:	9200      	str	r2, [sp, #0]
 800aef0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800aef2:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800aef6:	68ab      	ldr	r3, [r5, #8]
{
 800aef8:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800aefa:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aefc:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800af00:	b92c      	cbnz	r4, 800af0e <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800af02:	4639      	mov	r1, r7
 800af04:	481f      	ldr	r0, [pc, #124]	; (800af84 <low_level_output+0x9c>)
 800af06:	f7f5 fcb3 	bl	8000870 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800af0a:	4620      	mov	r0, r4
 800af0c:	e004      	b.n	800af18 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800af0e:	682a      	ldr	r2, [r5, #0]
 800af10:	2a00      	cmp	r2, #0
 800af12:	da11      	bge.n	800af38 <low_level_output+0x50>
        errval = ERR_USE;
 800af14:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800af18:	9b00      	ldr	r3, [sp, #0]
 800af1a:	f241 0214 	movw	r2, #4116	; 0x1014
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	5899      	ldr	r1, [r3, r2]
 800af22:	0689      	lsls	r1, r1, #26
 800af24:	d505      	bpl.n	800af32 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800af26:	2120      	movs	r1, #32
 800af28:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800af2a:	f241 0204 	movw	r2, #4100	; 0x1004
 800af2e:	2100      	movs	r1, #0
 800af30:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800af32:	b003      	add	sp, #12
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800af38:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800af3c:	4646      	mov	r6, r8
      payloadoffset = 0;
 800af3e:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800af42:	eb06 0809 	add.w	r8, r6, r9
 800af46:	45d8      	cmp	r8, fp
 800af48:	eb03 0006 	add.w	r0, r3, r6
 800af4c:	6861      	ldr	r1, [r4, #4]
 800af4e:	d808      	bhi.n	800af62 <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800af50:	464a      	mov	r2, r9
 800af52:	4451      	add	r1, sl
 800af54:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800af56:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800af58:	f000 fe67 	bl	800bc2a <memcpy>
  for(q = p; q != NULL; q = q->next)
 800af5c:	6824      	ldr	r4, [r4, #0]
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	e7ce      	b.n	800af00 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800af62:	ebab 0606 	sub.w	r6, fp, r6
 800af66:	4632      	mov	r2, r6
 800af68:	4451      	add	r1, sl
 800af6a:	f000 fe5e 	bl	800bc2a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800af6e:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	dbce      	blt.n	800af14 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800af76:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800af78:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800af7a:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800af7c:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800af80:	2600      	movs	r6, #0
 800af82:	e7de      	b.n	800af42 <low_level_output+0x5a>
 800af84:	2000926c 	.word	0x2000926c

0800af88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800af88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800af8e:	4c37      	ldr	r4, [pc, #220]	; (800b06c <ethernetif_input+0xe4>)
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800af96:	f7f6 ff8f 	bl	8001eb8 <osSemaphoreWait>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d1f8      	bne.n	800af90 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800af9e:	4c34      	ldr	r4, [pc, #208]	; (800b070 <ethernetif_input+0xe8>)
 800afa0:	4620      	mov	r0, r4
 800afa2:	f7f5 fcd9 	bl	8000958 <HAL_ETH_GetReceivedFrame_IT>
 800afa6:	4605      	mov	r5, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d1f0      	bne.n	800af8e <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 800afac:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800afae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afb0:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800afb2:	bb01      	cbnz	r1, 800aff6 <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 800afb4:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800afb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800afb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800afba:	2200      	movs	r2, #0
 800afbc:	4282      	cmp	r2, r0
 800afbe:	d14d      	bne.n	800b05c <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 800afc0:	2300      	movs	r3, #0
 800afc2:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800afc4:	f241 0214 	movw	r2, #4116	; 0x1014
 800afc8:	6823      	ldr	r3, [r4, #0]
 800afca:	5899      	ldr	r1, [r3, r2]
 800afcc:	0609      	lsls	r1, r1, #24
 800afce:	d505      	bpl.n	800afdc <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800afd0:	2180      	movs	r1, #128	; 0x80
 800afd2:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800afd4:	f241 0208 	movw	r2, #4104	; 0x1008
 800afd8:	2100      	movs	r1, #0
 800afda:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800afdc:	2f00      	cmp	r7, #0
 800afde:	d0d6      	beq.n	800af8e <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800afe0:	f8da 3010 	ldr.w	r3, [sl, #16]
 800afe4:	4651      	mov	r1, sl
 800afe6:	4638      	mov	r0, r7
 800afe8:	4798      	blx	r3
 800afea:	2800      	cmp	r0, #0
 800afec:	d0d7      	beq.n	800af9e <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800afee:	4638      	mov	r0, r7
 800aff0:	f7fb fef0 	bl	8006dd4 <pbuf_free>
 800aff4:	e7d3      	b.n	800af9e <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800aff6:	2203      	movs	r2, #3
 800aff8:	2004      	movs	r0, #4
 800affa:	f7fb ff55 	bl	8006ea8 <pbuf_alloc>
  if (p != NULL)
 800affe:	4607      	mov	r7, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	d0d7      	beq.n	800afb4 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b004:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 800b008:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800b00a:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800b00e:	462e      	mov	r6, r5
      payloadoffset = 0;
 800b010:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b014:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800b018:	18b5      	adds	r5, r6, r2
 800b01a:	429d      	cmp	r5, r3
 800b01c:	9b01      	ldr	r3, [sp, #4]
 800b01e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b022:	eb03 0106 	add.w	r1, r3, r6
 800b026:	d808      	bhi.n	800b03a <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b028:	4448      	add	r0, r9
 800b02a:	f000 fdfe 	bl	800bc2a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800b02e:	f8d8 8000 	ldr.w	r8, [r8]
 800b032:	f1b8 0f00 	cmp.w	r8, #0
 800b036:	d1e8      	bne.n	800b00a <ethernetif_input+0x82>
 800b038:	e7bd      	b.n	800afb6 <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b03a:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800b03e:	3604      	adds	r6, #4
 800b040:	4632      	mov	r2, r6
 800b042:	4448      	add	r0, r9
 800b044:	f000 fdf1 	bl	800bc2a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b048:	f8db b00c 	ldr.w	fp, [fp, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b04c:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b050:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b052:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b054:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800b058:	2600      	movs	r6, #0
 800b05a:	e7db      	b.n	800b014 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b05c:	6819      	ldr	r1, [r3, #0]
 800b05e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b062:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b064:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b066:	3201      	adds	r2, #1
 800b068:	e7a8      	b.n	800afbc <ethernetif_input+0x34>
 800b06a:	bf00      	nop
 800b06c:	20003fcc 	.word	0x20003fcc
 800b070:	2000926c 	.word	0x2000926c

0800b074 <HAL_ETH_MspInit>:
{
 800b074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b076:	4604      	mov	r4, r0
 800b078:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b07a:	2214      	movs	r2, #20
 800b07c:	2100      	movs	r1, #0
 800b07e:	a807      	add	r0, sp, #28
 800b080:	f000 fdde 	bl	800bc40 <memset>
  if(ethHandle->Instance==ETH)
 800b084:	6822      	ldr	r2, [r4, #0]
 800b086:	4b3d      	ldr	r3, [pc, #244]	; (800b17c <HAL_ETH_MspInit+0x108>)
 800b088:	429a      	cmp	r2, r3
 800b08a:	d174      	bne.n	800b176 <HAL_ETH_MspInit+0x102>
    __HAL_RCC_ETH_CLK_ENABLE();
 800b08c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800b090:	2400      	movs	r4, #0
 800b092:	9400      	str	r4, [sp, #0]
 800b094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b096:	483a      	ldr	r0, [pc, #232]	; (800b180 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800b098:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b09c:	631a      	str	r2, [r3, #48]	; 0x30
 800b09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0a0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800b0a4:	9200      	str	r2, [sp, #0]
 800b0a6:	9a00      	ldr	r2, [sp, #0]
 800b0a8:	9401      	str	r4, [sp, #4]
 800b0aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30
 800b0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800b0b8:	9201      	str	r2, [sp, #4]
 800b0ba:	9a01      	ldr	r2, [sp, #4]
 800b0bc:	9402      	str	r4, [sp, #8]
 800b0be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0c0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b0c4:	631a      	str	r2, [r3, #48]	; 0x30
 800b0c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0c8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b0cc:	9202      	str	r2, [sp, #8]
 800b0ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0d0:	9403      	str	r4, [sp, #12]
 800b0d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d4:	f042 0204 	orr.w	r2, r2, #4
 800b0d8:	631a      	str	r2, [r3, #48]	; 0x30
 800b0da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0dc:	f002 0204 	and.w	r2, r2, #4
 800b0e0:	9203      	str	r2, [sp, #12]
 800b0e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0e4:	9404      	str	r4, [sp, #16]
 800b0e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0e8:	f042 0201 	orr.w	r2, r2, #1
 800b0ec:	631a      	str	r2, [r3, #48]	; 0x30
 800b0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f0:	f002 0201 	and.w	r2, r2, #1
 800b0f4:	9204      	str	r2, [sp, #16]
 800b0f6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0f8:	9405      	str	r4, [sp, #20]
 800b0fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0fc:	f042 0202 	orr.w	r2, r2, #2
 800b100:	631a      	str	r2, [r3, #48]	; 0x30
 800b102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b104:	f002 0202 	and.w	r2, r2, #2
 800b108:	9205      	str	r2, [sp, #20]
 800b10a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b10c:	9406      	str	r4, [sp, #24]
 800b10e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b114:	631a      	str	r2, [r3, #48]	; 0x30
 800b116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b120:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b122:	250b      	movs	r5, #11
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b124:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b126:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b128:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b12a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b12c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b12e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b130:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b132:	f7f5 fe39 	bl	8000da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b136:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b138:	a907      	add	r1, sp, #28
 800b13a:	4812      	ldr	r0, [pc, #72]	; (800b184 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b13c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b140:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b142:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b144:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b146:	f7f5 fe2f 	bl	8000da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b14a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b14e:	a907      	add	r1, sp, #28
 800b150:	480d      	ldr	r0, [pc, #52]	; (800b188 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b152:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b154:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b156:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b158:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b15a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b15c:	f7f5 fe24 	bl	8000da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b160:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b164:	a907      	add	r1, sp, #28
 800b166:	4809      	ldr	r0, [pc, #36]	; (800b18c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b168:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b16a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b16e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b170:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b172:	f7f5 fe19 	bl	8000da8 <HAL_GPIO_Init>
}
 800b176:	b00d      	add	sp, #52	; 0x34
 800b178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17a:	bf00      	nop
 800b17c:	40028000 	.word	0x40028000
 800b180:	40020800 	.word	0x40020800
 800b184:	40020000 	.word	0x40020000
 800b188:	40020400 	.word	0x40020400
 800b18c:	40021800 	.word	0x40021800

0800b190 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800b190:	4b01      	ldr	r3, [pc, #4]	; (800b198 <HAL_ETH_RxCpltCallback+0x8>)
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	f7f6 beb6 	b.w	8001f04 <osSemaphoreRelease>
 800b198:	20003fcc 	.word	0x20003fcc

0800b19c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b19e:	4604      	mov	r4, r0
{
 800b1a0:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b1a2:	b930      	cbnz	r0, 800b1b2 <ethernetif_init+0x16>
 800b1a4:	4b47      	ldr	r3, [pc, #284]	; (800b2c4 <ethernetif_init+0x128>)
 800b1a6:	4948      	ldr	r1, [pc, #288]	; (800b2c8 <ethernetif_init+0x12c>)
 800b1a8:	4848      	ldr	r0, [pc, #288]	; (800b2cc <ethernetif_init+0x130>)
 800b1aa:	f240 222a 	movw	r2, #554	; 0x22a
 800b1ae:	f000 fbd4 	bl	800b95a <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b1b2:	2373      	movs	r3, #115	; 0x73
 800b1b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800b1b8:	2374      	movs	r3, #116	; 0x74
 800b1ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b1be:	4b44      	ldr	r3, [pc, #272]	; (800b2d0 <ethernetif_init+0x134>)
  heth.Instance = ETH;
 800b1c0:	4d44      	ldr	r5, [pc, #272]	; (800b2d4 <ethernetif_init+0x138>)
  netif->output = etharp_output;
 800b1c2:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 800b1c4:	2180      	movs	r1, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b1c6:	4b44      	ldr	r3, [pc, #272]	; (800b2d8 <ethernetif_init+0x13c>)
 800b1c8:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 800b1ca:	4a44      	ldr	r2, [pc, #272]	; (800b2dc <ethernetif_init+0x140>)
  MACAddr[1] = 0x80;
 800b1cc:	f88d 1005 	strb.w	r1, [sp, #5]
  uint32_t regvalue = 0;
 800b1d0:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800b1d2:	21e1      	movs	r1, #225	; 0xe1
  uint32_t regvalue = 0;
 800b1d4:	9300      	str	r3, [sp, #0]
  heth.Instance = ETH;
 800b1d6:	602a      	str	r2, [r5, #0]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b1d8:	822b      	strh	r3, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b1da:	2201      	movs	r2, #1
  MACAddr[0] = 0x00;
 800b1dc:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[2] = 0xE1;
 800b1e0:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x00;
 800b1e4:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 800b1e8:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 800b1ec:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 800b1f0:	a901      	add	r1, sp, #4
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b1f2:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b1f4:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b1f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b1fa:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 800b1fc:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b1fe:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b200:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b202:	f7f5 fc99 	bl	8000b38 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800b206:	b928      	cbnz	r0, 800b214 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b208:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800b20c:	f043 0304 	orr.w	r3, r3, #4
 800b210:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b214:	2304      	movs	r3, #4
 800b216:	4a32      	ldr	r2, [pc, #200]	; (800b2e0 <ethernetif_init+0x144>)
 800b218:	4932      	ldr	r1, [pc, #200]	; (800b2e4 <ethernetif_init+0x148>)
 800b21a:	482e      	ldr	r0, [pc, #184]	; (800b2d4 <ethernetif_init+0x138>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b21c:	4e32      	ldr	r6, [pc, #200]	; (800b2e8 <ethernetif_init+0x14c>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b21e:	f7f5 faad 	bl	800077c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b222:	2304      	movs	r3, #4
 800b224:	4a31      	ldr	r2, [pc, #196]	; (800b2ec <ethernetif_init+0x150>)
 800b226:	4932      	ldr	r1, [pc, #200]	; (800b2f0 <ethernetif_init+0x154>)
 800b228:	482a      	ldr	r0, [pc, #168]	; (800b2d4 <ethernetif_init+0x138>)
 800b22a:	f7f5 fae4 	bl	80007f6 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b22e:	2306      	movs	r3, #6
 800b230:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b234:	696b      	ldr	r3, [r5, #20]
 800b236:	781a      	ldrb	r2, [r3, #0]
 800b238:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b23c:	785a      	ldrb	r2, [r3, #1]
 800b23e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b242:	789a      	ldrb	r2, [r3, #2]
 800b244:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b248:	78da      	ldrb	r2, [r3, #3]
 800b24a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b24e:	791a      	ldrb	r2, [r3, #4]
 800b250:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b254:	795b      	ldrb	r3, [r3, #5]
 800b256:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800b25a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b25e:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b260:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800b264:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 800b268:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b26a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b26e:	2101      	movs	r1, #1
 800b270:	a803      	add	r0, sp, #12
  osSemaphoreDef(SEM);
 800b272:	9703      	str	r7, [sp, #12]
 800b274:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b276:	f7f6 fdf9 	bl	8001e6c <osSemaphoreCreate>
 800b27a:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <ethernetif_init+0x158>)
 800b27c:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b27e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b280:	ad05      	add	r5, sp, #20
 800b282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b284:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b288:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b28c:	4621      	mov	r1, r4
 800b28e:	a805      	add	r0, sp, #20
 800b290:	f7f6 fd8e 	bl	8001db0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800b294:	480f      	ldr	r0, [pc, #60]	; (800b2d4 <ethernetif_init+0x138>)
 800b296:	f7f5 fd4b 	bl	8000d30 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b29a:	466a      	mov	r2, sp
 800b29c:	211d      	movs	r1, #29
 800b29e:	480d      	ldr	r0, [pc, #52]	; (800b2d4 <ethernetif_init+0x138>)
 800b2a0:	f7f5 fbd9 	bl	8000a56 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b2a4:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b2a6:	480b      	ldr	r0, [pc, #44]	; (800b2d4 <ethernetif_init+0x138>)
  regvalue |= (PHY_ISFR_INT4);
 800b2a8:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b2ac:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 800b2ae:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b2b0:	f7f5 fc0b 	bl	8000aca <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b2b4:	466a      	mov	r2, sp
 800b2b6:	211d      	movs	r1, #29
 800b2b8:	4806      	ldr	r0, [pc, #24]	; (800b2d4 <ethernetif_init+0x138>)
 800b2ba:	f7f5 fbcc 	bl	8000a56 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800b2be:	4638      	mov	r0, r7
 800b2c0:	b00d      	add	sp, #52	; 0x34
 800b2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2c4:	0800e02d 	.word	0x0800e02d
 800b2c8:	0800c957 	.word	0x0800c957
 800b2cc:	0800c0d7 	.word	0x0800c0d7
 800b2d0:	08005705 	.word	0x08005705
 800b2d4:	2000926c 	.word	0x2000926c
 800b2d8:	0800aee9 	.word	0x0800aee9
 800b2dc:	40028000 	.word	0x40028000
 800b2e0:	200092b4 	.word	0x200092b4
 800b2e4:	2000799c 	.word	0x2000799c
 800b2e8:	0800c04c 	.word	0x0800c04c
 800b2ec:	20007a1c 	.word	0x20007a1c
 800b2f0:	200091ec 	.word	0x200091ec
 800b2f4:	20003fcc 	.word	0x20003fcc

0800b2f8 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800b2f8:	f7f5 b930 	b.w	800055c <HAL_GetTick>

0800b2fc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800b2fc:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for (;;) {

		if (static_socket_desc == -1) {
 800b2fe:	4c0c      	ldr	r4, [pc, #48]	; (800b330 <StartDefaultTask+0x34>)
			static_socket_desc = connexion("10.1.105.101", 5001);
 800b300:	4e0c      	ldr	r6, [pc, #48]	; (800b334 <StartDefaultTask+0x38>)
	MX_LWIP_Init();
 800b302:	f000 f8bf 	bl	800b484 <MX_LWIP_Init>
 800b306:	4625      	mov	r5, r4
		if (static_socket_desc == -1) {
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	3301      	adds	r3, #1
 800b30c:	d105      	bne.n	800b31a <StartDefaultTask+0x1e>
			static_socket_desc = connexion("10.1.105.101", 5001);
 800b30e:	f241 3189 	movw	r1, #5001	; 0x1389
 800b312:	4630      	mov	r0, r6
 800b314:	f7ff fdac 	bl	800ae70 <connexion>
 800b318:	6020      	str	r0, [r4, #0]

		}
		if (static_socket_desc != -1) {
 800b31a:	6828      	ldr	r0, [r5, #0]
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d0f3      	beq.n	800b308 <StartDefaultTask+0xc>
			envoi_data_serveur(static_socket_desc);
 800b320:	f000 f994 	bl	800b64c <envoi_data_serveur>
			osDelay(2000);
 800b324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b328:	f7f6 fd6a 	bl	8001e00 <osDelay>
 800b32c:	e7ec      	b.n	800b308 <StartDefaultTask+0xc>
 800b32e:	bf00      	nop
 800b330:	20003fd0 	.word	0x20003fd0
 800b334:	0800e047 	.word	0x0800e047

0800b338 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800b338:	4b03      	ldr	r3, [pc, #12]	; (800b348 <vApplicationGetIdleTaskMemory+0x10>)
 800b33a:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800b33c:	4b03      	ldr	r3, [pc, #12]	; (800b34c <vApplicationGetIdleTaskMemory+0x14>)
 800b33e:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	200041d4 	.word	0x200041d4
 800b34c:	20003fd4 	.word	0x20003fd4

0800b350 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800b350:	b530      	push	{r4, r5, lr}
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b352:	4d08      	ldr	r5, [pc, #32]	; (800b374 <MX_FREERTOS_Init+0x24>)
 800b354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800b356:	b089      	sub	sp, #36	; 0x24
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b358:	ac01      	add	r4, sp, #4
 800b35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b35c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b364:	2100      	movs	r1, #0
 800b366:	a801      	add	r0, sp, #4
 800b368:	f7f6 fd22 	bl	8001db0 <osThreadCreate>
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <MX_FREERTOS_Init+0x28>)
 800b36e:	6018      	str	r0, [r3, #0]
}
 800b370:	b009      	add	sp, #36	; 0x24
 800b372:	bd30      	pop	{r4, r5, pc}
 800b374:	0800c068 	.word	0x0800c068
 800b378:	2000aa84 	.word	0x2000aa84

0800b37c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b380:	2214      	movs	r2, #20
 800b382:	2100      	movs	r1, #0
 800b384:	a807      	add	r0, sp, #28
 800b386:	f000 fc5b 	bl	800bc40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b38a:	2400      	movs	r4, #0
 800b38c:	4b38      	ldr	r3, [pc, #224]	; (800b470 <MX_GPIO_Init+0xf4>)
 800b38e:	9401      	str	r4, [sp, #4]
 800b390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b392:	4f38      	ldr	r7, [pc, #224]	; (800b474 <MX_GPIO_Init+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800b394:	4d38      	ldr	r5, [pc, #224]	; (800b478 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b396:	f042 0204 	orr.w	r2, r2, #4
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
 800b39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b39e:	f002 0204 	and.w	r2, r2, #4
 800b3a2:	9201      	str	r2, [sp, #4]
 800b3a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b3a6:	9402      	str	r4, [sp, #8]
 800b3a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3ae:	631a      	str	r2, [r3, #48]	; 0x30
 800b3b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b3b6:	9202      	str	r2, [sp, #8]
 800b3b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3ba:	9403      	str	r4, [sp, #12]
 800b3bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	631a      	str	r2, [r3, #48]	; 0x30
 800b3c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3c6:	f002 0201 	and.w	r2, r2, #1
 800b3ca:	9203      	str	r2, [sp, #12]
 800b3cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3ce:	9404      	str	r4, [sp, #16]
 800b3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3d2:	f042 0202 	orr.w	r2, r2, #2
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30
 800b3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3da:	f002 0202 	and.w	r2, r2, #2
 800b3de:	9204      	str	r2, [sp, #16]
 800b3e0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b3e2:	9405      	str	r4, [sp, #20]
 800b3e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e6:	f042 0208 	orr.w	r2, r2, #8
 800b3ea:	631a      	str	r2, [r3, #48]	; 0x30
 800b3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3ee:	f002 0208 	and.w	r2, r2, #8
 800b3f2:	9205      	str	r2, [sp, #20]
 800b3f4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3f6:	9406      	str	r4, [sp, #24]
 800b3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3fe:	631a      	str	r2, [r3, #48]	; 0x30
 800b400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b406:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b408:	4622      	mov	r2, r4
 800b40a:	4638      	mov	r0, r7
 800b40c:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b410:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b412:	f7f5 fdb5 	bl	8000f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800b416:	4622      	mov	r2, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	2140      	movs	r1, #64	; 0x40
 800b41c:	f7f5 fdb0 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800b420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b424:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b426:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b428:	4b14      	ldr	r3, [pc, #80]	; (800b47c <MX_GPIO_Init+0x100>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b42a:	4815      	ldr	r0, [pc, #84]	; (800b480 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b42c:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b42e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b430:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b432:	f7f5 fcb9 	bl	8000da8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800b436:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b43a:	a907      	add	r1, sp, #28
 800b43c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800b43e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b440:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b442:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b444:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b446:	f7f5 fcaf 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b44a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b44c:	a907      	add	r1, sp, #28
 800b44e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b450:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b452:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b454:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b456:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b458:	f7f5 fca6 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b45c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b45e:	a907      	add	r1, sp, #28
 800b460:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b462:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b464:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b466:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b468:	f7f5 fc9e 	bl	8000da8 <HAL_GPIO_Init>

}
 800b46c:	b00d      	add	sp, #52	; 0x34
 800b46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b470:	40023800 	.word	0x40023800
 800b474:	40020400 	.word	0x40020400
 800b478:	40021800 	.word	0x40021800
 800b47c:	10110000 	.word	0x10110000
 800b480:	40020800 	.word	0x40020800

0800b484 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b484:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b486:	4f2e      	ldr	r7, [pc, #184]	; (800b540 <MX_LWIP_Init+0xbc>)
  IP_ADDRESS[3] = 101;
  NETMASK_ADDRESS[0] = 255;
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 0;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 0;
 800b488:	4d2e      	ldr	r5, [pc, #184]	; (800b544 <MX_LWIP_Init+0xc0>)
  NETMASK_ADDRESS[0] = 255;
 800b48a:	4e2f      	ldr	r6, [pc, #188]	; (800b548 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 10;
 800b48c:	230a      	movs	r3, #10
 800b48e:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 1;
 800b490:	2301      	movs	r3, #1
 800b492:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 105;
 800b494:	2369      	movs	r3, #105	; 0x69
  NETMASK_ADDRESS[2] = 0;
 800b496:	2400      	movs	r4, #0
  IP_ADDRESS[2] = 105;
 800b498:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 101;
 800b49a:	2365      	movs	r3, #101	; 0x65
{
 800b49c:	b085      	sub	sp, #20
  IP_ADDRESS[3] = 101;
 800b49e:	70fb      	strb	r3, [r7, #3]
  GATEWAY_ADDRESS[1] = 0;
  GATEWAY_ADDRESS[2] = 0;
  GATEWAY_ADDRESS[3] = 0;
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b4a0:	4621      	mov	r1, r4
  NETMASK_ADDRESS[0] = 255;
 800b4a2:	23ff      	movs	r3, #255	; 0xff
  tcpip_init( NULL, NULL );
 800b4a4:	4620      	mov	r0, r4
  NETMASK_ADDRESS[0] = 255;
 800b4a6:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800b4a8:	7073      	strb	r3, [r6, #1]
  GATEWAY_ADDRESS[0] = 0;
 800b4aa:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b4ac:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 800b4ae:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 800b4b0:	70ec      	strb	r4, [r5, #3]
  NETMASK_ADDRESS[2] = 0;
 800b4b2:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800b4b4:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 800b4b6:	f7f9 fdcf 	bl	8005058 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b4ba:	787b      	ldrb	r3, [r7, #1]
 800b4bc:	783a      	ldrb	r2, [r7, #0]
 800b4be:	4923      	ldr	r1, [pc, #140]	; (800b54c <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b4c0:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b4c2:	041b      	lsls	r3, r3, #16
 800b4c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	78ba      	ldrb	r2, [r7, #2]
 800b4ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4d2:	ba1b      	rev	r3, r3
 800b4d4:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b4d6:	7873      	ldrb	r3, [r6, #1]
 800b4d8:	7832      	ldrb	r2, [r6, #0]
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b4e0:	78f2      	ldrb	r2, [r6, #3]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	78b2      	ldrb	r2, [r6, #2]
 800b4e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4ea:	4a19      	ldr	r2, [pc, #100]	; (800b550 <MX_LWIP_Init+0xcc>)
 800b4ec:	ba1b      	rev	r3, r3
 800b4ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b4f0:	782b      	ldrb	r3, [r5, #0]
 800b4f2:	0400      	lsls	r0, r0, #16
 800b4f4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b4f8:	78eb      	ldrb	r3, [r5, #3]
 800b4fa:	4318      	orrs	r0, r3
 800b4fc:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b4fe:	4d15      	ldr	r5, [pc, #84]	; (800b554 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b500:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800b504:	4b14      	ldr	r3, [pc, #80]	; (800b558 <MX_LWIP_Init+0xd4>)
 800b506:	ba00      	rev	r0, r0
 800b508:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b50a:	4814      	ldr	r0, [pc, #80]	; (800b55c <MX_LWIP_Init+0xd8>)
 800b50c:	9002      	str	r0, [sp, #8]
 800b50e:	4814      	ldr	r0, [pc, #80]	; (800b560 <MX_LWIP_Init+0xdc>)
 800b510:	9001      	str	r0, [sp, #4]
 800b512:	9400      	str	r4, [sp, #0]
 800b514:	4628      	mov	r0, r5
 800b516:	f7fb fb39 	bl	8006b8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b51a:	4628      	mov	r0, r5
 800b51c:	f7fb fb74 	bl	8006c08 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b520:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b524:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b526:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800b528:	d504      	bpl.n	800b534 <MX_LWIP_Init+0xb0>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b52a:	b005      	add	sp, #20
 800b52c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800b530:	f7fb bb70 	b.w	8006c14 <netif_set_up>
}
 800b534:	b005      	add	sp, #20
 800b536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800b53a:	f7fb bb7a 	b.w	8006c32 <netif_set_down>
 800b53e:	bf00      	nop
 800b540:	2000aac4 	.word	0x2000aac4
 800b544:	2000aa88 	.word	0x2000aa88
 800b548:	2000aac0 	.word	0x2000aac0
 800b54c:	2000aabc 	.word	0x2000aabc
 800b550:	2000aac8 	.word	0x2000aac8
 800b554:	2000aa8c 	.word	0x2000aa8c
 800b558:	2000aacc 	.word	0x2000aacc
 800b55c:	08004fbd 	.word	0x08004fbd
 800b560:	0800b19d 	.word	0x0800b19d

0800b564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b564:	b530      	push	{r4, r5, lr}
 800b566:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b568:	2230      	movs	r2, #48	; 0x30
 800b56a:	2100      	movs	r1, #0
 800b56c:	a808      	add	r0, sp, #32
 800b56e:	f000 fb67 	bl	800bc40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b572:	2100      	movs	r1, #0
 800b574:	2214      	movs	r2, #20
 800b576:	a803      	add	r0, sp, #12
 800b578:	f000 fb62 	bl	800bc40 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b57c:	2400      	movs	r4, #0
 800b57e:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <SystemClock_Config+0x90>)
 800b580:	9401      	str	r4, [sp, #4]
 800b582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b584:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b588:	641a      	str	r2, [r3, #64]	; 0x40
 800b58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b594:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <SystemClock_Config+0x94>)
 800b596:	9402      	str	r4, [sp, #8]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5a6:	9302      	str	r3, [sp, #8]
 800b5a8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b5ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800b5b2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b5b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b5b8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b5ba:	2304      	movs	r3, #4
 800b5bc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800b5be:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b5c0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 800b5c2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b5c4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b5c6:	2307      	movs	r3, #7
 800b5c8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b5ca:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b5cc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b5ce:	f7f5 fd63 	bl	8001098 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b5d2:	230f      	movs	r3, #15
 800b5d4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b5d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b5da:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b5dc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b5de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b5e2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b5e4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b5e6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b5e8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b5ea:	f7f5 ff05 	bl	80013f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800b5ee:	b015      	add	sp, #84	; 0x54
 800b5f0:	bd30      	pop	{r4, r5, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40023800 	.word	0x40023800
 800b5f8:	40007000 	.word	0x40007000

0800b5fc <main>:
{
 800b5fc:	b508      	push	{r3, lr}
  HAL_Init();
 800b5fe:	f7f4 ff87 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 800b602:	f7ff ffaf 	bl	800b564 <SystemClock_Config>
  MX_GPIO_Init();
 800b606:	f7ff feb9 	bl	800b37c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800b60a:	f000 f9ff 	bl	800ba0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800b60e:	f000 fa51 	bl	800bab4 <MX_USB_OTG_FS_PCD_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b612:	2200      	movs	r2, #0
 800b614:	2105      	movs	r1, #5
 800b616:	203d      	movs	r0, #61	; 0x3d
 800b618:	f7f4 ffcc 	bl	80005b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b61c:	203d      	movs	r0, #61	; 0x3d
 800b61e:	f7f4 fffd 	bl	800061c <HAL_NVIC_EnableIRQ>
  MX_FREERTOS_Init(); 
 800b622:	f7ff fe95 	bl	800b350 <MX_FREERTOS_Init>
  osKernelStart();
 800b626:	f7f6 fbb7 	bl	8001d98 <osKernelStart>
 800b62a:	e7fe      	b.n	800b62a <main+0x2e>

0800b62c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b62c:	6802      	ldr	r2, [r0, #0]
 800b62e:	4b03      	ldr	r3, [pc, #12]	; (800b63c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800b630:	429a      	cmp	r2, r3
 800b632:	d101      	bne.n	800b638 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800b634:	f7f4 bf86 	b.w	8000544 <HAL_IncTick>
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	40010000 	.word	0x40010000

0800b640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b640:	4770      	bx	lr

0800b642 <malloc>:
/* Defining malloc/free should overwrite the standard versions
provided by the compiler. */
void *malloc (size_t size)
{
/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc( size );
 800b642:	f7f6 bf27 	b.w	8002494 <pvPortMalloc>

0800b646 <free>:
/* Call the FreeRTOS version of calloc. */
	void * p= pvPortMalloc( size );
	return memset(p,0,size);
}
void free (void *ptr) { /* Call the FreeRTOS version of free.*/
	vPortFree( ptr );
 800b646:	f7f6 bfb3 	b.w	80025b0 <vPortFree>
	...

0800b64c <envoi_data_serveur>:

#include "connexion_serveur.h"


//Envoi d'une DATA au serveur distant
void envoi_data_serveur(int loc_socket_desc) {
 800b64c:	b510      	push	{r4, lr}

	char *loc_message = "Connexion réussi, attente message en arrivance!!!\n";

	if ( send(loc_socket_desc , loc_message , strlen(loc_message) , 0) < 0) {
 800b64e:	2300      	movs	r3, #0
 800b650:	2233      	movs	r2, #51	; 0x33
 800b652:	490c      	ldr	r1, [pc, #48]	; (800b684 <envoi_data_serveur+0x38>)
 800b654:	f7f9 fbc6 	bl	8004de4 <lwip_send>
 800b658:	2800      	cmp	r0, #0
 800b65a:	da0e      	bge.n	800b67a <envoi_data_serveur+0x2e>
		printf(" %d, %s", errno, strerror(errno));
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <envoi_data_serveur+0x3c>)
 800b65e:	681c      	ldr	r4, [r3, #0]
 800b660:	4620      	mov	r0, r4
 800b662:	f000 fcdb 	bl	800c01c <strerror>
 800b666:	4621      	mov	r1, r4
 800b668:	4602      	mov	r2, r0
 800b66a:	4808      	ldr	r0, [pc, #32]	; (800b68c <envoi_data_serveur+0x40>)
 800b66c:	f000 f975 	bl	800b95a <iprintf>
		printf("\nEnvoi loupé\n");
 800b670:	4807      	ldr	r0, [pc, #28]	; (800b690 <envoi_data_serveur+0x44>)


		printf("\nData envoyé\n");
		printf("%s\n", loc_message);
	}
}
 800b672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("%s\n", loc_message);
 800b676:	f000 b9af 	b.w	800b9d8 <puts>
		printf("\nData envoyé\n");
 800b67a:	4806      	ldr	r0, [pc, #24]	; (800b694 <envoi_data_serveur+0x48>)
 800b67c:	f000 f9ac 	bl	800b9d8 <puts>
		printf("%s\n", loc_message);
 800b680:	4800      	ldr	r0, [pc, #0]	; (800b684 <envoi_data_serveur+0x38>)
 800b682:	e7f6      	b.n	800b672 <envoi_data_serveur+0x26>
 800b684:	0800e060 	.word	0x0800e060
 800b688:	20007994 	.word	0x20007994
 800b68c:	0800dff8 	.word	0x0800dff8
 800b690:	0800e094 	.word	0x0800e094
 800b694:	0800e0a2 	.word	0x0800e0a2

0800b698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b698:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b69a:	4b0f      	ldr	r3, [pc, #60]	; (800b6d8 <HAL_MspInit+0x40>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	9200      	str	r2, [sp, #0]
 800b6a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b6a2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b6a6:	6459      	str	r1, [r3, #68]	; 0x44
 800b6a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b6aa:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800b6ae:	9100      	str	r1, [sp, #0]
 800b6b0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b6b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800b6ba:	6419      	str	r1, [r3, #64]	; 0x40
 800b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6c2:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b6c4:	210f      	movs	r1, #15
 800b6c6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800b6ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b6cc:	f7f4 ff72 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b6d0:	b003      	add	sp, #12
 800b6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6d6:	bf00      	nop
 800b6d8:	40023800 	.word	0x40023800

0800b6dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b6dc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800b6de:	4601      	mov	r1, r0
{
 800b6e0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2019      	movs	r0, #25
 800b6e6:	f7f4 ff65 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800b6ea:	2019      	movs	r0, #25
 800b6ec:	f7f4 ff96 	bl	800061c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <HAL_InitTick+0x6c>)
 800b6f4:	9502      	str	r5, [sp, #8]
 800b6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b6f8:	4c14      	ldr	r4, [pc, #80]	; (800b74c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b6fa:	f042 0201 	orr.w	r2, r2, #1
 800b6fe:	645a      	str	r2, [r3, #68]	; 0x44
 800b700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b708:	a901      	add	r1, sp, #4
 800b70a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b70c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b70e:	f7f5 ff33 	bl	8001578 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b712:	f7f5 ff21 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <HAL_InitTick+0x74>)
 800b718:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800b71a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b71e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b720:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b722:	4b0c      	ldr	r3, [pc, #48]	; (800b754 <HAL_InitTick+0x78>)
 800b724:	fbb0 f0f3 	udiv	r0, r0, r3
 800b728:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800b72a:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800b72c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800b72e:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b730:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800b732:	f7f6 f85d 	bl	80017f0 <HAL_TIM_Base_Init>
 800b736:	b920      	cbnz	r0, 800b742 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800b738:	4620      	mov	r0, r4
 800b73a:	f7f5 ff3c 	bl	80015b6 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800b73e:	b009      	add	sp, #36	; 0x24
 800b740:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800b742:	2001      	movs	r0, #1
 800b744:	e7fb      	b.n	800b73e <HAL_InitTick+0x62>
 800b746:	bf00      	nop
 800b748:	40023800 	.word	0x40023800
 800b74c:	2000aad0 	.word	0x2000aad0
 800b750:	40010000 	.word	0x40010000
 800b754:	000f4240 	.word	0x000f4240

0800b758 <NMI_Handler>:
 800b758:	4770      	bx	lr

0800b75a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b75a:	e7fe      	b.n	800b75a <HardFault_Handler>

0800b75c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b75c:	e7fe      	b.n	800b75c <MemManage_Handler>

0800b75e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b75e:	e7fe      	b.n	800b75e <BusFault_Handler>

0800b760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b760:	e7fe      	b.n	800b760 <UsageFault_Handler>

0800b762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b762:	4770      	bx	lr

0800b764 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <TIM1_UP_TIM10_IRQHandler+0x8>)
 800b766:	f7f5 bf3a 	b.w	80015de <HAL_TIM_IRQHandler>
 800b76a:	bf00      	nop
 800b76c:	2000aad0 	.word	0x2000aad0

0800b770 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <ETH_IRQHandler+0x8>)
 800b772:	f7f5 b938 	b.w	80009e6 <HAL_ETH_IRQHandler>
 800b776:	bf00      	nop
 800b778:	2000926c 	.word	0x2000926c

0800b77c <_write>:
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
// the new function for SWV output

{
 800b77c:	b510      	push	{r4, lr}
	int i=0;
	for(i=0; i<len; i++)
 800b77e:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800b780:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 800b784:	4293      	cmp	r3, r2
 800b786:	db01      	blt.n	800b78c <_write+0x10>
	ITM_SendChar((*ptr++)); // out char to serial
	return len;
}
 800b788:	4610      	mov	r0, r2
 800b78a:	bd10      	pop	{r4, pc}
 800b78c:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 800b790:	07c0      	lsls	r0, r0, #31
 800b792:	d503      	bpl.n	800b79c <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800b794:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800b798:	07c0      	lsls	r0, r0, #31
 800b79a:	d402      	bmi.n	800b7a2 <_write+0x26>
	for(i=0; i<len; i++)
 800b79c:	3301      	adds	r3, #1
 800b79e:	e7f1      	b.n	800b784 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800b7a0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d0fb      	beq.n	800b7a0 <_write+0x24>
	ITM_SendChar((*ptr++)); // out char to serial
 800b7a8:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800b7aa:	7020      	strb	r0, [r4, #0]
 800b7ac:	e7f6      	b.n	800b79c <_write+0x20>
	...

0800b7b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b7b0:	490f      	ldr	r1, [pc, #60]	; (800b7f0 <SystemInit+0x40>)
 800b7b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b7b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b7be:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <SystemInit+0x44>)
 800b7c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b7c2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800b7c4:	f042 0201 	orr.w	r2, r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b7ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b7d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b7d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b7d8:	4a07      	ldr	r2, [pc, #28]	; (800b7f8 <SystemInit+0x48>)
 800b7da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b7e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b7e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7ea:	608b      	str	r3, [r1, #8]
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	e000ed00 	.word	0xe000ed00
 800b7f4:	40023800 	.word	0x40023800
 800b7f8:	24003010 	.word	0x24003010

0800b7fc <ts_itoa>:
 **---------------------------------------------------------------------------
 **  Abstract: Convert integer to ascii
 **  Returns:  void
 **---------------------------------------------------------------------------
 */
void ts_itoa(char **buf, unsigned int d, int base) {
 800b7fc:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 800b7fe:	2301      	movs	r3, #1
	while (d / div >= base)
 800b800:	fbb1 f4f3 	udiv	r4, r1, r3
 800b804:	4294      	cmp	r4, r2
 800b806:	d201      	bcs.n	800b80c <ts_itoa+0x10>
		div *= base;

	while (div != 0) {
 800b808:	b913      	cbnz	r3, 800b810 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num - 10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
		div *= base;
 800b80c:	4353      	muls	r3, r2
 800b80e:	e7f7      	b.n	800b800 <ts_itoa+0x4>
 800b810:	6805      	ldr	r5, [r0, #0]
		int num = d / div;
 800b812:	fbb1 f4f3 	udiv	r4, r1, r3
		if (num > 9)
 800b816:	2c09      	cmp	r4, #9
		d = d % div;
 800b818:	fb03 1114 	mls	r1, r3, r4, r1
			*((*buf)++) = (num - 10) + 'A';
 800b81c:	f105 0601 	add.w	r6, r5, #1
 800b820:	bfcc      	ite	gt
 800b822:	3437      	addgt	r4, #55	; 0x37
			*((*buf)++) = num + '0';
 800b824:	3430      	addle	r4, #48	; 0x30
			*((*buf)++) = (num - 10) + 'A';
 800b826:	6006      	str	r6, [r0, #0]
		div /= base;
 800b828:	fb93 f3f2 	sdiv	r3, r3, r2
			*((*buf)++) = num + '0';
 800b82c:	702c      	strb	r4, [r5, #0]
 800b82e:	e7eb      	b.n	800b808 <ts_itoa+0xc>

0800b830 <ts_formatstring>:
 **---------------------------------------------------------------------------
 **  Abstract: Writes arguments va to buffer buf according to format fmt
 **  Returns:  Length of string
 **---------------------------------------------------------------------------
 */
int ts_formatstring(char *buf, const char *fmt, va_list va) {
 800b830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b834:	ad02      	add	r5, sp, #8
 800b836:	460c      	mov	r4, r1
 800b838:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b83c:	4613      	mov	r3, r2
	char *start_buf = buf;
 800b83e:	4606      	mov	r6, r0
			case 'd':
			case 'i': {
				signed int val = va_arg(va, signed int);
				if (val < 0) {
					val *= -1;
					*buf++ = '-';
 800b840:	272d      	movs	r7, #45	; 0x2d
	while (*fmt) {
 800b842:	7822      	ldrb	r2, [r4, #0]
 800b844:	b932      	cbnz	r2, 800b854 <ts_formatstring+0x24>
		/* Else just copy */
		else {
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	701a      	strb	r2, [r3, #0]

	return (int) (buf - start_buf);
}
 800b84a:	9801      	ldr	r0, [sp, #4]
 800b84c:	1b80      	subs	r0, r0, r6
 800b84e:	b002      	add	sp, #8
 800b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*fmt == '%') {
 800b854:	2a25      	cmp	r2, #37	; 0x25
 800b856:	d146      	bne.n	800b8e6 <ts_formatstring+0xb6>
			switch (*(++fmt)) {
 800b858:	7862      	ldrb	r2, [r4, #1]
 800b85a:	2a64      	cmp	r2, #100	; 0x64
 800b85c:	d021      	beq.n	800b8a2 <ts_formatstring+0x72>
 800b85e:	d80a      	bhi.n	800b876 <ts_formatstring+0x46>
 800b860:	2a58      	cmp	r2, #88	; 0x58
 800b862:	d013      	beq.n	800b88c <ts_formatstring+0x5c>
 800b864:	2a63      	cmp	r2, #99	; 0x63
 800b866:	d015      	beq.n	800b894 <ts_formatstring+0x64>
 800b868:	2a25      	cmp	r2, #37	; 0x25
 800b86a:	d109      	bne.n	800b880 <ts_formatstring+0x50>
				*buf++ = '%';
 800b86c:	9901      	ldr	r1, [sp, #4]
 800b86e:	1c48      	adds	r0, r1, #1
 800b870:	9001      	str	r0, [sp, #4]
 800b872:	700a      	strb	r2, [r1, #0]
				break;
 800b874:	e004      	b.n	800b880 <ts_formatstring+0x50>
			switch (*(++fmt)) {
 800b876:	2a73      	cmp	r2, #115	; 0x73
 800b878:	d023      	beq.n	800b8c2 <ts_formatstring+0x92>
 800b87a:	d803      	bhi.n	800b884 <ts_formatstring+0x54>
 800b87c:	2a69      	cmp	r2, #105	; 0x69
 800b87e:	d010      	beq.n	800b8a2 <ts_formatstring+0x72>
			fmt++;
 800b880:	3402      	adds	r4, #2
 800b882:	e7de      	b.n	800b842 <ts_formatstring+0x12>
			switch (*(++fmt)) {
 800b884:	2a75      	cmp	r2, #117	; 0x75
 800b886:	d029      	beq.n	800b8dc <ts_formatstring+0xac>
 800b888:	2a78      	cmp	r2, #120	; 0x78
 800b88a:	d1f9      	bne.n	800b880 <ts_formatstring+0x50>
				ts_itoa(&buf, va_arg(va, int), 16);
 800b88c:	f103 0804 	add.w	r8, r3, #4
 800b890:	2210      	movs	r2, #16
 800b892:	e026      	b.n	800b8e2 <ts_formatstring+0xb2>
				*buf++ = va_arg(va, int);
 800b894:	9a01      	ldr	r2, [sp, #4]
 800b896:	1c51      	adds	r1, r2, #1
 800b898:	9101      	str	r1, [sp, #4]
 800b89a:	6819      	ldr	r1, [r3, #0]
 800b89c:	7011      	strb	r1, [r2, #0]
 800b89e:	3304      	adds	r3, #4
				break;
 800b8a0:	e7ee      	b.n	800b880 <ts_formatstring+0x50>
				signed int val = va_arg(va, signed int);
 800b8a2:	6819      	ldr	r1, [r3, #0]
				if (val < 0) {
 800b8a4:	2900      	cmp	r1, #0
				signed int val = va_arg(va, signed int);
 800b8a6:	f103 0804 	add.w	r8, r3, #4
				if (val < 0) {
 800b8aa:	da04      	bge.n	800b8b6 <ts_formatstring+0x86>
					*buf++ = '-';
 800b8ac:	9b01      	ldr	r3, [sp, #4]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	9201      	str	r2, [sp, #4]
					val *= -1;
 800b8b2:	4249      	negs	r1, r1
					*buf++ = '-';
 800b8b4:	701f      	strb	r7, [r3, #0]
				ts_itoa(&buf, val, 10);
 800b8b6:	220a      	movs	r2, #10
				ts_itoa(&buf, va_arg(va, int), 16);
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f7ff ff9f 	bl	800b7fc <ts_itoa>
 800b8be:	4643      	mov	r3, r8
				break;
 800b8c0:	e7de      	b.n	800b880 <ts_formatstring+0x50>
				char * arg = va_arg(va, char *);
 800b8c2:	1d19      	adds	r1, r3, #4
 800b8c4:	681b      	ldr	r3, [r3, #0]
				while (*arg) {
 800b8c6:	781a      	ldrb	r2, [r3, #0]
 800b8c8:	b90a      	cbnz	r2, 800b8ce <ts_formatstring+0x9e>
				char * arg = va_arg(va, char *);
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	e7d8      	b.n	800b880 <ts_formatstring+0x50>
					*buf++ = *arg++;
 800b8ce:	9a01      	ldr	r2, [sp, #4]
 800b8d0:	1c50      	adds	r0, r2, #1
 800b8d2:	9001      	str	r0, [sp, #4]
 800b8d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8d8:	7010      	strb	r0, [r2, #0]
 800b8da:	e7f4      	b.n	800b8c6 <ts_formatstring+0x96>
				ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800b8dc:	f103 0804 	add.w	r8, r3, #4
 800b8e0:	220a      	movs	r2, #10
				ts_itoa(&buf, va_arg(va, int), 16);
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	e7e8      	b.n	800b8b8 <ts_formatstring+0x88>
			*buf++ = *fmt++;
 800b8e6:	9901      	ldr	r1, [sp, #4]
 800b8e8:	1c48      	adds	r0, r1, #1
 800b8ea:	9001      	str	r0, [sp, #4]
 800b8ec:	3401      	adds	r4, #1
 800b8ee:	700a      	strb	r2, [r1, #0]
 800b8f0:	e7a7      	b.n	800b842 <ts_formatstring+0x12>

0800b8f2 <ts_formatlength>:
 **  Abstract: Calculate maximum length of the resulting string from the
 **            format string and va_list va
 **  Returns:  Maximum length
 **---------------------------------------------------------------------------
 */
int ts_formatlength(const char *fmt, va_list va) {
 800b8f2:	b530      	push	{r4, r5, lr}
 800b8f4:	4602      	mov	r2, r0
	int length = 0;
 800b8f6:	2000      	movs	r0, #0
	while (*fmt) {
 800b8f8:	7813      	ldrb	r3, [r2, #0]
 800b8fa:	b903      	cbnz	r3, 800b8fe <ts_formatlength+0xc>
			++length;
		}
		++fmt;
	}
	return length;
}
 800b8fc:	bd30      	pop	{r4, r5, pc}
		if (*fmt == '%') {
 800b8fe:	2b25      	cmp	r3, #37	; 0x25
 800b900:	d128      	bne.n	800b954 <ts_formatlength+0x62>
			switch (*fmt) {
 800b902:	7853      	ldrb	r3, [r2, #1]
 800b904:	2b69      	cmp	r3, #105	; 0x69
			++fmt;
 800b906:	f102 0401 	add.w	r4, r2, #1
			switch (*fmt) {
 800b90a:	d013      	beq.n	800b934 <ts_formatlength+0x42>
 800b90c:	d808      	bhi.n	800b920 <ts_formatlength+0x2e>
 800b90e:	2b63      	cmp	r3, #99	; 0x63
 800b910:	d00e      	beq.n	800b930 <ts_formatlength+0x3e>
 800b912:	2b64      	cmp	r3, #100	; 0x64
 800b914:	d00e      	beq.n	800b934 <ts_formatlength+0x42>
 800b916:	2b58      	cmp	r3, #88	; 0x58
 800b918:	d108      	bne.n	800b92c <ts_formatlength+0x3a>
				length += 8;
 800b91a:	f100 0308 	add.w	r3, r0, #8
 800b91e:	e00b      	b.n	800b938 <ts_formatlength+0x46>
			switch (*fmt) {
 800b920:	2b75      	cmp	r3, #117	; 0x75
 800b922:	d007      	beq.n	800b934 <ts_formatlength+0x42>
 800b924:	2b78      	cmp	r3, #120	; 0x78
 800b926:	d0f8      	beq.n	800b91a <ts_formatlength+0x28>
 800b928:	2b73      	cmp	r3, #115	; 0x73
 800b92a:	d007      	beq.n	800b93c <ts_formatlength+0x4a>
				++length;
 800b92c:	1c43      	adds	r3, r0, #1
				break;
 800b92e:	e00e      	b.n	800b94e <ts_formatlength+0x5c>
				va_arg(va, int);
 800b930:	3104      	adds	r1, #4
 800b932:	e7fb      	b.n	800b92c <ts_formatlength+0x3a>
				length += 11;
 800b934:	f100 030b 	add.w	r3, r0, #11
				va_arg(va, unsigned int);
 800b938:	3104      	adds	r1, #4
 800b93a:	e008      	b.n	800b94e <ts_formatlength+0x5c>
				char * str = va_arg(va, char *);
 800b93c:	680a      	ldr	r2, [r1, #0]
 800b93e:	1d0d      	adds	r5, r1, #4
 800b940:	1a80      	subs	r0, r0, r2
 800b942:	1813      	adds	r3, r2, r0
				while (*str++)
 800b944:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b948:	2900      	cmp	r1, #0
 800b94a:	d1fa      	bne.n	800b942 <ts_formatlength+0x50>
				char * str = va_arg(va, char *);
 800b94c:	4629      	mov	r1, r5
		++fmt;
 800b94e:	1c62      	adds	r2, r4, #1
 800b950:	4618      	mov	r0, r3
 800b952:	e7d1      	b.n	800b8f8 <ts_formatlength+0x6>
			++length;
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	4614      	mov	r4, r2
 800b958:	e7f9      	b.n	800b94e <ts_formatlength+0x5c>

0800b95a <iprintf>:
 **            standard output according to the format parameter.
 **  Returns:  Number of bytes written
 **
 **===========================================================================
 */
int iprintf(const char *fmt, ...) {
 800b95a:	b40f      	push	{r0, r1, r2, r3}
 800b95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	f107 0520 	add.w	r5, r7, #32
 800b968:	f855 6b04 	ldr.w	r6, [r5], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800b96c:	607d      	str	r5, [r7, #4]
	length = ts_formatlength(fmt, va);
 800b96e:	4629      	mov	r1, r5
 800b970:	4630      	mov	r0, r6
 800b972:	f7ff ffbe 	bl	800b8f2 <ts_formatlength>
	va_end(va);
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800b976:	2831      	cmp	r0, #49	; 0x31
	length = ts_formatlength(fmt, va);
 800b978:	4604      	mov	r4, r0
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800b97a:	dc19      	bgt.n	800b9b0 <iprintf+0x56>

		char buf[length];
 800b97c:	3407      	adds	r4, #7
 800b97e:	f024 0407 	bic.w	r4, r4, #7
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800b982:	46e8      	mov	r8, sp
		char buf[length];
 800b984:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 800b988:	462a      	mov	r2, r5
 800b98a:	4631      	mov	r1, r6
 800b98c:	4668      	mov	r0, sp
		va_start(va, fmt);
 800b98e:	607d      	str	r5, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800b990:	f7ff ff4e 	bl	800b830 <ts_formatstring>
		length = _write(1, buf, length);
 800b994:	4669      	mov	r1, sp
 800b996:	4602      	mov	r2, r0
 800b998:	2001      	movs	r0, #1
 800b99a:	f7ff feef 	bl	800b77c <_write>
 800b99e:	4604      	mov	r4, r0
 800b9a0:	46c5      	mov	sp, r8
			va_end(va);
			free(buf);
		}
	}
	return length;
}
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	b004      	add	sp, #16
 800b9ae:	4770      	bx	lr
		char * buf = malloc(length * sizeof(char));
 800b9b0:	f7ff fe47 	bl	800b642 <malloc>
		if (buf) {
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0f3      	beq.n	800b9a2 <iprintf+0x48>
			length = ts_formatstring(buf, fmt, va);
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	4631      	mov	r1, r6
			va_start(va, fmt);
 800b9be:	607d      	str	r5, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 800b9c0:	f7ff ff36 	bl	800b830 <ts_formatstring>
			length = _write(1, buf, length);
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	f7ff fed7 	bl	800b77c <_write>
 800b9ce:	4604      	mov	r4, r0
			free(buf);
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	f7ff fe38 	bl	800b646 <free>
	return length;
 800b9d6:	e7e4      	b.n	800b9a2 <iprintf+0x48>

0800b9d8 <puts>:
 **  Returns:  If successful, the result is a nonnegative integer; otherwise,
 **  the result is EOF.
 **
 **===========================================================================
 */
int puts(const char *s) {
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4605      	mov	r5, r0
	int length = strlen(s);
 800b9dc:	f7f4 fc08 	bl	80001f0 <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*) s, length);
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4602      	mov	r2, r0
	int length = strlen(s);
 800b9e4:	4604      	mov	r4, r0
	numbytes = _write(1, (char*) s, length);
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	f7ff fec8 	bl	800b77c <_write>
	numbytes += _write(1, "\n", 1);
 800b9ec:	2201      	movs	r2, #1
	numbytes = _write(1, (char*) s, length);
 800b9ee:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800b9f0:	4905      	ldr	r1, [pc, #20]	; (800ba08 <puts+0x30>)
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f7ff fec2 	bl	800b77c <_write>

	if (numbytes == (length + 1)) {
 800b9f8:	3401      	adds	r4, #1
	numbytes += _write(1, "\n", 1);
 800b9fa:	4428      	add	r0, r5
	} else {
		res = EOF;
	}

	return res;
}
 800b9fc:	1b00      	subs	r0, r0, r4
 800b9fe:	bf18      	it	ne
 800ba00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ba04:	bd38      	pop	{r3, r4, r5, pc}
 800ba06:	bf00      	nop
 800ba08:	0800e092 	.word	0x0800e092

0800ba0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ba0c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800ba0e:	480b      	ldr	r0, [pc, #44]	; (800ba3c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800ba10:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <MX_USART3_UART_Init+0x34>)
 800ba12:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800ba16:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ba1a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ba20:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ba22:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ba24:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ba26:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ba28:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ba2a:	f7f6 f817 	bl	8001a5c <HAL_UART_Init>
 800ba2e:	b118      	cbz	r0, 800ba38 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800ba30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ba34:	f7ff be04 	b.w	800b640 <Error_Handler>
 800ba38:	bd08      	pop	{r3, pc}
 800ba3a:	bf00      	nop
 800ba3c:	2000ab10 	.word	0x2000ab10
 800ba40:	40004800 	.word	0x40004800

0800ba44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ba44:	b510      	push	{r4, lr}
 800ba46:	4604      	mov	r4, r0
 800ba48:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba4a:	2214      	movs	r2, #20
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	a803      	add	r0, sp, #12
 800ba50:	f000 f8f6 	bl	800bc40 <memset>
  if(uartHandle->Instance==USART3)
 800ba54:	6822      	ldr	r2, [r4, #0]
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <HAL_UART_MspInit+0x68>)
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d125      	bne.n	800baa8 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba5c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800ba60:	2100      	movs	r1, #0
 800ba62:	9101      	str	r1, [sp, #4]
 800ba64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba66:	4812      	ldr	r0, [pc, #72]	; (800bab0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ba6c:	641a      	str	r2, [r3, #64]	; 0x40
 800ba6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba70:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800ba74:	9201      	str	r2, [sp, #4]
 800ba76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ba78:	9102      	str	r1, [sp, #8]
 800ba7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba7c:	f042 0208 	orr.w	r2, r2, #8
 800ba80:	631a      	str	r2, [r3, #48]	; 0x30
 800ba82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba84:	f003 0308 	and.w	r3, r3, #8
 800ba88:	9302      	str	r3, [sp, #8]
 800ba8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800ba8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ba90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba92:	2302      	movs	r3, #2
 800ba94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba96:	2301      	movs	r3, #1
 800ba98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba9e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800baa0:	2307      	movs	r3, #7
 800baa2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800baa4:	f7f5 f980 	bl	8000da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800baa8:	b008      	add	sp, #32
 800baaa:	bd10      	pop	{r4, pc}
 800baac:	40004800 	.word	0x40004800
 800bab0:	40020c00 	.word	0x40020c00

0800bab4 <MX_USB_OTG_FS_PCD_Init>:
/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bab4:	480c      	ldr	r0, [pc, #48]	; (800bae8 <MX_USB_OTG_FS_PCD_Init+0x34>)
{
 800bab6:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bab8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800babc:	2304      	movs	r3, #4
 800babe:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bac2:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bac4:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bac6:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bac8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800baca:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bacc:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bace:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bad0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bad2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bad4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bad6:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bad8:	f7f5 fa57 	bl	8000f8a <HAL_PCD_Init>
 800badc:	b118      	cbz	r0, 800bae6 <MX_USB_OTG_FS_PCD_Init+0x32>
  {
    Error_Handler();
  }

}
 800bade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800bae2:	f7ff bdad 	b.w	800b640 <Error_Handler>
 800bae6:	bd08      	pop	{r3, pc}
 800bae8:	2000ab50 	.word	0x2000ab50

0800baec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baec:	b530      	push	{r4, r5, lr}
 800baee:	4604      	mov	r4, r0
 800baf0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baf2:	2214      	movs	r2, #20
 800baf4:	2100      	movs	r1, #0
 800baf6:	a803      	add	r0, sp, #12
 800baf8:	f000 f8a2 	bl	800bc40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb02:	d12f      	bne.n	800bb64 <HAL_PCD_MspInit+0x78>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb04:	4c18      	ldr	r4, [pc, #96]	; (800bb68 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb06:	4819      	ldr	r0, [pc, #100]	; (800bb6c <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb08:	2500      	movs	r5, #0
 800bb0a:	9501      	str	r5, [sp, #4]
 800bb0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb0e:	f043 0301 	orr.w	r3, r3, #1
 800bb12:	6323      	str	r3, [r4, #48]	; 0x30
 800bb14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800bb1e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800bb22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb24:	2302      	movs	r3, #2
 800bb26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb2e:	230a      	movs	r3, #10
 800bb30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb32:	f7f5 f939 	bl	8000da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800bb36:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bb3a:	a903      	add	r1, sp, #12
 800bb3c:	480b      	ldr	r0, [pc, #44]	; (800bb6c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800bb3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb40:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb42:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bb44:	f7f5 f930 	bl	8000da8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb4e:	6363      	str	r3, [r4, #52]	; 0x34
 800bb50:	9502      	str	r5, [sp, #8]
 800bb52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb58:	6463      	str	r3, [r4, #68]	; 0x44
 800bb5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb60:	9302      	str	r3, [sp, #8]
 800bb62:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb64:	b009      	add	sp, #36	; 0x24
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	40023800 	.word	0x40023800
 800bb6c:	40020000 	.word	0x40020000

0800bb70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800bb70:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bba8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bb74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bb76:	e003      	b.n	800bb80 <LoopCopyDataInit>

0800bb78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bb78:	4b0c      	ldr	r3, [pc, #48]	; (800bbac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bb7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bb7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bb7e:	3104      	adds	r1, #4

0800bb80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bb80:	480b      	ldr	r0, [pc, #44]	; (800bbb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bb84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bb86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bb88:	d3f6      	bcc.n	800bb78 <CopyDataInit>
  ldr  r2, =_sbss
 800bb8a:	4a0b      	ldr	r2, [pc, #44]	; (800bbb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bb8c:	e002      	b.n	800bb94 <LoopFillZerobss>

0800bb8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bb8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bb90:	f842 3b04 	str.w	r3, [r2], #4

0800bb94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bb94:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bb96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bb98:	d3f9      	bcc.n	800bb8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bb9a:	f7ff fe09 	bl	800b7b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb9e:	f000 f811 	bl	800bbc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bba2:	f7ff fd2b 	bl	800b5fc <main>
  bx  lr    
 800bba6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800bba8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800bbac:	0800e770 	.word	0x0800e770
  ldr  r0, =_sdata
 800bbb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bbb4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800bbb8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800bbbc:	2000af58 	.word	0x2000af58

0800bbc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bbc0:	e7fe      	b.n	800bbc0 <ADC_IRQHandler>
	...

0800bbc4 <__libc_init_array>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	4e0d      	ldr	r6, [pc, #52]	; (800bbfc <__libc_init_array+0x38>)
 800bbc8:	4c0d      	ldr	r4, [pc, #52]	; (800bc00 <__libc_init_array+0x3c>)
 800bbca:	1ba4      	subs	r4, r4, r6
 800bbcc:	10a4      	asrs	r4, r4, #2
 800bbce:	2500      	movs	r5, #0
 800bbd0:	42a5      	cmp	r5, r4
 800bbd2:	d109      	bne.n	800bbe8 <__libc_init_array+0x24>
 800bbd4:	4e0b      	ldr	r6, [pc, #44]	; (800bc04 <__libc_init_array+0x40>)
 800bbd6:	4c0c      	ldr	r4, [pc, #48]	; (800bc08 <__libc_init_array+0x44>)
 800bbd8:	f000 fa2c 	bl	800c034 <_init>
 800bbdc:	1ba4      	subs	r4, r4, r6
 800bbde:	10a4      	asrs	r4, r4, #2
 800bbe0:	2500      	movs	r5, #0
 800bbe2:	42a5      	cmp	r5, r4
 800bbe4:	d105      	bne.n	800bbf2 <__libc_init_array+0x2e>
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbec:	4798      	blx	r3
 800bbee:	3501      	adds	r5, #1
 800bbf0:	e7ee      	b.n	800bbd0 <__libc_init_array+0xc>
 800bbf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbf6:	4798      	blx	r3
 800bbf8:	3501      	adds	r5, #1
 800bbfa:	e7f2      	b.n	800bbe2 <__libc_init_array+0x1e>
 800bbfc:	0800e768 	.word	0x0800e768
 800bc00:	0800e768 	.word	0x0800e768
 800bc04:	0800e768 	.word	0x0800e768
 800bc08:	0800e76c 	.word	0x0800e76c

0800bc0c <memcmp>:
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	3901      	subs	r1, #1
 800bc10:	4402      	add	r2, r0
 800bc12:	4290      	cmp	r0, r2
 800bc14:	d101      	bne.n	800bc1a <memcmp+0xe>
 800bc16:	2000      	movs	r0, #0
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	d0f5      	beq.n	800bc12 <memcmp+0x6>
 800bc26:	1b18      	subs	r0, r3, r4
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <memcpy>:
 800bc2a:	b510      	push	{r4, lr}
 800bc2c:	1e43      	subs	r3, r0, #1
 800bc2e:	440a      	add	r2, r1
 800bc30:	4291      	cmp	r1, r2
 800bc32:	d100      	bne.n	800bc36 <memcpy+0xc>
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc3e:	e7f7      	b.n	800bc30 <memcpy+0x6>

0800bc40 <memset>:
 800bc40:	4402      	add	r2, r0
 800bc42:	4603      	mov	r3, r0
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d100      	bne.n	800bc4a <memset+0xa>
 800bc48:	4770      	bx	lr
 800bc4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc4e:	e7f9      	b.n	800bc44 <memset+0x4>

0800bc50 <_strerror_r>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	288e      	cmp	r0, #142	; 0x8e
 800bc5a:	f200 812f 	bhi.w	800bebc <_strerror_r+0x26c>
 800bc5e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bc62:	0138      	.short	0x0138
 800bc64:	0091008f 	.word	0x0091008f
 800bc68:	00950093 	.word	0x00950093
 800bc6c:	00990097 	.word	0x00990097
 800bc70:	009d009b 	.word	0x009d009b
 800bc74:	00a300a1 	.word	0x00a300a1
 800bc78:	00a900a7 	.word	0x00a900a7
 800bc7c:	00ad00ab 	.word	0x00ad00ab
 800bc80:	00af012d 	.word	0x00af012d
 800bc84:	00b300b1 	.word	0x00b300b1
 800bc88:	00b700b5 	.word	0x00b700b5
 800bc8c:	00bf00bd 	.word	0x00bf00bd
 800bc90:	00c700c5 	.word	0x00c700c5
 800bc94:	00cb00c9 	.word	0x00cb00c9
 800bc98:	00d100cd 	.word	0x00d100cd
 800bc9c:	00d700d5 	.word	0x00d700d5
 800bca0:	00db00d9 	.word	0x00db00d9
 800bca4:	00df00dd 	.word	0x00df00dd
 800bca8:	00e300e1 	.word	0x00e300e1
 800bcac:	012d012d 	.word	0x012d012d
 800bcb0:	012d012d 	.word	0x012d012d
 800bcb4:	012d012d 	.word	0x012d012d
 800bcb8:	012d012d 	.word	0x012d012d
 800bcbc:	00eb00e7 	.word	0x00eb00e7
 800bcc0:	012d012d 	.word	0x012d012d
 800bcc4:	012d012d 	.word	0x012d012d
 800bcc8:	012d012d 	.word	0x012d012d
 800bccc:	012d012d 	.word	0x012d012d
 800bcd0:	012d012d 	.word	0x012d012d
 800bcd4:	012d012d 	.word	0x012d012d
 800bcd8:	00ed012d 	.word	0x00ed012d
 800bcdc:	00ef0107 	.word	0x00ef0107
 800bce0:	012d00f1 	.word	0x012d00f1
 800bce4:	012d012d 	.word	0x012d012d
 800bce8:	012d00f3 	.word	0x012d00f3
 800bcec:	012d012d 	.word	0x012d012d
 800bcf0:	012d00f5 	.word	0x012d00f5
 800bcf4:	00f9012d 	.word	0x00f9012d
 800bcf8:	012d012d 	.word	0x012d012d
 800bcfc:	012d00fb 	.word	0x012d00fb
 800bd00:	012d012d 	.word	0x012d012d
 800bd04:	012d012d 	.word	0x012d012d
 800bd08:	012d012d 	.word	0x012d012d
 800bd0c:	012d012d 	.word	0x012d012d
 800bd10:	00fd012d 	.word	0x00fd012d
 800bd14:	00ff012d 	.word	0x00ff012d
 800bd18:	01030101 	.word	0x01030101
 800bd1c:	012d012d 	.word	0x012d012d
 800bd20:	012d0125 	.word	0x012d0125
 800bd24:	012d012d 	.word	0x012d012d
 800bd28:	012d012d 	.word	0x012d012d
 800bd2c:	012d012d 	.word	0x012d012d
 800bd30:	0113012d 	.word	0x0113012d
 800bd34:	01090105 	.word	0x01090105
 800bd38:	010d010b 	.word	0x010d010b
 800bd3c:	012d010f 	.word	0x012d010f
 800bd40:	01150111 	.word	0x01150111
 800bd44:	00e90119 	.word	0x00e90119
 800bd48:	012b00c1 	.word	0x012b00c1
 800bd4c:	00cf00b9 	.word	0x00cf00b9
 800bd50:	009f00bb 	.word	0x009f00bb
 800bd54:	012900a5 	.word	0x012900a5
 800bd58:	012d00f7 	.word	0x012d00f7
 800bd5c:	00c30117 	.word	0x00c30117
 800bd60:	011b011d 	.word	0x011b011d
 800bd64:	012d012d 	.word	0x012d012d
 800bd68:	012d012d 	.word	0x012d012d
 800bd6c:	00d3012d 	.word	0x00d3012d
 800bd70:	012d012d 	.word	0x012d012d
 800bd74:	00e5012d 	.word	0x00e5012d
 800bd78:	011f0127 	.word	0x011f0127
 800bd7c:	01230121 	.word	0x01230121
 800bd80:	4855      	ldr	r0, [pc, #340]	; (800bed8 <_strerror_r+0x288>)
 800bd82:	bd10      	pop	{r4, pc}
 800bd84:	4855      	ldr	r0, [pc, #340]	; (800bedc <_strerror_r+0x28c>)
 800bd86:	bd10      	pop	{r4, pc}
 800bd88:	4855      	ldr	r0, [pc, #340]	; (800bee0 <_strerror_r+0x290>)
 800bd8a:	bd10      	pop	{r4, pc}
 800bd8c:	4855      	ldr	r0, [pc, #340]	; (800bee4 <_strerror_r+0x294>)
 800bd8e:	bd10      	pop	{r4, pc}
 800bd90:	4855      	ldr	r0, [pc, #340]	; (800bee8 <_strerror_r+0x298>)
 800bd92:	bd10      	pop	{r4, pc}
 800bd94:	4855      	ldr	r0, [pc, #340]	; (800beec <_strerror_r+0x29c>)
 800bd96:	bd10      	pop	{r4, pc}
 800bd98:	4855      	ldr	r0, [pc, #340]	; (800bef0 <_strerror_r+0x2a0>)
 800bd9a:	bd10      	pop	{r4, pc}
 800bd9c:	4855      	ldr	r0, [pc, #340]	; (800bef4 <_strerror_r+0x2a4>)
 800bd9e:	bd10      	pop	{r4, pc}
 800bda0:	4855      	ldr	r0, [pc, #340]	; (800bef8 <_strerror_r+0x2a8>)
 800bda2:	bd10      	pop	{r4, pc}
 800bda4:	4855      	ldr	r0, [pc, #340]	; (800befc <_strerror_r+0x2ac>)
 800bda6:	bd10      	pop	{r4, pc}
 800bda8:	4855      	ldr	r0, [pc, #340]	; (800bf00 <_strerror_r+0x2b0>)
 800bdaa:	bd10      	pop	{r4, pc}
 800bdac:	4855      	ldr	r0, [pc, #340]	; (800bf04 <_strerror_r+0x2b4>)
 800bdae:	bd10      	pop	{r4, pc}
 800bdb0:	4855      	ldr	r0, [pc, #340]	; (800bf08 <_strerror_r+0x2b8>)
 800bdb2:	bd10      	pop	{r4, pc}
 800bdb4:	4855      	ldr	r0, [pc, #340]	; (800bf0c <_strerror_r+0x2bc>)
 800bdb6:	bd10      	pop	{r4, pc}
 800bdb8:	4855      	ldr	r0, [pc, #340]	; (800bf10 <_strerror_r+0x2c0>)
 800bdba:	bd10      	pop	{r4, pc}
 800bdbc:	4855      	ldr	r0, [pc, #340]	; (800bf14 <_strerror_r+0x2c4>)
 800bdbe:	bd10      	pop	{r4, pc}
 800bdc0:	4855      	ldr	r0, [pc, #340]	; (800bf18 <_strerror_r+0x2c8>)
 800bdc2:	bd10      	pop	{r4, pc}
 800bdc4:	4855      	ldr	r0, [pc, #340]	; (800bf1c <_strerror_r+0x2cc>)
 800bdc6:	bd10      	pop	{r4, pc}
 800bdc8:	4855      	ldr	r0, [pc, #340]	; (800bf20 <_strerror_r+0x2d0>)
 800bdca:	bd10      	pop	{r4, pc}
 800bdcc:	4855      	ldr	r0, [pc, #340]	; (800bf24 <_strerror_r+0x2d4>)
 800bdce:	bd10      	pop	{r4, pc}
 800bdd0:	4855      	ldr	r0, [pc, #340]	; (800bf28 <_strerror_r+0x2d8>)
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	4855      	ldr	r0, [pc, #340]	; (800bf2c <_strerror_r+0x2dc>)
 800bdd6:	bd10      	pop	{r4, pc}
 800bdd8:	4855      	ldr	r0, [pc, #340]	; (800bf30 <_strerror_r+0x2e0>)
 800bdda:	bd10      	pop	{r4, pc}
 800bddc:	4855      	ldr	r0, [pc, #340]	; (800bf34 <_strerror_r+0x2e4>)
 800bdde:	bd10      	pop	{r4, pc}
 800bde0:	4855      	ldr	r0, [pc, #340]	; (800bf38 <_strerror_r+0x2e8>)
 800bde2:	bd10      	pop	{r4, pc}
 800bde4:	4855      	ldr	r0, [pc, #340]	; (800bf3c <_strerror_r+0x2ec>)
 800bde6:	bd10      	pop	{r4, pc}
 800bde8:	4855      	ldr	r0, [pc, #340]	; (800bf40 <_strerror_r+0x2f0>)
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	4855      	ldr	r0, [pc, #340]	; (800bf44 <_strerror_r+0x2f4>)
 800bdee:	bd10      	pop	{r4, pc}
 800bdf0:	4855      	ldr	r0, [pc, #340]	; (800bf48 <_strerror_r+0x2f8>)
 800bdf2:	bd10      	pop	{r4, pc}
 800bdf4:	4855      	ldr	r0, [pc, #340]	; (800bf4c <_strerror_r+0x2fc>)
 800bdf6:	bd10      	pop	{r4, pc}
 800bdf8:	4855      	ldr	r0, [pc, #340]	; (800bf50 <_strerror_r+0x300>)
 800bdfa:	bd10      	pop	{r4, pc}
 800bdfc:	4855      	ldr	r0, [pc, #340]	; (800bf54 <_strerror_r+0x304>)
 800bdfe:	bd10      	pop	{r4, pc}
 800be00:	4855      	ldr	r0, [pc, #340]	; (800bf58 <_strerror_r+0x308>)
 800be02:	bd10      	pop	{r4, pc}
 800be04:	4855      	ldr	r0, [pc, #340]	; (800bf5c <_strerror_r+0x30c>)
 800be06:	bd10      	pop	{r4, pc}
 800be08:	4855      	ldr	r0, [pc, #340]	; (800bf60 <_strerror_r+0x310>)
 800be0a:	bd10      	pop	{r4, pc}
 800be0c:	4855      	ldr	r0, [pc, #340]	; (800bf64 <_strerror_r+0x314>)
 800be0e:	bd10      	pop	{r4, pc}
 800be10:	4855      	ldr	r0, [pc, #340]	; (800bf68 <_strerror_r+0x318>)
 800be12:	bd10      	pop	{r4, pc}
 800be14:	4855      	ldr	r0, [pc, #340]	; (800bf6c <_strerror_r+0x31c>)
 800be16:	bd10      	pop	{r4, pc}
 800be18:	4855      	ldr	r0, [pc, #340]	; (800bf70 <_strerror_r+0x320>)
 800be1a:	bd10      	pop	{r4, pc}
 800be1c:	4855      	ldr	r0, [pc, #340]	; (800bf74 <_strerror_r+0x324>)
 800be1e:	bd10      	pop	{r4, pc}
 800be20:	4855      	ldr	r0, [pc, #340]	; (800bf78 <_strerror_r+0x328>)
 800be22:	bd10      	pop	{r4, pc}
 800be24:	4855      	ldr	r0, [pc, #340]	; (800bf7c <_strerror_r+0x32c>)
 800be26:	bd10      	pop	{r4, pc}
 800be28:	4855      	ldr	r0, [pc, #340]	; (800bf80 <_strerror_r+0x330>)
 800be2a:	bd10      	pop	{r4, pc}
 800be2c:	4855      	ldr	r0, [pc, #340]	; (800bf84 <_strerror_r+0x334>)
 800be2e:	bd10      	pop	{r4, pc}
 800be30:	4855      	ldr	r0, [pc, #340]	; (800bf88 <_strerror_r+0x338>)
 800be32:	bd10      	pop	{r4, pc}
 800be34:	4855      	ldr	r0, [pc, #340]	; (800bf8c <_strerror_r+0x33c>)
 800be36:	bd10      	pop	{r4, pc}
 800be38:	4855      	ldr	r0, [pc, #340]	; (800bf90 <_strerror_r+0x340>)
 800be3a:	bd10      	pop	{r4, pc}
 800be3c:	4855      	ldr	r0, [pc, #340]	; (800bf94 <_strerror_r+0x344>)
 800be3e:	bd10      	pop	{r4, pc}
 800be40:	4855      	ldr	r0, [pc, #340]	; (800bf98 <_strerror_r+0x348>)
 800be42:	bd10      	pop	{r4, pc}
 800be44:	4855      	ldr	r0, [pc, #340]	; (800bf9c <_strerror_r+0x34c>)
 800be46:	bd10      	pop	{r4, pc}
 800be48:	4855      	ldr	r0, [pc, #340]	; (800bfa0 <_strerror_r+0x350>)
 800be4a:	bd10      	pop	{r4, pc}
 800be4c:	4855      	ldr	r0, [pc, #340]	; (800bfa4 <_strerror_r+0x354>)
 800be4e:	bd10      	pop	{r4, pc}
 800be50:	4855      	ldr	r0, [pc, #340]	; (800bfa8 <_strerror_r+0x358>)
 800be52:	bd10      	pop	{r4, pc}
 800be54:	4855      	ldr	r0, [pc, #340]	; (800bfac <_strerror_r+0x35c>)
 800be56:	bd10      	pop	{r4, pc}
 800be58:	4855      	ldr	r0, [pc, #340]	; (800bfb0 <_strerror_r+0x360>)
 800be5a:	bd10      	pop	{r4, pc}
 800be5c:	4855      	ldr	r0, [pc, #340]	; (800bfb4 <_strerror_r+0x364>)
 800be5e:	bd10      	pop	{r4, pc}
 800be60:	4855      	ldr	r0, [pc, #340]	; (800bfb8 <_strerror_r+0x368>)
 800be62:	bd10      	pop	{r4, pc}
 800be64:	4855      	ldr	r0, [pc, #340]	; (800bfbc <_strerror_r+0x36c>)
 800be66:	bd10      	pop	{r4, pc}
 800be68:	4855      	ldr	r0, [pc, #340]	; (800bfc0 <_strerror_r+0x370>)
 800be6a:	bd10      	pop	{r4, pc}
 800be6c:	4855      	ldr	r0, [pc, #340]	; (800bfc4 <_strerror_r+0x374>)
 800be6e:	bd10      	pop	{r4, pc}
 800be70:	4855      	ldr	r0, [pc, #340]	; (800bfc8 <_strerror_r+0x378>)
 800be72:	bd10      	pop	{r4, pc}
 800be74:	4855      	ldr	r0, [pc, #340]	; (800bfcc <_strerror_r+0x37c>)
 800be76:	bd10      	pop	{r4, pc}
 800be78:	4855      	ldr	r0, [pc, #340]	; (800bfd0 <_strerror_r+0x380>)
 800be7a:	bd10      	pop	{r4, pc}
 800be7c:	4855      	ldr	r0, [pc, #340]	; (800bfd4 <_strerror_r+0x384>)
 800be7e:	bd10      	pop	{r4, pc}
 800be80:	4855      	ldr	r0, [pc, #340]	; (800bfd8 <_strerror_r+0x388>)
 800be82:	bd10      	pop	{r4, pc}
 800be84:	4855      	ldr	r0, [pc, #340]	; (800bfdc <_strerror_r+0x38c>)
 800be86:	bd10      	pop	{r4, pc}
 800be88:	4855      	ldr	r0, [pc, #340]	; (800bfe0 <_strerror_r+0x390>)
 800be8a:	bd10      	pop	{r4, pc}
 800be8c:	4855      	ldr	r0, [pc, #340]	; (800bfe4 <_strerror_r+0x394>)
 800be8e:	bd10      	pop	{r4, pc}
 800be90:	4855      	ldr	r0, [pc, #340]	; (800bfe8 <_strerror_r+0x398>)
 800be92:	bd10      	pop	{r4, pc}
 800be94:	4855      	ldr	r0, [pc, #340]	; (800bfec <_strerror_r+0x39c>)
 800be96:	bd10      	pop	{r4, pc}
 800be98:	4855      	ldr	r0, [pc, #340]	; (800bff0 <_strerror_r+0x3a0>)
 800be9a:	bd10      	pop	{r4, pc}
 800be9c:	4855      	ldr	r0, [pc, #340]	; (800bff4 <_strerror_r+0x3a4>)
 800be9e:	bd10      	pop	{r4, pc}
 800bea0:	4855      	ldr	r0, [pc, #340]	; (800bff8 <_strerror_r+0x3a8>)
 800bea2:	bd10      	pop	{r4, pc}
 800bea4:	4855      	ldr	r0, [pc, #340]	; (800bffc <_strerror_r+0x3ac>)
 800bea6:	bd10      	pop	{r4, pc}
 800bea8:	4855      	ldr	r0, [pc, #340]	; (800c000 <_strerror_r+0x3b0>)
 800beaa:	bd10      	pop	{r4, pc}
 800beac:	4855      	ldr	r0, [pc, #340]	; (800c004 <_strerror_r+0x3b4>)
 800beae:	bd10      	pop	{r4, pc}
 800beb0:	4855      	ldr	r0, [pc, #340]	; (800c008 <_strerror_r+0x3b8>)
 800beb2:	bd10      	pop	{r4, pc}
 800beb4:	4855      	ldr	r0, [pc, #340]	; (800c00c <_strerror_r+0x3bc>)
 800beb6:	bd10      	pop	{r4, pc}
 800beb8:	4855      	ldr	r0, [pc, #340]	; (800c010 <_strerror_r+0x3c0>)
 800beba:	bd10      	pop	{r4, pc}
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	bf14      	ite	ne
 800bec0:	461a      	movne	r2, r3
 800bec2:	4622      	moveq	r2, r4
 800bec4:	f000 f8b4 	bl	800c030 <_user_strerror>
 800bec8:	4b52      	ldr	r3, [pc, #328]	; (800c014 <_strerror_r+0x3c4>)
 800beca:	2800      	cmp	r0, #0
 800becc:	bf08      	it	eq
 800bece:	4618      	moveq	r0, r3
 800bed0:	bd10      	pop	{r4, pc}
 800bed2:	4851      	ldr	r0, [pc, #324]	; (800c018 <_strerror_r+0x3c8>)
 800bed4:	bd10      	pop	{r4, pc}
 800bed6:	bf00      	nop
 800bed8:	0800e0d0 	.word	0x0800e0d0
 800bedc:	0800e0da 	.word	0x0800e0da
 800bee0:	0800e0f4 	.word	0x0800e0f4
 800bee4:	0800e104 	.word	0x0800e104
 800bee8:	0800e11c 	.word	0x0800e11c
 800beec:	0800e126 	.word	0x0800e126
 800bef0:	0800e140 	.word	0x0800e140
 800bef4:	0800e152 	.word	0x0800e152
 800bef8:	0800e164 	.word	0x0800e164
 800befc:	0800e17d 	.word	0x0800e17d
 800bf00:	0800e18d 	.word	0x0800e18d
 800bf04:	0800e199 	.word	0x0800e199
 800bf08:	0800e1b6 	.word	0x0800e1b6
 800bf0c:	0800e1c8 	.word	0x0800e1c8
 800bf10:	0800e1d9 	.word	0x0800e1d9
 800bf14:	0800e1eb 	.word	0x0800e1eb
 800bf18:	0800e1f7 	.word	0x0800e1f7
 800bf1c:	0800e20f 	.word	0x0800e20f
 800bf20:	0800e21b 	.word	0x0800e21b
 800bf24:	0800e22d 	.word	0x0800e22d
 800bf28:	0800e23c 	.word	0x0800e23c
 800bf2c:	0800e24c 	.word	0x0800e24c
 800bf30:	0800e259 	.word	0x0800e259
 800bf34:	0800e278 	.word	0x0800e278
 800bf38:	0800e287 	.word	0x0800e287
 800bf3c:	0800e298 	.word	0x0800e298
 800bf40:	0800e2bc 	.word	0x0800e2bc
 800bf44:	0800e2da 	.word	0x0800e2da
 800bf48:	0800e2f8 	.word	0x0800e2f8
 800bf4c:	0800e318 	.word	0x0800e318
 800bf50:	0800e32f 	.word	0x0800e32f
 800bf54:	0800e33e 	.word	0x0800e33e
 800bf58:	0800e34d 	.word	0x0800e34d
 800bf5c:	0800e361 	.word	0x0800e361
 800bf60:	0800e379 	.word	0x0800e379
 800bf64:	0800e387 	.word	0x0800e387
 800bf68:	0800e394 	.word	0x0800e394
 800bf6c:	0800e3aa 	.word	0x0800e3aa
 800bf70:	0800e3b9 	.word	0x0800e3b9
 800bf74:	0800e3c5 	.word	0x0800e3c5
 800bf78:	0800e3f4 	.word	0x0800e3f4
 800bf7c:	0800e405 	.word	0x0800e405
 800bf80:	0800e420 	.word	0x0800e420
 800bf84:	0800e433 	.word	0x0800e433
 800bf88:	0800e449 	.word	0x0800e449
 800bf8c:	0800e452 	.word	0x0800e452
 800bf90:	0800e469 	.word	0x0800e469
 800bf94:	0800e471 	.word	0x0800e471
 800bf98:	0800e47e 	.word	0x0800e47e
 800bf9c:	0800e493 	.word	0x0800e493
 800bfa0:	0800e4a7 	.word	0x0800e4a7
 800bfa4:	0800e4bf 	.word	0x0800e4bf
 800bfa8:	0800e4ce 	.word	0x0800e4ce
 800bfac:	0800e4df 	.word	0x0800e4df
 800bfb0:	0800e4f2 	.word	0x0800e4f2
 800bfb4:	0800e4fe 	.word	0x0800e4fe
 800bfb8:	0800e517 	.word	0x0800e517
 800bfbc:	0800e52b 	.word	0x0800e52b
 800bfc0:	0800e546 	.word	0x0800e546
 800bfc4:	0800e55e 	.word	0x0800e55e
 800bfc8:	0800e578 	.word	0x0800e578
 800bfcc:	0800e580 	.word	0x0800e580
 800bfd0:	0800e5b0 	.word	0x0800e5b0
 800bfd4:	0800e5cf 	.word	0x0800e5cf
 800bfd8:	0800e5ee 	.word	0x0800e5ee
 800bfdc:	0800e605 	.word	0x0800e605
 800bfe0:	0800e618 	.word	0x0800e618
 800bfe4:	0800e631 	.word	0x0800e631
 800bfe8:	0800e648 	.word	0x0800e648
 800bfec:	0800e65e 	.word	0x0800e65e
 800bff0:	0800e67f 	.word	0x0800e67f
 800bff4:	0800e697 	.word	0x0800e697
 800bff8:	0800e6b3 	.word	0x0800e6b3
 800bffc:	0800e6c6 	.word	0x0800e6c6
 800c000:	0800e6dc 	.word	0x0800e6dc
 800c004:	0800e6f0 	.word	0x0800e6f0
 800c008:	0800e712 	.word	0x0800e712
 800c00c:	0800e738 	.word	0x0800e738
 800c010:	0800e749 	.word	0x0800e749
 800c014:	0800e093 	.word	0x0800e093
 800c018:	0800e0c8 	.word	0x0800e0c8

0800c01c <strerror>:
 800c01c:	4601      	mov	r1, r0
 800c01e:	4803      	ldr	r0, [pc, #12]	; (800c02c <strerror+0x10>)
 800c020:	2300      	movs	r3, #0
 800c022:	461a      	mov	r2, r3
 800c024:	6800      	ldr	r0, [r0, #0]
 800c026:	f7ff be13 	b.w	800bc50 <_strerror_r>
 800c02a:	bf00      	nop
 800c02c:	20000014 	.word	0x20000014

0800c030 <_user_strerror>:
 800c030:	2000      	movs	r0, #0
 800c032:	4770      	bx	lr

0800c034 <_init>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	bf00      	nop
 800c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03a:	bc08      	pop	{r3}
 800c03c:	469e      	mov	lr, r3
 800c03e:	4770      	bx	lr

0800c040 <_fini>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	bf00      	nop
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr
