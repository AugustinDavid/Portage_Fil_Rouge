
Portage_Moteur_Jeu_P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000159c  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad5c  0800ad5c  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ad60  0800ad60  0001ad60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800ad64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          0000ae3c  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000ae4c  2000ae4c  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004633e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000092c2  00000000  00000000  0006637e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00017708  00000000  00000000  0006f640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc0  00000000  00000000  00086d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002498  00000000  00000000  00088908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000122e6  00000000  00000000  0008ada0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a2c9  00000000  00000000  0009d086  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000a734f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000052a8  00000000  00000000  000a73cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097a0 	.word	0x080097a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080097a0 	.word	0x080097a0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f82f 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f008 fe9c 	bl	8009260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f008 fe78 	bl	800921c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20004164 	.word	0x20004164
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20004164 	.word	0x20004164

08000558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
 800055a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff fff6 	bl	800054c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000560:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	bf1c      	itt	ne
 8000564:	4b05      	ldrne	r3, [pc, #20]	; (800057c <HAL_Delay+0x24>)
 8000566:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000568:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf18      	it	ne
 800056c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056e:	f7ff ffed 	bl	800054c <HAL_GetTick>
 8000572:	1b40      	subs	r0, r0, r5
 8000574:	4284      	cmp	r4, r0
 8000576:	d8fa      	bhi.n	800056e <HAL_Delay+0x16>
  {
  }
}
 8000578:	bd38      	pop	{r3, r4, r5, pc}
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	68dc      	ldr	r4, [r3, #12]
 80005aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	bf28      	it	cs
 80005b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 0501 	mov.w	r5, #1
 80005c0:	fa05 f303 	lsl.w	r3, r5, r3
 80005c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3c03      	subhi	r4, #3
 80005cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	4019      	ands	r1, r3
 80005d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	ea42 0201 	orr.w	r2, r2, r1
 80005e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfad      	iteet	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfb5      	itete	lt
 80005f6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800060c:	2800      	cmp	r0, #0
 800060e:	db08      	blt.n	8000622 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000610:	0942      	lsrs	r2, r0, #5
 8000612:	2301      	movs	r3, #1
 8000614:	f000 001f 	and.w	r0, r0, #31
 8000618:	fa03 f000 	lsl.w	r0, r3, r0
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_NVIC_EnableIRQ+0x18>)
 800061e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 8000628:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <ETH_Delay.constprop.4+0x20>)
 800062c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	fbb3 f3f2 	udiv	r3, r3, r2
 8000636:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8000638:	bf00      	nop
  } 
  while (Delay --);
 800063a:	9b01      	ldr	r3, [sp, #4]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f9      	bne.n	8000638 <ETH_Delay.constprop.4+0x10>
}
 8000644:	b002      	add	sp, #8
 8000646:	4770      	bx	lr
 8000648:	2000000c 	.word	0x2000000c

0800064c <ETH_FlushTransmitFIFO>:
{
 800064c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000652:	f241 0118 	movw	r1, #4120	; 0x1018
 8000656:	6803      	ldr	r3, [r0, #0]
 8000658:	585a      	ldr	r2, [r3, r1]
 800065a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800065e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000660:	585b      	ldr	r3, [r3, r1]
 8000662:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000664:	f7ff ffe0 	bl	8000628 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000668:	9a01      	ldr	r2, [sp, #4]
 800066a:	6803      	ldr	r3, [r0, #0]
 800066c:	505a      	str	r2, [r3, r1]
}
 800066e:	b003      	add	sp, #12
 8000670:	f85d fb04 	ldr.w	pc, [sp], #4

08000674 <ETH_MACDMAConfig>:
{
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000678:	b129      	cbz	r1, 8000686 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800067a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800067e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000680:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000684:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000686:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000688:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 800068a:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 800068c:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800068e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000690:	68a3      	ldr	r3, [r4, #8]
 8000692:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000696:	4830      	ldr	r0, [pc, #192]	; (8000758 <ETH_MACDMAConfig+0xe4>)
 8000698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069c:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80006a0:	bf0c      	ite	eq
 80006a2:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80006a6:	2100      	movne	r1, #0
 80006a8:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80006aa:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80006ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ae:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80006b0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b2:	f7ff ff51 	bl	8000558 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80006b6:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006b8:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80006ba:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006bc:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006be:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80006c0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006c2:	f7ff ff49 	bl	8000558 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80006ca:	2500      	movs	r5, #0
 80006cc:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80006ce:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80006d0:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80006d2:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80006d6:	0412      	lsls	r2, r2, #16
 80006d8:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80006da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80006de:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006e0:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80006e2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006e4:	f7ff ff38 	bl	8000558 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80006e8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ea:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80006ec:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006ee:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80006f0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f2:	f7ff ff31 	bl	8000558 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006f6:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006fa:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006fc:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000700:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000702:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000704:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000706:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800070a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800070e:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000710:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000712:	f7ff ff21 	bl	8000558 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000716:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800071a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800071c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000720:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000722:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000724:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000726:	f7ff ff17 	bl	8000558 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800072a:	6822      	ldr	r2, [r4, #0]
 800072c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000730:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000732:	69a3      	ldr	r3, [r4, #24]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d107      	bne.n	8000748 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000738:	f241 011c 	movw	r1, #4124	; 0x101c
 800073c:	5853      	ldr	r3, [r2, r1]
 800073e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000746:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000748:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800074c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800074e:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000750:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <ETH_MACDMAConfig+0xf4>)
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	ff20810f 	.word	0xff20810f
 800075c:	f8de3f23 	.word	0xf8de3f23
 8000760:	02c12080 	.word	0x02c12080
 8000764:	40028040 	.word	0x40028040
 8000768:	40028044 	.word	0x40028044

0800076c <HAL_ETH_DMATxDescListInit>:
{
 800076c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800076e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000772:	2c01      	cmp	r4, #1
 8000774:	f04f 0402 	mov.w	r4, #2
 8000778:	d033      	beq.n	80007e2 <HAL_ETH_DMATxDescListInit+0x76>
 800077a:	2501      	movs	r5, #1
 800077c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000780:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000784:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000786:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 800078a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800078c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000790:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8000794:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  for(i=0U; i < TxBuffCount; i++)
 8000798:	429d      	cmp	r5, r3
 800079a:	d10b      	bne.n	80007b4 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800079c:	6802      	ldr	r2, [r0, #0]
 800079e:	f241 0310 	movw	r3, #4112	; 0x1010
 80007a2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80007a4:	2301      	movs	r3, #1
 80007a6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80007aa:	2300      	movs	r3, #0
 80007ac:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80007b0:	4618      	mov	r0, r3
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80007b4:	fb0e 2605 	mla	r6, lr, r5, r2
 80007b8:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007bc:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80007be:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007c2:	b92e      	cbnz	r6, 80007d0 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80007c4:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80007c8:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80007cc:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80007d0:	4565      	cmp	r5, ip
 80007d2:	bf2c      	ite	cs
 80007d4:	460e      	movcs	r6, r1
 80007d6:	4626      	movcc	r6, r4
 80007d8:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 80007dc:	3501      	adds	r5, #1
 80007de:	3420      	adds	r4, #32
 80007e0:	e7da      	b.n	8000798 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80007e2:	4620      	mov	r0, r4
}
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007e6 <HAL_ETH_DMARxDescListInit>:
{
 80007e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80007ea:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80007ee:	2c01      	cmp	r4, #1
 80007f0:	f04f 0402 	mov.w	r4, #2
 80007f4:	d030      	beq.n	8000858 <HAL_ETH_DMARxDescListInit+0x72>
 80007f6:	2501      	movs	r5, #1
 80007f8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80007fc:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000800:	6281      	str	r1, [r0, #40]	; 0x28
 8000802:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 8000806:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000808:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800080c:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000810:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000814:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  for(i=0U; i < RxBuffCount; i++)
 8000818:	429d      	cmp	r5, r3
 800081a:	d10c      	bne.n	8000836 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800081c:	6802      	ldr	r2, [r0, #0]
 800081e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000822:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000824:	2301      	movs	r3, #1
 8000826:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800082a:	2300      	movs	r3, #0
 800082c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000830:	4618      	mov	r0, r3
 8000832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000836:	fb0e 2805 	mla	r8, lr, r5, r2
 800083a:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800083e:	4565      	cmp	r5, ip
 8000840:	bf2c      	ite	cs
 8000842:	4688      	movcs	r8, r1
 8000844:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000846:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800084a:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800084e:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000852:	3501      	adds	r5, #1
 8000854:	3420      	adds	r4, #32
 8000856:	e7df      	b.n	8000818 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000858:	4620      	mov	r0, r4
}
 800085a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000860 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000860:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000864:	2b01      	cmp	r3, #1
{
 8000866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000868:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 800086c:	d068      	beq.n	8000940 <HAL_ETH_TransmitFrame+0xe0>
 800086e:	2201      	movs	r2, #1
 8000870:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000874:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000878:	b929      	cbnz	r1, 8000886 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800087a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800087e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000882:	4610      	mov	r0, r2
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000886:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000888:	681c      	ldr	r4, [r3, #0]
 800088a:	2c00      	cmp	r4, #0
 800088c:	da06      	bge.n	800089c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800088e:	2312      	movs	r3, #18
 8000890:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000894:	2300      	movs	r3, #0
 8000896:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800089a:	e7f2      	b.n	8000882 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800089c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80008a0:	42a1      	cmp	r1, r4
 80008a2:	d92e      	bls.n	8000902 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80008a4:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80008a8:	fb04 1412 	mls	r4, r4, r2, r1
 80008ac:	b33c      	cbz	r4, 80008fe <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80008ae:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80008b0:	4c24      	ldr	r4, [pc, #144]	; (8000944 <HAL_ETH_TransmitFrame+0xe4>)
 80008b2:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80008b6:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80008ba:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80008be:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80008c0:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80008c4:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80008c6:	681d      	ldr	r5, [r3, #0]
 80008c8:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80008cc:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80008ce:	b91c      	cbnz	r4, 80008d8 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80008d0:	681d      	ldr	r5, [r3, #0]
 80008d2:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80008d6:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80008d8:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80008da:	bf08      	it	eq
 80008dc:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80008de:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80008e0:	bf04      	itt	eq
 80008e2:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80008e6:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80008e8:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80008ea:	bf08      	it	eq
 80008ec:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80008ee:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80008f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80008f4:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80008f6:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80008f8:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80008fa:	d1e4      	bne.n	80008c6 <HAL_ETH_TransmitFrame+0x66>
 80008fc:	e00d      	b.n	800091a <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80008fe:	2a01      	cmp	r2, #1
 8000900:	d1d6      	bne.n	80008b0 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000908:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800090a:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800090c:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000910:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000914:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000916:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800091c:	f241 0214 	movw	r2, #4116	; 0x1014
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	5899      	ldr	r1, [r3, r2]
 8000924:	0749      	lsls	r1, r1, #29
 8000926:	d505      	bpl.n	8000934 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000928:	2104      	movs	r1, #4
 800092a:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 800092c:	f241 0204 	movw	r2, #4100	; 0x1004
 8000930:	2100      	movs	r1, #0
 8000932:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000934:	2301      	movs	r3, #1
 8000936:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800093a:	2300      	movs	r3, #0
 800093c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000940:	4618      	mov	r0, r3
}
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000944:	fffffa0c 	.word	0xfffffa0c

08000948 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000948:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800094c:	2b01      	cmp	r3, #1
{
 800094e:	b530      	push	{r4, r5, lr}
 8000950:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000954:	d03b      	beq.n	80009ce <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000956:	2201      	movs	r2, #1
 8000958:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800095c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000960:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8000962:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000964:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2a00      	cmp	r2, #0
 800096a:	db01      	blt.n	8000970 <HAL_ETH_GetReceivedFrame_IT+0x28>
 800096c:	3c01      	subs	r4, #1
 800096e:	d106      	bne.n	800097e <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000970:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000972:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000974:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000978:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800097c:	e027      	b.n	80009ce <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68dd      	ldr	r5, [r3, #12]
 8000982:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000986:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800098a:	d103      	bne.n	8000994 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800098c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800098e:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000990:	6285      	str	r5, [r0, #40]	; 0x28
 8000992:	e7e7      	b.n	8000964 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	f412 7f40 	tst.w	r2, #768	; 0x300
 800099a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800099c:	d102      	bne.n	80009a4 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 800099e:	3201      	adds	r2, #1
 80009a0:	6382      	str	r2, [r0, #56]	; 0x38
 80009a2:	e7f5      	b.n	8000990 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 80009a4:	3201      	adds	r2, #1
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80009a6:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80009a8:	bf08      	it	eq
 80009aa:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80009ac:	6343      	str	r3, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80009ae:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 80009b0:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80009b2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80009b6:	3b04      	subs	r3, #4
 80009b8:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80009ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80009c0:	2301      	movs	r3, #1
 80009c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80009c6:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80009c8:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 80009ca:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd30      	pop	{r4, r5, pc}

080009d2 <HAL_ETH_TxCpltCallback>:
 80009d2:	4770      	bx	lr

080009d4 <HAL_ETH_ErrorCallback>:
{
 80009d4:	4770      	bx	lr

080009d6 <HAL_ETH_IRQHandler>:
{
 80009d6:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80009d8:	6802      	ldr	r2, [r0, #0]
 80009da:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80009de:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80009e0:	5995      	ldr	r5, [r2, r6]
 80009e2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80009e6:	d021      	beq.n	8000a2c <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 80009e8:	f008 f9d0 	bl	8008d8c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009f8:	2300      	movs	r3, #0
 80009fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	f241 0514 	movw	r5, #4116	; 0x1014
 8000a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a08:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000a0a:	595b      	ldr	r3, [r3, r5]
 8000a0c:	041b      	lsls	r3, r3, #16
 8000a0e:	d50c      	bpl.n	8000a2a <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff ffdf 	bl	80009d4 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a1c:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a24:	2300      	movs	r3, #0
 8000a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000a2c:	5993      	ldr	r3, [r2, r6]
 8000a2e:	07da      	lsls	r2, r3, #31
 8000a30:	d5e5      	bpl.n	80009fe <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000a32:	f7ff ffce 	bl	80009d2 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000a36:	6822      	ldr	r2, [r4, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000a3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a40:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000a44:	e7db      	b.n	80009fe <HAL_ETH_IRQHandler+0x28>

08000a46 <HAL_ETH_ReadPHYRegister>:
{
 8000a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000a48:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000a4c:	2b82      	cmp	r3, #130	; 0x82
{
 8000a4e:	4605      	mov	r5, r0
 8000a50:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000a52:	d030      	beq.n	8000ab6 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a54:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000a56:	2382      	movs	r3, #130	; 0x82
 8000a58:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a5c:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000a5e:	0189      	lsls	r1, r1, #6
 8000a60:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000a64:	f003 011c 	and.w	r1, r3, #28
 8000a68:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000a6a:	8a04      	ldrh	r4, [r0, #16]
 8000a6c:	02e4      	lsls	r4, r4, #11
 8000a6e:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000a70:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000a72:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000a76:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000a78:	f7ff fd68 	bl	800054c <HAL_GetTick>
 8000a7c:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000a7e:	f014 0001 	ands.w	r0, r4, #1
 8000a82:	d107      	bne.n	8000a94 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000a94:	f7ff fd5a 	bl	800054c <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000a9e:	d307      	bcc.n	8000ab0 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000aac:	2003      	movs	r0, #3
 8000aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	691c      	ldr	r4, [r3, #16]
 8000ab4:	e7e3      	b.n	8000a7e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000ab6:	2002      	movs	r0, #2
}
 8000ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000aba <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000aba:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000abe:	2b42      	cmp	r3, #66	; 0x42
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000ac4:	d02e      	beq.n	8000b24 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000ac6:	2342      	movs	r3, #66	; 0x42
 8000ac8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000acc:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000ace:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ad0:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000ad2:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000ad6:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000ada:	f000 001c 	and.w	r0, r0, #28
 8000ade:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ae0:	8a2c      	ldrh	r4, [r5, #16]
 8000ae2:	02e4      	lsls	r4, r4, #11
 8000ae4:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000ae6:	4304      	orrs	r4, r0
 8000ae8:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000aea:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000aec:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000aee:	f7ff fd2d 	bl	800054c <HAL_GetTick>
 8000af2:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000af4:	f014 0001 	ands.w	r0, r4, #1
 8000af8:	d103      	bne.n	8000b02 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000b02:	f7ff fd23 	bl	800054c <HAL_GetTick>
 8000b06:	1b80      	subs	r0, r0, r6
 8000b08:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b0c:	d307      	bcc.n	8000b1e <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b14:	2300      	movs	r3, #0
 8000b16:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	691c      	ldr	r4, [r3, #16]
 8000b22:	e7e7      	b.n	8000af4 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000b24:	2002      	movs	r0, #2
}
 8000b26:	bd70      	pop	{r4, r5, r6, pc}

08000b28 <HAL_ETH_Init>:
{
 8000b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000b2e:	4604      	mov	r4, r0
 8000b30:	2800      	cmp	r0, #0
 8000b32:	f000 80de 	beq.w	8000cf2 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000b36:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b3e:	b91b      	cbnz	r3, 8000b48 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000b40:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000b44:	f008 f894 	bl	8008c70 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	4b6a      	ldr	r3, [pc, #424]	; (8000cf8 <HAL_ETH_Init+0x1d0>)
 8000b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b54:	645a      	str	r2, [r3, #68]	; 0x44
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000b60:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <HAL_ETH_Init+0x1d4>)
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b68:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	6a21      	ldr	r1, [r4, #32]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000b80:	f7ff fce4 	bl	800054c <HAL_GetTick>
 8000b84:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	07d0      	lsls	r0, r2, #31
 8000b90:	d41d      	bmi.n	8000bce <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000b92:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000b94:	f000 fcc2 	bl	800151c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000b98:	4b59      	ldr	r3, [pc, #356]	; (8000d00 <HAL_ETH_Init+0x1d8>)
 8000b9a:	4a5a      	ldr	r2, [pc, #360]	; (8000d04 <HAL_ETH_Init+0x1dc>)
 8000b9c:	4403      	add	r3, r0
 8000b9e:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000ba0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000ba4:	d822      	bhi.n	8000bec <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000ba6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000baa:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000bac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000bb0:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff ff80 	bl	8000aba <HAL_ETH_WritePHYRegister>
 8000bba:	4605      	mov	r5, r0
 8000bbc:	b368      	cbz	r0, 8000c1a <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000bc2:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000bc4:	f7ff fd56 	bl	8000674 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000bc8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000bcc:	e00b      	b.n	8000be6 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000bce:	f7ff fcbd 	bl	800054c <HAL_GetTick>
 8000bd2:	1b40      	subs	r0, r0, r5
 8000bd4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000bd8:	d9d5      	bls.n	8000b86 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000bda:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000bdc:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000bde:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000be6:	4628      	mov	r0, r5
 8000be8:	b003      	add	sp, #12
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000bec:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <HAL_ETH_Init+0x1e0>)
 8000bee:	4a47      	ldr	r2, [pc, #284]	; (8000d0c <HAL_ETH_Init+0x1e4>)
 8000bf0:	4403      	add	r3, r0
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d802      	bhi.n	8000bfc <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000bf6:	f045 050c 	orr.w	r5, r5, #12
 8000bfa:	e7d6      	b.n	8000baa <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <HAL_ETH_Init+0x1e8>)
 8000bfe:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <HAL_ETH_Init+0x1ec>)
 8000c00:	4403      	add	r3, r0
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d9d1      	bls.n	8000baa <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <HAL_ETH_Init+0x1f0>)
 8000c08:	4a44      	ldr	r2, [pc, #272]	; (8000d1c <HAL_ETH_Init+0x1f4>)
 8000c0a:	4403      	add	r3, r0
 8000c0c:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000c0e:	bf94      	ite	ls
 8000c10:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000c14:	f045 0510 	orrhi.w	r5, r5, #16
 8000c18:	e7c7      	b.n	8000baa <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000c1a:	20ff      	movs	r0, #255	; 0xff
 8000c1c:	f7ff fc9c 	bl	8000558 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c20:	6863      	ldr	r3, [r4, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d053      	beq.n	8000cce <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000c26:	f7ff fc91 	bl	800054c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c2a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c2e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c30:	466a      	mov	r2, sp
 8000c32:	2101      	movs	r1, #1
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff ff06 	bl	8000a46 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c3a:	f7ff fc87 	bl	800054c <HAL_GetTick>
 8000c3e:	1b80      	subs	r0, r0, r6
 8000c40:	42b8      	cmp	r0, r7
 8000c42:	d90b      	bls.n	8000c5c <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000c44:	2101      	movs	r1, #1
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fd14 	bl	8000674 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000c52:	2300      	movs	r3, #0
 8000c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000c58:	2503      	movs	r5, #3
 8000c5a:	e7c4      	b.n	8000be6 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000c5c:	9b00      	ldr	r3, [sp, #0]
 8000c5e:	0759      	lsls	r1, r3, #29
 8000c60:	d5e6      	bpl.n	8000c30 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000c62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c66:	2100      	movs	r1, #0
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff ff26 	bl	8000aba <HAL_ETH_WritePHYRegister>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d1a5      	bne.n	8000bbe <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000c72:	f7ff fc6b 	bl	800054c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000c76:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c7a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c7c:	466a      	mov	r2, sp
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff fee0 	bl	8000a46 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000c86:	f7ff fc61 	bl	800054c <HAL_GetTick>
 8000c8a:	1b80      	subs	r0, r0, r6
 8000c8c:	42b8      	cmp	r0, r7
 8000c8e:	d8d9      	bhi.n	8000c44 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	069a      	lsls	r2, r3, #26
 8000c94:	d5f2      	bpl.n	8000c7c <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000c96:	466a      	mov	r2, sp
 8000c98:	211f      	movs	r1, #31
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fed3 	bl	8000a46 <HAL_ETH_ReadPHYRegister>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d18c      	bne.n	8000bbe <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ca4:	9b00      	ldr	r3, [sp, #0]
 8000ca6:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000caa:	bf18      	it	ne
 8000cac:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000cb0:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000cb2:	bf4c      	ite	mi
 8000cb4:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000cb6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000cba:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000cbc:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fcd7 	bl	8000674 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000ccc:	e78b      	b.n	8000be6 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000cce:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000cd0:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000cd2:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000cd4:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	4629      	mov	r1, r5
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff feec 	bl	8000aba <HAL_ETH_WritePHYRegister>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	f47f af6b 	bne.w	8000bbe <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000ce8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000cec:	f7ff fc34 	bl	8000558 <HAL_Delay>
 8000cf0:	e7e5      	b.n	8000cbe <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000cf2:	2501      	movs	r5, #1
 8000cf4:	e777      	b.n	8000be6 <HAL_ETH_Init+0xbe>
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40013800 	.word	0x40013800
 8000d00:	feced300 	.word	0xfeced300
 8000d04:	00e4e1bf 	.word	0x00e4e1bf
 8000d08:	fde9f140 	.word	0xfde9f140
 8000d0c:	017d783f 	.word	0x017d783f
 8000d10:	fc6c7900 	.word	0xfc6c7900
 8000d14:	026259ff 	.word	0x026259ff
 8000d18:	fa0a1f00 	.word	0xfa0a1f00
 8000d1c:	02faf07f 	.word	0x02faf07f

08000d20 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000d20:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000d24:	2b01      	cmp	r3, #1
{  
 8000d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d28:	4605      	mov	r5, r0
 8000d2a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000d2e:	d031      	beq.n	8000d94 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000d30:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d32:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000d34:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000d38:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d3a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000d3c:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d3e:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000d42:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000d46:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000d4c:	f7ff fc6c 	bl	8000628 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	9a01      	ldr	r2, [sp, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000d56:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f042 0204 	orr.w	r2, r2, #4
 8000d5e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000d64:	f7ff fc60 	bl	8000628 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000d68:	682b      	ldr	r3, [r5, #0]
 8000d6a:	9a00      	ldr	r2, [sp, #0]
 8000d6c:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f7ff fc6c 	bl	800064c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000d74:	682a      	ldr	r2, [r5, #0]
 8000d76:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000d7a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000d7c:	58d1      	ldr	r1, [r2, r3]
 8000d7e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000d82:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000d84:	58d1      	ldr	r1, [r2, r3]
 8000d86:	f041 0102 	orr.w	r1, r1, #2
 8000d8a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000d8c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000d90:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000d94:	b002      	add	sp, #8
 8000d96:	bd70      	pop	{r4, r5, r6, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000f68 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da4:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000f6c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000dae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000db4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000dbc:	45b6      	cmp	lr, r6
 8000dbe:	f040 80b6 	bne.w	8000f2e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc2:	684c      	ldr	r4, [r1, #4]
 8000dc4:	f024 0710 	bic.w	r7, r4, #16
 8000dc8:	2f02      	cmp	r7, #2
 8000dca:	d116      	bne.n	8000dfa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000dcc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000dd0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000dd8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ddc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000de0:	f04f 0c0f 	mov.w	ip, #15
 8000de4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000de8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dec:	690d      	ldr	r5, [r1, #16]
 8000dee:	fa05 f50b 	lsl.w	r5, r5, fp
 8000df2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	f8ca 5020 	str.w	r5, [sl, #32]
 8000dfa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e00:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e04:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e08:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e12:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e16:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e18:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e1e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	d811      	bhi.n	8000e48 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e26:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	68cf      	ldr	r7, [r1, #12]
 8000e2c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000e30:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000e34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e3c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000e40:	409f      	lsls	r7, r3
 8000e42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000e46:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e48:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	688f      	ldr	r7, [r1, #8]
 8000e4e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000e52:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000e54:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e56:	00e5      	lsls	r5, r4, #3
 8000e58:	d569      	bpl.n	8000f2e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	f04f 0b00 	mov.w	fp, #0
 8000e5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000e62:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	4d3f      	ldr	r5, [pc, #252]	; (8000f64 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e6c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000e70:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000e74:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000e78:	9703      	str	r7, [sp, #12]
 8000e7a:	9f03      	ldr	r7, [sp, #12]
 8000e7c:	f023 0703 	bic.w	r7, r3, #3
 8000e80:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e84:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e88:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e94:	f04f 0e0f 	mov.w	lr, #15
 8000e98:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea2:	d04b      	beq.n	8000f3c <HAL_GPIO_Init+0x1a4>
 8000ea4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ea8:	42a8      	cmp	r0, r5
 8000eaa:	d049      	beq.n	8000f40 <HAL_GPIO_Init+0x1a8>
 8000eac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb0:	42a8      	cmp	r0, r5
 8000eb2:	d047      	beq.n	8000f44 <HAL_GPIO_Init+0x1ac>
 8000eb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	d045      	beq.n	8000f48 <HAL_GPIO_Init+0x1b0>
 8000ebc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ec0:	42a8      	cmp	r0, r5
 8000ec2:	d043      	beq.n	8000f4c <HAL_GPIO_Init+0x1b4>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d043      	beq.n	8000f50 <HAL_GPIO_Init+0x1b8>
 8000ec8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ecc:	42a8      	cmp	r0, r5
 8000ece:	d041      	beq.n	8000f54 <HAL_GPIO_Init+0x1bc>
 8000ed0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ed4:	42a8      	cmp	r0, r5
 8000ed6:	d03f      	beq.n	8000f58 <HAL_GPIO_Init+0x1c0>
 8000ed8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000edc:	42a8      	cmp	r0, r5
 8000ede:	d03d      	beq.n	8000f5c <HAL_GPIO_Init+0x1c4>
 8000ee0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ee4:	42a8      	cmp	r0, r5
 8000ee6:	bf14      	ite	ne
 8000ee8:	250a      	movne	r5, #10
 8000eea:	2509      	moveq	r5, #9
 8000eec:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ef0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ef6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000efe:	bf0c      	ite	eq
 8000f00:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f02:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f04:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f06:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f08:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	bf0c      	ite	eq
 8000f0e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f10:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f12:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f14:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f16:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	bf0c      	ite	eq
 8000f1c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f1e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f20:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f22:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f24:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f26:	bf54      	ite	pl
 8000f28:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f2a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f2c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	3301      	adds	r3, #1
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	f47f af3c 	bne.w	8000dae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f36:	b005      	add	sp, #20
 8000f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3c:	465d      	mov	r5, fp
 8000f3e:	e7d5      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f40:	2501      	movs	r5, #1
 8000f42:	e7d3      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f44:	2502      	movs	r5, #2
 8000f46:	e7d1      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f48:	2503      	movs	r5, #3
 8000f4a:	e7cf      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f4c:	2504      	movs	r5, #4
 8000f4e:	e7cd      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f50:	2505      	movs	r5, #5
 8000f52:	e7cb      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f54:	2506      	movs	r5, #6
 8000f56:	e7c9      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f58:	2507      	movs	r5, #7
 8000f5a:	e7c7      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f5c:	2508      	movs	r5, #8
 8000f5e:	e7c5      	b.n	8000eec <HAL_GPIO_Init+0x154>
 8000f60:	40013c00 	.word	0x40013c00
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40021400 	.word	0x40021400

08000f70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	b10a      	cbz	r2, 8000f76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f72:	6181      	str	r1, [r0, #24]
 8000f74:	4770      	bx	lr
 8000f76:	0409      	lsls	r1, r1, #16
 8000f78:	e7fb      	b.n	8000f72 <HAL_GPIO_WritePin+0x2>

08000f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f7c:	4604      	mov	r4, r0
{
 8000f7e:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000f80:	b360      	cbz	r0, 8000fdc <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f82:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000f86:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f8c:	b91b      	cbnz	r3, 8000f96 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f8e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f92:	f008 fb53 	bl	800963c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f9e:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fa0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000fa4:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000fa8:	bf08      	it	eq
 8000faa:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000fac:	f000 fdd4 	bl	8001b58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	466e      	mov	r6, sp
 8000fb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fbe:	e886 0003 	stmia.w	r6, {r0, r1}
 8000fc2:	4625      	mov	r5, r4
 8000fc4:	1d27      	adds	r7, r4, #4
 8000fc6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000fca:	f855 0b10 	ldr.w	r0, [r5], #16
 8000fce:	f000 fd83 	bl	8001ad8 <USB_CoreInit>
 8000fd2:	4606      	mov	r6, r0
 8000fd4:	b120      	cbz	r0, 8000fe0 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000fdc:	2501      	movs	r5, #1
 8000fde:	e050      	b.n	8001082 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fe0:	4601      	mov	r1, r0
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	f000 fdbe 	bl	8001b64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fee:	261c      	movs	r6, #28
 8000ff0:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff8:	4596      	cmp	lr, r2
 8000ffa:	f100 0001 	add.w	r0, r0, #1
 8000ffe:	d81c      	bhi.n	800103a <HAL_PCD_Init+0xc0>
 8001000:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001002:	261c      	movs	r6, #28
 8001004:	4619      	mov	r1, r3
 8001006:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	4586      	cmp	lr, r0
 800100a:	f103 0301 	add.w	r3, r3, #1
 800100e:	d822      	bhi.n	8001056 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001012:	466e      	mov	r6, sp
 8001014:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800101a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001022:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	f000 fdde 	bl	8001be8 <USB_DevInit>
 800102c:	2301      	movs	r3, #1
 800102e:	4605      	mov	r5, r0
 8001030:	b300      	cbz	r0, 8001074 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001032:	2202      	movs	r2, #2
 8001034:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8001038:	e7d0      	b.n	8000fdc <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800103a:	fb06 4302 	mla	r3, r6, r2, r4
 800103e:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001046:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800104a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800104e:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001050:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001052:	6519      	str	r1, [r3, #80]	; 0x50
 8001054:	e7cf      	b.n	8000ff6 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001056:	fb06 4200 	mla	r2, r6, r0, r4
 800105a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800105e:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001062:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001066:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800106a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800106e:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8001072:	e7c8      	b.n	8001006 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001074:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001078:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	f000 fe77 	bl	8001d70 <USB_DevDisconnect>

  return HAL_OK;
}
 8001082:	4628      	mov	r0, r5
 8001084:	b00b      	add	sp, #44	; 0x2c
 8001086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108c:	4604      	mov	r4, r0
 800108e:	b918      	cbnz	r0, 8001098 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001092:	b002      	add	sp, #8
 8001094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001098:	6803      	ldr	r3, [r0, #0]
 800109a:	07dd      	lsls	r5, r3, #31
 800109c:	d410      	bmi.n	80010c0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	0798      	lsls	r0, r3, #30
 80010a2:	d458      	bmi.n	8001156 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	071a      	lsls	r2, r3, #28
 80010a8:	f100 809a 	bmi.w	80011e0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	075b      	lsls	r3, r3, #29
 80010b0:	f100 80b8 	bmi.w	8001224 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b4:	69a2      	ldr	r2, [r4, #24]
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	f040 8119 	bne.w	80012ee <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80010bc:	2000      	movs	r0, #0
 80010be:	e7e8      	b.n	8001092 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c0:	4ba6      	ldr	r3, [pc, #664]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	f002 020c 	and.w	r2, r2, #12
 80010c8:	2a04      	cmp	r2, #4
 80010ca:	d007      	beq.n	80010dc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	2a08      	cmp	r2, #8
 80010d4:	d10a      	bne.n	80010ec <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	0259      	lsls	r1, r3, #9
 80010da:	d507      	bpl.n	80010ec <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b9f      	ldr	r3, [pc, #636]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	039a      	lsls	r2, r3, #14
 80010e2:	d5dc      	bpl.n	800109e <HAL_RCC_OscConfig+0x16>
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1d9      	bne.n	800109e <HAL_RCC_OscConfig+0x16>
 80010ea:	e7d1      	b.n	8001090 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	6863      	ldr	r3, [r4, #4]
 80010ee:	4d9b      	ldr	r5, [pc, #620]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d111      	bne.n	800111a <HAL_RCC_OscConfig+0x92>
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010fe:	f7ff fa25 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4d96      	ldr	r5, [pc, #600]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001104:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	039b      	lsls	r3, r3, #14
 800110a:	d4c8      	bmi.n	800109e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fa1e 	bl	800054c <HAL_GetTick>
 8001110:	1b80      	subs	r0, r0, r6
 8001112:	2864      	cmp	r0, #100	; 0x64
 8001114:	d9f7      	bls.n	8001106 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001116:	2003      	movs	r0, #3
 8001118:	e7bb      	b.n	8001092 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111e:	d104      	bne.n	800112a <HAL_RCC_OscConfig+0xa2>
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001126:	602b      	str	r3, [r5, #0]
 8001128:	e7e5      	b.n	80010f6 <HAL_RCC_OscConfig+0x6e>
 800112a:	682a      	ldr	r2, [r5, #0]
 800112c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001130:	602a      	str	r2, [r5, #0]
 8001132:	682a      	ldr	r2, [r5, #0]
 8001134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001138:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1df      	bne.n	80010fe <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800113e:	f7ff fa05 	bl	800054c <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	039f      	lsls	r7, r3, #14
 8001148:	d5a9      	bpl.n	800109e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114a:	f7ff f9ff 	bl	800054c <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	2864      	cmp	r0, #100	; 0x64
 8001152:	d9f7      	bls.n	8001144 <HAL_RCC_OscConfig+0xbc>
 8001154:	e7df      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001156:	4b81      	ldr	r3, [pc, #516]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	f012 0f0c 	tst.w	r2, #12
 800115e:	d007      	beq.n	8001170 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	2a08      	cmp	r2, #8
 8001168:	d111      	bne.n	800118e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	025e      	lsls	r6, r3, #9
 800116e:	d40e      	bmi.n	800118e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001170:	4b7a      	ldr	r3, [pc, #488]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	0795      	lsls	r5, r2, #30
 8001176:	d502      	bpl.n	800117e <HAL_RCC_OscConfig+0xf6>
 8001178:	68e2      	ldr	r2, [r4, #12]
 800117a:	2a01      	cmp	r2, #1
 800117c:	d188      	bne.n	8001090 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	6921      	ldr	r1, [r4, #16]
 8001182:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001186:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800118a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118c:	e78a      	b.n	80010a4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800118e:	68e2      	ldr	r2, [r4, #12]
 8001190:	4b73      	ldr	r3, [pc, #460]	; (8001360 <HAL_RCC_OscConfig+0x2d8>)
 8001192:	b1b2      	cbz	r2, 80011c2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001198:	f7ff f9d8 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	4d6f      	ldr	r5, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800119e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	0798      	lsls	r0, r3, #30
 80011a4:	d507      	bpl.n	80011b6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	6922      	ldr	r2, [r4, #16]
 80011aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011b2:	602b      	str	r3, [r5, #0]
 80011b4:	e776      	b.n	80010a4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff f9c9 	bl	800054c <HAL_GetTick>
 80011ba:	1b80      	subs	r0, r0, r6
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9ef      	bls.n	80011a0 <HAL_RCC_OscConfig+0x118>
 80011c0:	e7a9      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80011c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011c4:	f7ff f9c2 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c8:	4d64      	ldr	r5, [pc, #400]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	0799      	lsls	r1, r3, #30
 80011d0:	f57f af68 	bpl.w	80010a4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff f9ba 	bl	800054c <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2802      	cmp	r0, #2
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCC_OscConfig+0x144>
 80011de:	e79a      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011e0:	6962      	ldr	r2, [r4, #20]
 80011e2:	4b60      	ldr	r3, [pc, #384]	; (8001364 <HAL_RCC_OscConfig+0x2dc>)
 80011e4:	b17a      	cbz	r2, 8001206 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011ea:	f7ff f9af 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4d5b      	ldr	r5, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011f4:	079f      	lsls	r7, r3, #30
 80011f6:	f53f af59 	bmi.w	80010ac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff f9a7 	bl	800054c <HAL_GetTick>
 80011fe:	1b80      	subs	r0, r0, r6
 8001200:	2802      	cmp	r0, #2
 8001202:	d9f6      	bls.n	80011f2 <HAL_RCC_OscConfig+0x16a>
 8001204:	e787      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001206:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001208:	f7ff f9a0 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120c:	4d53      	ldr	r5, [pc, #332]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800120e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001212:	0798      	lsls	r0, r3, #30
 8001214:	f57f af4a 	bpl.w	80010ac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff f998 	bl	800054c <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	2802      	cmp	r0, #2
 8001220:	d9f6      	bls.n	8001210 <HAL_RCC_OscConfig+0x188>
 8001222:	e778      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 8001226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001228:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800122c:	d128      	bne.n	8001280 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001232:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001242:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4d48      	ldr	r5, [pc, #288]	; (8001368 <HAL_RCC_OscConfig+0x2e0>)
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	05d9      	lsls	r1, r3, #23
 800124a:	d51b      	bpl.n	8001284 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	68a3      	ldr	r3, [r4, #8]
 800124e:	4d43      	ldr	r5, [pc, #268]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 8001250:	2b01      	cmp	r3, #1
 8001252:	d127      	bne.n	80012a4 <HAL_RCC_OscConfig+0x21c>
 8001254:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800125c:	f7ff f976 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	4d3e      	ldr	r5, [pc, #248]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001262:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800126a:	079b      	lsls	r3, r3, #30
 800126c:	d539      	bpl.n	80012e2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800126e:	2e00      	cmp	r6, #0
 8001270:	f43f af20 	beq.w	80010b4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	4a39      	ldr	r2, [pc, #228]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 8001276:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	e719      	b.n	80010b4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001280:	2600      	movs	r6, #0
 8001282:	e7df      	b.n	8001244 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800128c:	f7ff f95e 	bl	800054c <HAL_GetTick>
 8001290:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	05da      	lsls	r2, r3, #23
 8001296:	d4d9      	bmi.n	800124c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001298:	f7ff f958 	bl	800054c <HAL_GetTick>
 800129c:	1bc0      	subs	r0, r0, r7
 800129e:	2802      	cmp	r0, #2
 80012a0:	d9f7      	bls.n	8001292 <HAL_RCC_OscConfig+0x20a>
 80012a2:	e738      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d104      	bne.n	80012b2 <HAL_RCC_OscConfig+0x22a>
 80012a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	672b      	str	r3, [r5, #112]	; 0x70
 80012b0:	e7d0      	b.n	8001254 <HAL_RCC_OscConfig+0x1cc>
 80012b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	672a      	str	r2, [r5, #112]	; 0x70
 80012ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012bc:	f022 0204 	bic.w	r2, r2, #4
 80012c0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ca      	bne.n	800125c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80012c6:	f7ff f941 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012d2:	0798      	lsls	r0, r3, #30
 80012d4:	d5cb      	bpl.n	800126e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff f939 	bl	800054c <HAL_GetTick>
 80012da:	1bc0      	subs	r0, r0, r7
 80012dc:	4540      	cmp	r0, r8
 80012de:	d9f7      	bls.n	80012d0 <HAL_RCC_OscConfig+0x248>
 80012e0:	e719      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff f933 	bl	800054c <HAL_GetTick>
 80012e6:	1bc0      	subs	r0, r0, r7
 80012e8:	4540      	cmp	r0, r8
 80012ea:	d9bd      	bls.n	8001268 <HAL_RCC_OscConfig+0x1e0>
 80012ec:	e713      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ee:	4d1b      	ldr	r5, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
 80012f0:	68ab      	ldr	r3, [r5, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	f43f aeca 	beq.w	8001090 <HAL_RCC_OscConfig+0x8>
 80012fc:	4e1b      	ldr	r6, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x2e4>)
 80012fe:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001300:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001302:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001304:	d134      	bne.n	8001370 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001306:	f7ff f921 	bl	800054c <HAL_GetTick>
 800130a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	0199      	lsls	r1, r3, #6
 8001310:	d41e      	bmi.n	8001350 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001312:	6a22      	ldr	r2, [r4, #32]
 8001314:	69e3      	ldr	r3, [r4, #28]
 8001316:	4313      	orrs	r3, r2
 8001318:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800131a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800131e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001320:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001324:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4c0d      	ldr	r4, [pc, #52]	; (800135c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001328:	0852      	lsrs	r2, r2, #1
 800132a:	3a01      	subs	r2, #1
 800132c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001330:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001332:	2301      	movs	r3, #1
 8001334:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001336:	f7ff f909 	bl	800054c <HAL_GetTick>
 800133a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	019a      	lsls	r2, r3, #6
 8001340:	f53f aebc 	bmi.w	80010bc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff f902 	bl	800054c <HAL_GetTick>
 8001348:	1b40      	subs	r0, r0, r5
 800134a:	2802      	cmp	r0, #2
 800134c:	d9f6      	bls.n	800133c <HAL_RCC_OscConfig+0x2b4>
 800134e:	e6e2      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff f8fc 	bl	800054c <HAL_GetTick>
 8001354:	1bc0      	subs	r0, r0, r7
 8001356:	2802      	cmp	r0, #2
 8001358:	d9d8      	bls.n	800130c <HAL_RCC_OscConfig+0x284>
 800135a:	e6dc      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
 800135c:	40023800 	.word	0x40023800
 8001360:	42470000 	.word	0x42470000
 8001364:	42470e80 	.word	0x42470e80
 8001368:	40007000 	.word	0x40007000
 800136c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001370:	f7ff f8ec 	bl	800054c <HAL_GetTick>
 8001374:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	019b      	lsls	r3, r3, #6
 800137a:	f57f ae9f 	bpl.w	80010bc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff f8e5 	bl	800054c <HAL_GetTick>
 8001382:	1b00      	subs	r0, r0, r4
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f6      	bls.n	8001376 <HAL_RCC_OscConfig+0x2ee>
 8001388:	e6c5      	b.n	8001116 <HAL_RCC_OscConfig+0x8e>
 800138a:	bf00      	nop

0800138c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800138e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001390:	688b      	ldr	r3, [r1, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b04      	cmp	r3, #4
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x16>
 800139a:	2b08      	cmp	r3, #8
 800139c:	d003      	beq.n	80013a6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013a0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013a2:	4810      	ldr	r0, [pc, #64]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x58>)
 80013a4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013aa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b0:	bf14      	ite	ne
 80013b2:	480c      	ldrne	r0, [pc, #48]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b4:	480a      	ldreq	r0, [pc, #40]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013ba:	bf18      	it	ne
 80013bc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c2:	fba1 0100 	umull	r0, r1, r1, r0
 80013c6:	f7fe ff13 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_RCC_GetSysClockFreq+0x50>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013d2:	3301      	adds	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013da:	bd08      	pop	{r3, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	007a1200 	.word	0x007a1200

080013e8 <HAL_RCC_ClockConfig>:
{
 80013e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013ee:	4604      	mov	r4, r0
 80013f0:	b910      	cbnz	r0, 80013f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b44      	ldr	r3, [pc, #272]	; (800150c <HAL_RCC_ClockConfig+0x124>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f002 020f 	and.w	r2, r2, #15
 8001400:	428a      	cmp	r2, r1
 8001402:	d328      	bcc.n	8001456 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	6821      	ldr	r1, [r4, #0]
 8001406:	078f      	lsls	r7, r1, #30
 8001408:	d42d      	bmi.n	8001466 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	07c8      	lsls	r0, r1, #31
 800140c:	d440      	bmi.n	8001490 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_ClockConfig+0x124>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f002 020f 	and.w	r2, r2, #15
 8001416:	4295      	cmp	r5, r2
 8001418:	d366      	bcc.n	80014e8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	0751      	lsls	r1, r2, #29
 800141e:	d46c      	bmi.n	80014fa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001420:	0713      	lsls	r3, r2, #28
 8001422:	d507      	bpl.n	8001434 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001424:	4a3a      	ldr	r2, [pc, #232]	; (8001510 <HAL_RCC_ClockConfig+0x128>)
 8001426:	6921      	ldr	r1, [r4, #16]
 8001428:	6893      	ldr	r3, [r2, #8]
 800142a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800142e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001432:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001434:	f7ff ffaa 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8001438:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_RCC_ClockConfig+0x128>)
 800143a:	4a36      	ldr	r2, [pc, #216]	; (8001514 <HAL_RCC_ClockConfig+0x12c>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	40d8      	lsrs	r0, r3
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_ClockConfig+0x130>)
 8001448:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800144a:	2000      	movs	r0, #0
 800144c:	f007 ff08 	bl	8009260 <HAL_InitTick>
  return HAL_OK;
 8001450:	2000      	movs	r0, #0
 8001452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	b2ca      	uxtb	r2, r1
 8001458:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4299      	cmp	r1, r3
 8001462:	d1c6      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xa>
 8001464:	e7ce      	b.n	8001404 <HAL_RCC_ClockConfig+0x1c>
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	bf1e      	ittt	ne
 800146e:	689a      	ldrne	r2, [r3, #8]
 8001470:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001474:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001476:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001478:	bf42      	ittt	mi
 800147a:	689a      	ldrmi	r2, [r3, #8]
 800147c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001480:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	68a0      	ldr	r0, [r4, #8]
 8001486:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800148a:	4302      	orrs	r2, r0
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	e7bc      	b.n	800140a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001490:	6862      	ldr	r2, [r4, #4]
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_RCC_ClockConfig+0x128>)
 8001494:	2a01      	cmp	r2, #1
 8001496:	d11d      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	d0a8      	beq.n	80013f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a0:	4e1b      	ldr	r6, [pc, #108]	; (8001510 <HAL_RCC_ClockConfig+0x128>)
 80014a2:	68b3      	ldr	r3, [r6, #8]
 80014a4:	f023 0303 	bic.w	r3, r3, #3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014ac:	f7ff f84e 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	68b3      	ldr	r3, [r6, #8]
 80014b8:	6862      	ldr	r2, [r4, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014c2:	d0a4      	beq.n	800140e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff f842 	bl	800054c <HAL_GetTick>
 80014c8:	1bc0      	subs	r0, r0, r7
 80014ca:	4540      	cmp	r0, r8
 80014cc:	d9f3      	bls.n	80014b6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80014ce:	2003      	movs	r0, #3
}
 80014d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d4:	1e91      	subs	r1, r2, #2
 80014d6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	d802      	bhi.n	80014e2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014e0:	e7dd      	b.n	800149e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	f013 0f02 	tst.w	r3, #2
 80014e6:	e7da      	b.n	800149e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e8:	b2ea      	uxtb	r2, r5
 80014ea:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	429d      	cmp	r5, r3
 80014f4:	f47f af7d 	bne.w	80013f2 <HAL_RCC_ClockConfig+0xa>
 80014f8:	e78f      	b.n	800141a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fa:	4905      	ldr	r1, [pc, #20]	; (8001510 <HAL_RCC_ClockConfig+0x128>)
 80014fc:	68e0      	ldr	r0, [r4, #12]
 80014fe:	688b      	ldr	r3, [r1, #8]
 8001500:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001504:	4303      	orrs	r3, r0
 8001506:	608b      	str	r3, [r1, #8]
 8001508:	e78a      	b.n	8001420 <HAL_RCC_ClockConfig+0x38>
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00
 8001510:	40023800 	.word	0x40023800
 8001514:	0800ad3a 	.word	0x0800ad3a
 8001518:	2000000c 	.word	0x2000000c

0800151c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800151c:	4b01      	ldr	r3, [pc, #4]	; (8001524 <HAL_RCC_GetHCLKFreq+0x8>)
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000000c 	.word	0x2000000c

08001528 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_RCC_GetPCLK1Freq+0x14>)
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x18>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001536:	6810      	ldr	r0, [r2, #0]
}
 8001538:	40d8      	lsrs	r0, r3
 800153a:	4770      	bx	lr
 800153c:	40023800 	.word	0x40023800
 8001540:	0800ad4a 	.word	0x0800ad4a
 8001544:	2000000c 	.word	0x2000000c

08001548 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_RCC_GetPCLK2Freq+0x14>)
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x18>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001556:	6810      	ldr	r0, [r2, #0]
}
 8001558:	40d8      	lsrs	r0, r3
 800155a:	4770      	bx	lr
 800155c:	40023800 	.word	0x40023800
 8001560:	0800ad4a 	.word	0x0800ad4a
 8001564:	2000000c 	.word	0x2000000c

08001568 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001568:	230f      	movs	r3, #15
 800156a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_GetClockConfig+0x34>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800157c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001584:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800158e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_RCC_GetClockConfig+0x38>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	600b      	str	r3, [r1, #0]
 800159a:	4770      	bx	lr
 800159c:	40023800 	.word	0x40023800
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_TIM_Base_MspInit>:
 80015a4:	4770      	bx	lr

080015a6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b6:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80015b8:	bf1e      	ittt	ne
 80015ba:	681a      	ldrne	r2, [r3, #0]
 80015bc:	f042 0201 	orrne.w	r2, r2, #1
 80015c0:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80015c2:	2000      	movs	r0, #0
 80015c4:	4770      	bx	lr

080015c6 <HAL_TIM_OC_DelayElapsedCallback>:
 80015c6:	4770      	bx	lr

080015c8 <HAL_TIM_IC_CaptureCallback>:
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_PWM_PulseFinishedCallback>:
 80015ca:	4770      	bx	lr

080015cc <HAL_TIM_TriggerCallback>:
 80015cc:	4770      	bx	lr

080015ce <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	0791      	lsls	r1, r2, #30
{
 80015d4:	b510      	push	{r4, lr}
 80015d6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015d8:	d50e      	bpl.n	80015f8 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	0792      	lsls	r2, r2, #30
 80015de:	d50b      	bpl.n	80015f8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015e0:	f06f 0202 	mvn.w	r2, #2
 80015e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015e8:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ea:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ee:	d077      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015f0:	f7ff ffea 	bl	80015c8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f4:	2300      	movs	r3, #0
 80015f6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	0750      	lsls	r0, r2, #29
 80015fe:	d510      	bpl.n	8001622 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	0751      	lsls	r1, r2, #29
 8001604:	d50d      	bpl.n	8001622 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001606:	f06f 0204 	mvn.w	r2, #4
 800160a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800160c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800160e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001610:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001614:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001616:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001618:	d068      	beq.n	80016ec <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	f7ff ffd5 	bl	80015c8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161e:	2300      	movs	r3, #0
 8001620:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	0712      	lsls	r2, r2, #28
 8001628:	d50f      	bpl.n	800164a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	0710      	lsls	r0, r2, #28
 800162e:	d50c      	bpl.n	800164a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001630:	f06f 0208 	mvn.w	r2, #8
 8001634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001636:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001638:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800163a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800163c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001640:	d05a      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001642:	f7ff ffc1 	bl	80015c8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001646:	2300      	movs	r3, #0
 8001648:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	06d2      	lsls	r2, r2, #27
 8001650:	d510      	bpl.n	8001674 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	06d0      	lsls	r0, r2, #27
 8001656:	d50d      	bpl.n	8001674 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001658:	f06f 0210 	mvn.w	r2, #16
 800165c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800165e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001660:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001662:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001666:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001668:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800166a:	d04b      	beq.n	8001704 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800166c:	f7ff ffac 	bl	80015c8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001670:	2300      	movs	r3, #0
 8001672:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	07d1      	lsls	r1, r2, #31
 800167a:	d508      	bpl.n	800168e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	07d2      	lsls	r2, r2, #31
 8001680:	d505      	bpl.n	800168e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001682:	f06f 0201 	mvn.w	r2, #1
 8001686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001688:	4620      	mov	r0, r4
 800168a:	f007 fdb7 	bl	80091fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	0610      	lsls	r0, r2, #24
 8001694:	d508      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	0611      	lsls	r1, r2, #24
 800169a:	d505      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800169c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f000 f8b7 	bl	8001816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	0652      	lsls	r2, r2, #25
 80016ae:	d508      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	0650      	lsls	r0, r2, #25
 80016b4:	d505      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff ff85 	bl	80015cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	0691      	lsls	r1, r2, #26
 80016c8:	d522      	bpl.n	8001710 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	0692      	lsls	r2, r2, #26
 80016ce:	d51f      	bpl.n	8001710 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016d0:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016d6:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80016dc:	f000 b89a 	b.w	8001814 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e0:	f7ff ff71 	bl	80015c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ff70 	bl	80015ca <HAL_TIM_PWM_PulseFinishedCallback>
 80016ea:	e783      	b.n	80015f4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ec:	f7ff ff6b 	bl	80015c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7ff ff6a 	bl	80015ca <HAL_TIM_PWM_PulseFinishedCallback>
 80016f6:	e792      	b.n	800161e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f8:	f7ff ff65 	bl	80015c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff ff64 	bl	80015ca <HAL_TIM_PWM_PulseFinishedCallback>
 8001702:	e7a0      	b.n	8001646 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001704:	f7ff ff5f 	bl	80015c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff ff5e 	bl	80015ca <HAL_TIM_PWM_PulseFinishedCallback>
 800170e:	e7af      	b.n	8001670 <HAL_TIM_IRQHandler+0xa2>
 8001710:	bd10      	pop	{r4, pc}
	...

08001714 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001714:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001716:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001718:	4290      	cmp	r0, r2
 800171a:	d012      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 800171c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001720:	d00f      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 8001722:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001726:	4290      	cmp	r0, r2
 8001728:	d00b      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 800172a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172e:	4290      	cmp	r0, r2
 8001730:	d007      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 8001732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001736:	4290      	cmp	r0, r2
 8001738:	d003      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 800173a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800173e:	4290      	cmp	r0, r2
 8001740:	d119      	bne.n	8001776 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001742:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001748:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <TIM_Base_SetConfig+0xc4>)
 800174c:	4290      	cmp	r0, r2
 800174e:	d029      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 8001750:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001754:	d026      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 8001756:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800175a:	4290      	cmp	r0, r2
 800175c:	d022      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 800175e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001762:	4290      	cmp	r0, r2
 8001764:	d01e      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 8001766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176a:	4290      	cmp	r0, r2
 800176c:	d01a      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 800176e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001772:	4290      	cmp	r0, r2
 8001774:	d016      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <TIM_Base_SetConfig+0xc8>)
 8001778:	4290      	cmp	r0, r2
 800177a:	d013      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 800177c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001780:	4290      	cmp	r0, r2
 8001782:	d00f      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 8001784:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001788:	4290      	cmp	r0, r2
 800178a:	d00b      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 800178c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001790:	4290      	cmp	r0, r2
 8001792:	d007      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 8001794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001798:	4290      	cmp	r0, r2
 800179a:	d003      	beq.n	80017a4 <TIM_Base_SetConfig+0x90>
 800179c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a0:	4290      	cmp	r0, r2
 80017a2:	d103      	bne.n	80017ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017a4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017aa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ac:	694a      	ldr	r2, [r1, #20]
 80017ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017b2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017b4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017b6:	688b      	ldr	r3, [r1, #8]
 80017b8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017ba:	680b      	ldr	r3, [r1, #0]
 80017bc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <TIM_Base_SetConfig+0xc4>)
 80017c0:	4298      	cmp	r0, r3
 80017c2:	d003      	beq.n	80017cc <TIM_Base_SetConfig+0xb8>
 80017c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c8:	4298      	cmp	r0, r3
 80017ca:	d101      	bne.n	80017d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017cc:	690b      	ldr	r3, [r1, #16]
 80017ce:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017d0:	2301      	movs	r3, #1
 80017d2:	6143      	str	r3, [r0, #20]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40014000 	.word	0x40014000

080017e0 <HAL_TIM_Base_Init>:
{
 80017e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80017e2:	4604      	mov	r4, r0
 80017e4:	b1a0      	cbz	r0, 8001810 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ee:	b91b      	cbnz	r3, 80017f8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017f4:	f7ff fed6 	bl	80015a4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fe:	6820      	ldr	r0, [r4, #0]
 8001800:	1d21      	adds	r1, r4, #4
 8001802:	f7ff ff87 	bl	8001714 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001806:	2301      	movs	r3, #1
 8001808:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800180c:	2000      	movs	r0, #0
 800180e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
}
 8001812:	bd10      	pop	{r4, pc}

08001814 <HAL_TIMEx_CommutCallback>:
 8001814:	4770      	bx	lr

08001816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001816:	4770      	bx	lr

08001818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800181c:	6806      	ldr	r6, [r0, #0]
 800181e:	68c2      	ldr	r2, [r0, #12]
 8001820:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001822:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001828:	4313      	orrs	r3, r2
 800182a:	6133      	str	r3, [r6, #16]
{
 800182c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800182e:	6883      	ldr	r3, [r0, #8]
 8001830:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001832:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001834:	4303      	orrs	r3, r0
 8001836:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001838:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800183c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800183e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001842:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001844:	4313      	orrs	r3, r2
 8001846:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001848:	6973      	ldr	r3, [r6, #20]
 800184a:	69a2      	ldr	r2, [r4, #24]
 800184c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001850:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001852:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001856:	6173      	str	r3, [r6, #20]
 8001858:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800185a:	d17c      	bne.n	8001956 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800185c:	429e      	cmp	r6, r3
 800185e:	d003      	beq.n	8001868 <UART_SetConfig+0x50>
 8001860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001864:	429e      	cmp	r6, r3
 8001866:	d144      	bne.n	80018f2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001868:	f7ff fe6e 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 800186c:	2519      	movs	r5, #25
 800186e:	fb05 f300 	mul.w	r3, r5, r0
 8001872:	6860      	ldr	r0, [r4, #4]
 8001874:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001878:	0040      	lsls	r0, r0, #1
 800187a:	fbb3 f3f0 	udiv	r3, r3, r0
 800187e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001886:	f7ff fe5f 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 800188a:	6863      	ldr	r3, [r4, #4]
 800188c:	4368      	muls	r0, r5
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fbb0 f7f3 	udiv	r7, r0, r3
 8001894:	f7ff fe58 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	4368      	muls	r0, r5
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80018a6:	fb09 7313 	mls	r3, r9, r3, r7
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	3332      	adds	r3, #50	; 0x32
 80018ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80018b8:	f7ff fe46 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 80018bc:	6862      	ldr	r2, [r4, #4]
 80018be:	4368      	muls	r0, r5
 80018c0:	0052      	lsls	r2, r2, #1
 80018c2:	fbb0 faf2 	udiv	sl, r0, r2
 80018c6:	f7ff fe3f 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018ca:	6863      	ldr	r3, [r4, #4]
 80018cc:	4368      	muls	r0, r5
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80018d8:	fb09 a313 	mls	r3, r9, r3, sl
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	3332      	adds	r3, #50	; 0x32
 80018e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018ea:	443b      	add	r3, r7
 80018ec:	60b3      	str	r3, [r6, #8]
 80018ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018f2:	f7ff fe19 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 80018f6:	2519      	movs	r5, #25
 80018f8:	fb05 f300 	mul.w	r3, r5, r0
 80018fc:	6860      	ldr	r0, [r4, #4]
 80018fe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001902:	0040      	lsls	r0, r0, #1
 8001904:	fbb3 f3f0 	udiv	r3, r3, r0
 8001908:	fbb3 f3f9 	udiv	r3, r3, r9
 800190c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001910:	f7ff fe0a 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001914:	6863      	ldr	r3, [r4, #4]
 8001916:	4368      	muls	r0, r5
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fbb0 f7f3 	udiv	r7, r0, r3
 800191e:	f7ff fe03 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	4368      	muls	r0, r5
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fbb0 f3f3 	udiv	r3, r0, r3
 800192c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001930:	fb09 7313 	mls	r3, r9, r3, r7
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	3332      	adds	r3, #50	; 0x32
 8001938:	fbb3 f3f9 	udiv	r3, r3, r9
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001942:	f7ff fdf1 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001946:	6862      	ldr	r2, [r4, #4]
 8001948:	4368      	muls	r0, r5
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	fbb0 faf2 	udiv	sl, r0, r2
 8001950:	f7ff fdea 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001954:	e7b9      	b.n	80018ca <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001956:	429e      	cmp	r6, r3
 8001958:	d002      	beq.n	8001960 <UART_SetConfig+0x148>
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <UART_SetConfig+0x230>)
 800195c:	429e      	cmp	r6, r3
 800195e:	d140      	bne.n	80019e2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001960:	f7ff fdf2 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001964:	6867      	ldr	r7, [r4, #4]
 8001966:	2519      	movs	r5, #25
 8001968:	f04f 0964 	mov.w	r9, #100	; 0x64
 800196c:	fb05 f300 	mul.w	r3, r5, r0
 8001970:	00bf      	lsls	r7, r7, #2
 8001972:	fbb3 f3f7 	udiv	r3, r3, r7
 8001976:	fbb3 f3f9 	udiv	r3, r3, r9
 800197a:	011f      	lsls	r7, r3, #4
 800197c:	f7ff fde4 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001980:	6863      	ldr	r3, [r4, #4]
 8001982:	4368      	muls	r0, r5
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fbb0 f8f3 	udiv	r8, r0, r3
 800198a:	f7ff fddd 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 800198e:	6863      	ldr	r3, [r4, #4]
 8001990:	4368      	muls	r0, r5
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fbb0 f3f3 	udiv	r3, r0, r3
 8001998:	fbb3 f3f9 	udiv	r3, r3, r9
 800199c:	fb09 8313 	mls	r3, r9, r3, r8
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	3332      	adds	r3, #50	; 0x32
 80019a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019a8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80019ac:	f7ff fdcc 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 80019b0:	6862      	ldr	r2, [r4, #4]
 80019b2:	4368      	muls	r0, r5
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	fbb0 faf2 	udiv	sl, r0, r2
 80019ba:	f7ff fdc5 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019be:	6863      	ldr	r3, [r4, #4]
 80019c0:	4368      	muls	r0, r5
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019cc:	fb09 a313 	mls	r3, r9, r3, sl
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	3332      	adds	r3, #50	; 0x32
 80019d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	ea43 0308 	orr.w	r3, r3, r8
 80019e0:	e783      	b.n	80018ea <UART_SetConfig+0xd2>
 80019e2:	f7ff fda1 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 80019e6:	6867      	ldr	r7, [r4, #4]
 80019e8:	2519      	movs	r5, #25
 80019ea:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019ee:	fb05 f300 	mul.w	r3, r5, r0
 80019f2:	00bf      	lsls	r7, r7, #2
 80019f4:	fbb3 f3f7 	udiv	r3, r3, r7
 80019f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019fc:	011f      	lsls	r7, r3, #4
 80019fe:	f7ff fd93 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	4368      	muls	r0, r5
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a0c:	f7ff fd8c 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001a10:	6863      	ldr	r3, [r4, #4]
 8001a12:	4368      	muls	r0, r5
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a1e:	fb09 8313 	mls	r3, r9, r3, r8
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	3332      	adds	r3, #50	; 0x32
 8001a26:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a2a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a2e:	f7ff fd7b 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	4368      	muls	r0, r5
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	fbb0 faf2 	udiv	sl, r0, r2
 8001a3c:	f7ff fd74 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001a40:	e7bd      	b.n	80019be <UART_SetConfig+0x1a6>
 8001a42:	bf00      	nop
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40011400 	.word	0x40011400

08001a4c <HAL_UART_Init>:
{
 8001a4c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001a4e:	4604      	mov	r4, r0
 8001a50:	b340      	cbz	r0, 8001aa4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a5a:	b91b      	cbnz	r3, 8001a64 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a60:	f007 fd98 	bl	8009594 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a64:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a66:	2324      	movs	r3, #36	; 0x24
 8001a68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a6c:	68d3      	ldr	r3, [r2, #12]
 8001a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a72:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff fecf 	bl	8001818 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a8a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a92:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a94:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a96:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a98:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a9e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001aa2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
}
 8001aa6:	bd10      	pop	{r4, pc}

08001aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001aae:	2003      	movs	r0, #3
 8001ab0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ab2:	6902      	ldr	r2, [r0, #16]
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	daf8      	bge.n	8001aaa <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ab8:	6903      	ldr	r3, [r0, #16]
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <USB_CoreReset+0x2c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	d0f3      	beq.n	8001aae <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001ac6:	6903      	ldr	r3, [r0, #16]
 8001ac8:	f013 0301 	ands.w	r3, r3, #1
 8001acc:	d1f9      	bne.n	8001ac2 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001ace:	4618      	mov	r0, r3
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	00030d41 	.word	0x00030d41

08001ad8 <USB_CoreInit>:
{
 8001ad8:	b084      	sub	sp, #16
 8001ada:	b538      	push	{r3, r4, r5, lr}
 8001adc:	ad05      	add	r5, sp, #20
 8001ade:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ae4:	2b01      	cmp	r3, #1
{
 8001ae6:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ae8:	d125      	bne.n	8001b36 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001af2:	68c3      	ldr	r3, [r0, #12]
 8001af4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001afc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001afe:	68c3      	ldr	r3, [r0, #12]
 8001b00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b04:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001b08:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001b0a:	bf02      	ittt	eq
 8001b0c:	68c3      	ldreq	r3, [r0, #12]
 8001b0e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001b12:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001b14:	f7ff ffc8 	bl	8001aa8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001b18:	9b08      	ldr	r3, [sp, #32]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b1e:	68a3      	ldr	r3, [r4, #8]
 8001b20:	f043 0306 	orr.w	r3, r3, #6
 8001b24:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b26:	68a3      	ldr	r3, [r4, #8]
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	60a3      	str	r3, [r4, #8]
}
 8001b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b32:	b004      	add	sp, #16
 8001b34:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001b36:	68c3      	ldr	r3, [r0, #12]
 8001b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001b3e:	f7ff ffb3 	bl	8001aa8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b44:	b923      	cbnz	r3, 8001b50 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b4e:	e7e3      	b.n	8001b18 <USB_CoreInit+0x40>
 8001b50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	e7f9      	b.n	8001b4c <USB_CoreInit+0x74>

08001b58 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b58:	6883      	ldr	r3, [r0, #8]
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6083      	str	r3, [r0, #8]
}
 8001b60:	2000      	movs	r0, #0
 8001b62:	4770      	bx	lr

08001b64 <USB_SetCurrentMode>:
{
 8001b64:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b66:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b68:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b6a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001b6e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b70:	d108      	bne.n	8001b84 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001b72:	68c3      	ldr	r3, [r0, #12]
 8001b74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001b78:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001b7a:	2032      	movs	r0, #50	; 0x32
 8001b7c:	f7fe fcec 	bl	8000558 <HAL_Delay>
  return HAL_OK;
 8001b80:	2000      	movs	r0, #0
 8001b82:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001b84:	b919      	cbnz	r1, 8001b8e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001b86:	68c3      	ldr	r3, [r0, #12]
 8001b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b8c:	e7f4      	b.n	8001b78 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
}
 8001b90:	bd08      	pop	{r3, pc}
	...

08001b94 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001b94:	0189      	lsls	r1, r1, #6
 8001b96:	f041 0120 	orr.w	r1, r1, #32
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <USB_FlushTxFifo+0x20>)
 8001b9c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001b9e:	3a01      	subs	r2, #1
 8001ba0:	d005      	beq.n	8001bae <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001ba2:	6903      	ldr	r3, [r0, #16]
 8001ba4:	f013 0320 	ands.w	r3, r3, #32
 8001ba8:	d1f9      	bne.n	8001b9e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001baa:	4618      	mov	r0, r3
 8001bac:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001bae:	2003      	movs	r0, #3
}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	00030d41 	.word	0x00030d41

08001bb8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <USB_FlushRxFifo+0x1c>)
 8001bbc:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	d005      	beq.n	8001bce <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001bc2:	6903      	ldr	r3, [r0, #16]
 8001bc4:	f013 0310 	ands.w	r3, r3, #16
 8001bc8:	d1f9      	bne.n	8001bbe <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	00030d41 	.word	0x00030d41

08001bd8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001bd8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001bdc:	4319      	orrs	r1, r3
 8001bde:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001be2:	2000      	movs	r0, #0
 8001be4:	4770      	bx	lr
	...

08001be8 <USB_DevInit>:
{
 8001be8:	b084      	sub	sp, #16
 8001bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bee:	4604      	mov	r4, r0
 8001bf0:	a809      	add	r0, sp, #36	; 0x24
 8001bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001bfa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8001bfc:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8001c08:	3301      	adds	r3, #1
 8001c0a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8001c0c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001c0e:	d1f7      	bne.n	8001c00 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8001c10:	2e00      	cmp	r6, #0
 8001c12:	d173      	bne.n	8001cfc <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c22:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c2a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c32:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001c36:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c3c:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c3e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c42:	d165      	bne.n	8001d10 <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8001c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d160      	bne.n	8001d0c <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ffc4 	bl	8001bd8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c50:	2110      	movs	r1, #16
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff ff9e 	bl	8001b94 <USB_FlushTxFifo>
 8001c58:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ffac 	bl	8001bb8 <USB_FlushRxFifo>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d157      	bne.n	8001d14 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c64:	1c08      	adds	r0, r1, #0
 8001c66:	bf18      	it	ne
 8001c68:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	612b      	str	r3, [r5, #16]
 8001c6e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001c72:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001c74:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8001c76:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001c78:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001c7c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001c80:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c84:	4543      	cmp	r3, r8
 8001c86:	d147      	bne.n	8001d18 <USB_DevInit+0x130>
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001c8e:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001c90:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001c94:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001c98:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c9c:	428b      	cmp	r3, r1
 8001c9e:	d14e      	bne.n	8001d3e <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001ca0:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001ca2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001caa:	d107      	bne.n	8001cbc <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <USB_DevInit+0x180>)
 8001cae:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001cb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	f043 0303 	orr.w	r3, r3, #3
 8001cba:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001cc0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001cc4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001cc6:	b91f      	cbnz	r7, 8001cd0 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001cc8:	69a3      	ldr	r3, [r4, #24]
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001cd0:	69a2      	ldr	r2, [r4, #24]
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <USB_DevInit+0x184>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001cda:	b11b      	cbz	r3, 8001ce4 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001cdc:	69a3      	ldr	r3, [r4, #24]
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001ce4:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001ce6:	bf01      	itttt	eq
 8001ce8:	69a3      	ldreq	r3, [r4, #24]
 8001cea:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001cee:	f043 0304 	orreq.w	r3, r3, #4
 8001cf2:	61a3      	streq	r3, [r4, #24]
}
 8001cf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf8:	b004      	add	sp, #16
 8001cfa:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d02:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d0a:	e78e      	b.n	8001c2a <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	e79c      	b.n	8001c4a <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001d10:	2103      	movs	r1, #3
 8001d12:	e79a      	b.n	8001c4a <USB_DevInit+0x62>
 8001d14:	2001      	movs	r0, #1
 8001d16:	e7a8      	b.n	8001c6a <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001d18:	f8d2 a000 	ldr.w	sl, [r2]
 8001d1c:	f1ba 0f00 	cmp.w	sl, #0
 8001d20:	da0b      	bge.n	8001d3a <USB_DevInit+0x152>
      if (i == 0U)
 8001d22:	b93b      	cbnz	r3, 8001d34 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001d24:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001d28:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d2a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001d2c:	f8c2 9008 	str.w	r9, [r2, #8]
 8001d30:	3220      	adds	r2, #32
 8001d32:	e7a7      	b.n	8001c84 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001d34:	f8c2 e000 	str.w	lr, [r2]
 8001d38:	e7f6      	b.n	8001d28 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 8001d3a:	6011      	str	r1, [r2, #0]
 8001d3c:	e7f4      	b.n	8001d28 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001d3e:	f8d2 a000 	ldr.w	sl, [r2]
 8001d42:	f1ba 0f00 	cmp.w	sl, #0
 8001d46:	da0c      	bge.n	8001d62 <USB_DevInit+0x17a>
      if (i == 0U)
 8001d48:	b941      	cbnz	r1, 8001d5c <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001d4a:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001d4e:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d52:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001d54:	f8c2 9008 	str.w	r9, [r2, #8]
 8001d58:	3220      	adds	r2, #32
 8001d5a:	e79f      	b.n	8001c9c <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001d5c:	f8c2 c000 	str.w	ip, [r2]
 8001d60:	e7f5      	b.n	8001d4e <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001d62:	f8c2 e000 	str.w	lr, [r2]
 8001d66:	e7f2      	b.n	8001d4e <USB_DevInit+0x166>
 8001d68:	00800100 	.word	0x00800100
 8001d6c:	803c3800 	.word	0x803c3800

08001d70 <USB_DevDisconnect>:
{
 8001d70:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001d72:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f7fe fbea 	bl	8000558 <HAL_Delay>
}
 8001d84:	2000      	movs	r0, #0
 8001d86:	bd08      	pop	{r3, pc}

08001d88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d88:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001d8a:	f001 fa33 	bl	80031f4 <vTaskStartScheduler>
  
  return osOK;
}
 8001d8e:	2000      	movs	r0, #0
 8001d90:	bd08      	pop	{r3, pc}

08001d92 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d92:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8001d96:	b10b      	cbz	r3, 8001d9c <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8001d98:	f001 ba70 	b.w	800327c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8001d9c:	f001 ba68 	b.w	8003270 <xTaskGetTickCount>

08001da0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001da0:	b570      	push	{r4, r5, r6, lr}
 8001da2:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001da4:	6946      	ldr	r6, [r0, #20]
 8001da6:	692a      	ldr	r2, [r5, #16]
 8001da8:	6840      	ldr	r0, [r0, #4]
 8001daa:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001dae:	460b      	mov	r3, r1
 8001db0:	b086      	sub	sp, #24
 8001db2:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001db4:	b176      	cbz	r6, 8001dd4 <osThreadCreate+0x34>
 8001db6:	69ad      	ldr	r5, [r5, #24]
 8001db8:	b165      	cbz	r5, 8001dd4 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001dba:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001dbc:	bf14      	ite	ne
 8001dbe:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dc0:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dc2:	9502      	str	r5, [sp, #8]
 8001dc4:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001dc8:	f001 f9b0 	bl	800312c <xTaskCreateStatic>
 8001dcc:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dce:	9805      	ldr	r0, [sp, #20]
}
 8001dd0:	b006      	add	sp, #24
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001dd4:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001dd6:	bf14      	ite	ne
 8001dd8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dda:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ddc:	ad05      	add	r5, sp, #20
 8001dde:	b292      	uxth	r2, r2
 8001de0:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001de4:	f001 f9d9 	bl	800319a <xTaskCreate>
 8001de8:	2801      	cmp	r0, #1
 8001dea:	d0f0      	beq.n	8001dce <osThreadCreate+0x2e>
      return NULL;
 8001dec:	2000      	movs	r0, #0
 8001dee:	e7ef      	b.n	8001dd0 <osThreadCreate+0x30>

08001df0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001df0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001df2:	2800      	cmp	r0, #0
 8001df4:	bf08      	it	eq
 8001df6:	2001      	moveq	r0, #1
 8001df8:	f001 fb1c 	bl	8003434 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	bd08      	pop	{r3, pc}

08001e00 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001e00:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e02:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8001e04:	b109      	cbz	r1, 8001e0a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e06:	f000 bdde 	b.w	80029c6 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001e0a:	f000 bdd1 	b.w	80029b0 <xQueueCreateMutex>
	...

08001e10 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001e10:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001e12:	2400      	movs	r4, #0
 8001e14:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001e16:	b1e0      	cbz	r0, 8001e52 <osMutexWait+0x42>
 8001e18:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001e1c:	b1a3      	cbz	r3, 8001e48 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001e1e:	aa01      	add	r2, sp, #4
 8001e20:	4621      	mov	r1, r4
 8001e22:	f000 ffe5 	bl	8002df0 <xQueueReceiveFromISR>
 8001e26:	2801      	cmp	r0, #1
 8001e28:	d002      	beq.n	8001e30 <osMutexWait+0x20>
      return osErrorOS;
 8001e2a:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001e30:	9b01      	ldr	r3, [sp, #4]
 8001e32:	b13b      	cbz	r3, 8001e44 <osMutexWait+0x34>
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <osMutexWait+0x48>)
 8001e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	f3bf 8f6f 	isb	sy
  return osOK;
 8001e44:	2000      	movs	r0, #0
 8001e46:	e7f1      	b.n	8001e2c <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001e48:	f000 ff1a 	bl	8002c80 <xQueueSemaphoreTake>
 8001e4c:	2801      	cmp	r0, #1
 8001e4e:	d1ec      	bne.n	8001e2a <osMutexWait+0x1a>
 8001e50:	e7f8      	b.n	8001e44 <osMutexWait+0x34>
    return osErrorParameter;
 8001e52:	2080      	movs	r0, #128	; 0x80
 8001e54:	e7ea      	b.n	8001e2c <osMutexWait+0x1c>
 8001e56:	bf00      	nop
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001e5e:	6844      	ldr	r4, [r0, #4]
{ 
 8001e60:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8001e62:	b16c      	cbz	r4, 8001e80 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8001e64:	2901      	cmp	r1, #1
 8001e66:	d11b      	bne.n	8001ea0 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001e68:	2303      	movs	r3, #3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4628      	mov	r0, r5
 8001e70:	4623      	mov	r3, r4
 8001e72:	4611      	mov	r1, r2
 8001e74:	f000 fc7b 	bl	800276e <xQueueGenericCreateStatic>
 8001e78:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	b003      	add	sp, #12
 8001e7e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8001e80:	2901      	cmp	r1, #1
 8001e82:	d10f      	bne.n	8001ea4 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8001e84:	4628      	mov	r0, r5
 8001e86:	2203      	movs	r2, #3
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f000 fcb9 	bl	8002800 <xQueueGenericCreate>
 8001e8e:	4605      	mov	r5, r0
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d0f2      	beq.n	8001e7a <osSemaphoreCreate+0x1e>
 8001e94:	4623      	mov	r3, r4
 8001e96:	4622      	mov	r2, r4
 8001e98:	4621      	mov	r1, r4
 8001e9a:	f000 fcd5 	bl	8002848 <xQueueGenericSend>
 8001e9e:	e7ec      	b.n	8001e7a <osSemaphoreCreate+0x1e>
      return NULL;
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	e7ea      	b.n	8001e7a <osSemaphoreCreate+0x1e>
 8001ea4:	4625      	mov	r5, r4
 8001ea6:	e7e8      	b.n	8001e7a <osSemaphoreCreate+0x1e>

08001ea8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001ea8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001eaa:	2400      	movs	r4, #0
 8001eac:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001eae:	b1e0      	cbz	r0, 8001eea <osSemaphoreWait+0x42>
 8001eb0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001eb4:	b1a3      	cbz	r3, 8001ee0 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001eb6:	aa01      	add	r2, sp, #4
 8001eb8:	4621      	mov	r1, r4
 8001eba:	f000 ff99 	bl	8002df0 <xQueueReceiveFromISR>
 8001ebe:	2801      	cmp	r0, #1
 8001ec0:	d002      	beq.n	8001ec8 <osSemaphoreWait+0x20>
      return osErrorOS;
 8001ec2:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001ec8:	9b01      	ldr	r3, [sp, #4]
 8001eca:	b13b      	cbz	r3, 8001edc <osSemaphoreWait+0x34>
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <osSemaphoreWait+0x48>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	f3bf 8f6f 	isb	sy
  return osOK;
 8001edc:	2000      	movs	r0, #0
 8001ede:	e7f1      	b.n	8001ec4 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001ee0:	f000 fece 	bl	8002c80 <xQueueSemaphoreTake>
 8001ee4:	2801      	cmp	r0, #1
 8001ee6:	d1ec      	bne.n	8001ec2 <osSemaphoreWait+0x1a>
 8001ee8:	e7f8      	b.n	8001edc <osSemaphoreWait+0x34>
    return osErrorParameter;
 8001eea:	2080      	movs	r0, #128	; 0x80
 8001eec:	e7ea      	b.n	8001ec4 <osSemaphoreWait+0x1c>
 8001eee:	bf00      	nop
 8001ef0:	e000ed04 	.word	0xe000ed04

08001ef4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001ef4:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	9401      	str	r4, [sp, #4]
 8001efa:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001efe:	b193      	cbz	r3, 8001f26 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001f00:	a901      	add	r1, sp, #4
 8001f02:	f000 fdd0 	bl	8002aa6 <xQueueGiveFromISR>
 8001f06:	2801      	cmp	r0, #1
 8001f08:	d113      	bne.n	8001f32 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001f0a:	9b01      	ldr	r3, [sp, #4]
 8001f0c:	b913      	cbnz	r3, 8001f14 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001f0e:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001f10:	b002      	add	sp, #8
 8001f12:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <osSemaphoreRelease+0x44>)
 8001f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	e7f3      	b.n	8001f0e <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001f26:	461a      	mov	r2, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f000 fc8d 	bl	8002848 <xQueueGenericSend>
 8001f2e:	2801      	cmp	r0, #1
 8001f30:	d0ed      	beq.n	8001f0e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001f32:	20ff      	movs	r0, #255	; 0xff
 8001f34:	e7ec      	b.n	8001f10 <osSemaphoreRelease+0x1c>
 8001f36:	bf00      	nop
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <osMutexRelease>:
 8001f3c:	f7ff bfda 	b.w	8001ef4 <osSemaphoreRelease>

08001f40 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001f40:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001f42:	6882      	ldr	r2, [r0, #8]
 8001f44:	b14a      	cbz	r2, 8001f5a <osMessageCreate+0x1a>
 8001f46:	68c3      	ldr	r3, [r0, #12]
 8001f48:	b13b      	cbz	r3, 8001f5a <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	9100      	str	r1, [sp, #0]
 8001f4e:	c803      	ldmia	r0, {r0, r1}
 8001f50:	f000 fc0d 	bl	800276e <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001f54:	b003      	add	sp, #12
 8001f56:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f5a:	c803      	ldmia	r0, {r0, r1}
 8001f5c:	2200      	movs	r2, #0
}
 8001f5e:	b003      	add	sp, #12
 8001f60:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f64:	f000 bc4c 	b.w	8002800 <xQueueGenericCreate>

08001f68 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8001f6a:	2400      	movs	r4, #0
{
 8001f6c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001f6e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8001f70:	42a2      	cmp	r2, r4
 8001f72:	bf08      	it	eq
 8001f74:	2201      	moveq	r2, #1
 8001f76:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8001f7a:	b1ab      	cbz	r3, 8001fa8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	aa03      	add	r2, sp, #12
 8001f80:	a901      	add	r1, sp, #4
 8001f82:	f000 fd2e 	bl	80029e2 <xQueueGenericSendFromISR>
 8001f86:	2801      	cmp	r0, #1
 8001f88:	d002      	beq.n	8001f90 <osMessagePut+0x28>
      return osErrorOS;
 8001f8a:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001f90:	9b03      	ldr	r3, [sp, #12]
 8001f92:	b13b      	cbz	r3, 8001fa4 <osMessagePut+0x3c>
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <osMessagePut+0x4c>)
 8001f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	f3bf 8f6f 	isb	sy
  return osOK;
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	e7f1      	b.n	8001f8c <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001fa8:	a901      	add	r1, sp, #4
 8001faa:	f000 fc4d 	bl	8002848 <xQueueGenericSend>
 8001fae:	2801      	cmp	r0, #1
 8001fb0:	d1eb      	bne.n	8001f8a <osMessagePut+0x22>
 8001fb2:	e7f7      	b.n	8001fa4 <osMessagePut+0x3c>
 8001fb4:	e000ed04 	.word	0xe000ed04

08001fb8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001fbc:	2600      	movs	r6, #0
{
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	4617      	mov	r7, r2
 8001fc2:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001fc4:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001fc6:	9602      	str	r6, [sp, #8]
 8001fc8:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8001fca:	b911      	cbnz	r1, 8001fd2 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8001fcc:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	e017      	b.n	8002002 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8001fd2:	9600      	str	r6, [sp, #0]
 8001fd4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001fd8:	b1d3      	cbz	r3, 8002010 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001fda:	466a      	mov	r2, sp
 8001fdc:	a902      	add	r1, sp, #8
 8001fde:	f000 ff07 	bl	8002df0 <xQueueReceiveFromISR>
 8001fe2:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8001fe4:	bf04      	itt	eq
 8001fe6:	2310      	moveq	r3, #16
 8001fe8:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001fea:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8001fec:	bf18      	it	ne
 8001fee:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001ff0:	b13b      	cbz	r3, 8002002 <osMessageGet+0x4a>
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <osMessageGet+0x70>)
 8001ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8002002:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800200a:	4620      	mov	r0, r4
 800200c:	b005      	add	sp, #20
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002010:	a902      	add	r1, sp, #8
 8002012:	f000 fd9d 	bl	8002b50 <xQueueReceive>
 8002016:	2801      	cmp	r0, #1
 8002018:	d101      	bne.n	800201e <osMessageGet+0x66>
      event.status = osEventMessage;
 800201a:	2310      	movs	r3, #16
 800201c:	e7d7      	b.n	8001fce <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800201e:	2f00      	cmp	r7, #0
 8002020:	bf0c      	ite	eq
 8002022:	2300      	moveq	r3, #0
 8002024:	2340      	movne	r3, #64	; 0x40
 8002026:	e7d2      	b.n	8001fce <osMessageGet+0x16>
 8002028:	e000ed04 	.word	0xe000ed04

0800202c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800202c:	f100 0308 	add.w	r3, r0, #8
 8002030:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002036:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002038:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800203a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800203c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800203e:	6003      	str	r3, [r0, #0]
 8002040:	4770      	bx	lr

08002042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	6103      	str	r3, [r0, #16]
 8002046:	4770      	bx	lr

08002048 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002048:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800204a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002054:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002056:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002058:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800205a:	3301      	adds	r3, #1
 800205c:	6003      	str	r3, [r0, #0]
 800205e:	4770      	bx	lr

08002060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002060:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002062:	1c53      	adds	r3, r2, #1
{
 8002064:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002066:	d10a      	bne.n	800207e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002068:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800206e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002070:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002072:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002074:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002076:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002078:	3301      	adds	r3, #1
 800207a:	6003      	str	r3, [r0, #0]
 800207c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207e:	f100 0308 	add.w	r3, r0, #8
 8002082:	685c      	ldr	r4, [r3, #4]
 8002084:	6825      	ldr	r5, [r4, #0]
 8002086:	42aa      	cmp	r2, r5
 8002088:	d3ef      	bcc.n	800206a <vListInsert+0xa>
 800208a:	4623      	mov	r3, r4
 800208c:	e7f9      	b.n	8002082 <vListInsert+0x22>

0800208e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800208e:	6841      	ldr	r1, [r0, #4]
 8002090:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002092:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002094:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002096:	6882      	ldr	r2, [r0, #8]
 8002098:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800209e:	bf08      	it	eq
 80020a0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020a2:	2200      	movs	r2, #0
 80020a4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	3a01      	subs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020ac:	6818      	ldr	r0, [r3, #0]
}
 80020ae:	4770      	bx	lr

080020b0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020b0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <prvTaskExitError+0x3c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	d008      	beq.n	80020d0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	e7fe      	b.n	80020ce <prvTaskExitError+0x1e>
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80020e0:	9b01      	ldr	r3, [sp, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0fc      	beq.n	80020e0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80020e6:	b002      	add	sp, #8
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000004 	.word	0x20000004

080020f0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80020f0:	4808      	ldr	r0, [pc, #32]	; (8002114 <prvPortStartFirstTask+0x24>)
 80020f2:	6800      	ldr	r0, [r0, #0]
 80020f4:	6800      	ldr	r0, [r0, #0]
 80020f6:	f380 8808 	msr	MSP, r0
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f380 8814 	msr	CONTROL, r0
 8002102:	b662      	cpsie	i
 8002104:	b661      	cpsie	f
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	df00      	svc	0
 8002110:	bf00      	nop
 8002112:	0000      	.short	0x0000
 8002114:	e000ed08 	.word	0xe000ed08

08002118 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002118:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002128 <vPortEnableVFP+0x10>
 800211c:	6801      	ldr	r1, [r0, #0]
 800211e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002122:	6001      	str	r1, [r0, #0]
 8002124:	4770      	bx	lr
 8002126:	0000      	.short	0x0000
 8002128:	e000ed88 	.word	0xe000ed88

0800212c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800212c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002130:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <pxPortInitialiseStack+0x28>)
 8002136:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800213a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800213e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002142:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002146:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800214a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800214e:	3844      	subs	r0, #68	; 0x44
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	080020b1 	.word	0x080020b1
	...

08002160 <SVC_Handler>:
	__asm volatile (
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <pxCurrentTCBConst2>)
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	6808      	ldr	r0, [r1, #0]
 8002166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216a:	f380 8809 	msr	PSP, r0
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f380 8811 	msr	BASEPRI, r0
 800217a:	4770      	bx	lr
 800217c:	f3af 8000 	nop.w

08002180 <pxCurrentTCBConst2>:
 8002180:	20003c4c 	.word	0x20003c4c

08002184 <vPortEnterCritical>:
 8002184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <vPortEnterCritical+0x3c>)
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800219a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800219c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800219e:	d10d      	bne.n	80021bc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <vPortEnterCritical+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80021a8:	d008      	beq.n	80021bc <vPortEnterCritical+0x38>
 80021aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	e7fe      	b.n	80021ba <vPortEnterCritical+0x36>
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000004 	.word	0x20000004
 80021c4:	e000ed04 	.word	0xe000ed04

080021c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <vPortExitCritical+0x24>)
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	b943      	cbnz	r3, 80021e0 <vPortExitCritical+0x18>
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	e7fe      	b.n	80021de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80021e0:	3b01      	subs	r3, #1
 80021e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80021e4:	b90b      	cbnz	r3, 80021ea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	4770      	bx	lr
 80021ec:	20000004 	.word	0x20000004

080021f0 <PendSV_Handler>:
	__asm volatile
 80021f0:	f3ef 8009 	mrs	r0, PSP
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <pxCurrentTCBConst>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f01e 0f10 	tst.w	lr, #16
 8002200:	bf08      	it	eq
 8002202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800220a:	6010      	str	r0, [r2, #0]
 800220c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002214:	f380 8811 	msr	BASEPRI, r0
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f001 f92c 	bl	800347c <vTaskSwitchContext>
 8002224:	f04f 0000 	mov.w	r0, #0
 8002228:	f380 8811 	msr	BASEPRI, r0
 800222c:	bc09      	pop	{r0, r3}
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	6808      	ldr	r0, [r1, #0]
 8002232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002236:	f01e 0f10 	tst.w	lr, #16
 800223a:	bf08      	it	eq
 800223c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002240:	f380 8809 	msr	PSP, r0
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w

08002250 <pxCurrentTCBConst>:
 8002250:	20003c4c 	.word	0x20003c4c

08002254 <SysTick_Handler>:
{
 8002254:	b508      	push	{r3, lr}
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002266:	f001 f811 	bl	800328c <xTaskIncrementTick>
 800226a:	b118      	cbz	r0, 8002274 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <SysTick_Handler+0x28>)
 800226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002272:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002274:	2300      	movs	r3, #0
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	bd08      	pop	{r3, pc}
 800227c:	e000ed04 	.word	0xe000ed04

08002280 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002282:	4909      	ldr	r1, [pc, #36]	; (80022a8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002284:	2300      	movs	r3, #0
 8002286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002288:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <vPortSetupTimerInterrupt+0x2c>)
 800228c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <vPortSetupTimerInterrupt+0x30>)
 8002298:	3b01      	subs	r3, #1
 800229a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800229c:	2307      	movs	r3, #7
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010
 80022a8:	e000e018 	.word	0xe000e018
 80022ac:	2000000c 	.word	0x2000000c
 80022b0:	e000e014 	.word	0xe000e014

080022b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <xPortStartScheduler+0xe8>)
 80022b6:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <xPortStartScheduler+0xec>)
{
 80022b8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	4291      	cmp	r1, r2
 80022be:	d108      	bne.n	80022d2 <xPortStartScheduler+0x1e>
	__asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	e7fe      	b.n	80022d0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <xPortStartScheduler+0xf0>)
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d108      	bne.n	80022ec <xPortStartScheduler+0x38>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	e7fe      	b.n	80022ea <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <xPortStartScheduler+0xf4>)
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022f8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80022fa:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002302:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002306:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800230a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <xPortStartScheduler+0xfc>)
 800230e:	2207      	movs	r2, #7
 8002310:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002312:	2100      	movs	r1, #0
 8002314:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002318:	0600      	lsls	r0, r0, #24
 800231a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800231e:	d40d      	bmi.n	800233c <xPortStartScheduler+0x88>
 8002320:	b101      	cbz	r1, 8002324 <xPortStartScheduler+0x70>
 8002322:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2a03      	cmp	r2, #3
 8002328:	d011      	beq.n	800234e <xPortStartScheduler+0x9a>
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	e7fe      	b.n	800233a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800233c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002340:	0052      	lsls	r2, r2, #1
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f88d 2003 	strb.w	r2, [sp, #3]
 8002348:	2101      	movs	r1, #1
 800234a:	4622      	mov	r2, r4
 800234c:	e7e2      	b.n	8002314 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800234e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002350:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002354:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002356:	9b01      	ldr	r3, [sp, #4]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <xPortStartScheduler+0xf4>)
 800235a:	b2db      	uxtb	r3, r3
 800235c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <xPortStartScheduler+0x100>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002366:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800236e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002370:	f7ff ff86 	bl	8002280 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <xPortStartScheduler+0x104>)
 8002376:	2400      	movs	r4, #0
 8002378:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800237a:	f7ff fecd 	bl	8002118 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800237e:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <xPortStartScheduler+0x108>)
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002386:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002388:	f7ff feb2 	bl	80020f0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800238c:	f001 f876 	bl	800347c <vTaskSwitchContext>
	prvTaskExitError();
 8002390:	f7ff fe8e 	bl	80020b0 <prvTaskExitError>
}
 8002394:	4620      	mov	r0, r4
 8002396:	b002      	add	sp, #8
 8002398:	bd10      	pop	{r4, pc}
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00
 80023a0:	410fc271 	.word	0x410fc271
 80023a4:	410fc270 	.word	0x410fc270
 80023a8:	e000e400 	.word	0xe000e400
 80023ac:	2000002c 	.word	0x2000002c
 80023b0:	20000030 	.word	0x20000030
 80023b4:	e000ed20 	.word	0xe000ed20
 80023b8:	20000004 	.word	0x20000004
 80023bc:	e000ef34 	.word	0xe000ef34

080023c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80023c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d90e      	bls.n	80023e6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <vPortValidateInterruptPriority+0x4c>)
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80023cc:	4a10      	ldr	r2, [pc, #64]	; (8002410 <vPortValidateInterruptPriority+0x50>)
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d908      	bls.n	80023e6 <vPortValidateInterruptPriority+0x26>
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	e7fe      	b.n	80023e4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <vPortValidateInterruptPriority+0x54>)
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <vPortValidateInterruptPriority+0x58>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d908      	bls.n	8002408 <vPortValidateInterruptPriority+0x48>
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	e7fe      	b.n	8002406 <vPortValidateInterruptPriority+0x46>
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e3f0 	.word	0xe000e3f0
 8002410:	2000002c 	.word	0x2000002c
 8002414:	e000ed0c 	.word	0xe000ed0c
 8002418:	20000030 	.word	0x20000030

0800241c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800241c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <prvInsertBlockIntoFreeList+0x40>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4282      	cmp	r2, r0
 8002424:	d318      	bcc.n	8002458 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002426:	685c      	ldr	r4, [r3, #4]
 8002428:	1919      	adds	r1, r3, r4
 800242a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800242c:	bf01      	itttt	eq
 800242e:	6841      	ldreq	r1, [r0, #4]
 8002430:	4618      	moveq	r0, r3
 8002432:	1909      	addeq	r1, r1, r4
 8002434:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002436:	6844      	ldr	r4, [r0, #4]
 8002438:	1901      	adds	r1, r0, r4
 800243a:	428a      	cmp	r2, r1
 800243c:	d107      	bne.n	800244e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <prvInsertBlockIntoFreeList+0x44>)
 8002440:	6809      	ldr	r1, [r1, #0]
 8002442:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002444:	bf1f      	itttt	ne
 8002446:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002448:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800244a:	1909      	addne	r1, r1, r4
 800244c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800244e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002450:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002452:	bf18      	it	ne
 8002454:	6018      	strne	r0, [r3, #0]
 8002456:	bd10      	pop	{r4, pc}
 8002458:	4613      	mov	r3, r2
 800245a:	e7e1      	b.n	8002420 <prvInsertBlockIntoFreeList+0x4>
 800245c:	20003c44 	.word	0x20003c44
 8002460:	20000034 	.word	0x20000034

08002464 <pvPortMalloc>:
{
 8002464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002468:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800246a:	f000 fef9 	bl	8003260 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800246e:	493e      	ldr	r1, [pc, #248]	; (8002568 <pvPortMalloc+0x104>)
 8002470:	4d3e      	ldr	r5, [pc, #248]	; (800256c <pvPortMalloc+0x108>)
 8002472:	680b      	ldr	r3, [r1, #0]
 8002474:	bb0b      	cbnz	r3, 80024ba <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002476:	4a3e      	ldr	r2, [pc, #248]	; (8002570 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002478:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800247a:	bf1f      	itttt	ne
 800247c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800247e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002482:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002486:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002488:	bf14      	ite	ne
 800248a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800248c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002490:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002492:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002494:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002498:	4e36      	ldr	r6, [pc, #216]	; (8002574 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800249a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800249c:	2000      	movs	r0, #0
 800249e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024a0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80024a2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80024a4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024a6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024a8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024aa:	4b33      	ldr	r3, [pc, #204]	; (8002578 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024ac:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024ae:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <pvPortMalloc+0x118>)
 80024b2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024b8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024ba:	682f      	ldr	r7, [r5, #0]
 80024bc:	4227      	tst	r7, r4
 80024be:	d116      	bne.n	80024ee <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80024c0:	2c00      	cmp	r4, #0
 80024c2:	d041      	beq.n	8002548 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80024c4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024c8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024ca:	bf1c      	itt	ne
 80024cc:	f023 0307 	bicne.w	r3, r3, #7
 80024d0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024d2:	b163      	cbz	r3, 80024ee <pvPortMalloc+0x8a>
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <pvPortMalloc+0x118>)
 80024d6:	6816      	ldr	r6, [r2, #0]
 80024d8:	42b3      	cmp	r3, r6
 80024da:	4690      	mov	r8, r2
 80024dc:	d807      	bhi.n	80024ee <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80024de:	4a25      	ldr	r2, [pc, #148]	; (8002574 <pvPortMalloc+0x110>)
 80024e0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024e2:	6868      	ldr	r0, [r5, #4]
 80024e4:	4283      	cmp	r3, r0
 80024e6:	d804      	bhi.n	80024f2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80024e8:	6809      	ldr	r1, [r1, #0]
 80024ea:	428d      	cmp	r5, r1
 80024ec:	d107      	bne.n	80024fe <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80024ee:	2400      	movs	r4, #0
 80024f0:	e02a      	b.n	8002548 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024f2:	682c      	ldr	r4, [r5, #0]
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d0f7      	beq.n	80024e8 <pvPortMalloc+0x84>
 80024f8:	462a      	mov	r2, r5
 80024fa:	4625      	mov	r5, r4
 80024fc:	e7f1      	b.n	80024e2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024fe:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002500:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002502:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002504:	1ac2      	subs	r2, r0, r3
 8002506:	2a10      	cmp	r2, #16
 8002508:	d90f      	bls.n	800252a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800250a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800250c:	0741      	lsls	r1, r0, #29
 800250e:	d008      	beq.n	8002522 <pvPortMalloc+0xbe>
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	e7fe      	b.n	8002520 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002522:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002524:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002526:	f7ff ff79 	bl	800241c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800252a:	4913      	ldr	r1, [pc, #76]	; (8002578 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800252c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800252e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002530:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002532:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002534:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002536:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800253a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800253e:	bf38      	it	cc
 8002540:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002542:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002544:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002546:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002548:	f000 ff0c 	bl	8003364 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800254c:	0763      	lsls	r3, r4, #29
 800254e:	d008      	beq.n	8002562 <pvPortMalloc+0xfe>
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	e7fe      	b.n	8002560 <pvPortMalloc+0xfc>
}
 8002562:	4620      	mov	r0, r4
 8002564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002568:	20000034 	.word	0x20000034
 800256c:	20003c38 	.word	0x20003c38
 8002570:	20000038 	.word	0x20000038
 8002574:	20003c44 	.word	0x20003c44
 8002578:	20003c40 	.word	0x20003c40
 800257c:	20003c3c 	.word	0x20003c3c

08002580 <vPortFree>:
{
 8002580:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002582:	4604      	mov	r4, r0
 8002584:	b370      	cbz	r0, 80025e4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002586:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <vPortFree+0x68>)
 8002588:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4213      	tst	r3, r2
 8002590:	d108      	bne.n	80025a4 <vPortFree+0x24>
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	e7fe      	b.n	80025a2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025a4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80025a8:	b141      	cbz	r1, 80025bc <vPortFree+0x3c>
 80025aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	e7fe      	b.n	80025ba <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025bc:	ea23 0302 	bic.w	r3, r3, r2
 80025c0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80025c4:	f000 fe4c 	bl	8003260 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025c8:	4a08      	ldr	r2, [pc, #32]	; (80025ec <vPortFree+0x6c>)
 80025ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80025ce:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025d0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025d4:	440b      	add	r3, r1
 80025d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025d8:	f7ff ff20 	bl	800241c <prvInsertBlockIntoFreeList>
}
 80025dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80025e0:	f000 bec0 	b.w	8003364 <xTaskResumeAll>
 80025e4:	bd10      	pop	{r4, pc}
 80025e6:	bf00      	nop
 80025e8:	20003c38 	.word	0x20003c38
 80025ec:	20003c3c 	.word	0x20003c3c

080025f0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025f0:	b510      	push	{r4, lr}
 80025f2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025f4:	f7ff fdc6 	bl	8002184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80025fa:	f7ff fde5 	bl	80021c8 <vPortExitCritical>

	return xReturn;
}
 80025fe:	fab4 f084 	clz	r0, r4
 8002602:	0940      	lsrs	r0, r0, #5
 8002604:	bd10      	pop	{r4, pc}

08002606 <prvCopyDataToQueue>:
{
 8002606:	b570      	push	{r4, r5, r6, lr}
 8002608:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800260a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800260c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800260e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002610:	b942      	cbnz	r2, 8002624 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002612:	6805      	ldr	r5, [r0, #0]
 8002614:	b99d      	cbnz	r5, 800263e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002616:	6840      	ldr	r0, [r0, #4]
 8002618:	f001 f878 	bl	800370c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800261c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800261e:	3601      	adds	r6, #1
 8002620:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002622:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002624:	b96d      	cbnz	r5, 8002642 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002626:	6880      	ldr	r0, [r0, #8]
 8002628:	f007 f8a7 	bl	800977a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800262c:	68a3      	ldr	r3, [r4, #8]
 800262e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002630:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002632:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002634:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002636:	4293      	cmp	r3, r2
 8002638:	d301      	bcc.n	800263e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800263e:	2000      	movs	r0, #0
 8002640:	e7ed      	b.n	800261e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002642:	68c0      	ldr	r0, [r0, #12]
 8002644:	f007 f899 	bl	800977a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800264a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800264c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800264e:	425b      	negs	r3, r3
 8002650:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002652:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002654:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002656:	bf3e      	ittt	cc
 8002658:	6862      	ldrcc	r2, [r4, #4]
 800265a:	189b      	addcc	r3, r3, r2
 800265c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800265e:	2d02      	cmp	r5, #2
 8002660:	d1ed      	bne.n	800263e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002662:	b10e      	cbz	r6, 8002668 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002664:	3e01      	subs	r6, #1
 8002666:	e7ea      	b.n	800263e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002668:	4630      	mov	r0, r6
 800266a:	e7d8      	b.n	800261e <prvCopyDataToQueue+0x18>

0800266c <prvCopyDataFromQueue>:
{
 800266c:	4603      	mov	r3, r0
 800266e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002672:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002674:	b162      	cbz	r2, 8002690 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002676:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002678:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800267a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800267c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800267e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002680:	bf24      	itt	cs
 8002682:	6819      	ldrcs	r1, [r3, #0]
 8002684:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002686:	68d9      	ldr	r1, [r3, #12]
}
 8002688:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800268c:	f007 b875 	b.w	800977a <memcpy>
}
 8002690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002694:	4770      	bx	lr

08002696 <prvUnlockQueue>:
{
 8002696:	b570      	push	{r4, r5, r6, lr}
 8002698:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800269a:	f7ff fd73 	bl	8002184 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800269e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80026a6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026a8:	2d00      	cmp	r5, #0
 80026aa:	dc14      	bgt.n	80026d6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80026ac:	23ff      	movs	r3, #255	; 0xff
 80026ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80026b2:	f7ff fd89 	bl	80021c8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80026b6:	f7ff fd65 	bl	8002184 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80026ba:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026be:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80026c2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026c4:	2d00      	cmp	r5, #0
 80026c6:	dc12      	bgt.n	80026ee <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80026c8:	23ff      	movs	r3, #255	; 0xff
 80026ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80026ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80026d2:	f7ff bd79 	b.w	80021c8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0e7      	beq.n	80026ac <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026dc:	4630      	mov	r0, r6
 80026de:	f000 ff21 	bl	8003524 <xTaskRemoveFromEventList>
 80026e2:	b108      	cbz	r0, 80026e8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80026e4:	f000 ffa8 	bl	8003638 <vTaskMissedYield>
 80026e8:	3d01      	subs	r5, #1
 80026ea:	b26d      	sxtb	r5, r5
 80026ec:	e7dc      	b.n	80026a8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ee:	6923      	ldr	r3, [r4, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0e9      	beq.n	80026c8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026f4:	4630      	mov	r0, r6
 80026f6:	f000 ff15 	bl	8003524 <xTaskRemoveFromEventList>
 80026fa:	b108      	cbz	r0, 8002700 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80026fc:	f000 ff9c 	bl	8003638 <vTaskMissedYield>
 8002700:	3d01      	subs	r5, #1
 8002702:	b26d      	sxtb	r5, r5
 8002704:	e7de      	b.n	80026c4 <prvUnlockQueue+0x2e>

08002706 <xQueueGenericReset>:
{
 8002706:	b538      	push	{r3, r4, r5, lr}
 8002708:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800270a:	4604      	mov	r4, r0
 800270c:	b940      	cbnz	r0, 8002720 <xQueueGenericReset+0x1a>
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	e7fe      	b.n	800271e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002720:	f7ff fd30 	bl	8002184 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002724:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002728:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800272a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800272c:	4343      	muls	r3, r0
 800272e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002730:	1a1b      	subs	r3, r3, r0
 8002732:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002734:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002736:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002738:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800273a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800273c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800273e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002746:	b94d      	cbnz	r5, 800275c <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002748:	6923      	ldr	r3, [r4, #16]
 800274a:	b11b      	cbz	r3, 8002754 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274c:	f104 0010 	add.w	r0, r4, #16
 8002750:	f000 fee8 	bl	8003524 <xTaskRemoveFromEventList>
	taskEXIT_CRITICAL();
 8002754:	f7ff fd38 	bl	80021c8 <vPortExitCritical>
}
 8002758:	2001      	movs	r0, #1
 800275a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800275c:	f104 0010 	add.w	r0, r4, #16
 8002760:	f7ff fc64 	bl	800202c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002764:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002768:	f7ff fc60 	bl	800202c <vListInitialise>
 800276c:	e7f2      	b.n	8002754 <xQueueGenericReset+0x4e>

0800276e <xQueueGenericCreateStatic>:
	{
 800276e:	b513      	push	{r0, r1, r4, lr}
 8002770:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002772:	b940      	cbnz	r0, 8002786 <xQueueGenericCreateStatic+0x18>
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	e7fe      	b.n	8002784 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8002786:	b943      	cbnz	r3, 800279a <xQueueGenericCreateStatic+0x2c>
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	e7fe      	b.n	8002798 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800279a:	b14a      	cbz	r2, 80027b0 <xQueueGenericCreateStatic+0x42>
 800279c:	b9d9      	cbnz	r1, 80027d6 <xQueueGenericCreateStatic+0x68>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027b0:	b189      	cbz	r1, 80027d6 <xQueueGenericCreateStatic+0x68>
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	e7fe      	b.n	80027c2 <xQueueGenericCreateStatic+0x54>
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027d6:	2348      	movs	r3, #72	; 0x48
 80027d8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027da:	9b01      	ldr	r3, [sp, #4]
 80027dc:	2b48      	cmp	r3, #72	; 0x48
 80027de:	d1f1      	bne.n	80027c4 <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027e0:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027e2:	2900      	cmp	r1, #0
 80027e4:	bf08      	it	eq
 80027e6:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 80027e8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027ea:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027ec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027f0:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027f2:	4619      	mov	r1, r3
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff ff86 	bl	8002706 <xQueueGenericReset>
	}
 80027fa:	4620      	mov	r0, r4
 80027fc:	b002      	add	sp, #8
 80027fe:	bd10      	pop	{r4, pc}

08002800 <xQueueGenericCreate>:
	{
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002804:	4606      	mov	r6, r0
 8002806:	b940      	cbnz	r0, 800281a <xQueueGenericCreate+0x1a>
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	e7fe      	b.n	8002818 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800281a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800281c:	3048      	adds	r0, #72	; 0x48
 800281e:	f7ff fe21 	bl	8002464 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002822:	4604      	mov	r4, r0
 8002824:	b150      	cbz	r0, 800283c <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002826:	2300      	movs	r3, #0
 8002828:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800282c:	b945      	cbnz	r5, 8002840 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800282e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002830:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002832:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002834:	2101      	movs	r1, #1
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff ff65 	bl	8002706 <xQueueGenericReset>
	}
 800283c:	4620      	mov	r0, r4
 800283e:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002840:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002844:	6003      	str	r3, [r0, #0]
 8002846:	e7f3      	b.n	8002830 <xQueueGenericCreate+0x30>

08002848 <xQueueGenericSend>:
{
 8002848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800284c:	4689      	mov	r9, r1
 800284e:	9201      	str	r2, [sp, #4]
 8002850:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002852:	4604      	mov	r4, r0
 8002854:	b940      	cbnz	r0, 8002868 <xQueueGenericSend+0x20>
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	e7fe      	b.n	8002866 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002868:	2900      	cmp	r1, #0
 800286a:	d17c      	bne.n	8002966 <xQueueGenericSend+0x11e>
 800286c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d079      	beq.n	8002966 <xQueueGenericSend+0x11e>
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	e7fe      	b.n	8002882 <xQueueGenericSend+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002884:	9e01      	ldr	r6, [sp, #4]
 8002886:	2e00      	cmp	r6, #0
 8002888:	d077      	beq.n	800297a <xQueueGenericSend+0x132>
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	e7fe      	b.n	800289a <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800289c:	9d01      	ldr	r5, [sp, #4]
 800289e:	b91d      	cbnz	r5, 80028a8 <xQueueGenericSend+0x60>
					taskEXIT_CRITICAL();
 80028a0:	f7ff fc92 	bl	80021c8 <vPortExitCritical>
			return errQUEUE_FULL;
 80028a4:	2000      	movs	r0, #0
 80028a6:	e04f      	b.n	8002948 <xQueueGenericSend+0x100>
				else if( xEntryTimeSet == pdFALSE )
 80028a8:	b916      	cbnz	r6, 80028b0 <xQueueGenericSend+0x68>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028aa:	a802      	add	r0, sp, #8
 80028ac:	f000 fe7c 	bl	80035a8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80028b0:	f7ff fc8a 	bl	80021c8 <vPortExitCritical>
		vTaskSuspendAll();
 80028b4:	f000 fcd4 	bl	8003260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028b8:	f7ff fc64 	bl	8002184 <vPortEnterCritical>
 80028bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028c0:	2bff      	cmp	r3, #255	; 0xff
 80028c2:	bf08      	it	eq
 80028c4:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80028c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028cc:	2bff      	cmp	r3, #255	; 0xff
 80028ce:	bf08      	it	eq
 80028d0:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80028d4:	f7ff fc78 	bl	80021c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028d8:	a901      	add	r1, sp, #4
 80028da:	a802      	add	r0, sp, #8
 80028dc:	f000 fe70 	bl	80035c0 <xTaskCheckForTimeOut>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d13a      	bne.n	800295a <xQueueGenericSend+0x112>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028e4:	f7ff fc4e 	bl	8002184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80028ea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80028ec:	f7ff fc6c 	bl	80021c8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028f0:	42ae      	cmp	r6, r5
 80028f2:	d12c      	bne.n	800294e <xQueueGenericSend+0x106>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028f4:	9901      	ldr	r1, [sp, #4]
 80028f6:	f104 0010 	add.w	r0, r4, #16
 80028fa:	f000 fdf9 	bl	80034f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff fec9 	bl	8002696 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002904:	f000 fd2e 	bl	8003364 <xTaskResumeAll>
 8002908:	b938      	cbnz	r0, 800291a <xQueueGenericSend+0xd2>
					portYIELD_WITHIN_API();
 800290a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800290e:	f8ca 3000 	str.w	r3, [sl]
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800291c:	f7ff fc32 	bl	8002184 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002924:	429a      	cmp	r2, r3
 8002926:	d301      	bcc.n	800292c <xQueueGenericSend+0xe4>
 8002928:	2f02      	cmp	r7, #2
 800292a:	d1b7      	bne.n	800289c <xQueueGenericSend+0x54>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800292c:	463a      	mov	r2, r7
 800292e:	4649      	mov	r1, r9
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fe68 	bl	8002606 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002938:	b11b      	cbz	r3, 8002942 <xQueueGenericSend+0xfa>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800293a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800293e:	f000 fdf1 	bl	8003524 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002942:	f7ff fc41 	bl	80021c8 <vPortExitCritical>
				return pdPASS;
 8002946:	2001      	movs	r0, #1
}
 8002948:	b004      	add	sp, #16
 800294a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800294e:	4620      	mov	r0, r4
 8002950:	f7ff fea1 	bl	8002696 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002954:	f000 fd06 	bl	8003364 <xTaskResumeAll>
 8002958:	e7df      	b.n	800291a <xQueueGenericSend+0xd2>
			prvUnlockQueue( pxQueue );
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fe9b 	bl	8002696 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002960:	f000 fd00 	bl	8003364 <xTaskResumeAll>
 8002964:	e79e      	b.n	80028a4 <xQueueGenericSend+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002966:	2f02      	cmp	r7, #2
 8002968:	d102      	bne.n	8002970 <xQueueGenericSend+0x128>
 800296a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d109      	bne.n	8002984 <xQueueGenericSend+0x13c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002970:	f000 fe68 	bl	8003644 <xTaskGetSchedulerState>
 8002974:	2800      	cmp	r0, #0
 8002976:	d085      	beq.n	8002884 <xQueueGenericSend+0x3c>
 8002978:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800297a:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800297e:	f8df a018 	ldr.w	sl, [pc, #24]	; 8002998 <xQueueGenericSend+0x150>
 8002982:	e7cb      	b.n	800291c <xQueueGenericSend+0xd4>
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	e7fe      	b.n	8002994 <xQueueGenericSend+0x14c>
 8002996:	bf00      	nop
 8002998:	e000ed04 	.word	0xe000ed04

0800299c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800299c:	b138      	cbz	r0, 80029ae <prvInitialiseMutex+0x12>
			pxNewQueue->pxMutexHolder = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80029a2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80029a4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80029a6:	461a      	mov	r2, r3
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7ff bf4d 	b.w	8002848 <xQueueGenericSend>
 80029ae:	4770      	bx	lr

080029b0 <xQueueCreateMutex>:
	{
 80029b0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80029b2:	4602      	mov	r2, r0
 80029b4:	2100      	movs	r1, #0
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff ff22 	bl	8002800 <xQueueGenericCreate>
 80029bc:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80029be:	f7ff ffed 	bl	800299c <prvInitialiseMutex>
	}
 80029c2:	4620      	mov	r0, r4
 80029c4:	bd10      	pop	{r4, pc}

080029c6 <xQueueCreateMutexStatic>:
	{
 80029c6:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80029c8:	2200      	movs	r2, #0
 80029ca:	460b      	mov	r3, r1
 80029cc:	9000      	str	r0, [sp, #0]
 80029ce:	4611      	mov	r1, r2
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7ff fecc 	bl	800276e <xQueueGenericCreateStatic>
 80029d6:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80029d8:	f7ff ffe0 	bl	800299c <prvInitialiseMutex>
	}
 80029dc:	4620      	mov	r0, r4
 80029de:	b002      	add	sp, #8
 80029e0:	bd10      	pop	{r4, pc}

080029e2 <xQueueGenericSendFromISR>:
{
 80029e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e6:	4688      	mov	r8, r1
 80029e8:	4691      	mov	r9, r2
 80029ea:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80029ec:	4604      	mov	r4, r0
 80029ee:	b940      	cbnz	r0, 8002a02 <xQueueGenericSendFromISR+0x20>
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	e7fe      	b.n	8002a00 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a02:	bb09      	cbnz	r1, 8002a48 <xQueueGenericSendFromISR+0x66>
 8002a04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a06:	b1fb      	cbz	r3, 8002a48 <xQueueGenericSendFromISR+0x66>
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a1e:	f000 fd81 	bl	8003524 <xTaskRemoveFromEventList>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d034      	beq.n	8002a90 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002a26:	f1b9 0f00 	cmp.w	r9, #0
 8002a2a:	d031      	beq.n	8002a90 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002a32:	f386 8811 	msr	BASEPRI, r6
}
 8002a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a3a:	3501      	adds	r5, #1
 8002a3c:	b26d      	sxtb	r5, r5
 8002a3e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002a42:	e025      	b.n	8002a90 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002a44:	2000      	movs	r0, #0
 8002a46:	e7f4      	b.n	8002a32 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a48:	2f02      	cmp	r7, #2
 8002a4a:	d102      	bne.n	8002a52 <xQueueGenericSendFromISR+0x70>
 8002a4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d120      	bne.n	8002a94 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a52:	f7ff fcb5 	bl	80023c0 <vPortValidateInterruptPriority>
	__asm volatile
 8002a56:	f3ef 8611 	mrs	r6, BASEPRI
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d301      	bcc.n	8002a76 <xQueueGenericSendFromISR+0x94>
 8002a72:	2f02      	cmp	r7, #2
 8002a74:	d1e6      	bne.n	8002a44 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a76:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a7a:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a7c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a7e:	4641      	mov	r1, r8
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff fdc0 	bl	8002606 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002a86:	1c6b      	adds	r3, r5, #1
 8002a88:	d1d7      	bne.n	8002a3a <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1c4      	bne.n	8002a1a <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7ce      	b.n	8002a32 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueGenericSendFromISR+0xc2>

08002aa6 <xQueueGiveFromISR>:
{
 8002aa6:	b570      	push	{r4, r5, r6, lr}
 8002aa8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002aaa:	4604      	mov	r4, r0
 8002aac:	b940      	cbnz	r0, 8002ac0 <xQueueGiveFromISR+0x1a>
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	e7fe      	b.n	8002abe <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ac0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ac2:	b143      	cbz	r3, 8002ad6 <xQueueGiveFromISR+0x30>
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002ad6:	6803      	ldr	r3, [r0, #0]
 8002ad8:	b90b      	cbnz	r3, 8002ade <xQueueGiveFromISR+0x38>
 8002ada:	6843      	ldr	r3, [r0, #4]
 8002adc:	bb73      	cbnz	r3, 8002b3c <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ade:	f7ff fc6f 	bl	80023c0 <vPortValidateInterruptPriority>
	__asm volatile
 8002ae2:	f3ef 8611 	mrs	r6, BASEPRI
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d301      	bcc.n	8002b02 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002afe:	2000      	movs	r0, #0
 8002b00:	e014      	b.n	8002b2c <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b06:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b08:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b0a:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	d110      	bne.n	8002b32 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b12:	b90b      	cbnz	r3, 8002b18 <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e009      	b.n	8002b2c <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b1c:	f000 fd02 	bl	8003524 <xTaskRemoveFromEventList>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d0f7      	beq.n	8002b14 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	d0f5      	beq.n	8002b14 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002b2c:	f386 8811 	msr	BASEPRI, r6
}
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b32:	3301      	adds	r3, #1
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b3a:	e7eb      	b.n	8002b14 <xQueueGiveFromISR+0x6e>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGiveFromISR+0xa6>
	...

08002b50 <xQueueReceive>:
{
 8002b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b54:	b085      	sub	sp, #20
 8002b56:	4688      	mov	r8, r1
 8002b58:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	b940      	cbnz	r0, 8002b70 <xQueueReceive+0x20>
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	e7fe      	b.n	8002b6e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d17a      	bne.n	8002c6a <xQueueReceive+0x11a>
 8002b74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d077      	beq.n	8002c6a <xQueueReceive+0x11a>
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	e7fe      	b.n	8002b8a <xQueueReceive+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b8c:	9e01      	ldr	r6, [sp, #4]
 8002b8e:	2e00      	cmp	r6, #0
 8002b90:	d070      	beq.n	8002c74 <xQueueReceive+0x124>
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	e7fe      	b.n	8002ba2 <xQueueReceive+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ba4:	9d01      	ldr	r5, [sp, #4]
 8002ba6:	b91d      	cbnz	r5, 8002bb0 <xQueueReceive+0x60>
					taskEXIT_CRITICAL();
 8002ba8:	f7ff fb0e 	bl	80021c8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002bac:	2000      	movs	r0, #0
 8002bae:	e048      	b.n	8002c42 <xQueueReceive+0xf2>
				else if( xEntryTimeSet == pdFALSE )
 8002bb0:	b916      	cbnz	r6, 8002bb8 <xQueueReceive+0x68>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bb2:	a802      	add	r0, sp, #8
 8002bb4:	f000 fcf8 	bl	80035a8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002bb8:	f7ff fb06 	bl	80021c8 <vPortExitCritical>
		vTaskSuspendAll();
 8002bbc:	f000 fb50 	bl	8003260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bc0:	f7ff fae0 	bl	8002184 <vPortEnterCritical>
 8002bc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	bf08      	it	eq
 8002bcc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002bd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	bf08      	it	eq
 8002bd8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002bdc:	f7ff faf4 	bl	80021c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be0:	a901      	add	r1, sp, #4
 8002be2:	a802      	add	r0, sp, #8
 8002be4:	f000 fcec 	bl	80035c0 <xTaskCheckForTimeOut>
 8002be8:	bba0      	cbnz	r0, 8002c54 <xQueueReceive+0x104>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff fd00 	bl	80025f0 <prvIsQueueEmpty>
 8002bf0:	b350      	cbz	r0, 8002c48 <xQueueReceive+0xf8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bf2:	9901      	ldr	r1, [sp, #4]
 8002bf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002bf8:	f000 fc7a 	bl	80034f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7ff fd4a 	bl	8002696 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c02:	f000 fbaf 	bl	8003364 <xTaskResumeAll>
 8002c06:	b938      	cbnz	r0, 8002c18 <xQueueReceive+0xc8>
					portYIELD_WITHIN_API();
 8002c08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c0c:	f8c9 3000 	str.w	r3, [r9]
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002c1a:	f7ff fab3 	bl	8002184 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c1e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	d0bf      	beq.n	8002ba4 <xQueueReceive+0x54>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c24:	4641      	mov	r1, r8
 8002c26:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c28:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c2a:	f7ff fd1f 	bl	800266c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c2e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c30:	6923      	ldr	r3, [r4, #16]
 8002c32:	b11b      	cbz	r3, 8002c3c <xQueueReceive+0xec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c34:	f104 0010 	add.w	r0, r4, #16
 8002c38:	f000 fc74 	bl	8003524 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002c3c:	f7ff fac4 	bl	80021c8 <vPortExitCritical>
				return pdPASS;
 8002c40:	2001      	movs	r0, #1
}
 8002c42:	b005      	add	sp, #20
 8002c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff fd24 	bl	8002696 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c4e:	f000 fb89 	bl	8003364 <xTaskResumeAll>
 8002c52:	e7e1      	b.n	8002c18 <xQueueReceive+0xc8>
			prvUnlockQueue( pxQueue );
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fd1e 	bl	8002696 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c5a:	f000 fb83 	bl	8003364 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff fcc6 	bl	80025f0 <prvIsQueueEmpty>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d0d7      	beq.n	8002c18 <xQueueReceive+0xc8>
 8002c68:	e7a0      	b.n	8002bac <xQueueReceive+0x5c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6a:	f000 fceb 	bl	8003644 <xTaskGetSchedulerState>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d08c      	beq.n	8002b8c <xQueueReceive+0x3c>
 8002c72:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002c74:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002c76:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002c7c <xQueueReceive+0x12c>
 8002c7a:	e7ce      	b.n	8002c1a <xQueueReceive+0xca>
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <xQueueSemaphoreTake>:
{
 8002c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8002c84:	4604      	mov	r4, r0
{
 8002c86:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002c88:	b940      	cbnz	r0, 8002c9c <xQueueSemaphoreTake+0x1c>
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	e7fe      	b.n	8002c9a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c9c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002c9e:	b145      	cbz	r5, 8002cb2 <xQueueSemaphoreTake+0x32>
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cb2:	f000 fcc7 	bl	8003644 <xTaskGetSchedulerState>
 8002cb6:	b918      	cbnz	r0, 8002cc0 <xQueueSemaphoreTake+0x40>
 8002cb8:	9d01      	ldr	r5, [sp, #4]
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	f040 808c 	bne.w	8002dd8 <xQueueSemaphoreTake+0x158>
					portYIELD_WITHIN_API();
 8002cc0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002dec <xQueueSemaphoreTake+0x16c>
 8002cc4:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002cc6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8002cc8:	f7ff fa5c 	bl	8002184 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002cce:	b19b      	cbz	r3, 8002cf8 <xQueueSemaphoreTake+0x78>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	b913      	cbnz	r3, 8002cde <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002cd8:	f000 fdc2 	bl	8003860 <pvTaskIncrementMutexHeldCount>
 8002cdc:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cde:	6923      	ldr	r3, [r4, #16]
 8002ce0:	b11b      	cbz	r3, 8002cea <xQueueSemaphoreTake+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce2:	f104 0010 	add.w	r0, r4, #16
 8002ce6:	f000 fc1d 	bl	8003524 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002cea:	f7ff fa6d 	bl	80021c8 <vPortExitCritical>
				return pdPASS;
 8002cee:	2501      	movs	r5, #1
}
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	b004      	add	sp, #16
 8002cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	b963      	cbnz	r3, 8002d16 <xQueueSemaphoreTake+0x96>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002cfc:	b145      	cbz	r5, 8002d10 <xQueueSemaphoreTake+0x90>
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	e7fe      	b.n	8002d0e <xQueueSemaphoreTake+0x8e>
					taskEXIT_CRITICAL();
 8002d10:	f7ff fa5a 	bl	80021c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002d14:	e7ec      	b.n	8002cf0 <xQueueSemaphoreTake+0x70>
				else if( xEntryTimeSet == pdFALSE )
 8002d16:	b916      	cbnz	r6, 8002d1e <xQueueSemaphoreTake+0x9e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d18:	a802      	add	r0, sp, #8
 8002d1a:	f000 fc45 	bl	80035a8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002d1e:	f7ff fa53 	bl	80021c8 <vPortExitCritical>
		vTaskSuspendAll();
 8002d22:	f000 fa9d 	bl	8003260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d26:	f7ff fa2d 	bl	8002184 <vPortEnterCritical>
 8002d2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	bf08      	it	eq
 8002d32:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002d36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d3a:	2bff      	cmp	r3, #255	; 0xff
 8002d3c:	bf08      	it	eq
 8002d3e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002d42:	f7ff fa41 	bl	80021c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d46:	a901      	add	r1, sp, #4
 8002d48:	a802      	add	r0, sp, #8
 8002d4a:	f000 fc39 	bl	80035c0 <xTaskCheckForTimeOut>
 8002d4e:	bb40      	cbnz	r0, 8002da2 <xQueueSemaphoreTake+0x122>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7ff fc4d 	bl	80025f0 <prvIsQueueEmpty>
 8002d56:	b1f0      	cbz	r0, 8002d96 <xQueueSemaphoreTake+0x116>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	b93b      	cbnz	r3, 8002d6c <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 8002d5c:	f7ff fa12 	bl	8002184 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002d60:	6860      	ldr	r0, [r4, #4]
 8002d62:	f000 fc7f 	bl	8003664 <xTaskPriorityInherit>
 8002d66:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002d68:	f7ff fa2e 	bl	80021c8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d6c:	9901      	ldr	r1, [sp, #4]
 8002d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d72:	f000 fbbd 	bl	80034f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fc8d 	bl	8002696 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d7c:	f000 faf2 	bl	8003364 <xTaskResumeAll>
 8002d80:	b938      	cbnz	r0, 8002d92 <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8002d82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d86:	f8c8 3000 	str.w	r3, [r8]
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	2601      	movs	r6, #1
 8002d94:	e798      	b.n	8002cc8 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7ff fc7d 	bl	8002696 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d9c:	f000 fae2 	bl	8003364 <xTaskResumeAll>
 8002da0:	e7f7      	b.n	8002d92 <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7ff fc77 	bl	8002696 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002da8:	f000 fadc 	bl	8003364 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7ff fc1f 	bl	80025f0 <prvIsQueueEmpty>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d0ed      	beq.n	8002d92 <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 8002db6:	2d00      	cmp	r5, #0
 8002db8:	d09a      	beq.n	8002cf0 <xQueueSemaphoreTake+0x70>
						taskENTER_CRITICAL();
 8002dba:	f7ff f9e3 	bl	8002184 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002dbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002dc0:	b119      	cbz	r1, 8002dca <xQueueSemaphoreTake+0x14a>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002dca:	6860      	ldr	r0, [r4, #4]
 8002dcc:	f000 fcee 	bl	80037ac <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002dd0:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002dd2:	f7ff f9f9 	bl	80021c8 <vPortExitCritical>
 8002dd6:	e78b      	b.n	8002cf0 <xQueueSemaphoreTake+0x70>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	e7fe      	b.n	8002de8 <xQueueSemaphoreTake+0x168>
 8002dea:	bf00      	nop
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <xQueueReceiveFromISR>:
{
 8002df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df4:	4689      	mov	r9, r1
 8002df6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002df8:	4605      	mov	r5, r0
 8002dfa:	b940      	cbnz	r0, 8002e0e <xQueueReceiveFromISR+0x1e>
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	e7fe      	b.n	8002e0c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e0e:	bb71      	cbnz	r1, 8002e6e <xQueueReceiveFromISR+0x7e>
 8002e10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e12:	b363      	cbz	r3, 8002e6e <xQueueReceiveFromISR+0x7e>
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	e7fe      	b.n	8002e24 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e26:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e2a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e2c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f7ff fc1c 	bl	800266c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e34:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002e36:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e38:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002e3a:	d113      	bne.n	8002e64 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e3c:	692b      	ldr	r3, [r5, #16]
 8002e3e:	b90b      	cbnz	r3, 8002e44 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002e40:	2001      	movs	r0, #1
 8002e42:	e00b      	b.n	8002e5c <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e44:	f105 0010 	add.w	r0, r5, #16
 8002e48:	f000 fb6c 	bl	8003524 <xTaskRemoveFromEventList>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d0f7      	beq.n	8002e40 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002e50:	f1b8 0f00 	cmp.w	r8, #0
 8002e54:	d0f4      	beq.n	8002e40 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e56:	2001      	movs	r0, #1
 8002e58:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002e5c:	f387 8811 	msr	BASEPRI, r7
}
 8002e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e64:	3601      	adds	r6, #1
 8002e66:	b276      	sxtb	r6, r6
 8002e68:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002e6c:	e7e8      	b.n	8002e40 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e6e:	f7ff faa7 	bl	80023c0 <vPortValidateInterruptPriority>
	__asm volatile
 8002e72:	f3ef 8711 	mrs	r7, BASEPRI
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e86:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e88:	2c00      	cmp	r4, #0
 8002e8a:	d1cc      	bne.n	8002e26 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	e7e5      	b.n	8002e5c <xQueueReceiveFromISR+0x6c>

08002e90 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e94:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e96:	f7ff f975 	bl	8002184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <prvAddNewTaskToReadyList+0xa8>)
		if( pxCurrentTCB == NULL )
 8002e9c:	4c27      	ldr	r4, [pc, #156]	; (8002f3c <prvAddNewTaskToReadyList+0xac>)
		uxCurrentNumberOfTasks++;
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4f27      	ldr	r7, [pc, #156]	; (8002f40 <prvAddNewTaskToReadyList+0xb0>)
 8002ea2:	3201      	adds	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002ea6:	6825      	ldr	r5, [r4, #0]
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	d139      	bne.n	8002f20 <prvAddNewTaskToReadyList+0x90>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eac:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d11c      	bne.n	8002eee <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002eb4:	1978      	adds	r0, r7, r5
 8002eb6:	3514      	adds	r5, #20
 8002eb8:	f7ff f8b8 	bl	800202c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ebc:	2d8c      	cmp	r5, #140	; 0x8c
 8002ebe:	d1f9      	bne.n	8002eb4 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ec0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002f68 <prvAddNewTaskToReadyList+0xd8>
	vListInitialise( &xDelayedTaskList2 );
 8002ec4:	4d1f      	ldr	r5, [pc, #124]	; (8002f44 <prvAddNewTaskToReadyList+0xb4>)
	vListInitialise( &xDelayedTaskList1 );
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f7ff f8b0 	bl	800202c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f7ff f8ad 	bl	800202c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ed2:	481d      	ldr	r0, [pc, #116]	; (8002f48 <prvAddNewTaskToReadyList+0xb8>)
 8002ed4:	f7ff f8aa 	bl	800202c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ed8:	481c      	ldr	r0, [pc, #112]	; (8002f4c <prvAddNewTaskToReadyList+0xbc>)
 8002eda:	f7ff f8a7 	bl	800202c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ede:	481c      	ldr	r0, [pc, #112]	; (8002f50 <prvAddNewTaskToReadyList+0xc0>)
 8002ee0:	f7ff f8a4 	bl	800202c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <prvAddNewTaskToReadyList+0xc4>)
 8002ee6:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <prvAddNewTaskToReadyList+0xc8>)
 8002eec:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <prvAddNewTaskToReadyList+0xcc>)
		prvAddTaskToReadyList( pxNewTCB );
 8002ef0:	491b      	ldr	r1, [pc, #108]	; (8002f60 <prvAddNewTaskToReadyList+0xd0>)
		uxTaskNumber++;
 8002ef2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002ef4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002efa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002efc:	2301      	movs	r3, #1
 8002efe:	4093      	lsls	r3, r2
 8002f00:	4303      	orrs	r3, r0
 8002f02:	2014      	movs	r0, #20
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	fb00 7002 	mla	r0, r0, r2, r7
 8002f0a:	1d31      	adds	r1, r6, #4
 8002f0c:	f7ff f89c 	bl	8002048 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002f10:	f7ff f95a 	bl	80021c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <prvAddNewTaskToReadyList+0xd4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b103      	cbz	r3, 8002f1c <prvAddNewTaskToReadyList+0x8c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <prvAddNewTaskToReadyList+0xd4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e2      	bne.n	8002eee <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002f2e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002f30:	bf98      	it	ls
 8002f32:	6026      	strls	r6, [r4, #0]
 8002f34:	e7db      	b.n	8002eee <prvAddNewTaskToReadyList+0x5e>
 8002f36:	bf00      	nop
 8002f38:	20003ce4 	.word	0x20003ce4
 8002f3c:	20003c4c 	.word	0x20003c4c
 8002f40:	20003c58 	.word	0x20003c58
 8002f44:	20003d10 	.word	0x20003d10
 8002f48:	20003d2c 	.word	0x20003d2c
 8002f4c:	20003d58 	.word	0x20003d58
 8002f50:	20003d44 	.word	0x20003d44
 8002f54:	20003c50 	.word	0x20003c50
 8002f58:	20003c54 	.word	0x20003c54
 8002f5c:	20003cf4 	.word	0x20003cf4
 8002f60:	20003cf8 	.word	0x20003cf8
 8002f64:	20003d40 	.word	0x20003d40
 8002f68:	20003cfc 	.word	0x20003cfc

08002f6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f6c:	4a06      	ldr	r2, [pc, #24]	; (8002f88 <prvResetNextTaskUnblockTime+0x1c>)
 8002f6e:	6813      	ldr	r3, [r2, #0]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <prvResetNextTaskUnblockTime+0x20>)
 8002f74:	b919      	cbnz	r1, 8002f7e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f82:	68d2      	ldr	r2, [r2, #12]
 8002f84:	6852      	ldr	r2, [r2, #4]
 8002f86:	e7f8      	b.n	8002f7a <prvResetNextTaskUnblockTime+0xe>
 8002f88:	20003c50 	.word	0x20003c50
 8002f8c:	20003d24 	.word	0x20003d24

08002f90 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002f96:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f9a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002f9c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002fa6:	469a      	mov	sl, r3
 8002fa8:	4681      	mov	r9, r0
 8002faa:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002fac:	f026 0607 	bic.w	r6, r6, #7
 8002fb0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002fb4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fb6:	7858      	ldrb	r0, [r3, #1]
 8002fb8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002fbc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002fc0:	b108      	cbz	r0, 8002fc6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fc2:	428b      	cmp	r3, r1
 8002fc4:	d1f7      	bne.n	8002fb6 <prvInitialiseNewTask.isra.2+0x26>
 8002fc6:	9d08      	ldr	r5, [sp, #32]
 8002fc8:	2d06      	cmp	r5, #6
 8002fca:	bf28      	it	cs
 8002fcc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fce:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002fd0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002fd2:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fd4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fd6:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002fda:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fdc:	f7ff f831 	bl	8002042 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fe4:	f104 0018 	add.w	r0, r4, #24
 8002fe8:	f7ff f82b 	bl	8002042 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002fec:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ff2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ff4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff8:	4652      	mov	r2, sl
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f7ff f895 	bl	800212c <pxPortInitialiseStack>
 8003002:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003004:	f1b8 0f00 	cmp.w	r8, #0
 8003008:	d001      	beq.n	800300e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800300a:	f8c8 4000 	str.w	r4, [r8]
 800300e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003012 <prvDeleteTCB>:
	{
 8003012:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003014:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003018:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800301a:	b93b      	cbnz	r3, 800302c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800301c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800301e:	f7ff faaf 	bl	8002580 <vPortFree>
				vPortFree( pxTCB );
 8003022:	4620      	mov	r0, r4
	}
 8003024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003028:	f7ff baaa 	b.w	8002580 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800302c:	2b01      	cmp	r3, #1
 800302e:	d0f9      	beq.n	8003024 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003030:	2b02      	cmp	r3, #2
 8003032:	d008      	beq.n	8003046 <prvDeleteTCB+0x34>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	e7fe      	b.n	8003044 <prvDeleteTCB+0x32>
 8003046:	bd10      	pop	{r4, pc}

08003048 <prvIdleTask>:
{
 8003048:	b580      	push	{r7, lr}
			taskYIELD();
 800304a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800309c <prvIdleTask+0x54>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800304e:	4f10      	ldr	r7, [pc, #64]	; (8003090 <prvIdleTask+0x48>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003050:	4c10      	ldr	r4, [pc, #64]	; (8003094 <prvIdleTask+0x4c>)
				--uxCurrentNumberOfTasks;
 8003052:	4d11      	ldr	r5, [pc, #68]	; (8003098 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	b943      	cbnz	r3, 800306a <prvIdleTask+0x22>
			taskYIELD();
 8003058:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800305c:	f8c8 3000 	str.w	r3, [r8]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	e7f2      	b.n	8003050 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800306a:	f7ff f88b 	bl	8002184 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003072:	1d30      	adds	r0, r6, #4
 8003074:	f7ff f80b 	bl	800208e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	3b01      	subs	r3, #1
 8003082:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003084:	f7ff f8a0 	bl	80021c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003088:	4630      	mov	r0, r6
 800308a:	f7ff ffc2 	bl	8003012 <prvDeleteTCB>
 800308e:	e7e1      	b.n	8003054 <prvIdleTask+0xc>
 8003090:	20003d58 	.word	0x20003d58
 8003094:	20003ce8 	.word	0x20003ce8
 8003098:	20003ce4 	.word	0x20003ce4
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030a4:	4e1b      	ldr	r6, [pc, #108]	; (8003114 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80030a6:	681d      	ldr	r5, [r3, #0]
{
 80030a8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030aa:	6830      	ldr	r0, [r6, #0]
 80030ac:	3004      	adds	r0, #4
{
 80030ae:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030b0:	f7fe ffed 	bl	800208e <uxListRemove>
 80030b4:	4633      	mov	r3, r6
 80030b6:	b940      	cbnz	r0, 80030ca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80030b8:	6831      	ldr	r1, [r6, #0]
 80030ba:	4e17      	ldr	r6, [pc, #92]	; (8003118 <prvAddCurrentTaskToDelayedList+0x78>)
 80030bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80030be:	6832      	ldr	r2, [r6, #0]
 80030c0:	2001      	movs	r0, #1
 80030c2:	4088      	lsls	r0, r1
 80030c4:	ea22 0200 	bic.w	r2, r2, r0
 80030c8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ca:	1c62      	adds	r2, r4, #1
 80030cc:	d107      	bne.n	80030de <prvAddCurrentTaskToDelayedList+0x3e>
 80030ce:	b137      	cbz	r7, 80030de <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	4812      	ldr	r0, [pc, #72]	; (800311c <prvAddCurrentTaskToDelayedList+0x7c>)
 80030d4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030da:	f7fe bfb5 	b.w	8002048 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030de:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030e0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80030e2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030e4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80030e6:	d907      	bls.n	80030f8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <prvAddCurrentTaskToDelayedList+0x80>)
 80030ea:	6810      	ldr	r0, [r2, #0]
 80030ec:	6819      	ldr	r1, [r3, #0]
}
 80030ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f2:	3104      	adds	r1, #4
 80030f4:	f7fe bfb4 	b.w	8002060 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <prvAddCurrentTaskToDelayedList+0x84>)
 80030fa:	6810      	ldr	r0, [r2, #0]
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	3104      	adds	r1, #4
 8003100:	f7fe ffae 	bl	8002060 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <prvAddCurrentTaskToDelayedList+0x88>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800310a:	bf38      	it	cc
 800310c:	601c      	strcc	r4, [r3, #0]
 800310e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003110:	20003d6c 	.word	0x20003d6c
 8003114:	20003c4c 	.word	0x20003c4c
 8003118:	20003cf8 	.word	0x20003cf8
 800311c:	20003d44 	.word	0x20003d44
 8003120:	20003c54 	.word	0x20003c54
 8003124:	20003c50 	.word	0x20003c50
 8003128:	20003d24 	.word	0x20003d24

0800312c <xTaskCreateStatic>:
	{
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003132:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003134:	b945      	cbnz	r5, 8003148 <xTaskCreateStatic+0x1c>
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	e7fe      	b.n	8003146 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003148:	b944      	cbnz	r4, 800315c <xTaskCreateStatic+0x30>
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	e7fe      	b.n	800315a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800315c:	2654      	movs	r6, #84	; 0x54
 800315e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003160:	9e04      	ldr	r6, [sp, #16]
 8003162:	2e54      	cmp	r6, #84	; 0x54
 8003164:	d008      	beq.n	8003178 <xTaskCreateStatic+0x4c>
 8003166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	e7fe      	b.n	8003176 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003178:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800317a:	2502      	movs	r5, #2
 800317c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003180:	ad05      	add	r5, sp, #20
 8003182:	9501      	str	r5, [sp, #4]
 8003184:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003186:	9402      	str	r4, [sp, #8]
 8003188:	9500      	str	r5, [sp, #0]
 800318a:	f7ff ff01 	bl	8002f90 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800318e:	4620      	mov	r0, r4
 8003190:	f7ff fe7e 	bl	8002e90 <prvAddNewTaskToReadyList>
	}
 8003194:	9805      	ldr	r0, [sp, #20]
 8003196:	b006      	add	sp, #24
 8003198:	bd70      	pop	{r4, r5, r6, pc}

0800319a <xTaskCreate>:
	{
 800319a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800319e:	4607      	mov	r7, r0
 80031a0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a2:	0090      	lsls	r0, r2, #2
	{
 80031a4:	4688      	mov	r8, r1
 80031a6:	4616      	mov	r6, r2
 80031a8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031aa:	f7ff f95b 	bl	8002464 <pvPortMalloc>
			if( pxStack != NULL )
 80031ae:	4605      	mov	r5, r0
 80031b0:	b1e8      	cbz	r0, 80031ee <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031b2:	2054      	movs	r0, #84	; 0x54
 80031b4:	f7ff f956 	bl	8002464 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80031b8:	4604      	mov	r4, r0
 80031ba:	b1a8      	cbz	r0, 80031e8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031bc:	2300      	movs	r3, #0
 80031be:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80031c4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ca:	9002      	str	r0, [sp, #8]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4632      	mov	r2, r6
 80031d0:	464b      	mov	r3, r9
 80031d2:	4641      	mov	r1, r8
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff fedb 	bl	8002f90 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031da:	4620      	mov	r0, r4
 80031dc:	f7ff fe58 	bl	8002e90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031e0:	2001      	movs	r0, #1
	}
 80031e2:	b005      	add	sp, #20
 80031e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80031e8:	4628      	mov	r0, r5
 80031ea:	f7ff f9c9 	bl	8002580 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80031f2:	e7f6      	b.n	80031e2 <xTaskCreate+0x48>

080031f4 <vTaskStartScheduler>:
{
 80031f4:	b510      	push	{r4, lr}
 80031f6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031f8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031fa:	aa07      	add	r2, sp, #28
 80031fc:	a906      	add	r1, sp, #24
 80031fe:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003200:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003202:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003204:	f005 fe80 	bl	8008f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003208:	9b05      	ldr	r3, [sp, #20]
 800320a:	9302      	str	r3, [sp, #8]
 800320c:	9b06      	ldr	r3, [sp, #24]
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	9400      	str	r4, [sp, #0]
 8003212:	4623      	mov	r3, r4
 8003214:	9a07      	ldr	r2, [sp, #28]
 8003216:	490d      	ldr	r1, [pc, #52]	; (800324c <vTaskStartScheduler+0x58>)
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <vTaskStartScheduler+0x5c>)
 800321a:	f7ff ff87 	bl	800312c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800321e:	b190      	cbz	r0, 8003246 <vTaskStartScheduler+0x52>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <vTaskStartScheduler+0x60>)
 8003232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003236:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <vTaskStartScheduler+0x64>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <vTaskStartScheduler+0x68>)
 8003240:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003242:	f7ff f837 	bl	80022b4 <xPortStartScheduler>
}
 8003246:	b008      	add	sp, #32
 8003248:	bd10      	pop	{r4, pc}
 800324a:	bf00      	nop
 800324c:	080097f0 	.word	0x080097f0
 8003250:	08003049 	.word	0x08003049
 8003254:	20003d24 	.word	0x20003d24
 8003258:	20003d40 	.word	0x20003d40
 800325c:	20003d6c 	.word	0x20003d6c

08003260 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003260:	4a02      	ldr	r2, [pc, #8]	; (800326c <vTaskSuspendAll+0xc>)
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20003cf0 	.word	0x20003cf0

08003270 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003270:	4b01      	ldr	r3, [pc, #4]	; (8003278 <xTaskGetTickCount+0x8>)
 8003272:	6818      	ldr	r0, [r3, #0]
}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20003d6c 	.word	0x20003d6c

0800327c <xTaskGetTickCountFromISR>:
{
 800327c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800327e:	f7ff f89f 	bl	80023c0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003282:	4b01      	ldr	r3, [pc, #4]	; (8003288 <xTaskGetTickCountFromISR+0xc>)
 8003284:	6818      	ldr	r0, [r3, #0]
}
 8003286:	bd08      	pop	{r3, pc}
 8003288:	20003d6c 	.word	0x20003d6c

0800328c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <xTaskIncrementTick+0xb4>)
 800328e:	681b      	ldr	r3, [r3, #0]
{
 8003290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003294:	2b00      	cmp	r3, #0
 8003296:	d12c      	bne.n	80032f2 <xTaskIncrementTick+0x66>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <xTaskIncrementTick+0xb8>)
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800329e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032a0:	b9bc      	cbnz	r4, 80032d2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <xTaskIncrementTick+0xbc>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	b142      	cbz	r2, 80032bc <xTaskIncrementTick+0x30>
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	e7fe      	b.n	80032ba <xTaskIncrementTick+0x2e>
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <xTaskIncrementTick+0xc0>)
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	6810      	ldr	r0, [r2, #0]
 80032c2:	6018      	str	r0, [r3, #0]
 80032c4:	6011      	str	r1, [r2, #0]
 80032c6:	4a22      	ldr	r2, [pc, #136]	; (8003350 <xTaskIncrementTick+0xc4>)
 80032c8:	6813      	ldr	r3, [r2, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	f7ff fe4d 	bl	8002f6c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032d2:	4d20      	ldr	r5, [pc, #128]	; (8003354 <xTaskIncrementTick+0xc8>)
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	429c      	cmp	r4, r3
 80032d8:	d30f      	bcc.n	80032fa <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032da:	4f1b      	ldr	r7, [pc, #108]	; (8003348 <xTaskIncrementTick+0xbc>)
					prvAddTaskToReadyList( pxTCB );
 80032dc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800335c <xTaskIncrementTick+0xd0>
 80032e0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003360 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b953      	cbnz	r3, 8003300 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ee:	602b      	str	r3, [r5, #0]
	return xSwitchRequired;
 80032f0:	e003      	b.n	80032fa <xTaskIncrementTick+0x6e>
		++uxPendedTicks;
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <xTaskIncrementTick+0xcc>)
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	6013      	str	r3, [r2, #0]
}
 80032fa:	2000      	movs	r0, #0
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003306:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003308:	429c      	cmp	r4, r3
 800330a:	d3f0      	bcc.n	80032ee <xTaskIncrementTick+0x62>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800330c:	f106 0904 	add.w	r9, r6, #4
 8003310:	4648      	mov	r0, r9
 8003312:	f7fe febc 	bl	800208e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003316:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003318:	b11b      	cbz	r3, 8003322 <xTaskIncrementTick+0x96>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800331a:	f106 0018 	add.w	r0, r6, #24
 800331e:	f7fe feb6 	bl	800208e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003322:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003324:	f8d8 1000 	ldr.w	r1, [r8]
 8003328:	2301      	movs	r3, #1
 800332a:	4093      	lsls	r3, r2
 800332c:	2014      	movs	r0, #20
 800332e:	430b      	orrs	r3, r1
 8003330:	fb00 a002 	mla	r0, r0, r2, sl
 8003334:	4649      	mov	r1, r9
 8003336:	f8c8 3000 	str.w	r3, [r8]
 800333a:	f7fe fe85 	bl	8002048 <vListInsertEnd>
 800333e:	e7d1      	b.n	80032e4 <xTaskIncrementTick+0x58>
 8003340:	20003cf0 	.word	0x20003cf0
 8003344:	20003d6c 	.word	0x20003d6c
 8003348:	20003c50 	.word	0x20003c50
 800334c:	20003c54 	.word	0x20003c54
 8003350:	20003d28 	.word	0x20003d28
 8003354:	20003d24 	.word	0x20003d24
 8003358:	20003cec 	.word	0x20003cec
 800335c:	20003cf8 	.word	0x20003cf8
 8003360:	20003c58 	.word	0x20003c58

08003364 <xTaskResumeAll>:
{
 8003364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003368:	4c2a      	ldr	r4, [pc, #168]	; (8003414 <xTaskResumeAll+0xb0>)
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	b943      	cbnz	r3, 8003380 <xTaskResumeAll+0x1c>
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	e7fe      	b.n	800337e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003380:	f7fe ff00 	bl	8002184 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800338a:	6824      	ldr	r4, [r4, #0]
 800338c:	b9dc      	cbnz	r4, 80033c6 <xTaskResumeAll+0x62>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <xTaskResumeAll+0xb4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b1c3      	cbz	r3, 80033c6 <xTaskResumeAll+0x62>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003394:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800342c <xTaskResumeAll+0xc8>
					prvAddTaskToReadyList( pxTCB );
 8003398:	4f20      	ldr	r7, [pc, #128]	; (800341c <xTaskResumeAll+0xb8>)
 800339a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003430 <xTaskResumeAll+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800339e:	f8d9 3000 	ldr.w	r3, [r9]
 80033a2:	b9ab      	cbnz	r3, 80033d0 <xTaskResumeAll+0x6c>
				if( pxTCB != NULL )
 80033a4:	b10c      	cbz	r4, 80033aa <xTaskResumeAll+0x46>
					prvResetNextTaskUnblockTime();
 80033a6:	f7ff fde1 	bl	8002f6c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033aa:	4d1d      	ldr	r5, [pc, #116]	; (8003420 <xTaskResumeAll+0xbc>)
 80033ac:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033ae:	b144      	cbz	r4, 80033c2 <xTaskResumeAll+0x5e>
								xYieldPending = pdTRUE;
 80033b0:	4e1c      	ldr	r6, [pc, #112]	; (8003424 <xTaskResumeAll+0xc0>)
 80033b2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80033b4:	f7ff ff6a 	bl	800328c <xTaskIncrementTick>
 80033b8:	b100      	cbz	r0, 80033bc <xTaskResumeAll+0x58>
								xYieldPending = pdTRUE;
 80033ba:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033bc:	3c01      	subs	r4, #1
 80033be:	d1f9      	bne.n	80033b4 <xTaskResumeAll+0x50>
						uxPendedTicks = 0;
 80033c0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <xTaskResumeAll+0xc0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
	taskEXIT_CRITICAL();
 80033c6:	f7fe feff 	bl	80021c8 <vPortExitCritical>
}
 80033ca:	2000      	movs	r0, #0
 80033cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80033d4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d8:	f104 0018 	add.w	r0, r4, #24
 80033dc:	f7fe fe57 	bl	800208e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7fe fe54 	bl	800208e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	2501      	movs	r5, #1
 80033ec:	fa05 f302 	lsl.w	r3, r5, r2
 80033f0:	2014      	movs	r0, #20
 80033f2:	430b      	orrs	r3, r1
 80033f4:	fb00 8002 	mla	r0, r0, r2, r8
 80033f8:	4631      	mov	r1, r6
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	f7fe fe24 	bl	8002048 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <xTaskResumeAll+0xc4>)
 8003402:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800340a:	bf24      	itt	cs
 800340c:	4b05      	ldrcs	r3, [pc, #20]	; (8003424 <xTaskResumeAll+0xc0>)
 800340e:	601d      	strcs	r5, [r3, #0]
 8003410:	e7c5      	b.n	800339e <xTaskResumeAll+0x3a>
 8003412:	bf00      	nop
 8003414:	20003cf0 	.word	0x20003cf0
 8003418:	20003ce4 	.word	0x20003ce4
 800341c:	20003cf8 	.word	0x20003cf8
 8003420:	20003cec 	.word	0x20003cec
 8003424:	20003d70 	.word	0x20003d70
 8003428:	20003c4c 	.word	0x20003c4c
 800342c:	20003d2c 	.word	0x20003d2c
 8003430:	20003c58 	.word	0x20003c58

08003434 <vTaskDelay>:
	{
 8003434:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003436:	b940      	cbnz	r0, 800344a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <vTaskDelay+0x40>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <vTaskDelay+0x44>)
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	b141      	cbz	r1, 8003462 <vTaskDelay+0x2e>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	e7fe      	b.n	8003460 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003462:	f7ff fefd 	bl	8003260 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003466:	f7ff fe1b 	bl	80030a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800346a:	f7ff ff7b 	bl	8003364 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800346e:	2800      	cmp	r0, #0
 8003470:	d0e2      	beq.n	8003438 <vTaskDelay+0x4>
 8003472:	bd08      	pop	{r3, pc}
 8003474:	e000ed04 	.word	0xe000ed04
 8003478:	20003cf0 	.word	0x20003cf0

0800347c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800347c:	4b17      	ldr	r3, [pc, #92]	; (80034dc <vTaskSwitchContext+0x60>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <vTaskSwitchContext+0x64>)
{
 8003482:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003484:	b112      	cbz	r2, 800348c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003486:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800348c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <vTaskSwitchContext+0x68>)
 8003490:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f1c3 031f 	rsb	r3, r3, #31
 800349c:	2214      	movs	r2, #20
 800349e:	4912      	ldr	r1, [pc, #72]	; (80034e8 <vTaskSwitchContext+0x6c>)
 80034a0:	435a      	muls	r2, r3
 80034a2:	1888      	adds	r0, r1, r2
 80034a4:	588c      	ldr	r4, [r1, r2]
 80034a6:	b944      	cbnz	r4, 80034ba <vTaskSwitchContext+0x3e>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	e7fe      	b.n	80034b8 <vTaskSwitchContext+0x3c>
 80034ba:	6844      	ldr	r4, [r0, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	6864      	ldr	r4, [r4, #4]
 80034c0:	6044      	str	r4, [r0, #4]
 80034c2:	440a      	add	r2, r1
 80034c4:	4294      	cmp	r4, r2
 80034c6:	bf04      	itt	eq
 80034c8:	6862      	ldreq	r2, [r4, #4]
 80034ca:	6042      	streq	r2, [r0, #4]
 80034cc:	2214      	movs	r2, #20
 80034ce:	fb02 1303 	mla	r3, r2, r3, r1
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <vTaskSwitchContext+0x70>)
 80034d8:	e7d6      	b.n	8003488 <vTaskSwitchContext+0xc>
 80034da:	bf00      	nop
 80034dc:	20003cf0 	.word	0x20003cf0
 80034e0:	20003d70 	.word	0x20003d70
 80034e4:	20003cf8 	.word	0x20003cf8
 80034e8:	20003c58 	.word	0x20003c58
 80034ec:	20003c4c 	.word	0x20003c4c

080034f0 <vTaskPlaceOnEventList>:
{
 80034f0:	b510      	push	{r4, lr}
 80034f2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80034f4:	b940      	cbnz	r0, 8003508 <vTaskPlaceOnEventList+0x18>
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	e7fe      	b.n	8003506 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <vTaskPlaceOnEventList+0x30>)
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	3118      	adds	r1, #24
 800350e:	f7fe fda7 	bl	8002060 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003512:	4620      	mov	r0, r4
 8003514:	2101      	movs	r1, #1
}
 8003516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800351a:	f7ff bdc1 	b.w	80030a0 <prvAddCurrentTaskToDelayedList>
 800351e:	bf00      	nop
 8003520:	20003c4c 	.word	0x20003c4c

08003524 <xTaskRemoveFromEventList>:
{
 8003524:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003526:	68c3      	ldr	r3, [r0, #12]
 8003528:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800352a:	b944      	cbnz	r4, 800353e <xTaskRemoveFromEventList+0x1a>
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	e7fe      	b.n	800353c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800353e:	f104 0518 	add.w	r5, r4, #24
 8003542:	4628      	mov	r0, r5
 8003544:	f7fe fda3 	bl	800208e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <xTaskRemoveFromEventList+0x6c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b9e3      	cbnz	r3, 8003588 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800354e:	1d25      	adds	r5, r4, #4
 8003550:	4628      	mov	r0, r5
 8003552:	f7fe fd9c 	bl	800208e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003556:	490f      	ldr	r1, [pc, #60]	; (8003594 <xTaskRemoveFromEventList+0x70>)
 8003558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800355a:	6808      	ldr	r0, [r1, #0]
 800355c:	2301      	movs	r3, #1
 800355e:	4093      	lsls	r3, r2
 8003560:	4303      	orrs	r3, r0
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <xTaskRemoveFromEventList+0x74>)
 8003566:	2014      	movs	r0, #20
 8003568:	4629      	mov	r1, r5
 800356a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800356e:	f7fe fd6b 	bl	8002048 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <xTaskRemoveFromEventList+0x78>)
 8003574:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800357c:	bf83      	ittte	hi
 800357e:	4b08      	ldrhi	r3, [pc, #32]	; (80035a0 <xTaskRemoveFromEventList+0x7c>)
 8003580:	2001      	movhi	r0, #1
 8003582:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003584:	2000      	movls	r0, #0
}
 8003586:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003588:	4629      	mov	r1, r5
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <xTaskRemoveFromEventList+0x80>)
 800358c:	e7ef      	b.n	800356e <xTaskRemoveFromEventList+0x4a>
 800358e:	bf00      	nop
 8003590:	20003cf0 	.word	0x20003cf0
 8003594:	20003cf8 	.word	0x20003cf8
 8003598:	20003c58 	.word	0x20003c58
 800359c:	20003c4c 	.word	0x20003c4c
 80035a0:	20003d70 	.word	0x20003d70
 80035a4:	20003d2c 	.word	0x20003d2c

080035a8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <vTaskInternalSetTimeOutState+0x10>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035ae:	4b03      	ldr	r3, [pc, #12]	; (80035bc <vTaskInternalSetTimeOutState+0x14>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6043      	str	r3, [r0, #4]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20003d28 	.word	0x20003d28
 80035bc:	20003d6c 	.word	0x20003d6c

080035c0 <xTaskCheckForTimeOut>:
{
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80035c4:	4605      	mov	r5, r0
 80035c6:	b940      	cbnz	r0, 80035da <xTaskCheckForTimeOut+0x1a>
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	e7fe      	b.n	80035d8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80035da:	b941      	cbnz	r1, 80035ee <xTaskCheckForTimeOut+0x2e>
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	e7fe      	b.n	80035ec <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80035ee:	f7fe fdc9 	bl	8002184 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035f4:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80035f6:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	1c58      	adds	r0, r3, #1
 80035fc:	d00e      	beq.n	800361c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035fe:	480d      	ldr	r0, [pc, #52]	; (8003634 <xTaskCheckForTimeOut+0x74>)
 8003600:	682e      	ldr	r6, [r5, #0]
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	4286      	cmp	r6, r0
 8003606:	d001      	beq.n	800360c <xTaskCheckForTimeOut+0x4c>
 8003608:	428a      	cmp	r2, r1
 800360a:	d20e      	bcs.n	800362a <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800360c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800360e:	429a      	cmp	r2, r3
 8003610:	d209      	bcs.n	8003626 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003616:	4628      	mov	r0, r5
 8003618:	f7ff ffc6 	bl	80035a8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800361c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800361e:	f7fe fdd3 	bl	80021c8 <vPortExitCritical>
}
 8003622:	4620      	mov	r0, r4
 8003624:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800362a:	2401      	movs	r4, #1
 800362c:	e7f7      	b.n	800361e <xTaskCheckForTimeOut+0x5e>
 800362e:	bf00      	nop
 8003630:	20003d6c 	.word	0x20003d6c
 8003634:	20003d28 	.word	0x20003d28

08003638 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003638:	4b01      	ldr	r3, [pc, #4]	; (8003640 <vTaskMissedYield+0x8>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4770      	bx	lr
 8003640:	20003d70 	.word	0x20003d70

08003644 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <xTaskGetSchedulerState+0x18>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b133      	cbz	r3, 8003658 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <xTaskGetSchedulerState+0x1c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003650:	bf0c      	ite	eq
 8003652:	2002      	moveq	r0, #2
 8003654:	2000      	movne	r0, #0
 8003656:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003658:	2001      	movs	r0, #1
	}
 800365a:	4770      	bx	lr
 800365c:	20003d40 	.word	0x20003d40
 8003660:	20003cf0 	.word	0x20003cf0

08003664 <xTaskPriorityInherit>:
	{
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003668:	4604      	mov	r4, r0
 800366a:	2800      	cmp	r0, #0
 800366c:	d041      	beq.n	80036f2 <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <xTaskPriorityInherit+0x9c>)
 8003670:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003672:	6811      	ldr	r1, [r2, #0]
 8003674:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003676:	428b      	cmp	r3, r1
 8003678:	4617      	mov	r7, r2
 800367a:	d231      	bcs.n	80036e0 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800367c:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800367e:	4d21      	ldr	r5, [pc, #132]	; (8003704 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003680:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003682:	bfa1      	itttt	ge
 8003684:	683a      	ldrge	r2, [r7, #0]
 8003686:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003688:	f1c2 0207 	rsbge	r2, r2, #7
 800368c:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800368e:	2614      	movs	r6, #20
 8003690:	6942      	ldr	r2, [r0, #20]
 8003692:	fb06 5303 	mla	r3, r6, r3, r5
 8003696:	429a      	cmp	r2, r3
 8003698:	d12d      	bne.n	80036f6 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800369a:	f100 0804 	add.w	r8, r0, #4
 800369e:	4640      	mov	r0, r8
 80036a0:	f7fe fcf5 	bl	800208e <uxListRemove>
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <xTaskPriorityInherit+0xa4>)
 80036a6:	b948      	cbnz	r0, 80036bc <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80036a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80036aa:	4346      	muls	r6, r0
 80036ac:	59aa      	ldr	r2, [r5, r6]
 80036ae:	b92a      	cbnz	r2, 80036bc <xTaskPriorityInherit+0x58>
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	2101      	movs	r1, #1
 80036b4:	4081      	lsls	r1, r0
 80036b6:	ea22 0201 	bic.w	r2, r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036bc:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80036be:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036c2:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80036c4:	2401      	movs	r4, #1
 80036c6:	fa04 f002 	lsl.w	r0, r4, r2
 80036ca:	4308      	orrs	r0, r1
 80036cc:	6018      	str	r0, [r3, #0]
 80036ce:	2014      	movs	r0, #20
 80036d0:	4641      	mov	r1, r8
 80036d2:	fb00 5002 	mla	r0, r0, r2, r5
 80036d6:	f7fe fcb7 	bl	8002048 <vListInsertEnd>
				xReturn = pdTRUE;
 80036da:	2001      	movs	r0, #1
	}
 80036dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80036e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80036e6:	42a0      	cmp	r0, r4
 80036e8:	bf2c      	ite	cs
 80036ea:	2000      	movcs	r0, #0
 80036ec:	2001      	movcc	r0, #1
 80036ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 80036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80036fc:	e7ed      	b.n	80036da <xTaskPriorityInherit+0x76>
 80036fe:	bf00      	nop
 8003700:	20003c4c 	.word	0x20003c4c
 8003704:	20003c58 	.word	0x20003c58
 8003708:	20003cf8 	.word	0x20003cf8

0800370c <xTaskPriorityDisinherit>:
	{
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800370e:	4604      	mov	r4, r0
 8003710:	b908      	cbnz	r0, 8003716 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003712:	2000      	movs	r0, #0
 8003714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <xTaskPriorityDisinherit+0x94>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4298      	cmp	r0, r3
 800371c:	d008      	beq.n	8003730 <xTaskPriorityDisinherit+0x24>
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	e7fe      	b.n	800372e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003730:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003732:	b943      	cbnz	r3, 8003746 <xTaskPriorityDisinherit+0x3a>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	e7fe      	b.n	8003744 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003746:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003748:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800374a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800374c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800374e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003750:	d0df      	beq.n	8003712 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1dd      	bne.n	8003712 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003756:	1d05      	adds	r5, r0, #4
 8003758:	4628      	mov	r0, r5
 800375a:	f7fe fc98 	bl	800208e <uxListRemove>
 800375e:	4e11      	ldr	r6, [pc, #68]	; (80037a4 <xTaskPriorityDisinherit+0x98>)
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <xTaskPriorityDisinherit+0x9c>)
 8003762:	b950      	cbnz	r0, 800377a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003764:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003766:	2114      	movs	r1, #20
 8003768:	4379      	muls	r1, r7
 800376a:	5873      	ldr	r3, [r6, r1]
 800376c:	b92b      	cbnz	r3, 800377a <xTaskPriorityDisinherit+0x6e>
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	2001      	movs	r0, #1
 8003772:	40b8      	lsls	r0, r7
 8003774:	ea23 0300 	bic.w	r3, r3, r0
 8003778:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800377a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800377c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377e:	f1c3 0107 	rsb	r1, r3, #7
 8003782:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003784:	6811      	ldr	r1, [r2, #0]
 8003786:	2401      	movs	r4, #1
 8003788:	fa04 f003 	lsl.w	r0, r4, r3
 800378c:	4308      	orrs	r0, r1
 800378e:	6010      	str	r0, [r2, #0]
 8003790:	2014      	movs	r0, #20
 8003792:	fb00 6003 	mla	r0, r0, r3, r6
 8003796:	4629      	mov	r1, r5
 8003798:	f7fe fc56 	bl	8002048 <vListInsertEnd>
					xReturn = pdTRUE;
 800379c:	4620      	mov	r0, r4
	}
 800379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a0:	20003c4c 	.word	0x20003c4c
 80037a4:	20003c58 	.word	0x20003c58
 80037a8:	20003cf8 	.word	0x20003cf8

080037ac <vTaskPriorityDisinheritAfterTimeout>:
	{
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80037ae:	4604      	mov	r4, r0
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d04d      	beq.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80037b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80037b6:	b942      	cbnz	r2, 80037ca <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	e7fe      	b.n	80037c8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80037ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80037cc:	4299      	cmp	r1, r3
 80037ce:	bf38      	it	cc
 80037d0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80037d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037d4:	428b      	cmp	r3, r1
 80037d6:	d03b      	beq.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80037d8:	2a01      	cmp	r2, #1
 80037da:	d139      	bne.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	4290      	cmp	r0, r2
 80037e2:	d108      	bne.n	80037f6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	e7fe      	b.n	80037f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80037f6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80037f8:	4d17      	ldr	r5, [pc, #92]	; (8003858 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 80037fa:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80037fc:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80037fe:	f04f 0614 	mov.w	r6, #20
 8003802:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003804:	bfa8      	it	ge
 8003806:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800380a:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380e:	bfa8      	it	ge
 8003810:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003812:	429a      	cmp	r2, r3
 8003814:	d11c      	bne.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003816:	1d07      	adds	r7, r0, #4
 8003818:	4638      	mov	r0, r7
 800381a:	f7fe fc38 	bl	800208e <uxListRemove>
 800381e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003820:	4c0e      	ldr	r4, [pc, #56]	; (800385c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8003822:	b940      	cbnz	r0, 8003836 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003824:	4356      	muls	r6, r2
 8003826:	59ab      	ldr	r3, [r5, r6]
 8003828:	b92b      	cbnz	r3, 8003836 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	4091      	lsls	r1, r2
 8003830:	ea23 0301 	bic.w	r3, r3, r1
 8003834:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8003836:	6821      	ldr	r1, [r4, #0]
 8003838:	2301      	movs	r3, #1
 800383a:	4093      	lsls	r3, r2
 800383c:	430b      	orrs	r3, r1
 800383e:	2014      	movs	r0, #20
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	4639      	mov	r1, r7
 8003844:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8003848:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800384c:	f7fe bbfc 	b.w	8002048 <vListInsertEnd>
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003852:	bf00      	nop
 8003854:	20003c4c 	.word	0x20003c4c
 8003858:	20003c58 	.word	0x20003c58
 800385c:	20003cf8 	.word	0x20003cf8

08003860 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <pvTaskIncrementMutexHeldCount+0x14>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	b11a      	cbz	r2, 800386e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800386a:	3201      	adds	r2, #1
 800386c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800386e:	6818      	ldr	r0, [r3, #0]
	}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20003c4c 	.word	0x20003c4c

08003878 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <tcpip_thread+0x7c>)
 800387a:	681b      	ldr	r3, [r3, #0]
{
 800387c:	b583      	push	{r0, r1, r7, lr}
  if (tcpip_init_done != NULL) {
 800387e:	b113      	cbz	r3, 8003886 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <tcpip_thread+0x80>)
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	4798      	blx	r3
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003886:	4f1d      	ldr	r7, [pc, #116]	; (80038fc <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003888:	4d1d      	ldr	r5, [pc, #116]	; (8003900 <tcpip_thread+0x88>)
 800388a:	4c1e      	ldr	r4, [pc, #120]	; (8003904 <tcpip_thread+0x8c>)
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800388c:	a901      	add	r1, sp, #4
 800388e:	4638      	mov	r0, r7
 8003890:	f004 ff10 	bl	80086b4 <sys_timeouts_mbox_fetch>
    if (msg == NULL) {
 8003894:	9b01      	ldr	r3, [sp, #4]
 8003896:	b933      	cbnz	r3, 80038a6 <tcpip_thread+0x2e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003898:	462b      	mov	r3, r5
 800389a:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800389c:	4621      	mov	r1, r4
 800389e:	481a      	ldr	r0, [pc, #104]	; (8003908 <tcpip_thread+0x90>)
 80038a0:	f005 fe1d 	bl	80094de <iprintf>
      break;
 80038a4:	e7f2      	b.n	800388c <tcpip_thread+0x14>
    switch (msg->type) {
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	2a04      	cmp	r2, #4
 80038aa:	d820      	bhi.n	80038ee <tcpip_thread+0x76>
 80038ac:	e8df f002 	tbb	[pc, r2]
 80038b0:	150d031b 	.word	0x150d031b
 80038b4:	1b          	.byte	0x1b
 80038b5:	00          	.byte	0x00
      msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
 80038b6:	689e      	ldr	r6, [r3, #8]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4630      	mov	r0, r6
 80038bc:	4798      	blx	r3
 80038be:	7030      	strb	r0, [r6, #0]
      sys_sem_signal(msg->msg.api_call.sem);
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	68d8      	ldr	r0, [r3, #12]
 80038c4:	f005 f8bf 	bl	8008a46 <sys_sem_signal>
      break;
 80038c8:	e7e0      	b.n	800388c <tcpip_thread+0x14>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80038ca:	1d18      	adds	r0, r3, #4
 80038cc:	c807      	ldmia	r0, {r0, r1, r2}
 80038ce:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80038d0:	9901      	ldr	r1, [sp, #4]
 80038d2:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80038d4:	f001 fd04 	bl	80052e0 <memp_free>
      break;
 80038d8:	e7d8      	b.n	800388c <tcpip_thread+0x14>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80038da:	6898      	ldr	r0, [r3, #8]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80038e0:	9901      	ldr	r1, [sp, #4]
 80038e2:	2008      	movs	r0, #8
 80038e4:	e7f6      	b.n	80038d4 <tcpip_thread+0x5c>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	6898      	ldr	r0, [r3, #8]
 80038ea:	4790      	blx	r2
      break;
 80038ec:	e7ce      	b.n	800388c <tcpip_thread+0x14>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80038ee:	462b      	mov	r3, r5
 80038f0:	229b      	movs	r2, #155	; 0x9b
 80038f2:	e7d3      	b.n	800389c <tcpip_thread+0x24>
 80038f4:	20003d78 	.word	0x20003d78
 80038f8:	20003d7c 	.word	0x20003d7c
 80038fc:	20003d74 	.word	0x20003d74
 8003900:	08009832 	.word	0x08009832
 8003904:	08009862 	.word	0x08009862
 8003908:	08009880 	.word	0x08009880

0800390c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003910:	4810      	ldr	r0, [pc, #64]	; (8003954 <tcpip_inpkt+0x48>)
{
 8003912:	460e      	mov	r6, r1
 8003914:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003916:	f005 f891 	bl	8008a3c <sys_mbox_valid>
 800391a:	b928      	cbnz	r0, 8003928 <tcpip_inpkt+0x1c>
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <tcpip_inpkt+0x4c>)
 800391e:	490f      	ldr	r1, [pc, #60]	; (800395c <tcpip_inpkt+0x50>)
 8003920:	480f      	ldr	r0, [pc, #60]	; (8003960 <tcpip_inpkt+0x54>)
 8003922:	22b5      	movs	r2, #181	; 0xb5
 8003924:	f005 fddb 	bl	80094de <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003928:	2009      	movs	r0, #9
 800392a:	f001 fcbd 	bl	80052a8 <memp_malloc>
  if (msg == NULL) {
 800392e:	4604      	mov	r4, r0
 8003930:	b168      	cbz	r0, 800394e <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8003932:	2302      	movs	r3, #2
 8003934:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8003936:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8003938:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 800393a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800393c:	4601      	mov	r1, r0
 800393e:	4805      	ldr	r0, [pc, #20]	; (8003954 <tcpip_inpkt+0x48>)
 8003940:	f005 f850 	bl	80089e4 <sys_mbox_trypost>
 8003944:	b128      	cbz	r0, 8003952 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003946:	4621      	mov	r1, r4
 8003948:	2009      	movs	r0, #9
 800394a:	f001 fcc9 	bl	80052e0 <memp_free>
    return ERR_MEM;
 800394e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8003952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003954:	20003d74 	.word	0x20003d74
 8003958:	08009832 	.word	0x08009832
 800395c:	08009825 	.word	0x08009825
 8003960:	08009880 	.word	0x08009880

08003964 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8003964:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8003968:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800396c:	bf14      	ite	ne
 800396e:	4a02      	ldrne	r2, [pc, #8]	; (8003978 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8003970:	4a02      	ldreq	r2, [pc, #8]	; (800397c <tcpip_input+0x18>)
 8003972:	f7ff bfcb 	b.w	800390c <tcpip_inpkt>
 8003976:	bf00      	nop
 8003978:	080088a1 	.word	0x080088a1
 800397c:	080043c5 	.word	0x080043c5

08003980 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003984:	4812      	ldr	r0, [pc, #72]	; (80039d0 <tcpip_callback_with_block+0x50>)
{
 8003986:	460e      	mov	r6, r1
 8003988:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800398a:	f005 f857 	bl	8008a3c <sys_mbox_valid>
 800398e:	b928      	cbnz	r0, 800399c <tcpip_callback_with_block+0x1c>
 8003990:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <tcpip_callback_with_block+0x54>)
 8003992:	4911      	ldr	r1, [pc, #68]	; (80039d8 <tcpip_callback_with_block+0x58>)
 8003994:	4811      	ldr	r0, [pc, #68]	; (80039dc <tcpip_callback_with_block+0x5c>)
 8003996:	22ee      	movs	r2, #238	; 0xee
 8003998:	f005 fda1 	bl	80094de <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800399c:	2008      	movs	r0, #8
 800399e:	f001 fc83 	bl	80052a8 <memp_malloc>
  if (msg == NULL) {
 80039a2:	4604      	mov	r4, r0
 80039a4:	b188      	cbz	r0, 80039ca <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80039a6:	2303      	movs	r3, #3
 80039a8:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80039aa:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80039ac:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 80039ae:	4601      	mov	r1, r0
 80039b0:	4807      	ldr	r0, [pc, #28]	; (80039d0 <tcpip_callback_with_block+0x50>)
  if (block) {
 80039b2:	b11d      	cbz	r5, 80039bc <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 80039b4:	f005 f80a 	bl	80089cc <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 80039b8:	2000      	movs	r0, #0
 80039ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80039bc:	f005 f812 	bl	80089e4 <sys_mbox_trypost>
 80039c0:	b128      	cbz	r0, 80039ce <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80039c2:	4621      	mov	r1, r4
 80039c4:	2008      	movs	r0, #8
 80039c6:	f001 fc8b 	bl	80052e0 <memp_free>
    return ERR_MEM;
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d0:	20003d74 	.word	0x20003d74
 80039d4:	08009832 	.word	0x08009832
 80039d8:	08009825 	.word	0x08009825
 80039dc:	08009880 	.word	0x08009880

080039e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80039e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039e2:	4605      	mov	r5, r0
 80039e4:	460c      	mov	r4, r1
  lwip_init();
 80039e6:	f000 f830 	bl	8003a4a <lwip_init>

  tcpip_init_done = initfunc;
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <tcpip_init+0x40>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80039ec:	480d      	ldr	r0, [pc, #52]	; (8003a24 <tcpip_init+0x44>)
  tcpip_init_done = initfunc;
 80039ee:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <tcpip_init+0x48>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80039f2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80039f4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80039f6:	f004 ffd7 	bl	80089a8 <sys_mbox_new>
 80039fa:	b130      	cbz	r0, 8003a0a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <tcpip_init+0x4c>)
 80039fe:	490c      	ldr	r1, [pc, #48]	; (8003a30 <tcpip_init+0x50>)
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <tcpip_init+0x54>)
 8003a02:	f240 12d5 	movw	r2, #469	; 0x1d5
 8003a06:	f005 fd6a 	bl	80094de <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a14:	4908      	ldr	r1, [pc, #32]	; (8003a38 <tcpip_init+0x58>)
 8003a16:	4809      	ldr	r0, [pc, #36]	; (8003a3c <tcpip_init+0x5c>)
 8003a18:	f005 f83b 	bl	8008a92 <sys_thread_new>
}
 8003a1c:	b003      	add	sp, #12
 8003a1e:	bd30      	pop	{r4, r5, pc}
 8003a20:	20003d78 	.word	0x20003d78
 8003a24:	20003d74 	.word	0x20003d74
 8003a28:	20003d7c 	.word	0x20003d7c
 8003a2c:	08009832 	.word	0x08009832
 8003a30:	080097f5 	.word	0x080097f5
 8003a34:	08009880 	.word	0x08009880
 8003a38:	08003879 	.word	0x08003879
 8003a3c:	08009818 	.word	0x08009818

08003a40 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8003a40:	ba40      	rev16	r0, r0
}
 8003a42:	b280      	uxth	r0, r0
 8003a44:	4770      	bx	lr

08003a46 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8003a46:	ba00      	rev	r0, r0
 8003a48:	4770      	bx	lr

08003a4a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003a4a:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8003a4c:	f004 fffe 	bl	8008a4c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8003a50:	f001 f9b6 	bl	8004dc0 <mem_init>
  memp_init();
 8003a54:	f001 fc1a 	bl	800528c <memp_init>
  pbuf_init();
  netif_init();
 8003a58:	f001 fc65 	bl	8005326 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003a5c:	f004 fe70 	bl	8008740 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003a60:	f002 f8d8 	bl	8005c14 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8003a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8003a68:	f004 bdfa 	b.w	8008660 <sys_timeouts_init>

08003a6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8003a6e:	2618      	movs	r6, #24
 8003a70:	4c07      	ldr	r4, [pc, #28]	; (8003a90 <etharp_free_entry+0x24>)
 8003a72:	4346      	muls	r6, r0
{
 8003a74:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8003a76:	59a0      	ldr	r0, [r4, r6]
 8003a78:	b118      	cbz	r0, 8003a82 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8003a7a:	f001 fdb7 	bl	80055ec <pbuf_free>
    arp_table[i].q = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8003a82:	2318      	movs	r3, #24
 8003a84:	fb03 4405 	mla	r4, r3, r5, r4
 8003a88:	2300      	movs	r3, #0
 8003a8a:	7523      	strb	r3, [r4, #20]
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
 8003a8e:	bf00      	nop
 8003a90:	20003d80 	.word	0x20003d80

08003a94 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8003a94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a9a:	4689      	mov	r9, r1
 8003a9c:	4692      	mov	sl, r2
 8003a9e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	b930      	cbnz	r0, 8003ab2 <etharp_raw+0x1e>
 8003aa4:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <etharp_raw+0xc4>)
 8003aa6:	492d      	ldr	r1, [pc, #180]	; (8003b5c <etharp_raw+0xc8>)
 8003aa8:	482d      	ldr	r0, [pc, #180]	; (8003b60 <etharp_raw+0xcc>)
 8003aaa:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8003aae:	f005 fd16 	bl	80094de <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	211c      	movs	r1, #28
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	f001 fe02 	bl	80056c0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8003abc:	4606      	mov	r6, r0
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d047      	beq.n	8003b52 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8003ac2:	8943      	ldrh	r3, [r0, #10]
 8003ac4:	2b1b      	cmp	r3, #27
 8003ac6:	d806      	bhi.n	8003ad6 <etharp_raw+0x42>
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <etharp_raw+0xc4>)
 8003aca:	4926      	ldr	r1, [pc, #152]	; (8003b64 <etharp_raw+0xd0>)
 8003acc:	4824      	ldr	r0, [pc, #144]	; (8003b60 <etharp_raw+0xcc>)
 8003ace:	f240 4264 	movw	r2, #1124	; 0x464
 8003ad2:	f005 fd04 	bl	80094de <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8003ad6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8003ada:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8003adc:	f7ff ffb0 	bl	8003a40 <lwip_htons>
 8003ae0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8003ae2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d006      	beq.n	8003af8 <etharp_raw+0x64>
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <etharp_raw+0xc4>)
 8003aec:	491e      	ldr	r1, [pc, #120]	; (8003b68 <etharp_raw+0xd4>)
 8003aee:	481c      	ldr	r0, [pc, #112]	; (8003b60 <etharp_raw+0xcc>)
 8003af0:	f240 426b 	movw	r2, #1131	; 0x46b
 8003af4:	f005 fcf3 	bl	80094de <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8003af8:	f8d8 3000 	ldr.w	r3, [r8]
 8003afc:	60a3      	str	r3, [r4, #8]
 8003afe:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003b02:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	f8c4 3012 	str.w	r3, [r4, #18]
 8003b0a:	88ab      	ldrh	r3, [r5, #4]
 8003b0c:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8003b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8003b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8003b20:	2308      	movs	r3, #8
 8003b22:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8003b24:	2306      	movs	r3, #6
 8003b26:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8003b28:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8003b2a:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8003b2c:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8003b2e:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8003b32:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8003b34:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8003b36:	464a      	mov	r2, r9
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4653      	mov	r3, sl
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f004 fefa 	bl	8008938 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8003b44:	4630      	mov	r0, r6
 8003b46:	f001 fd51 	bl	80055ec <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8003b4a:	4628      	mov	r0, r5
}
 8003b4c:	b002      	add	sp, #8
 8003b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b56:	e7f9      	b.n	8003b4c <etharp_raw+0xb8>
 8003b58:	0800999d 	.word	0x0800999d
 8003b5c:	080099d4 	.word	0x080099d4
 8003b60:	08009880 	.word	0x08009880
 8003b64:	080099e2 	.word	0x080099e2
 8003b68:	08009a13 	.word	0x08009a13

08003b6c <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8003b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <etharp_find_entry.isra.0+0x100>)
 8003b72:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8003b74:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8003b76:	4605      	mov	r5, r0
 8003b78:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8003b7a:	4694      	mov	ip, r2
 8003b7c:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8003b7e:	4681      	mov	r9, r0
 8003b80:	4680      	mov	r8, r0
 8003b82:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8003b84:	4696      	mov	lr, r2
 8003b86:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8003b88:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8003b8c:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8003b8e:	d112      	bne.n	8003bb6 <etharp_find_entry.isra.0+0x4a>
 8003b90:	b99f      	cbnz	r7, 8003bba <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8003b92:	fa4f fe80 	sxtb.w	lr, r0
 8003b96:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003b98:	280a      	cmp	r0, #10
 8003b9a:	f103 0318 	add.w	r3, r3, #24
 8003b9e:	d1f3      	bne.n	8003b88 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8003ba0:	9b01      	ldr	r3, [sp, #4]
 8003ba2:	0799      	lsls	r1, r3, #30
 8003ba4:	d404      	bmi.n	8003bb0 <etharp_find_entry.isra.0+0x44>
 8003ba6:	f1be 0f0a 	cmp.w	lr, #10
 8003baa:	d11c      	bne.n	8003be6 <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8003bac:	07db      	lsls	r3, r3, #31
 8003bae:	d435      	bmi.n	8003c1c <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb4:	e009      	b.n	8003bca <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8003bb6:	2f00      	cmp	r7, #0
 8003bb8:	d0ed      	beq.n	8003b96 <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8003bba:	2d00      	cmp	r5, #0
 8003bbc:	d04a      	beq.n	8003c54 <etharp_find_entry.isra.0+0xe8>
 8003bbe:	6829      	ldr	r1, [r5, #0]
 8003bc0:	468a      	mov	sl, r1
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	458a      	cmp	sl, r1
 8003bc6:	d145      	bne.n	8003c54 <etharp_find_entry.isra.0+0xe8>
        return i;
 8003bc8:	b240      	sxtb	r0, r0
}
 8003bca:	b003      	add	sp, #12
 8003bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8003bd0:	45c2      	cmp	sl, r8
 8003bd2:	d3e0      	bcc.n	8003b96 <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8003bd4:	fa4f fc80 	sxtb.w	ip, r0
 8003bd8:	46d0      	mov	r8, sl
 8003bda:	e7dc      	b.n	8003b96 <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8003bdc:	45ca      	cmp	sl, r9
            old_stable = i;
 8003bde:	bf24      	itt	cs
 8003be0:	b244      	sxtbcs	r4, r0
 8003be2:	46d1      	movcs	r9, sl
 8003be4:	e7d7      	b.n	8003b96 <etharp_find_entry.isra.0+0x2a>
    i = empty;
 8003be6:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8003bea:	2318      	movs	r3, #24
 8003bec:	fb03 6307 	mla	r3, r3, r7, r6
 8003bf0:	7d1b      	ldrb	r3, [r3, #20]
 8003bf2:	b133      	cbz	r3, 8003c02 <etharp_find_entry.isra.0+0x96>
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <etharp_find_entry.isra.0+0x104>)
 8003bf6:	491f      	ldr	r1, [pc, #124]	; (8003c74 <etharp_find_entry.isra.0+0x108>)
 8003bf8:	481f      	ldr	r0, [pc, #124]	; (8003c78 <etharp_find_entry.isra.0+0x10c>)
 8003bfa:	f240 1287 	movw	r2, #391	; 0x187
 8003bfe:	f005 fc6e 	bl	80094de <iprintf>
  if (ipaddr != NULL) {
 8003c02:	b125      	cbz	r5, 8003c0e <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8003c04:	2318      	movs	r3, #24
 8003c06:	fb03 6307 	mla	r3, r3, r7, r6
 8003c0a:	682a      	ldr	r2, [r5, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8003c0e:	2318      	movs	r3, #24
 8003c10:	fb03 6607 	mla	r6, r3, r7, r6
 8003c14:	2300      	movs	r3, #0
 8003c16:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 8003c18:	b278      	sxtb	r0, r7
 8003c1a:	e7d6      	b.n	8003bca <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 8003c1c:	2c0a      	cmp	r4, #10
 8003c1e:	d00f      	beq.n	8003c40 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8003c20:	2318      	movs	r3, #24
      i = old_stable;
 8003c22:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8003c24:	435c      	muls	r4, r3
 8003c26:	5933      	ldr	r3, [r6, r4]
 8003c28:	b133      	cbz	r3, 8003c38 <etharp_find_entry.isra.0+0xcc>
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <etharp_find_entry.isra.0+0x104>)
 8003c2c:	4913      	ldr	r1, [pc, #76]	; (8003c7c <etharp_find_entry.isra.0+0x110>)
 8003c2e:	4812      	ldr	r0, [pc, #72]	; (8003c78 <etharp_find_entry.isra.0+0x10c>)
 8003c30:	f240 126f 	movw	r2, #367	; 0x16f
 8003c34:	f005 fc53 	bl	80094de <iprintf>
    etharp_free_entry(i);
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff ff17 	bl	8003a6c <etharp_free_entry>
 8003c3e:	e7d4      	b.n	8003bea <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8003c40:	f1bc 0f0a 	cmp.w	ip, #10
 8003c44:	d002      	beq.n	8003c4c <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 8003c46:	fa5f f78c 	uxtb.w	r7, ip
 8003c4a:	e7f5      	b.n	8003c38 <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8003c4c:	2a0a      	cmp	r2, #10
 8003c4e:	d0af      	beq.n	8003bb0 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 8003c50:	b2d7      	uxtb	r7, r2
 8003c52:	e7f1      	b.n	8003c38 <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8003c54:	2f01      	cmp	r7, #1
 8003c56:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8003c5a:	d1bf      	bne.n	8003bdc <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 8003c5c:	681f      	ldr	r7, [r3, #0]
 8003c5e:	2f00      	cmp	r7, #0
 8003c60:	d0b6      	beq.n	8003bd0 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 8003c62:	45da      	cmp	sl, fp
 8003c64:	d397      	bcc.n	8003b96 <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8003c66:	b242      	sxtb	r2, r0
 8003c68:	46d3      	mov	fp, sl
 8003c6a:	e794      	b.n	8003b96 <etharp_find_entry.isra.0+0x2a>
 8003c6c:	20003d80 	.word	0x20003d80
 8003c70:	0800999d 	.word	0x0800999d
 8003c74:	080098bf 	.word	0x080098bf
 8003c78:	08009880 	.word	0x08009880
 8003c7c:	080098a8 	.word	0x080098a8

08003c80 <etharp_cleanup_netif>:
{
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4d08      	ldr	r5, [pc, #32]	; (8003ca4 <etharp_cleanup_netif+0x24>)
 8003c84:	4606      	mov	r6, r0
 8003c86:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8003c88:	7d2b      	ldrb	r3, [r5, #20]
 8003c8a:	b12b      	cbz	r3, 8003c98 <etharp_cleanup_netif+0x18>
 8003c8c:	68ab      	ldr	r3, [r5, #8]
 8003c8e:	42b3      	cmp	r3, r6
 8003c90:	d102      	bne.n	8003c98 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7ff feea 	bl	8003a6c <etharp_free_entry>
 8003c98:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003c9a:	2c0a      	cmp	r4, #10
 8003c9c:	f105 0518 	add.w	r5, r5, #24
 8003ca0:	d1f2      	bne.n	8003c88 <etharp_cleanup_netif+0x8>
}
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	20003d80 	.word	0x20003d80

08003ca8 <etharp_input>:
{
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	4680      	mov	r8, r0
 8003cae:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	b949      	cbnz	r1, 8003cc8 <etharp_input+0x20>
 8003cb4:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <etharp_input+0x128>)
 8003cb6:	4947      	ldr	r1, [pc, #284]	; (8003dd4 <etharp_input+0x12c>)
 8003cb8:	4847      	ldr	r0, [pc, #284]	; (8003dd8 <etharp_input+0x130>)
 8003cba:	f44f 7222 	mov.w	r2, #648	; 0x288
 8003cbe:	f005 fc0e 	bl	80094de <iprintf>
}
 8003cc2:	b006      	add	sp, #24
 8003cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8003cc8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8003cca:	882b      	ldrh	r3, [r5, #0]
 8003ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd0:	d108      	bne.n	8003ce4 <etharp_input+0x3c>
 8003cd2:	792b      	ldrb	r3, [r5, #4]
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d105      	bne.n	8003ce4 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8003cd8:	796b      	ldrb	r3, [r5, #5]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d102      	bne.n	8003ce4 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8003cde:	886b      	ldrh	r3, [r5, #2]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d003      	beq.n	8003cec <etharp_input+0x44>
  pbuf_free(p);
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	f001 fc81 	bl	80055ec <pbuf_free>
 8003cea:	e7ea      	b.n	8003cc2 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003cec:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8003cee:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8003cf2:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8003cf4:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003cf6:	b116      	cbz	r6, 8003cfe <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8003cf8:	1b9b      	subs	r3, r3, r6
 8003cfa:	425e      	negs	r6, r3
 8003cfc:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003cfe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003d02:	2e00      	cmp	r6, #0
 8003d04:	bf14      	ite	ne
 8003d06:	f04f 0901 	movne.w	r9, #1
 8003d0a:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003d0e:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003d10:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003d14:	d006      	beq.n	8003d24 <etharp_input+0x7c>
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <etharp_input+0x128>)
 8003d18:	4930      	ldr	r1, [pc, #192]	; (8003ddc <etharp_input+0x134>)
 8003d1a:	482f      	ldr	r0, [pc, #188]	; (8003dd8 <etharp_input+0x130>)
 8003d1c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8003d20:	f005 fbdd 	bl	80094de <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8003d24:	9805      	ldr	r0, [sp, #20]
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d03c      	beq.n	8003da4 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	f000 fc95 	bl	800465a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8003d30:	4682      	mov	sl, r0
 8003d32:	bbb8      	cbnz	r0, 8003da4 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8003d34:	9b05      	ldr	r3, [sp, #20]
 8003d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003d3a:	2be0      	cmp	r3, #224	; 0xe0
 8003d3c:	d032      	beq.n	8003da4 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8003d3e:	4649      	mov	r1, r9
 8003d40:	a805      	add	r0, sp, #20
 8003d42:	f7ff ff13 	bl	8003b6c <etharp_find_entry.isra.0>
  if (i < 0) {
 8003d46:	2800      	cmp	r0, #0
 8003d48:	db2c      	blt.n	8003da4 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <etharp_input+0x138>)
 8003d4c:	2218      	movs	r2, #24
 8003d4e:	fb02 f100 	mul.w	r1, r2, r0
 8003d52:	eb03 0e01 	add.w	lr, r3, r1
 8003d56:	f04f 0c02 	mov.w	ip, #2
 8003d5a:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8003d5e:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8003d62:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8003d66:	fb12 c200 	smlabb	r2, r2, r0, ip
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	5098      	str	r0, [r3, r2]
 8003d6e:	eb03 0c02 	add.w	ip, r3, r2
 8003d72:	88ba      	ldrh	r2, [r7, #4]
 8003d74:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8003d78:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8003d7c:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8003d80:	f1b9 0f00 	cmp.w	r9, #0
 8003d84:	d00e      	beq.n	8003da4 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8003d86:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8003d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8003d94:	463b      	mov	r3, r7
 8003d96:	4649      	mov	r1, r9
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f004 fdcd 	bl	8008938 <ethernet_output>
    pbuf_free(p);
 8003d9e:	4648      	mov	r0, r9
 8003da0:	f001 fc24 	bl	80055ec <pbuf_free>
  switch (hdr->opcode) {
 8003da4:	88eb      	ldrh	r3, [r5, #6]
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003daa:	d19b      	bne.n	8003ce4 <etharp_input+0x3c>
    if (for_us) {
 8003dac:	2e00      	cmp	r6, #0
 8003dae:	d099      	beq.n	8003ce4 <etharp_input+0x3c>
      etharp_raw(netif,
 8003db0:	2202      	movs	r2, #2
 8003db2:	9203      	str	r2, [sp, #12]
 8003db4:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8003db6:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8003dba:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8003dbc:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8003dbe:	9200      	str	r2, [sp, #0]
 8003dc0:	9701      	str	r7, [sp, #4]
 8003dc2:	463a      	mov	r2, r7
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff fe64 	bl	8003a94 <etharp_raw>
 8003dcc:	e78a      	b.n	8003ce4 <etharp_input+0x3c>
 8003dce:	bf00      	nop
 8003dd0:	0800999d 	.word	0x0800999d
 8003dd4:	080099d4 	.word	0x080099d4
 8003dd8:	08009880 	.word	0x08009880
 8003ddc:	08009907 	.word	0x08009907
 8003de0:	20003d80 	.word	0x20003d80

08003de4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003de6:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003de8:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8003dec:	9102      	str	r1, [sp, #8]
 8003dee:	2401      	movs	r4, #1
 8003df0:	4905      	ldr	r1, [pc, #20]	; (8003e08 <etharp_request+0x24>)
 8003df2:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8003df4:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003df6:	9200      	str	r2, [sp, #0]
 8003df8:	9403      	str	r4, [sp, #12]
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <etharp_request+0x28>)
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7ff fe49 	bl	8003a94 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8003e02:	b004      	add	sp, #16
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	0800ad04 	.word	0x0800ad04
 8003e0c:	0800ac98 	.word	0x0800ac98

08003e10 <etharp_tmr>:
{
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	4c13      	ldr	r4, [pc, #76]	; (8003e60 <etharp_tmr+0x50>)
 8003e14:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8003e16:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003e18:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8003e1a:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8003e1c:	b16a      	cbz	r2, 8003e3a <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8003e1e:	89e3      	ldrh	r3, [r4, #14]
 8003e20:	3301      	adds	r3, #1
 8003e22:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003e24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8003e28:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003e2a:	d203      	bcs.n	8003e34 <etharp_tmr+0x24>
 8003e2c:	2a01      	cmp	r2, #1
 8003e2e:	d10a      	bne.n	8003e46 <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d90c      	bls.n	8003e4e <etharp_tmr+0x3e>
        etharp_free_entry(i);
 8003e34:	4628      	mov	r0, r5
 8003e36:	f7ff fe19 	bl	8003a6c <etharp_free_entry>
 8003e3a:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003e3c:	2d0a      	cmp	r5, #10
 8003e3e:	f104 0418 	add.w	r4, r4, #24
 8003e42:	d1ea      	bne.n	8003e1a <etharp_tmr+0xa>
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8003e46:	2a03      	cmp	r2, #3
 8003e48:	d106      	bne.n	8003e58 <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003e4a:	7427      	strb	r7, [r4, #16]
 8003e4c:	e7f5      	b.n	8003e3a <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8003e4e:	4621      	mov	r1, r4
 8003e50:	6860      	ldr	r0, [r4, #4]
 8003e52:	f7ff ffc7 	bl	8003de4 <etharp_request>
 8003e56:	e7f0      	b.n	8003e3a <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8003e58:	2a04      	cmp	r2, #4
 8003e5a:	d1ee      	bne.n	8003e3a <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8003e5c:	7426      	strb	r6, [r4, #16]
 8003e5e:	e7ec      	b.n	8003e3a <etharp_tmr+0x2a>
 8003e60:	20003d84 	.word	0x20003d84

08003e64 <etharp_output_to_arp_index>:
{
 8003e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003e68:	4d27      	ldr	r5, [pc, #156]	; (8003f08 <etharp_output_to_arp_index+0xa4>)
{
 8003e6a:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003e6c:	2218      	movs	r2, #24
 8003e6e:	fb02 5204 	mla	r2, r2, r4, r5
{
 8003e72:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003e74:	7d12      	ldrb	r2, [r2, #20]
 8003e76:	2a01      	cmp	r2, #1
{
 8003e78:	4606      	mov	r6, r0
 8003e7a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003e7c:	d806      	bhi.n	8003e8c <etharp_output_to_arp_index+0x28>
 8003e7e:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <etharp_output_to_arp_index+0xa8>)
 8003e80:	4923      	ldr	r1, [pc, #140]	; (8003f10 <etharp_output_to_arp_index+0xac>)
 8003e82:	4824      	ldr	r0, [pc, #144]	; (8003f14 <etharp_output_to_arp_index+0xb0>)
 8003e84:	f240 22ed 	movw	r2, #749	; 0x2ed
 8003e88:	f005 fb29 	bl	80094de <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8003e8c:	2118      	movs	r1, #24
 8003e8e:	fb01 5904 	mla	r9, r1, r4, r5
 8003e92:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8003e96:	f899 3014 	ldrb.w	r3, [r9, #20]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d10d      	bne.n	8003eba <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8003e9e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8003ea2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8003ea6:	d917      	bls.n	8003ed8 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	3104      	adds	r1, #4
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff ff99 	bl	8003de4 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8003eb2:	b910      	cbnz	r0, 8003eba <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8003eba:	2318      	movs	r3, #24
 8003ebc:	fb03 5304 	mla	r3, r3, r4, r5
 8003ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec4:	9200      	str	r2, [sp, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	463a      	mov	r2, r7
 8003eca:	4641      	mov	r1, r8
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f004 fd33 	bl	8008938 <ethernet_output>
}
 8003ed2:	b005      	add	sp, #20
 8003ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8003ed8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003edc:	d3ed      	bcc.n	8003eba <etharp_output_to_arp_index+0x56>
 8003ede:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003ee2:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8003ee4:	f103 020c 	add.w	r2, r3, #12
 8003ee8:	3304      	adds	r3, #4
 8003eea:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003eec:	9302      	str	r3, [sp, #8]
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <etharp_output_to_arp_index+0xb4>)
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8003ef4:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003ef6:	9103      	str	r1, [sp, #12]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	442a      	add	r2, r5
 8003efc:	463b      	mov	r3, r7
 8003efe:	4639      	mov	r1, r7
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff fdc7 	bl	8003a94 <etharp_raw>
 8003f06:	e7d4      	b.n	8003eb2 <etharp_output_to_arp_index+0x4e>
 8003f08:	20003d80 	.word	0x20003d80
 8003f0c:	0800999d 	.word	0x0800999d
 8003f10:	0800992b 	.word	0x0800992b
 8003f14:	08009880 	.word	0x08009880
 8003f18:	0800ad04 	.word	0x0800ad04

08003f1c <etharp_query>:
{
 8003f1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	4689      	mov	r9, r1
 8003f22:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003f24:	4601      	mov	r1, r0
 8003f26:	f8d9 0000 	ldr.w	r0, [r9]
{
 8003f2a:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003f2c:	f000 fb95 	bl	800465a <ip4_addr_isbroadcast_u32>
 8003f30:	4604      	mov	r4, r0
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d15e      	bne.n	8003ff4 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 8003f36:	f8d9 3000 	ldr.w	r3, [r9]
 8003f3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003f3e:	2ae0      	cmp	r2, #224	; 0xe0
 8003f40:	d058      	beq.n	8003ff4 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d056      	beq.n	8003ff4 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8003f46:	2101      	movs	r1, #1
 8003f48:	4648      	mov	r0, r9
 8003f4a:	f7ff fe0f 	bl	8003b6c <etharp_find_entry.isra.0>
  if (i < 0) {
 8003f4e:	1e05      	subs	r5, r0, #0
 8003f50:	db53      	blt.n	8003ffa <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8003f52:	4f40      	ldr	r7, [pc, #256]	; (8004054 <etharp_query+0x138>)
 8003f54:	2318      	movs	r3, #24
 8003f56:	fb03 7305 	mla	r3, r3, r5, r7
 8003f5a:	7d1a      	ldrb	r2, [r3, #20]
 8003f5c:	b91a      	cbnz	r2, 8003f66 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8003f5e:	2401      	movs	r4, #1
 8003f60:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8003f62:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8003f66:	2318      	movs	r3, #24
 8003f68:	fb03 7305 	mla	r3, r3, r5, r7
 8003f6c:	7d1b      	ldrb	r3, [r3, #20]
 8003f6e:	b933      	cbnz	r3, 8003f7e <etharp_query+0x62>
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <etharp_query+0x13c>)
 8003f72:	493a      	ldr	r1, [pc, #232]	; (800405c <etharp_query+0x140>)
 8003f74:	483a      	ldr	r0, [pc, #232]	; (8004060 <etharp_query+0x144>)
 8003f76:	f240 32c9 	movw	r2, #969	; 0x3c9
 8003f7a:	f005 fab0 	bl	80094de <iprintf>
  if (is_new_entry || (q == NULL)) {
 8003f7e:	b90c      	cbnz	r4, 8003f84 <etharp_query+0x68>
 8003f80:	2e00      	cmp	r6, #0
 8003f82:	d13c      	bne.n	8003ffe <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8003f84:	4649      	mov	r1, r9
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7ff ff2c 	bl	8003de4 <etharp_request>
    if (q == NULL) {
 8003f8c:	2e00      	cmp	r6, #0
 8003f8e:	d138      	bne.n	8004002 <etharp_query+0xe6>
}
 8003f90:	b002      	add	sp, #8
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8003f96:	d1fb      	bne.n	8003f90 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8003f98:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004058 <etharp_query+0x13c>
 8003f9c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004068 <etharp_query+0x14c>
 8003fa0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004060 <etharp_query+0x144>
 8003fa4:	4634      	mov	r4, r6
    while (p) {
 8003fa6:	b99c      	cbnz	r4, 8003fd0 <etharp_query+0xb4>
      pbuf_ref(p);
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f001 fcdd 	bl	8005968 <pbuf_ref>
    if (p != NULL) {
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	d04c      	beq.n	800404c <etharp_query+0x130>
 8003fb2:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8003fb4:	2318      	movs	r3, #24
 8003fb6:	fb03 f205 	mul.w	r2, r3, r5
 8003fba:	461c      	mov	r4, r3
 8003fbc:	58b8      	ldr	r0, [r7, r2]
 8003fbe:	b108      	cbz	r0, 8003fc4 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8003fc0:	f001 fb14 	bl	80055ec <pbuf_free>
      arp_table[i].q = p;
 8003fc4:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8003fc8:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8003fca:	f847 8003 	str.w	r8, [r7, r3]
 8003fce:	e7df      	b.n	8003f90 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8003fd0:	8962      	ldrh	r2, [r4, #10]
 8003fd2:	8923      	ldrh	r3, [r4, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d108      	bne.n	8003fea <etharp_query+0xce>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	b133      	cbz	r3, 8003fea <etharp_query+0xce>
 8003fdc:	4643      	mov	r3, r8
 8003fde:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	f005 fa7a 	bl	80094de <iprintf>
      if (p->type != PBUF_ROM) {
 8003fea:	7b23      	ldrb	r3, [r4, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d11e      	bne.n	800402e <etharp_query+0x112>
      p = p->next;
 8003ff0:	6824      	ldr	r4, [r4, #0]
 8003ff2:	e7d8      	b.n	8003fa6 <etharp_query+0x8a>
    return ERR_ARG;
 8003ff4:	f06f 000f 	mvn.w	r0, #15
 8003ff8:	e7ca      	b.n	8003f90 <etharp_query+0x74>
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	e7c8      	b.n	8003f90 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004002:	2318      	movs	r3, #24
 8004004:	fb03 7205 	mla	r2, r3, r5, r7
 8004008:	7d12      	ldrb	r2, [r2, #20]
 800400a:	2a01      	cmp	r2, #1
 800400c:	d9c3      	bls.n	8003f96 <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 800400e:	4a15      	ldr	r2, [pc, #84]	; (8004064 <etharp_query+0x148>)
 8004010:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004012:	220c      	movs	r2, #12
 8004014:	fb13 2305 	smlabb	r3, r3, r5, r2
 8004018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800401c:	9200      	str	r2, [sp, #0]
 800401e:	443b      	add	r3, r7
 8004020:	f108 0225 	add.w	r2, r8, #37	; 0x25
 8004024:	4631      	mov	r1, r6
 8004026:	4640      	mov	r0, r8
 8004028:	f004 fc86 	bl	8008938 <ethernet_output>
 800402c:	e7b0      	b.n	8003f90 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800402e:	2200      	movs	r2, #0
 8004030:	8921      	ldrh	r1, [r4, #8]
 8004032:	2002      	movs	r0, #2
 8004034:	f001 fb44 	bl	80056c0 <pbuf_alloc>
      if (p != NULL) {
 8004038:	4680      	mov	r8, r0
 800403a:	b138      	cbz	r0, 800404c <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 800403c:	4631      	mov	r1, r6
 800403e:	f001 fce9 	bl	8005a14 <pbuf_copy>
 8004042:	2800      	cmp	r0, #0
 8004044:	d0b6      	beq.n	8003fb4 <etharp_query+0x98>
          pbuf_free(p);
 8004046:	4640      	mov	r0, r8
 8004048:	f001 fad0 	bl	80055ec <pbuf_free>
      result = ERR_MEM;
 800404c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004050:	e79e      	b.n	8003f90 <etharp_query+0x74>
 8004052:	bf00      	nop
 8004054:	20003d80 	.word	0x20003d80
 8004058:	0800999d 	.word	0x0800999d
 800405c:	0800995b 	.word	0x0800995b
 8004060:	08009880 	.word	0x08009880
 8004064:	20003e70 	.word	0x20003e70
 8004068:	08009983 	.word	0x08009983

0800406c <etharp_output>:
{
 800406c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406e:	460e      	mov	r6, r1
 8004070:	b085      	sub	sp, #20
 8004072:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004074:	4604      	mov	r4, r0
 8004076:	b930      	cbnz	r0, 8004086 <etharp_output+0x1a>
 8004078:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <etharp_output+0x108>)
 800407a:	493f      	ldr	r1, [pc, #252]	; (8004178 <etharp_output+0x10c>)
 800407c:	483f      	ldr	r0, [pc, #252]	; (800417c <etharp_output+0x110>)
 800407e:	f240 321b 	movw	r2, #795	; 0x31b
 8004082:	f005 fa2c 	bl	80094de <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8004086:	b936      	cbnz	r6, 8004096 <etharp_output+0x2a>
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <etharp_output+0x108>)
 800408a:	493d      	ldr	r1, [pc, #244]	; (8004180 <etharp_output+0x114>)
 800408c:	483b      	ldr	r0, [pc, #236]	; (800417c <etharp_output+0x110>)
 800408e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8004092:	f005 fa24 	bl	80094de <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8004096:	b935      	cbnz	r5, 80040a6 <etharp_output+0x3a>
 8004098:	4b36      	ldr	r3, [pc, #216]	; (8004174 <etharp_output+0x108>)
 800409a:	493a      	ldr	r1, [pc, #232]	; (8004184 <etharp_output+0x118>)
 800409c:	4837      	ldr	r0, [pc, #220]	; (800417c <etharp_output+0x110>)
 800409e:	f240 321d 	movw	r2, #797	; 0x31d
 80040a2:	f005 fa1c 	bl	80094de <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80040a6:	4621      	mov	r1, r4
 80040a8:	6828      	ldr	r0, [r5, #0]
 80040aa:	f000 fad6 	bl	800465a <ip4_addr_isbroadcast_u32>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d15b      	bne.n	800416a <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80040b2:	682b      	ldr	r3, [r5, #0]
 80040b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040b8:	2ae0      	cmp	r2, #224	; 0xe0
 80040ba:	d11d      	bne.n	80040f8 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80040bc:	2301      	movs	r3, #1
 80040be:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80040c2:	235e      	movs	r3, #94	; 0x5e
 80040c4:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80040c8:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80040ca:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80040ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d2:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80040d6:	78ab      	ldrb	r3, [r5, #2]
 80040d8:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80040dc:	78eb      	ldrb	r3, [r5, #3]
 80040de:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80040e2:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80040e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e8:	9200      	str	r2, [sp, #0]
 80040ea:	4631      	mov	r1, r6
 80040ec:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80040f0:	4620      	mov	r0, r4
 80040f2:	f004 fc21 	bl	8008938 <ethernet_output>
 80040f6:	e01f      	b.n	8004138 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80040f8:	6862      	ldr	r2, [r4, #4]
 80040fa:	68a1      	ldr	r1, [r4, #8]
 80040fc:	405a      	eors	r2, r3
 80040fe:	420a      	tst	r2, r1
 8004100:	d008      	beq.n	8004114 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8004102:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004104:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	b373      	cbz	r3, 800416e <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 8004110:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <etharp_output+0x11c>)
 8004116:	491d      	ldr	r1, [pc, #116]	; (800418c <etharp_output+0x120>)
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	2018      	movs	r0, #24
 800411c:	fb00 1002 	mla	r0, r0, r2, r1
 8004120:	7d01      	ldrb	r1, [r0, #20]
 8004122:	2901      	cmp	r1, #1
 8004124:	4619      	mov	r1, r3
 8004126:	d909      	bls.n	800413c <etharp_output+0xd0>
 8004128:	682f      	ldr	r7, [r5, #0]
 800412a:	6843      	ldr	r3, [r0, #4]
 800412c:	429f      	cmp	r7, r3
 800412e:	d105      	bne.n	800413c <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8004130:	4631      	mov	r1, r6
 8004132:	4620      	mov	r0, r4
 8004134:	f7ff fe96 	bl	8003e64 <etharp_output_to_arp_index>
}
 8004138:	b005      	add	sp, #20
 800413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <etharp_output+0x120>)
{
 800413e:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8004140:	7d18      	ldrb	r0, [r3, #20]
 8004142:	2801      	cmp	r0, #1
 8004144:	d906      	bls.n	8004154 <etharp_output+0xe8>
 8004146:	682f      	ldr	r7, [r5, #0]
 8004148:	6858      	ldr	r0, [r3, #4]
 800414a:	4287      	cmp	r7, r0
 800414c:	d102      	bne.n	8004154 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	700a      	strb	r2, [r1, #0]
 8004152:	e7ed      	b.n	8004130 <etharp_output+0xc4>
 8004154:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8004156:	2a0a      	cmp	r2, #10
 8004158:	f103 0318 	add.w	r3, r3, #24
 800415c:	d1f0      	bne.n	8004140 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 800415e:	4632      	mov	r2, r6
 8004160:	4629      	mov	r1, r5
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff feda 	bl	8003f1c <etharp_query>
 8004168:	e7e6      	b.n	8004138 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <etharp_output+0x124>)
 800416c:	e7ba      	b.n	80040e4 <etharp_output+0x78>
            return ERR_RTE;
 800416e:	f06f 0003 	mvn.w	r0, #3
 8004172:	e7e1      	b.n	8004138 <etharp_output+0xcc>
 8004174:	0800999d 	.word	0x0800999d
 8004178:	080099d4 	.word	0x080099d4
 800417c:	08009880 	.word	0x08009880
 8004180:	0800a3df 	.word	0x0800a3df
 8004184:	080098e8 	.word	0x080098e8
 8004188:	20003e70 	.word	0x20003e70
 800418c:	20003d80 	.word	0x20003d80
 8004190:	0800ac98 	.word	0x0800ac98

08004194 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	b087      	sub	sp, #28
 800419a:	460f      	mov	r7, r1
 800419c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800419e:	2124      	movs	r1, #36	; 0x24
 80041a0:	2200      	movs	r2, #0
 80041a2:	2001      	movs	r0, #1
 80041a4:	f001 fa8c 	bl	80056c0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80041a8:	4605      	mov	r5, r0
 80041aa:	b3a0      	cbz	r0, 8004216 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80041ac:	8943      	ldrh	r3, [r0, #10]
 80041ae:	2b23      	cmp	r3, #35	; 0x23
 80041b0:	d806      	bhi.n	80041c0 <icmp_send_response.isra.0+0x2c>
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <icmp_send_response.isra.0+0x88>)
 80041b4:	491a      	ldr	r1, [pc, #104]	; (8004220 <icmp_send_response.isra.0+0x8c>)
 80041b6:	481b      	ldr	r0, [pc, #108]	; (8004224 <icmp_send_response.isra.0+0x90>)
 80041b8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80041bc:	f005 f98f 	bl	80094de <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80041c0:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80041c2:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	7123      	strb	r3, [r4, #4]
 80041c8:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 80041ca:	71a3      	strb	r3, [r4, #6]
 80041cc:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 80041ce:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 80041d0:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80041d2:	4613      	mov	r3, r2
 80041d4:	f104 0108 	add.w	r1, r4, #8
 80041d8:	f102 001c 	add.w	r0, r2, #28
 80041dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80041e0:	f841 6b04 	str.w	r6, [r1], #4
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d1f9      	bne.n	80041dc <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80041e8:	ae06      	add	r6, sp, #24
 80041ea:	68d3      	ldr	r3, [r2, #12]
 80041ec:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 f8bb 	bl	800436c <ip4_route>
#endif
  if (netif != NULL) {
 80041f6:	b158      	cbz	r0, 8004210 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80041f8:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80041fa:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80041fc:	70a1      	strb	r1, [r4, #2]
 80041fe:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004200:	4632      	mov	r2, r6
 8004202:	9002      	str	r0, [sp, #8]
 8004204:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004208:	4628      	mov	r0, r5
 800420a:	23ff      	movs	r3, #255	; 0xff
 800420c:	f000 fa14 	bl	8004638 <ip4_output_if>
  }
  pbuf_free(q);
 8004210:	4628      	mov	r0, r5
 8004212:	f001 f9eb 	bl	80055ec <pbuf_free>
}
 8004216:	b007      	add	sp, #28
 8004218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421a:	bf00      	nop
 800421c:	08009abb 	.word	0x08009abb
 8004220:	08009af0 	.word	0x08009af0
 8004224:	08009880 	.word	0x08009880

08004228 <icmp_input>:
{
 8004228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800422c:	4b44      	ldr	r3, [pc, #272]	; (8004340 <icmp_input+0x118>)
 800422e:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8004232:	f899 5000 	ldrb.w	r5, [r9]
 8004236:	f005 050f 	and.w	r5, r5, #15
 800423a:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800423c:	2d13      	cmp	r5, #19
{
 800423e:	b085      	sub	sp, #20
 8004240:	4604      	mov	r4, r0
 8004242:	4688      	mov	r8, r1
 8004244:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 8004246:	d92a      	bls.n	800429e <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8004248:	8942      	ldrh	r2, [r0, #10]
 800424a:	2a03      	cmp	r2, #3
 800424c:	d927      	bls.n	800429e <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800424e:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	2a08      	cmp	r2, #8
 8004254:	d123      	bne.n	800429e <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004256:	6958      	ldr	r0, [r3, #20]
 8004258:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800425c:	2ae0      	cmp	r2, #224	; 0xe0
 800425e:	d01e      	beq.n	800429e <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	f000 f9fa 	bl	800465a <ip4_addr_isbroadcast_u32>
 8004266:	4606      	mov	r6, r0
 8004268:	b9c8      	cbnz	r0, 800429e <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800426a:	8923      	ldrh	r3, [r4, #8]
 800426c:	2b07      	cmp	r3, #7
 800426e:	d916      	bls.n	800429e <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004270:	f105 010e 	add.w	r1, r5, #14
 8004274:	4620      	mov	r0, r4
 8004276:	f001 f9b3 	bl	80055e0 <pbuf_header>
 800427a:	2800      	cmp	r0, #0
 800427c:	d04f      	beq.n	800431e <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800427e:	8921      	ldrh	r1, [r4, #8]
 8004280:	4429      	add	r1, r5
 8004282:	4632      	mov	r2, r6
 8004284:	b289      	uxth	r1, r1
 8004286:	2002      	movs	r0, #2
 8004288:	f001 fa1a 	bl	80056c0 <pbuf_alloc>
      if (r == NULL) {
 800428c:	4606      	mov	r6, r0
 800428e:	b130      	cbz	r0, 800429e <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004290:	8942      	ldrh	r2, [r0, #10]
 8004292:	f105 0308 	add.w	r3, r5, #8
 8004296:	429a      	cmp	r2, r3
 8004298:	d207      	bcs.n	80042aa <icmp_input+0x82>
        pbuf_free(r);
 800429a:	f001 f9a7 	bl	80055ec <pbuf_free>
  pbuf_free(p);
 800429e:	4620      	mov	r0, r4
}
 80042a0:	b005      	add	sp, #20
 80042a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80042a6:	f001 b9a1 	b.w	80055ec <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 80042aa:	4649      	mov	r1, r9
 80042ac:	462a      	mov	r2, r5
 80042ae:	6840      	ldr	r0, [r0, #4]
 80042b0:	f005 fa63 	bl	800977a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 80042b4:	4269      	negs	r1, r5
 80042b6:	4630      	mov	r0, r6
 80042b8:	f001 f992 	bl	80055e0 <pbuf_header>
 80042bc:	b138      	cbz	r0, 80042ce <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <icmp_input+0x11c>)
 80042c0:	4921      	ldr	r1, [pc, #132]	; (8004348 <icmp_input+0x120>)
 80042c2:	4822      	ldr	r0, [pc, #136]	; (800434c <icmp_input+0x124>)
 80042c4:	22af      	movs	r2, #175	; 0xaf
 80042c6:	f005 f90a 	bl	80094de <iprintf>
        pbuf_free(r);
 80042ca:	4630      	mov	r0, r6
 80042cc:	e7e5      	b.n	800429a <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 80042ce:	4621      	mov	r1, r4
 80042d0:	4630      	mov	r0, r6
 80042d2:	f001 fb9f 	bl	8005a14 <pbuf_copy>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d1f7      	bne.n	80042ca <icmp_input+0xa2>
      pbuf_free(p);
 80042da:	4620      	mov	r0, r4
 80042dc:	f001 f986 	bl	80055ec <pbuf_free>
 80042e0:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 80042e2:	4629      	mov	r1, r5
 80042e4:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 80042e6:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 80042e8:	f001 f97a 	bl	80055e0 <pbuf_header>
 80042ec:	4602      	mov	r2, r0
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d1d5      	bne.n	800429e <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80042f2:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80042fc:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80042fe:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8004300:	70b0      	strb	r0, [r6, #2]
 8004302:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004304:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8004306:	7288      	strb	r0, [r1, #10]
 8004308:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800430a:	2101      	movs	r1, #1
 800430c:	9101      	str	r1, [sp, #4]
 800430e:	9000      	str	r0, [sp, #0]
 8004310:	f8cd 8008 	str.w	r8, [sp, #8]
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <icmp_input+0x128>)
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f98e 	bl	8004638 <ip4_output_if>
 800431c:	e7bf      	b.n	800429e <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800431e:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8004322:	31f2      	adds	r1, #242	; 0xf2
 8004324:	b209      	sxth	r1, r1
 8004326:	4620      	mov	r0, r4
 8004328:	f001 f95a 	bl	80055e0 <pbuf_header>
 800432c:	2800      	cmp	r0, #0
 800432e:	d0d8      	beq.n	80042e2 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <icmp_input+0x11c>)
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <icmp_input+0x12c>)
 8004334:	4805      	ldr	r0, [pc, #20]	; (800434c <icmp_input+0x124>)
 8004336:	22c0      	movs	r2, #192	; 0xc0
 8004338:	f005 f8d1 	bl	80094de <iprintf>
        goto icmperr;
 800433c:	e7af      	b.n	800429e <icmp_input+0x76>
 800433e:	bf00      	nop
 8004340:	20004168 	.word	0x20004168
 8004344:	08009abb 	.word	0x08009abb
 8004348:	08009a54 	.word	0x08009a54
 800434c:	08009880 	.word	0x08009880
 8004350:	2000417c 	.word	0x2000417c
 8004354:	08009a89 	.word	0x08009a89

08004358 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8004358:	460a      	mov	r2, r1
 800435a:	3004      	adds	r0, #4
 800435c:	2103      	movs	r1, #3
 800435e:	f7ff bf19 	b.w	8004194 <icmp_send_response.isra.0>

08004362 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8004362:	460a      	mov	r2, r1
 8004364:	3004      	adds	r0, #4
 8004366:	210b      	movs	r1, #11
 8004368:	f7ff bf14 	b.w	8004194 <icmp_send_response.isra.0>

0800436c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800436c:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <ip4_route+0x50>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b96b      	cbnz	r3, 8004390 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004374:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <ip4_route+0x54>)
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	b1ea      	cbz	r2, 80043b6 <ip4_route+0x4a>
 800437a:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800437e:	f001 0105 	and.w	r1, r1, #5
 8004382:	2905      	cmp	r1, #5
 8004384:	d117      	bne.n	80043b6 <ip4_route+0x4a>
 8004386:	6851      	ldr	r1, [r2, #4]
 8004388:	2900      	cmp	r1, #0
 800438a:	bf18      	it	ne
 800438c:	4613      	movne	r3, r2
 800438e:	e012      	b.n	80043b6 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004390:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8004394:	f004 0205 	and.w	r2, r4, #5
 8004398:	2a05      	cmp	r2, #5
 800439a:	d1e9      	bne.n	8004370 <ip4_route+0x4>
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	2a00      	cmp	r2, #0
 80043a0:	d0e6      	beq.n	8004370 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80043a2:	6801      	ldr	r1, [r0, #0]
 80043a4:	689d      	ldr	r5, [r3, #8]
 80043a6:	404a      	eors	r2, r1
 80043a8:	422a      	tst	r2, r5
 80043aa:	d004      	beq.n	80043b6 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80043ac:	07a2      	lsls	r2, r4, #30
 80043ae:	d4df      	bmi.n	8004370 <ip4_route+0x4>
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	4291      	cmp	r1, r2
 80043b4:	d1dc      	bne.n	8004370 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	bd30      	pop	{r4, r5, pc}
 80043ba:	bf00      	nop
 80043bc:	2000785c 	.word	0x2000785c
 80043c0:	20007860 	.word	0x20007860

080043c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80043c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80043c8:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 80043ca:	f897 9000 	ldrb.w	r9, [r7]
 80043ce:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80043d2:	2b04      	cmp	r3, #4
{
 80043d4:	4605      	mov	r5, r0
 80043d6:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 80043d8:	d005      	beq.n	80043e6 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80043da:	4628      	mov	r0, r5
 80043dc:	f001 f906 	bl	80055ec <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80043e0:	2000      	movs	r0, #0
 80043e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80043e6:	8878      	ldrh	r0, [r7, #2]
 80043e8:	f7ff fb2a 	bl	8003a40 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80043ec:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 80043ee:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 80043f2:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 80043f4:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80043f8:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80043fa:	d903      	bls.n	8004404 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80043fc:	4601      	mov	r1, r0
 80043fe:	4628      	mov	r0, r5
 8004400:	f001 fa3a 	bl	8005878 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8004404:	896b      	ldrh	r3, [r5, #10]
 8004406:	454b      	cmp	r3, r9
 8004408:	d3e7      	bcc.n	80043da <ip4_input+0x16>
 800440a:	892b      	ldrh	r3, [r5, #8]
 800440c:	42a3      	cmp	r3, r4
 800440e:	d3e4      	bcc.n	80043da <ip4_input+0x16>
 8004410:	f1b9 0f13 	cmp.w	r9, #19
 8004414:	d9e1      	bls.n	80043da <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4c49      	ldr	r4, [pc, #292]	; (8004540 <ip4_input+0x17c>)
 800441a:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004424:	2be0      	cmp	r3, #224	; 0xe0
 8004426:	d139      	bne.n	800449c <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004428:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 800442c:	07da      	lsls	r2, r3, #31
 800442e:	d503      	bpl.n	8004438 <ip4_input+0x74>
 8004430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d158      	bne.n	80044ea <ip4_input+0x126>
      netif = NULL;
 8004438:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800443a:	4641      	mov	r1, r8
 800443c:	6920      	ldr	r0, [r4, #16]
 800443e:	f000 f90c 	bl	800465a <ip4_addr_isbroadcast_u32>
 8004442:	2800      	cmp	r0, #0
 8004444:	d1c9      	bne.n	80043da <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800444c:	2be0      	cmp	r3, #224	; 0xe0
 800444e:	d0c4      	beq.n	80043da <ip4_input+0x16>
  if (netif == NULL) {
 8004450:	2e00      	cmp	r6, #0
 8004452:	d0c2      	beq.n	80043da <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800445a:	b133      	cbz	r3, 800446a <ip4_input+0xa6>
    p = ip4_reass(p);
 800445c:	4628      	mov	r0, r5
 800445e:	f000 fa2b 	bl	80048b8 <ip4_reass>
    if (p == NULL) {
 8004462:	4605      	mov	r5, r0
 8004464:	2800      	cmp	r0, #0
 8004466:	d0bb      	beq.n	80043e0 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8004468:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800446a:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 800446c:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004470:	783b      	ldrb	r3, [r7, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004478:	f1c9 0100 	rsb	r1, r9, #0
 800447c:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800447e:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004480:	f001 f8ae 	bl	80055e0 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8004484:	7a7b      	ldrb	r3, [r7, #9]
 8004486:	2b06      	cmp	r3, #6
 8004488:	d03d      	beq.n	8004506 <ip4_input+0x142>
 800448a:	2b11      	cmp	r3, #17
 800448c:	d02f      	beq.n	80044ee <ip4_input+0x12a>
 800448e:	2b01      	cmp	r3, #1
 8004490:	d13e      	bne.n	8004510 <ip4_input+0x14c>
      icmp_input(p, inp);
 8004492:	4641      	mov	r1, r8
 8004494:	4628      	mov	r0, r5
 8004496:	f7ff fec7 	bl	8004228 <icmp_input>
      break;
 800449a:	e02c      	b.n	80044f6 <ip4_input+0x132>
        netif = netif_list;
 800449c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8004544 <ip4_input+0x180>
 80044a0:	4646      	mov	r6, r8
 80044a2:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80044a6:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 80044aa:	07db      	lsls	r3, r3, #31
 80044ac:	d404      	bmi.n	80044b8 <ip4_input+0xf4>
      if (first) {
 80044ae:	f1ba 0f00 	cmp.w	sl, #0
 80044b2:	d10d      	bne.n	80044d0 <ip4_input+0x10c>
        netif = netif->next;
 80044b4:	6836      	ldr	r6, [r6, #0]
 80044b6:	e010      	b.n	80044da <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80044b8:	6873      	ldr	r3, [r6, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f7      	beq.n	80044ae <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80044be:	6960      	ldr	r0, [r4, #20]
 80044c0:	4283      	cmp	r3, r0
 80044c2:	d0ba      	beq.n	800443a <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80044c4:	4631      	mov	r1, r6
 80044c6:	f000 f8c8 	bl	800465a <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d0ef      	beq.n	80044ae <ip4_input+0xea>
 80044ce:	e7b4      	b.n	800443a <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80044d0:	7d23      	ldrb	r3, [r4, #20]
 80044d2:	2b7f      	cmp	r3, #127	; 0x7f
 80044d4:	d0b0      	beq.n	8004438 <ip4_input+0x74>
        netif = netif_list;
 80044d6:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 80044da:	4546      	cmp	r6, r8
        netif = netif->next;
 80044dc:	bf08      	it	eq
 80044de:	6836      	ldreq	r6, [r6, #0]
 80044e0:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	d1de      	bne.n	80044a6 <ip4_input+0xe2>
 80044e8:	e7a6      	b.n	8004438 <ip4_input+0x74>
 80044ea:	4646      	mov	r6, r8
 80044ec:	e7a5      	b.n	800443a <ip4_input+0x76>
      udp_input(p, inp);
 80044ee:	4641      	mov	r1, r8
 80044f0:	4628      	mov	r0, r5
 80044f2:	f004 f927 	bl	8008744 <udp_input>
  ip_data.current_netif = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 80044fa:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 80044fc:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 80044fe:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8004500:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004502:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8004504:	e76c      	b.n	80043e0 <ip4_input+0x1c>
      tcp_input(p, inp);
 8004506:	4641      	mov	r1, r8
 8004508:	4628      	mov	r0, r5
 800450a:	f002 feb9 	bl	8007280 <tcp_input>
      break;
 800450e:	e7f2      	b.n	80044f6 <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004510:	4631      	mov	r1, r6
 8004512:	6960      	ldr	r0, [r4, #20]
 8004514:	f000 f8a1 	bl	800465a <ip4_addr_isbroadcast_u32>
 8004518:	b968      	cbnz	r0, 8004536 <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800451a:	6963      	ldr	r3, [r4, #20]
 800451c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004520:	2be0      	cmp	r3, #224	; 0xe0
 8004522:	d008      	beq.n	8004536 <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8004524:	4649      	mov	r1, r9
 8004526:	4628      	mov	r0, r5
 8004528:	f001 f85d 	bl	80055e6 <pbuf_header_force>
        p->payload = iphdr;
 800452c:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800452e:	2102      	movs	r1, #2
 8004530:	4628      	mov	r0, r5
 8004532:	f7ff ff11 	bl	8004358 <icmp_dest_unreach>
      pbuf_free(p);
 8004536:	4628      	mov	r0, r5
 8004538:	f001 f858 	bl	80055ec <pbuf_free>
 800453c:	e7db      	b.n	80044f6 <ip4_input+0x132>
 800453e:	bf00      	nop
 8004540:	20004168 	.word	0x20004168
 8004544:	2000785c 	.word	0x2000785c

08004548 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8004548:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800454e:	89c3      	ldrh	r3, [r0, #14]
{
 8004550:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004554:	2b01      	cmp	r3, #1
{
 8004556:	4605      	mov	r5, r0
 8004558:	468a      	mov	sl, r1
 800455a:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800455c:	d006      	beq.n	800456c <ip4_output_if_src+0x24>
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <ip4_output_if_src+0xd8>)
 8004560:	4930      	ldr	r1, [pc, #192]	; (8004624 <ip4_output_if_src+0xdc>)
 8004562:	4831      	ldr	r0, [pc, #196]	; (8004628 <ip4_output_if_src+0xe0>)
 8004564:	f240 3233 	movw	r2, #819	; 0x333
 8004568:	f004 ffb9 	bl	80094de <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800456c:	2e00      	cmp	r6, #0
 800456e:	d047      	beq.n	8004600 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8004570:	2114      	movs	r1, #20
 8004572:	4628      	mov	r0, r5
 8004574:	f001 f834 	bl	80055e0 <pbuf_header>
 8004578:	2800      	cmp	r0, #0
 800457a:	d14e      	bne.n	800461a <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800457c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800457e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004580:	2b13      	cmp	r3, #19
 8004582:	d806      	bhi.n	8004592 <ip4_output_if_src+0x4a>
 8004584:	4b26      	ldr	r3, [pc, #152]	; (8004620 <ip4_output_if_src+0xd8>)
 8004586:	4929      	ldr	r1, [pc, #164]	; (800462c <ip4_output_if_src+0xe4>)
 8004588:	4827      	ldr	r0, [pc, #156]	; (8004628 <ip4_output_if_src+0xe0>)
 800458a:	f240 3261 	movw	r2, #865	; 0x361
 800458e:	f004 ffa6 	bl	80094de <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8004592:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8004596:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8004598:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800459a:	6833      	ldr	r3, [r6, #0]
 800459c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800459e:	2345      	movs	r3, #69	; 0x45
 80045a0:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80045a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80045a6:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80045a8:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80045aa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004634 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80045ae:	f7ff fa47 	bl	8003a40 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80045b2:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80045b4:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80045b6:	71a7      	strb	r7, [r4, #6]
 80045b8:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80045ba:	f8b9 0000 	ldrh.w	r0, [r9]
 80045be:	f7ff fa3f 	bl	8003a40 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80045c2:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80045c6:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80045c8:	3301      	adds	r3, #1
 80045ca:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 80045ce:	f1ba 0f00 	cmp.w	sl, #0
 80045d2:	d112      	bne.n	80045fa <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <ip4_output_if_src+0xe8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80045d8:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80045da:	72a7      	strb	r7, [r4, #10]
 80045dc:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80045de:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 80045e2:	b19b      	cbz	r3, 800460c <ip4_output_if_src+0xc4>
 80045e4:	892a      	ldrh	r2, [r5, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d910      	bls.n	800460c <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 80045ea:	4632      	mov	r2, r6
 80045ec:	4641      	mov	r1, r8
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fb0c 	bl	8004c0c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80045f4:	b002      	add	sp, #8
 80045f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 80045fa:	f8da 3000 	ldr.w	r3, [sl]
 80045fe:	e7eb      	b.n	80045d8 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8004600:	686b      	ldr	r3, [r5, #4]
 8004602:	ae02      	add	r6, sp, #8
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f846 3d04 	str.w	r3, [r6, #-4]!
 800460a:	e7e8      	b.n	80045de <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800460c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004610:	4632      	mov	r2, r6
 8004612:	4629      	mov	r1, r5
 8004614:	4640      	mov	r0, r8
 8004616:	4798      	blx	r3
 8004618:	e7ec      	b.n	80045f4 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800461a:	f06f 0001 	mvn.w	r0, #1
 800461e:	e7e9      	b.n	80045f4 <ip4_output_if_src+0xac>
 8004620:	08009b1c 	.word	0x08009b1c
 8004624:	08009b50 	.word	0x08009b50
 8004628:	08009880 	.word	0x08009880
 800462c:	08009b5c 	.word	0x08009b5c
 8004630:	08009b8c 	.word	0x08009b8c
 8004634:	20003e72 	.word	0x20003e72

08004638 <ip4_output_if>:
{
 8004638:	b4f0      	push	{r4, r5, r6, r7}
 800463a:	9c06      	ldr	r4, [sp, #24]
 800463c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8004640:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8004644:	b11a      	cbz	r2, 800464e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8004646:	b109      	cbz	r1, 800464c <ip4_output_if+0x14>
 8004648:	680f      	ldr	r7, [r1, #0]
 800464a:	b907      	cbnz	r7, 800464e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800464c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800464e:	9406      	str	r4, [sp, #24]
 8004650:	9605      	str	r6, [sp, #20]
 8004652:	9504      	str	r5, [sp, #16]
}
 8004654:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004656:	f7ff bf77 	b.w	8004548 <ip4_output_if_src>

0800465a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800465a:	1e43      	subs	r3, r0, #1
 800465c:	3303      	adds	r3, #3
 800465e:	d811      	bhi.n	8004684 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004660:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8004664:	f013 0302 	ands.w	r3, r3, #2
 8004668:	d00e      	beq.n	8004688 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800466a:	684a      	ldr	r2, [r1, #4]
 800466c:	4290      	cmp	r0, r2
 800466e:	d00b      	beq.n	8004688 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004670:	688b      	ldr	r3, [r1, #8]
 8004672:	4042      	eors	r2, r0
 8004674:	421a      	tst	r2, r3
 8004676:	d107      	bne.n	8004688 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004678:	43db      	mvns	r3, r3
 800467a:	4383      	bics	r3, r0
    return 1;
 800467c:	bf0c      	ite	eq
 800467e:	2001      	moveq	r0, #1
 8004680:	2000      	movne	r0, #0
 8004682:	4770      	bx	lr
 8004684:	2001      	movs	r0, #1
 8004686:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8004688:	2000      	movs	r0, #0
  }
}
 800468a:	4770      	bx	lr

0800468c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800468c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <ip_reass_dequeue_datagram+0x34>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4282      	cmp	r2, r0
{
 8004694:	4604      	mov	r4, r0
 8004696:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8004698:	d107      	bne.n	80046aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800469a:	6802      	ldr	r2, [r0, #0]
 800469c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800469e:	4621      	mov	r1, r4
 80046a0:	2004      	movs	r0, #4
}
 80046a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80046a6:	f000 be1b 	b.w	80052e0 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80046aa:	b931      	cbnz	r1, 80046ba <ip_reass_dequeue_datagram+0x2e>
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <ip_reass_dequeue_datagram+0x38>)
 80046ae:	4906      	ldr	r1, [pc, #24]	; (80046c8 <ip_reass_dequeue_datagram+0x3c>)
 80046b0:	4806      	ldr	r0, [pc, #24]	; (80046cc <ip_reass_dequeue_datagram+0x40>)
 80046b2:	f240 1245 	movw	r2, #325	; 0x145
 80046b6:	f004 ff12 	bl	80094de <iprintf>
    prev->next = ipr->next;
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	e7ee      	b.n	800469e <ip_reass_dequeue_datagram+0x12>
 80046c0:	20003e78 	.word	0x20003e78
 80046c4:	08009c75 	.word	0x08009c75
 80046c8:	08009cae 	.word	0x08009cae
 80046cc:	08009880 	.word	0x08009880

080046d0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80046d0:	4281      	cmp	r1, r0
{
 80046d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d6:	4605      	mov	r5, r0
 80046d8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80046da:	d105      	bne.n	80046e8 <ip_reass_free_complete_datagram+0x18>
 80046dc:	4b2f      	ldr	r3, [pc, #188]	; (800479c <ip_reass_free_complete_datagram+0xcc>)
 80046de:	4930      	ldr	r1, [pc, #192]	; (80047a0 <ip_reass_free_complete_datagram+0xd0>)
 80046e0:	4830      	ldr	r0, [pc, #192]	; (80047a4 <ip_reass_free_complete_datagram+0xd4>)
 80046e2:	22ab      	movs	r2, #171	; 0xab
 80046e4:	f004 fefb 	bl	80094de <iprintf>
  if (prev != NULL) {
 80046e8:	b147      	cbz	r7, 80046fc <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	429d      	cmp	r5, r3
 80046ee:	d005      	beq.n	80046fc <ip_reass_free_complete_datagram+0x2c>
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <ip_reass_free_complete_datagram+0xcc>)
 80046f2:	492d      	ldr	r1, [pc, #180]	; (80047a8 <ip_reass_free_complete_datagram+0xd8>)
 80046f4:	482b      	ldr	r0, [pc, #172]	; (80047a4 <ip_reass_free_complete_datagram+0xd4>)
 80046f6:	22ad      	movs	r2, #173	; 0xad
 80046f8:	f004 fef1 	bl	80094de <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80046fc:	686e      	ldr	r6, [r5, #4]
 80046fe:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8004700:	889a      	ldrh	r2, [r3, #4]
 8004702:	bb92      	cbnz	r2, 800476a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8004708:	f105 011c 	add.w	r1, r5, #28
 800470c:	f105 0208 	add.w	r2, r5, #8
 8004710:	f852 0b04 	ldr.w	r0, [r2], #4
 8004714:	f843 0b04 	str.w	r0, [r3], #4
 8004718:	428a      	cmp	r2, r1
 800471a:	d1f9      	bne.n	8004710 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800471c:	2101      	movs	r1, #1
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff fe1f 	bl	8004362 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8004724:	4630      	mov	r0, r6
 8004726:	f001 f917 	bl	8005958 <pbuf_clen>
 800472a:	4604      	mov	r4, r0
    pbuf_free(p);
 800472c:	4630      	mov	r0, r6
 800472e:	f000 ff5d 	bl	80055ec <pbuf_free>
  p = ipr->p;
 8004732:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004734:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800479c <ip_reass_free_complete_datagram+0xcc>
 8004738:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80047b4 <ip_reass_free_complete_datagram+0xe4>
 800473c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80047a4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8004740:	b9ae      	cbnz	r6, 800476e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8004742:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8004744:	4d19      	ldr	r5, [pc, #100]	; (80047ac <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8004746:	4639      	mov	r1, r7
 8004748:	f7ff ffa0 	bl	800468c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800474c:	882b      	ldrh	r3, [r5, #0]
 800474e:	42a3      	cmp	r3, r4
 8004750:	d205      	bcs.n	800475e <ip_reass_free_complete_datagram+0x8e>
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <ip_reass_free_complete_datagram+0xcc>)
 8004754:	4916      	ldr	r1, [pc, #88]	; (80047b0 <ip_reass_free_complete_datagram+0xe0>)
 8004756:	4813      	ldr	r0, [pc, #76]	; (80047a4 <ip_reass_free_complete_datagram+0xd4>)
 8004758:	22d2      	movs	r2, #210	; 0xd2
 800475a:	f004 fec0 	bl	80094de <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800475e:	882b      	ldrh	r3, [r5, #0]
 8004760:	1b1b      	subs	r3, r3, r4
 8004762:	802b      	strh	r3, [r5, #0]
}
 8004764:	4620      	mov	r0, r4
 8004766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800476a:	2400      	movs	r4, #0
 800476c:	e7e1      	b.n	8004732 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800476e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8004770:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8004772:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8004776:	f001 f8ef 	bl	8005958 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800477a:	4404      	add	r4, r0
 800477c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8004780:	db05      	blt.n	800478e <ip_reass_free_complete_datagram+0xbe>
 8004782:	4643      	mov	r3, r8
 8004784:	22cc      	movs	r2, #204	; 0xcc
 8004786:	4649      	mov	r1, r9
 8004788:	4650      	mov	r0, sl
 800478a:	f004 fea8 	bl	80094de <iprintf>
    pbuf_free(pcur);
 800478e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8004790:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8004792:	f000 ff2b 	bl	80055ec <pbuf_free>
    p = iprh->next_pbuf;
 8004796:	465e      	mov	r6, fp
 8004798:	e7d2      	b.n	8004740 <ip_reass_free_complete_datagram+0x70>
 800479a:	bf00      	nop
 800479c:	08009c75 	.word	0x08009c75
 80047a0:	08009cc7 	.word	0x08009cc7
 80047a4:	08009880 	.word	0x08009880
 80047a8:	08009cd3 	.word	0x08009cd3
 80047ac:	20003e74 	.word	0x20003e74
 80047b0:	08009d02 	.word	0x08009d02
 80047b4:	08009ce5 	.word	0x08009ce5

080047b8 <ip_reass_remove_oldest_datagram>:
{
 80047b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 80047bc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800482c <ip_reass_remove_oldest_datagram+0x74>
{
 80047c0:	4606      	mov	r6, r0
 80047c2:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80047c4:	2500      	movs	r5, #0
    other_datagrams = 0;
 80047c6:	2400      	movs	r4, #0
    r = reassdatagrams;
 80047c8:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80047cc:	4621      	mov	r1, r4
    prev = NULL;
 80047ce:	46a6      	mov	lr, r4
    oldest = NULL;
 80047d0:	4620      	mov	r0, r4
    while (r != NULL) {
 80047d2:	b953      	cbnz	r3, 80047ea <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80047d4:	b110      	cbz	r0, 80047dc <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80047d6:	f7ff ff7b 	bl	80046d0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80047da:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80047dc:	42bd      	cmp	r5, r7
 80047de:	da01      	bge.n	80047e4 <ip_reass_remove_oldest_datagram+0x2c>
 80047e0:	2c01      	cmp	r4, #1
 80047e2:	dcf0      	bgt.n	80047c6 <ip_reass_remove_oldest_datagram+0xe>
}
 80047e4:	4628      	mov	r0, r5
 80047e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80047ea:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	4562      	cmp	r2, ip
 80047f2:	d109      	bne.n	8004808 <ip_reass_remove_oldest_datagram+0x50>
 80047f4:	f8d6 c010 	ldr.w	ip, [r6, #16]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	4562      	cmp	r2, ip
 80047fc:	d104      	bne.n	8004808 <ip_reass_remove_oldest_datagram+0x50>
 80047fe:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8004802:	88b2      	ldrh	r2, [r6, #4]
 8004804:	4594      	cmp	ip, r2
 8004806:	d008      	beq.n	800481a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8004808:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800480a:	b160      	cbz	r0, 8004826 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800480c:	7fc2      	ldrb	r2, [r0, #31]
 800480e:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8004812:	4594      	cmp	ip, r2
 8004814:	bf9c      	itt	ls
 8004816:	4671      	movls	r1, lr
 8004818:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2a00      	cmp	r2, #0
 800481e:	bf18      	it	ne
 8004820:	469e      	movne	lr, r3
 8004822:	4613      	mov	r3, r2
 8004824:	e7d5      	b.n	80047d2 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8004826:	4671      	mov	r1, lr
 8004828:	4618      	mov	r0, r3
 800482a:	e7f6      	b.n	800481a <ip_reass_remove_oldest_datagram+0x62>
 800482c:	20003e78 	.word	0x20003e78

08004830 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8004830:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8004832:	4604      	mov	r4, r0
 8004834:	b930      	cbnz	r0, 8004844 <ip_frag_free_pbuf_custom_ref+0x14>
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <ip_frag_free_pbuf_custom_ref+0x20>)
 8004838:	4906      	ldr	r1, [pc, #24]	; (8004854 <ip_frag_free_pbuf_custom_ref+0x24>)
 800483a:	4807      	ldr	r0, [pc, #28]	; (8004858 <ip_frag_free_pbuf_custom_ref+0x28>)
 800483c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8004840:	f004 fe4d 	bl	80094de <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8004844:	4621      	mov	r1, r4
 8004846:	2005      	movs	r0, #5
}
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800484c:	f000 bd48 	b.w	80052e0 <memp_free>
 8004850:	08009c75 	.word	0x08009c75
 8004854:	0800a39b 	.word	0x0800a39b
 8004858:	08009880 	.word	0x08009880

0800485c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800485c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800485e:	4604      	mov	r4, r0
 8004860:	b930      	cbnz	r0, 8004870 <ipfrag_free_pbuf_custom+0x14>
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <ipfrag_free_pbuf_custom+0x28>)
 8004864:	4908      	ldr	r1, [pc, #32]	; (8004888 <ipfrag_free_pbuf_custom+0x2c>)
 8004866:	4809      	ldr	r0, [pc, #36]	; (800488c <ipfrag_free_pbuf_custom+0x30>)
 8004868:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800486c:	f004 fe37 	bl	80094de <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8004870:	6960      	ldr	r0, [r4, #20]
 8004872:	b108      	cbz	r0, 8004878 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8004874:	f000 feba 	bl	80055ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8004878:	4620      	mov	r0, r4
}
 800487a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800487e:	f7ff bfd7 	b.w	8004830 <ip_frag_free_pbuf_custom_ref>
 8004882:	bf00      	nop
 8004884:	08009c75 	.word	0x08009c75
 8004888:	08009d1d 	.word	0x08009d1d
 800488c:	08009880 	.word	0x08009880

08004890 <ip_reass_tmr>:
{
 8004890:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <ip_reass_tmr+0x24>)
 8004894:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8004896:	2400      	movs	r4, #0
  while (r != NULL) {
 8004898:	b900      	cbnz	r0, 800489c <ip_reass_tmr+0xc>
}
 800489a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800489c:	7fc3      	ldrb	r3, [r0, #31]
 800489e:	6805      	ldr	r5, [r0, #0]
 80048a0:	b123      	cbz	r3, 80048ac <ip_reass_tmr+0x1c>
      r->timer--;
 80048a2:	3b01      	subs	r3, #1
 80048a4:	77c3      	strb	r3, [r0, #31]
 80048a6:	4604      	mov	r4, r0
      r = r->next;
 80048a8:	4628      	mov	r0, r5
 80048aa:	e7f5      	b.n	8004898 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 80048ac:	4621      	mov	r1, r4
 80048ae:	f7ff ff0f 	bl	80046d0 <ip_reass_free_complete_datagram>
 80048b2:	e7f9      	b.n	80048a8 <ip_reass_tmr+0x18>
 80048b4:	20003e78 	.word	0x20003e78

080048b8 <ip4_reass>:
{
 80048b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 80048bc:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80048be:	782b      	ldrb	r3, [r5, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	2b05      	cmp	r3, #5
{
 80048c6:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80048c8:	f040 808c 	bne.w	80049e4 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80048cc:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80048ce:	4cb4      	ldr	r4, [pc, #720]	; (8004ba0 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80048d0:	f7ff f8b6 	bl	8003a40 <lwip_htons>
 80048d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80048d8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80048dc:	8868      	ldrh	r0, [r5, #2]
 80048de:	f7ff f8af 	bl	8003a40 <lwip_htons>
 80048e2:	782b      	ldrb	r3, [r5, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 80048ec:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80048ee:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80048f0:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80048f2:	f001 f831 	bl	8005958 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80048f6:	8823      	ldrh	r3, [r4, #0]
 80048f8:	4403      	add	r3, r0
 80048fa:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80048fc:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80048fe:	dc68      	bgt.n	80049d2 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004900:	4ea8      	ldr	r6, [pc, #672]	; (8004ba4 <ip4_reass+0x2ec>)
 8004902:	6834      	ldr	r4, [r6, #0]
 8004904:	2c00      	cmp	r4, #0
 8004906:	d172      	bne.n	80049ee <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004908:	2004      	movs	r0, #4
 800490a:	f000 fccd 	bl	80052a8 <memp_malloc>
  if (ipr == NULL) {
 800490e:	4604      	mov	r4, r0
 8004910:	b958      	cbnz	r0, 800492a <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8004912:	4651      	mov	r1, sl
 8004914:	4628      	mov	r0, r5
 8004916:	f7ff ff4f 	bl	80047b8 <ip_reass_remove_oldest_datagram>
 800491a:	4582      	cmp	sl, r0
 800491c:	dc62      	bgt.n	80049e4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800491e:	2004      	movs	r0, #4
 8004920:	f000 fcc2 	bl	80052a8 <memp_malloc>
    if (ipr == NULL)
 8004924:	4604      	mov	r4, r0
 8004926:	2800      	cmp	r0, #0
 8004928:	d05c      	beq.n	80049e4 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800492a:	2220      	movs	r2, #32
 800492c:	2100      	movs	r1, #0
 800492e:	4620      	mov	r0, r4
 8004930:	f004 ff2e 	bl	8009790 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8004934:	2303      	movs	r3, #3
 8004936:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8004938:	6833      	ldr	r3, [r6, #0]
 800493a:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 800493c:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800493e:	462b      	mov	r3, r5
 8004940:	f104 0208 	add.w	r2, r4, #8
 8004944:	f105 0114 	add.w	r1, r5, #20
 8004948:	f853 0b04 	ldr.w	r0, [r3], #4
 800494c:	f842 0b04 	str.w	r0, [r2], #4
 8004950:	428b      	cmp	r3, r1
 8004952:	d1f9      	bne.n	8004948 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8004954:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8004958:	f01b 0b20 	ands.w	fp, fp, #32
 800495c:	d108      	bne.n	8004970 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800495e:	9b01      	ldr	r3, [sp, #4]
 8004960:	444b      	add	r3, r9
 8004962:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8004964:	4599      	cmp	r9, r3
 8004966:	d83d      	bhi.n	80049e4 <ip4_reass+0x12c>
 8004968:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800496c:	4293      	cmp	r3, r2
 800496e:	d839      	bhi.n	80049e4 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8004970:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004972:	8868      	ldrh	r0, [r5, #2]
 8004974:	f7ff f864 	bl	8003a40 <lwip_htons>
 8004978:	f895 8000 	ldrb.w	r8, [r5]
 800497c:	f008 080f 	and.w	r8, r8, #15
 8004980:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004984:	88e8      	ldrh	r0, [r5, #6]
 8004986:	f7ff f85b 	bl	8003a40 <lwip_htons>
 800498a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800498e:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004992:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8004994:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8004996:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 800499a:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800499c:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 80049a0:	2500      	movs	r5, #0
  iprh->end = offset + len;
 80049a2:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 80049a4:	7035      	strb	r5, [r6, #0]
 80049a6:	7075      	strb	r5, [r6, #1]
 80049a8:	70b5      	strb	r5, [r6, #2]
 80049aa:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 80049ac:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 80049ae:	4672      	mov	r2, lr
  int valid = 1;
 80049b0:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 80049b4:	bb52      	cbnz	r2, 8004a0c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	f040 8092 	bne.w	8004ae0 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80049bc:	f1be 0f00 	cmp.w	lr, #0
 80049c0:	d07d      	beq.n	8004abe <ip4_reass+0x206>
 80049c2:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <ip4_reass+0x2f0>)
 80049c4:	4979      	ldr	r1, [pc, #484]	; (8004bac <ip4_reass+0x2f4>)
 80049c6:	487a      	ldr	r0, [pc, #488]	; (8004bb0 <ip4_reass+0x2f8>)
 80049c8:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80049cc:	f004 fd87 	bl	80094de <iprintf>
 80049d0:	e075      	b.n	8004abe <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80049d2:	4601      	mov	r1, r0
 80049d4:	4628      	mov	r0, r5
 80049d6:	f7ff feef 	bl	80047b8 <ip_reass_remove_oldest_datagram>
 80049da:	b118      	cbz	r0, 80049e4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80049dc:	8823      	ldrh	r3, [r4, #0]
 80049de:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80049e0:	2b0a      	cmp	r3, #10
 80049e2:	dd8d      	ble.n	8004900 <ip4_reass+0x48>
  pbuf_free(p);
 80049e4:	4638      	mov	r0, r7
 80049e6:	f000 fe01 	bl	80055ec <pbuf_free>
  return NULL;
 80049ea:	2500      	movs	r5, #0
 80049ec:	e0d4      	b.n	8004b98 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80049ee:	68eb      	ldr	r3, [r5, #12]
 80049f0:	6962      	ldr	r2, [r4, #20]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d108      	bne.n	8004a08 <ip4_reass+0x150>
 80049f6:	692b      	ldr	r3, [r5, #16]
 80049f8:	69a2      	ldr	r2, [r4, #24]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d104      	bne.n	8004a08 <ip4_reass+0x150>
 80049fe:	89a2      	ldrh	r2, [r4, #12]
 8004a00:	88ab      	ldrh	r3, [r5, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f000 80dc 	beq.w	8004bc0 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004a08:	6824      	ldr	r4, [r4, #0]
 8004a0a:	e77b      	b.n	8004904 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8004a0c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8004a10:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8004a14:	4288      	cmp	r0, r1
 8004a16:	d254      	bcs.n	8004ac2 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8004a18:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	d04d      	beq.n	8004aba <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8004a1e:	88ea      	ldrh	r2, [r5, #6]
 8004a20:	4290      	cmp	r0, r2
 8004a22:	f0c0 8091 	bcc.w	8004b48 <ip4_reass+0x290>
 8004a26:	428b      	cmp	r3, r1
 8004a28:	f200 808e 	bhi.w	8004b48 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8004a2c:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8004a2e:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8004a30:	f040 80e4 	bne.w	8004bfc <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8004a34:	f1bb 0f00 	cmp.w	fp, #0
 8004a38:	d004      	beq.n	8004a44 <ip4_reass+0x18c>
 8004a3a:	7fa3      	ldrb	r3, [r4, #30]
 8004a3c:	f013 0301 	ands.w	r3, r3, #1
 8004a40:	f000 80da 	beq.w	8004bf8 <ip4_reass+0x340>
    if (valid) {
 8004a44:	f1b8 0f00 	cmp.w	r8, #0
 8004a48:	d159      	bne.n	8004afe <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8004a4a:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8004a4e:	4e54      	ldr	r6, [pc, #336]	; (8004ba0 <ip4_reass+0x2e8>)
 8004a50:	8833      	ldrh	r3, [r6, #0]
 8004a52:	449a      	add	sl, r3
 8004a54:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8004a58:	f1bb 0f00 	cmp.w	fp, #0
 8004a5c:	d107      	bne.n	8004a6e <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004a62:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8004a64:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8004a6e:	f1b8 0f01 	cmp.w	r8, #1
 8004a72:	d1ba      	bne.n	80049ea <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8004a74:	8ba3      	ldrh	r3, [r4, #28]
 8004a76:	3314      	adds	r3, #20
 8004a78:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	685d      	ldr	r5, [r3, #4]
 8004a7e:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8004a80:	f104 0308 	add.w	r3, r4, #8
 8004a84:	462a      	mov	r2, r5
 8004a86:	f104 011c 	add.w	r1, r4, #28
 8004a8a:	f853 0b04 	ldr.w	r0, [r3], #4
 8004a8e:	f842 0b04 	str.w	r0, [r2], #4
 8004a92:	428b      	cmp	r3, r1
 8004a94:	d1f9      	bne.n	8004a8a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8004a96:	8ba0      	ldrh	r0, [r4, #28]
 8004a98:	f7fe ffd2 	bl	8003a40 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8004a9c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8004a9e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8004aa0:	71ab      	strb	r3, [r5, #6]
 8004aa2:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8004aa4:	72ab      	strb	r3, [r5, #10]
 8004aa6:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8004aa8:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8004aaa:	2f00      	cmp	r7, #0
 8004aac:	d157      	bne.n	8004b5e <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <ip4_reass+0x2ec>)
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	428c      	cmp	r4, r1
 8004ab4:	d165      	bne.n	8004b82 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	e065      	b.n	8004b86 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8004aba:	428b      	cmp	r3, r1
 8004abc:	d844      	bhi.n	8004b48 <ip4_reass+0x290>
      ipr->p = new_p;
 8004abe:	6067      	str	r7, [r4, #4]
 8004ac0:	e7b8      	b.n	8004a34 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8004ac2:	d041      	beq.n	8004b48 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8004ac4:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8004ac8:	4282      	cmp	r2, r0
 8004aca:	d83d      	bhi.n	8004b48 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8004acc:	b125      	cbz	r5, 8004ad8 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8004ace:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	bf18      	it	ne
 8004ad4:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8004ad8:	f8dc 2000 	ldr.w	r2, [ip]
 8004adc:	4665      	mov	r5, ip
 8004ade:	e769      	b.n	80049b4 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8004ae0:	88eb      	ldrh	r3, [r5, #6]
 8004ae2:	4283      	cmp	r3, r0
 8004ae4:	d906      	bls.n	8004af4 <ip4_reass+0x23c>
 8004ae6:	4b30      	ldr	r3, [pc, #192]	; (8004ba8 <ip4_reass+0x2f0>)
 8004ae8:	4932      	ldr	r1, [pc, #200]	; (8004bb4 <ip4_reass+0x2fc>)
 8004aea:	4831      	ldr	r0, [pc, #196]	; (8004bb0 <ip4_reass+0x2f8>)
 8004aec:	f240 12ab 	movw	r2, #427	; 0x1ab
 8004af0:	f004 fcf5 	bl	80094de <iprintf>
      iprh_prev->next_pbuf = new_p;
 8004af4:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8004af6:	88ea      	ldrh	r2, [r5, #6]
 8004af8:	88b3      	ldrh	r3, [r6, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	e798      	b.n	8004a30 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0a2      	beq.n	8004a4a <ip4_reass+0x192>
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	888b      	ldrh	r3, [r1, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d19e      	bne.n	8004a4a <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8004b0c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8004b0e:	b99b      	cbnz	r3, 8004b38 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8004b10:	42b1      	cmp	r1, r6
 8004b12:	d106      	bne.n	8004b22 <ip4_reass+0x26a>
 8004b14:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <ip4_reass+0x2f0>)
 8004b16:	4928      	ldr	r1, [pc, #160]	; (8004bb8 <ip4_reass+0x300>)
 8004b18:	4825      	ldr	r0, [pc, #148]	; (8004bb0 <ip4_reass+0x2f8>)
 8004b1a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8004b1e:	f004 fcde 	bl	80094de <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8004b22:	6833      	ldr	r3, [r6, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d092      	beq.n	8004a4e <ip4_reass+0x196>
 8004b28:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <ip4_reass+0x2f0>)
 8004b2a:	4924      	ldr	r1, [pc, #144]	; (8004bbc <ip4_reass+0x304>)
 8004b2c:	4820      	ldr	r0, [pc, #128]	; (8004bb0 <ip4_reass+0x2f8>)
 8004b2e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004b32:	f004 fcd4 	bl	80094de <iprintf>
 8004b36:	e78a      	b.n	8004a4e <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8004b38:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8004b3a:	88f0      	ldrh	r0, [r6, #6]
 8004b3c:	8893      	ldrh	r3, [r2, #4]
 8004b3e:	4298      	cmp	r0, r3
 8004b40:	d183      	bne.n	8004a4a <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	4616      	mov	r6, r2
 8004b46:	e7e2      	b.n	8004b0e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f000 ff05 	bl	8005958 <pbuf_clen>
 8004b4e:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <ip4_reass+0x2e8>)
 8004b50:	8813      	ldrh	r3, [r2, #0]
 8004b52:	1a18      	subs	r0, r3, r0
 8004b54:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8004b56:	4638      	mov	r0, r7
 8004b58:	f000 fd48 	bl	80055ec <pbuf_free>
 8004b5c:	e742      	b.n	80049e4 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 8004b5e:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8004b62:	f06f 0113 	mvn.w	r1, #19
 8004b66:	4638      	mov	r0, r7
 8004b68:	f000 fd3a 	bl	80055e0 <pbuf_header>
      pbuf_cat(p, r);
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 ff16 	bl	80059a0 <pbuf_cat>
      r = iprh->next_pbuf;
 8004b74:	f8d8 7000 	ldr.w	r7, [r8]
 8004b78:	e797      	b.n	8004aaa <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8004b7a:	680b      	ldr	r3, [r1, #0]
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d002      	beq.n	8004b86 <ip4_reass+0x2ce>
 8004b80:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8004b82:	2900      	cmp	r1, #0
 8004b84:	d1f9      	bne.n	8004b7a <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7ff fd80 	bl	800468c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 fee3 	bl	8005958 <pbuf_clen>
 8004b92:	8833      	ldrh	r3, [r6, #0]
 8004b94:	1a18      	subs	r0, r3, r0
 8004b96:	8030      	strh	r0, [r6, #0]
}
 8004b98:	4628      	mov	r0, r5
 8004b9a:	b003      	add	sp, #12
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	20003e74 	.word	0x20003e74
 8004ba4:	20003e78 	.word	0x20003e78
 8004ba8:	08009c75 	.word	0x08009c75
 8004bac:	08009c0f 	.word	0x08009c0f
 8004bb0:	08009880 	.word	0x08009880
 8004bb4:	08009bf1 	.word	0x08009bf1
 8004bb8:	08009c46 	.word	0x08009c46
 8004bbc:	08009c53 	.word	0x08009c53
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8004bc0:	88e8      	ldrh	r0, [r5, #6]
 8004bc2:	f7fe ff3d 	bl	8003a40 <lwip_htons>
 8004bc6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f47f aec2 	bne.w	8004954 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8004bd0:	89e0      	ldrh	r0, [r4, #14]
 8004bd2:	f7fe ff35 	bl	8003a40 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8004bd6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f43f aeba 	beq.w	8004954 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8004be0:	462b      	mov	r3, r5
 8004be2:	f104 0208 	add.w	r2, r4, #8
 8004be6:	f105 0114 	add.w	r1, r5, #20
 8004bea:	f853 0b04 	ldr.w	r0, [r3], #4
 8004bee:	f842 0b04 	str.w	r0, [r2], #4
 8004bf2:	428b      	cmp	r3, r1
 8004bf4:	d1f9      	bne.n	8004bea <ip4_reass+0x332>
 8004bf6:	e6ad      	b.n	8004954 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	e728      	b.n	8004a4e <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8004bfc:	f1bb 0f00 	cmp.w	fp, #0
 8004c00:	f43f af23 	beq.w	8004a4a <ip4_reass+0x192>
 8004c04:	f04f 0800 	mov.w	r8, #0
 8004c08:	e717      	b.n	8004a3a <ip4_reass+0x182>
 8004c0a:	bf00      	nop

08004c0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8004c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004c10:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8004c14:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004c16:	2308      	movs	r3, #8
 8004c18:	f1a8 0814 	sub.w	r8, r8, #20
 8004c1c:	fb98 f8f3 	sdiv	r8, r8, r3
 8004c20:	fa1f f388 	uxth.w	r3, r8
 8004c24:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8004c26:	6843      	ldr	r3, [r0, #4]
{
 8004c28:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004c2a:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8004c2c:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004c2e:	f006 060f 	and.w	r6, r6, #15
 8004c32:	00b6      	lsls	r6, r6, #2
 8004c34:	2e14      	cmp	r6, #20
{
 8004c36:	4607      	mov	r7, r0
 8004c38:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004c3a:	d00b      	beq.n	8004c54 <ip4_frag+0x48>
 8004c3c:	4b5a      	ldr	r3, [pc, #360]	; (8004da8 <ip4_frag+0x19c>)
 8004c3e:	495b      	ldr	r1, [pc, #364]	; (8004dac <ip4_frag+0x1a0>)
 8004c40:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004c44:	485a      	ldr	r0, [pc, #360]	; (8004db0 <ip4_frag+0x1a4>)
 8004c46:	f004 fc4a 	bl	80094de <iprintf>
 8004c4a:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8004c4e:	b00b      	add	sp, #44	; 0x2c
 8004c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8004c54:	9b02      	ldr	r3, [sp, #8]
 8004c56:	88d8      	ldrh	r0, [r3, #6]
 8004c58:	f7fe fef2 	bl	8003a40 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8004c5c:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004c60:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8004c64:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004c66:	d004      	beq.n	8004c72 <ip4_frag+0x66>
 8004c68:	4b4f      	ldr	r3, [pc, #316]	; (8004da8 <ip4_frag+0x19c>)
 8004c6a:	4952      	ldr	r1, [pc, #328]	; (8004db4 <ip4_frag+0x1a8>)
 8004c6c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8004c70:	e7e8      	b.n	8004c44 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8004c72:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8004c74:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8004c78:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8004c7a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8004c7e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8004c80:	9307      	str	r3, [sp, #28]
  while (left) {
 8004c82:	b90d      	cbnz	r5, 8004c88 <ip4_frag+0x7c>
  return ERR_OK;
 8004c84:	4628      	mov	r0, r5
 8004c86:	e7e2      	b.n	8004c4e <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8004c88:	9b07      	ldr	r3, [sp, #28]
 8004c8a:	42ab      	cmp	r3, r5
 8004c8c:	bfa8      	it	ge
 8004c8e:	462b      	movge	r3, r5
 8004c90:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2114      	movs	r1, #20
 8004c96:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8004c98:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8004c9a:	f000 fd11 	bl	80056c0 <pbuf_alloc>
    if (rambuf == NULL) {
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	b370      	cbz	r0, 8004d00 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	2b13      	cmp	r3, #19
 8004ca6:	d806      	bhi.n	8004cb6 <ip4_frag+0xaa>
 8004ca8:	4b3f      	ldr	r3, [pc, #252]	; (8004da8 <ip4_frag+0x19c>)
 8004caa:	4943      	ldr	r1, [pc, #268]	; (8004db8 <ip4_frag+0x1ac>)
 8004cac:	4840      	ldr	r0, [pc, #256]	; (8004db0 <ip4_frag+0x1a4>)
 8004cae:	f240 3209 	movw	r2, #777	; 0x309
 8004cb2:	f004 fc14 	bl	80094de <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8004cb6:	9b02      	ldr	r3, [sp, #8]
 8004cb8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	3114      	adds	r1, #20
 8004cc0:	f853 0b04 	ldr.w	r0, [r3], #4
 8004cc4:	f842 0b04 	str.w	r0, [r2], #4
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	d1f9      	bne.n	8004cc0 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8004ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8004cd0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8004cd4:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8004cd6:	f1b9 0f00 	cmp.w	r9, #0
 8004cda:	d037      	beq.n	8004d4c <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8004cdc:	897c      	ldrh	r4, [r7, #10]
 8004cde:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8004ce0:	b2a4      	uxth	r4, r4
 8004ce2:	454c      	cmp	r4, r9
 8004ce4:	bf28      	it	cs
 8004ce6:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8004ce8:	b914      	cbnz	r4, 8004cf0 <ip4_frag+0xe4>
        p = p->next;
 8004cea:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8004cec:	2600      	movs	r6, #0
 8004cee:	e7f2      	b.n	8004cd6 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8004cf0:	2005      	movs	r0, #5
 8004cf2:	f000 fad9 	bl	80052a8 <memp_malloc>
      if (pcr == NULL) {
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	b928      	cbnz	r0, 8004d06 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f000 fc76 	bl	80055ec <pbuf_free>
  return ERR_MEM;
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d04:	e7a3      	b.n	8004c4e <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8004d06:	9401      	str	r4, [sp, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4433      	add	r3, r6
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	4603      	mov	r3, r0
 8004d12:	4621      	mov	r1, r4
 8004d14:	2004      	movs	r0, #4
 8004d16:	f000 fc2b 	bl	8005570 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8004d1a:	b918      	cbnz	r0, 8004d24 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8004d1c:	4650      	mov	r0, sl
 8004d1e:	f7ff fd87 	bl	8004830 <ip_frag_free_pbuf_custom_ref>
 8004d22:	e7ea      	b.n	8004cfa <ip4_frag+0xee>
 8004d24:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 8004d26:	4638      	mov	r0, r7
 8004d28:	f000 fe1e 	bl	8005968 <pbuf_ref>
      left_to_copy -= newpbuflen;
 8004d2c:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004d30:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <ip4_frag+0x1b0>)
      pcr->original = p;
 8004d32:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004d36:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8004d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d3c:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8004d3e:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8004d42:	f000 fe2d 	bl	80059a0 <pbuf_cat>
      if (left_to_copy) {
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	d1ce      	bne.n	8004cea <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8004d52:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8004d56:	3b13      	subs	r3, #19
    if (!last) {
 8004d58:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8004d5a:	bfa8      	it	ge
 8004d5c:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8004d60:	f7fe fe6e 	bl	8003a40 <lwip_htons>
 8004d64:	9b03      	ldr	r3, [sp, #12]
 8004d66:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8004d68:	9b05      	ldr	r3, [sp, #20]
 8004d6a:	f103 0014 	add.w	r0, r3, #20
 8004d6e:	b280      	uxth	r0, r0
 8004d70:	f7fe fe66 	bl	8003a40 <lwip_htons>
 8004d74:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8004d76:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8004d78:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	7293      	strb	r3, [r2, #10]
 8004d7e:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8004d80:	4641      	mov	r1, r8
 8004d82:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004d86:	9a08      	ldr	r2, [sp, #32]
 8004d88:	4658      	mov	r0, fp
 8004d8a:	4798      	blx	r3
    pbuf_free(rambuf);
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	f000 fc2d 	bl	80055ec <pbuf_free>
    left -= fragsize;
 8004d92:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8004d94:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8004d96:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8004d98:	9b04      	ldr	r3, [sp, #16]
 8004d9a:	4413      	add	r3, r2
    poff += newpbuflen;
 8004d9c:	4426      	add	r6, r4
    ofo += nfb;
 8004d9e:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8004da0:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8004da2:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	e76c      	b.n	8004c82 <ip4_frag+0x76>
 8004da8:	08009c75 	.word	0x08009c75
 8004dac:	08009b90 	.word	0x08009b90
 8004db0:	08009880 	.word	0x08009880
 8004db4:	08009bb7 	.word	0x08009bb7
 8004db8:	08009bd1 	.word	0x08009bd1
 8004dbc:	0800485d 	.word	0x0800485d

08004dc0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <mem_init+0x4c>)
 8004dc2:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <mem_init+0x50>)
 8004dc4:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8004dc8:	2100      	movs	r1, #0
{
 8004dca:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004dcc:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8004dce:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 8004dd0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8004dd4:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004dd6:	490f      	ldr	r1, [pc, #60]	; (8004e14 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8004dd8:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004dda:	1898      	adds	r0, r3, r2
 8004ddc:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8004dde:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->used = 1;
 8004de2:	2101      	movs	r1, #1
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004de4:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004de8:	4a0b      	ldr	r2, [pc, #44]	; (8004e18 <mem_init+0x58>)
  ram_end->used = 1;
 8004dea:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004dee:	480b      	ldr	r0, [pc, #44]	; (8004e1c <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 8004df0:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004df2:	f003 fe37 	bl	8008a64 <sys_mutex_new>
 8004df6:	b140      	cbz	r0, 8004e0a <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <mem_init+0x60>)
 8004dfa:	490a      	ldr	r1, [pc, #40]	; (8004e24 <mem_init+0x64>)
 8004dfc:	480a      	ldr	r0, [pc, #40]	; (8004e28 <mem_init+0x68>)
 8004dfe:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 8004e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004e06:	f004 bb6a 	b.w	80094de <iprintf>
 8004e0a:	bd10      	pop	{r4, pc}
 8004e0c:	20004183 	.word	0x20004183
 8004e10:	20003e84 	.word	0x20003e84
 8004e14:	20003e88 	.word	0x20003e88
 8004e18:	20003e7c 	.word	0x20003e7c
 8004e1c:	20003e80 	.word	0x20003e80
 8004e20:	08009deb 	.word	0x08009deb
 8004e24:	08009e1a 	.word	0x08009e1a
 8004e28:	08009880 	.word	0x08009880

08004e2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004e30:	4604      	mov	r4, r0
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f000 8096 	beq.w	8004f64 <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004e38:	0783      	lsls	r3, r0, #30
 8004e3a:	d006      	beq.n	8004e4a <mem_free+0x1e>
 8004e3c:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <mem_free+0x13c>)
 8004e3e:	494b      	ldr	r1, [pc, #300]	; (8004f6c <mem_free+0x140>)
 8004e40:	484b      	ldr	r0, [pc, #300]	; (8004f70 <mem_free+0x144>)
 8004e42:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004e46:	f004 fb4a 	bl	80094de <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e4a:	4f4a      	ldr	r7, [pc, #296]	; (8004f74 <mem_free+0x148>)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d303      	bcc.n	8004e5a <mem_free+0x2e>
 8004e52:	4b49      	ldr	r3, [pc, #292]	; (8004f78 <mem_free+0x14c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d306      	bcc.n	8004e68 <mem_free+0x3c>
 8004e5a:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <mem_free+0x13c>)
 8004e5c:	4947      	ldr	r1, [pc, #284]	; (8004f7c <mem_free+0x150>)
 8004e5e:	4844      	ldr	r0, [pc, #272]	; (8004f70 <mem_free+0x144>)
 8004e60:	f240 12af 	movw	r2, #431	; 0x1af
 8004e64:	f004 fb3b 	bl	80094de <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	d304      	bcc.n	8004e78 <mem_free+0x4c>
 8004e6e:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <mem_free+0x14c>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4294      	cmp	r4, r2
 8004e74:	4698      	mov	r8, r3
 8004e76:	d305      	bcc.n	8004e84 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004e78:	f003 fe22 	bl	8008ac0 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8004e80:	f003 be2a 	b.w	8008ad8 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8004e84:	483e      	ldr	r0, [pc, #248]	; (8004f80 <mem_free+0x154>)
 8004e86:	f003 fdfc 	bl	8008a82 <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004e8a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004e8e:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004e92:	b933      	cbnz	r3, 8004ea2 <mem_free+0x76>
 8004e94:	4b34      	ldr	r3, [pc, #208]	; (8004f68 <mem_free+0x13c>)
 8004e96:	493b      	ldr	r1, [pc, #236]	; (8004f84 <mem_free+0x158>)
 8004e98:	4835      	ldr	r0, [pc, #212]	; (8004f70 <mem_free+0x144>)
 8004e9a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004e9e:	f004 fb1e 	bl	80094de <iprintf>
  if (mem < lfree) {
 8004ea2:	4e39      	ldr	r6, [pc, #228]	; (8004f88 <mem_free+0x15c>)
  mem->used = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8004eaa:	6833      	ldr	r3, [r6, #0]
 8004eac:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004eae:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8004eb0:	bf38      	it	cc
 8004eb2:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004eb4:	429d      	cmp	r5, r3
 8004eb6:	d206      	bcs.n	8004ec6 <mem_free+0x9a>
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <mem_free+0x13c>)
 8004eba:	4934      	ldr	r1, [pc, #208]	; (8004f8c <mem_free+0x160>)
 8004ebc:	482c      	ldr	r0, [pc, #176]	; (8004f70 <mem_free+0x144>)
 8004ebe:	f240 125d 	movw	r2, #349	; 0x15d
 8004ec2:	f004 fb0c 	bl	80094de <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	d306      	bcc.n	8004edc <mem_free+0xb0>
 8004ece:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <mem_free+0x13c>)
 8004ed0:	492f      	ldr	r1, [pc, #188]	; (8004f90 <mem_free+0x164>)
 8004ed2:	4827      	ldr	r0, [pc, #156]	; (8004f70 <mem_free+0x144>)
 8004ed4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004ed8:	f004 fb01 	bl	80094de <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004edc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8004ee0:	b133      	cbz	r3, 8004ef0 <mem_free+0xc4>
 8004ee2:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <mem_free+0x13c>)
 8004ee4:	492b      	ldr	r1, [pc, #172]	; (8004f94 <mem_free+0x168>)
 8004ee6:	4822      	ldr	r0, [pc, #136]	; (8004f70 <mem_free+0x144>)
 8004ee8:	f240 125f 	movw	r2, #351	; 0x15f
 8004eec:	f004 faf7 	bl	80094de <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004ef0:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8004ef4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ef8:	d906      	bls.n	8004f08 <mem_free+0xdc>
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <mem_free+0x13c>)
 8004efc:	4926      	ldr	r1, [pc, #152]	; (8004f98 <mem_free+0x16c>)
 8004efe:	481c      	ldr	r0, [pc, #112]	; (8004f70 <mem_free+0x144>)
 8004f00:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004f04:	f004 faeb 	bl	80094de <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004f0e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004f10:	4295      	cmp	r5, r2
 8004f12:	d010      	beq.n	8004f36 <mem_free+0x10a>
 8004f14:	7910      	ldrb	r0, [r2, #4]
 8004f16:	b970      	cbnz	r0, 8004f36 <mem_free+0x10a>
 8004f18:	f8d8 0000 	ldr.w	r0, [r8]
 8004f1c:	4282      	cmp	r2, r0
 8004f1e:	d00a      	beq.n	8004f36 <mem_free+0x10a>
    if (lfree == nmem) {
 8004f20:	6830      	ldr	r0, [r6, #0]
 8004f22:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8004f24:	5a5a      	ldrh	r2, [r3, r1]
 8004f26:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004f2a:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8004f2c:	bf08      	it	eq
 8004f2e:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004f30:	441a      	add	r2, r3
 8004f32:	1ae9      	subs	r1, r5, r3
 8004f34:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004f36:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8004f3a:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8004f3c:	428d      	cmp	r5, r1
 8004f3e:	d00c      	beq.n	8004f5a <mem_free+0x12e>
 8004f40:	7908      	ldrb	r0, [r1, #4]
 8004f42:	b950      	cbnz	r0, 8004f5a <mem_free+0x12e>
    if (lfree == mem) {
 8004f44:	6830      	ldr	r0, [r6, #0]
 8004f46:	4285      	cmp	r5, r0
      lfree = pmem;
 8004f48:	bf08      	it	eq
 8004f4a:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8004f4c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004f50:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004f52:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004f56:	440b      	add	r3, r1
 8004f58:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8004f5a:	4809      	ldr	r0, [pc, #36]	; (8004f80 <mem_free+0x154>)
}
 8004f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8004f60:	f003 bd94 	b.w	8008a8c <sys_mutex_unlock>
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	08009deb 	.word	0x08009deb
 8004f6c:	08009d29 	.word	0x08009d29
 8004f70:	08009880 	.word	0x08009880
 8004f74:	20003e84 	.word	0x20003e84
 8004f78:	20003e88 	.word	0x20003e88
 8004f7c:	08009d4a 	.word	0x08009d4a
 8004f80:	20003e80 	.word	0x20003e80
 8004f84:	08009d61 	.word	0x08009d61
 8004f88:	20003e7c 	.word	0x20003e7c
 8004f8c:	08009d75 	.word	0x08009d75
 8004f90:	08009d8c 	.word	0x08009d8c
 8004f94:	08009da6 	.word	0x08009da6
 8004f98:	08009dc1 	.word	0x08009dc1

08004f9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004fa0:	3103      	adds	r1, #3
 8004fa2:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8004fa6:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8004fa8:	2d0b      	cmp	r5, #11
{
 8004faa:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8004fac:	d904      	bls.n	8004fb8 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004fae:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8004fb2:	d902      	bls.n	8004fba <mem_trim+0x1e>
    return NULL;
 8004fb4:	2400      	movs	r4, #0
 8004fb6:	e01c      	b.n	8004ff2 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8004fb8:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004fba:	4b36      	ldr	r3, [pc, #216]	; (8005094 <mem_trim+0xf8>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	42a2      	cmp	r2, r4
 8004fc0:	4698      	mov	r8, r3
 8004fc2:	d803      	bhi.n	8004fcc <mem_trim+0x30>
 8004fc4:	4b34      	ldr	r3, [pc, #208]	; (8005098 <mem_trim+0xfc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d306      	bcc.n	8004fda <mem_trim+0x3e>
 8004fcc:	4b33      	ldr	r3, [pc, #204]	; (800509c <mem_trim+0x100>)
 8004fce:	4934      	ldr	r1, [pc, #208]	; (80050a0 <mem_trim+0x104>)
 8004fd0:	4834      	ldr	r0, [pc, #208]	; (80050a4 <mem_trim+0x108>)
 8004fd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004fd6:	f004 fa82 	bl	80094de <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004fda:	f8d8 3000 	ldr.w	r3, [r8]
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d303      	bcc.n	8004fea <mem_trim+0x4e>
 8004fe2:	4a2d      	ldr	r2, [pc, #180]	; (8005098 <mem_trim+0xfc>)
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	4294      	cmp	r4, r2
 8004fe8:	d306      	bcc.n	8004ff8 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004fea:	f003 fd69 	bl	8008ac0 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8004fee:	f003 fd73 	bl	8008ad8 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004ff8:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004ffc:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005000:	1af6      	subs	r6, r6, r3
 8005002:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005004:	3f08      	subs	r7, #8
 8005006:	1bbf      	subs	r7, r7, r6
 8005008:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800500a:	42af      	cmp	r7, r5
 800500c:	d219      	bcs.n	8005042 <mem_trim+0xa6>
 800500e:	4b23      	ldr	r3, [pc, #140]	; (800509c <mem_trim+0x100>)
 8005010:	4925      	ldr	r1, [pc, #148]	; (80050a8 <mem_trim+0x10c>)
 8005012:	4824      	ldr	r0, [pc, #144]	; (80050a4 <mem_trim+0x108>)
 8005014:	f240 2206 	movw	r2, #518	; 0x206
 8005018:	f004 fa61 	bl	80094de <iprintf>
 800501c:	e7ca      	b.n	8004fb4 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800501e:	f105 0214 	add.w	r2, r5, #20
 8005022:	42ba      	cmp	r2, r7
 8005024:	d831      	bhi.n	800508a <mem_trim+0xee>
    if (mem2 < lfree) {
 8005026:	4821      	ldr	r0, [pc, #132]	; (80050ac <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005028:	f106 0208 	add.w	r2, r6, #8
 800502c:	4415      	add	r5, r2
    if (mem2 < lfree) {
 800502e:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005030:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005032:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8005034:	42ba      	cmp	r2, r7
      lfree = mem2;
 8005036:	bf38      	it	cc
 8005038:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 800503a:	2000      	movs	r0, #0
 800503c:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 800503e:	5359      	strh	r1, [r3, r5]
 8005040:	e01a      	b.n	8005078 <mem_trim+0xdc>
  if (newsize == size) {
 8005042:	d0d6      	beq.n	8004ff2 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 8005044:	481a      	ldr	r0, [pc, #104]	; (80050b0 <mem_trim+0x114>)
 8005046:	f003 fd1c 	bl	8008a82 <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800504a:	f8d8 3000 	ldr.w	r3, [r8]
 800504e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005052:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8005054:	7902      	ldrb	r2, [r0, #4]
 8005056:	2a00      	cmp	r2, #0
 8005058:	d1e1      	bne.n	800501e <mem_trim+0x82>
    next = mem2->next;
 800505a:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 800505c:	4913      	ldr	r1, [pc, #76]	; (80050ac <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800505e:	f106 0208 	add.w	r2, r6, #8
 8005062:	4415      	add	r5, r2
    if (lfree == mem2) {
 8005064:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005066:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8005068:	4290      	cmp	r0, r2
 800506a:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 800506e:	bf08      	it	eq
 8005070:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 8005072:	2100      	movs	r1, #0
 8005074:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8005076:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8005078:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800507a:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800507e:	5b5a      	ldrh	r2, [r3, r5]
 8005080:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005084:	bf1c      	itt	ne
 8005086:	189b      	addne	r3, r3, r2
 8005088:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800508a:	4809      	ldr	r0, [pc, #36]	; (80050b0 <mem_trim+0x114>)
 800508c:	f003 fcfe 	bl	8008a8c <sys_mutex_unlock>
  return rmem;
 8005090:	e7af      	b.n	8004ff2 <mem_trim+0x56>
 8005092:	bf00      	nop
 8005094:	20003e84 	.word	0x20003e84
 8005098:	20003e88 	.word	0x20003e88
 800509c:	08009deb 	.word	0x08009deb
 80050a0:	08009ed0 	.word	0x08009ed0
 80050a4:	08009880 	.word	0x08009880
 80050a8:	08009ee7 	.word	0x08009ee7
 80050ac:	20003e7c 	.word	0x20003e7c
 80050b0:	20003e80 	.word	0x20003e80

080050b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80050b8:	b148      	cbz	r0, 80050ce <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80050ba:	3003      	adds	r0, #3
 80050bc:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80050c0:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 80050c2:	2d0b      	cmp	r5, #11
 80050c4:	d905      	bls.n	80050d2 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80050c6:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80050ca:	d903      	bls.n	80050d4 <mem_malloc+0x20>
    return NULL;
 80050cc:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 80050ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 80050d2:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 80050d4:	483c      	ldr	r0, [pc, #240]	; (80051c8 <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80050d6:	4e3d      	ldr	r6, [pc, #244]	; (80051cc <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 80050d8:	f003 fcd3 	bl	8008a82 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80050dc:	483c      	ldr	r0, [pc, #240]	; (80051d0 <mem_malloc+0x11c>)
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	6807      	ldr	r7, [r0, #0]
 80050e2:	1a7b      	subs	r3, r7, r1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80050ea:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80050ee:	4543      	cmp	r3, r8
 80050f0:	d303      	bcc.n	80050fa <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 80050f2:	4835      	ldr	r0, [pc, #212]	; (80051c8 <mem_malloc+0x114>)
 80050f4:	f003 fcca 	bl	8008a8c <sys_mutex_unlock>
 80050f8:	e7e8      	b.n	80050cc <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 80050fa:	18cc      	adds	r4, r1, r3
 80050fc:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8005100:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005104:	f1bc 0f00 	cmp.w	ip, #0
 8005108:	d15b      	bne.n	80051c2 <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800510a:	eba9 0203 	sub.w	r2, r9, r3
 800510e:	4472      	add	r2, lr
      if ((!mem->used) &&
 8005110:	4295      	cmp	r5, r2
 8005112:	d856      	bhi.n	80051c2 <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005114:	f105 0814 	add.w	r8, r5, #20
 8005118:	4542      	cmp	r2, r8
 800511a:	d34c      	bcc.n	80051b6 <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800511c:	f105 0208 	add.w	r2, r5, #8
 8005120:	441a      	add	r2, r3
 8005122:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005124:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8005128:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800512c:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8005130:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8005134:	2301      	movs	r3, #1
          mem->next = ptr2;
 8005136:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8005138:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800513a:	5a8b      	ldrh	r3, [r1, r2]
 800513c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005140:	d001      	beq.n	8005146 <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005142:	4419      	add	r1, r3
 8005144:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8005146:	42a7      	cmp	r7, r4
 8005148:	4f22      	ldr	r7, [pc, #136]	; (80051d4 <mem_malloc+0x120>)
 800514a:	d111      	bne.n	8005170 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 800514c:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 800514e:	6836      	ldr	r6, [r6, #0]
 8005150:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8005152:	791a      	ldrb	r2, [r3, #4]
 8005154:	b10a      	cbz	r2, 800515a <mem_malloc+0xa6>
 8005156:	428b      	cmp	r3, r1
 8005158:	d130      	bne.n	80051bc <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800515a:	428b      	cmp	r3, r1
          lfree = cur;
 800515c:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800515e:	d007      	beq.n	8005170 <mem_malloc+0xbc>
 8005160:	b132      	cbz	r2, 8005170 <mem_malloc+0xbc>
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <mem_malloc+0x124>)
 8005164:	491d      	ldr	r1, [pc, #116]	; (80051dc <mem_malloc+0x128>)
 8005166:	481e      	ldr	r0, [pc, #120]	; (80051e0 <mem_malloc+0x12c>)
 8005168:	f240 22cf 	movw	r2, #719	; 0x2cf
 800516c:	f004 f9b7 	bl	80094de <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8005170:	4815      	ldr	r0, [pc, #84]	; (80051c8 <mem_malloc+0x114>)
 8005172:	f003 fc8b 	bl	8008a8c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005176:	3508      	adds	r5, #8
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4425      	add	r5, r4
 800517c:	42ab      	cmp	r3, r5
 800517e:	d206      	bcs.n	800518e <mem_malloc+0xda>
 8005180:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <mem_malloc+0x124>)
 8005182:	4918      	ldr	r1, [pc, #96]	; (80051e4 <mem_malloc+0x130>)
 8005184:	4816      	ldr	r0, [pc, #88]	; (80051e0 <mem_malloc+0x12c>)
 8005186:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800518a:	f004 f9a8 	bl	80094de <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800518e:	07a3      	lsls	r3, r4, #30
 8005190:	d00d      	beq.n	80051ae <mem_malloc+0xfa>
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <mem_malloc+0x124>)
 8005194:	4914      	ldr	r1, [pc, #80]	; (80051e8 <mem_malloc+0x134>)
 8005196:	4812      	ldr	r0, [pc, #72]	; (80051e0 <mem_malloc+0x12c>)
 8005198:	f240 22d6 	movw	r2, #726	; 0x2d6
 800519c:	f004 f99f 	bl	80094de <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <mem_malloc+0x124>)
 80051a2:	4912      	ldr	r1, [pc, #72]	; (80051ec <mem_malloc+0x138>)
 80051a4:	480e      	ldr	r0, [pc, #56]	; (80051e0 <mem_malloc+0x12c>)
 80051a6:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80051aa:	f004 f998 	bl	80094de <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80051ae:	f104 0008 	add.w	r0, r4, #8
 80051b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	7123      	strb	r3, [r4, #4]
 80051ba:	e7c4      	b.n	8005146 <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	4433      	add	r3, r6
 80051c0:	e7c7      	b.n	8005152 <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80051c2:	4673      	mov	r3, lr
 80051c4:	e793      	b.n	80050ee <mem_malloc+0x3a>
 80051c6:	bf00      	nop
 80051c8:	20003e80 	.word	0x20003e80
 80051cc:	20003e84 	.word	0x20003e84
 80051d0:	20003e7c 	.word	0x20003e7c
 80051d4:	20003e88 	.word	0x20003e88
 80051d8:	08009deb 	.word	0x08009deb
 80051dc:	08009e35 	.word	0x08009e35
 80051e0:	08009880 	.word	0x08009880
 80051e4:	08009e4e 	.word	0x08009e4e
 80051e8:	08009e7e 	.word	0x08009e7e
 80051ec:	08009ead 	.word	0x08009ead

080051f0 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80051f4:	f003 fc64 	bl	8008ac0 <sys_arch_protect>

  memp = *desc->tab;
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 80051fc:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80051fe:	b15c      	cbz	r4, 8005218 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005204:	07a3      	lsls	r3, r4, #30
 8005206:	d006      	beq.n	8005216 <do_memp_malloc_pool.isra.0+0x26>
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <do_memp_malloc_pool.isra.0+0x30>)
 800520a:	4906      	ldr	r1, [pc, #24]	; (8005224 <do_memp_malloc_pool.isra.0+0x34>)
 800520c:	4806      	ldr	r0, [pc, #24]	; (8005228 <do_memp_malloc_pool.isra.0+0x38>)
 800520e:	f240 1249 	movw	r2, #329	; 0x149
 8005212:	f004 f964 	bl	80094de <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8005216:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8005218:	f003 fc5e 	bl	8008ad8 <sys_arch_unprotect>
  return NULL;
}
 800521c:	4620      	mov	r0, r4
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	08009f27 	.word	0x08009f27
 8005224:	08009f57 	.word	0x08009f57
 8005228:	08009880 	.word	0x08009880

0800522c <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800522c:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800522e:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005230:	4605      	mov	r5, r0
 8005232:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005234:	d006      	beq.n	8005244 <do_memp_free_pool.isra.1+0x18>
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <do_memp_free_pool.isra.1+0x2c>)
 8005238:	4908      	ldr	r1, [pc, #32]	; (800525c <do_memp_free_pool.isra.1+0x30>)
 800523a:	4809      	ldr	r0, [pc, #36]	; (8005260 <do_memp_free_pool.isra.1+0x34>)
 800523c:	f240 129d 	movw	r2, #413	; 0x19d
 8005240:	f004 f94d 	bl	80094de <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8005244:	f003 fc3c 	bl	8008ac0 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800524e:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8005254:	f003 bc40 	b.w	8008ad8 <sys_arch_unprotect>
 8005258:	08009f27 	.word	0x08009f27
 800525c:	08009f07 	.word	0x08009f07
 8005260:	08009880 	.word	0x08009880

08005264 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005264:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005266:	6881      	ldr	r1, [r0, #8]
{
 8005268:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 800526a:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800526c:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 800526e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005270:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005272:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005276:	42a2      	cmp	r2, r4
 8005278:	db00      	blt.n	800527c <memp_init_pool+0x18>
}
 800527a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800527c:	680d      	ldr	r5, [r1, #0]
 800527e:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005280:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005282:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005284:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005286:	442b      	add	r3, r5
 8005288:	e7f5      	b.n	8005276 <memp_init_pool+0x12>
	...

0800528c <memp_init>:
{
 800528c:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 800528e:	4d05      	ldr	r5, [pc, #20]	; (80052a4 <memp_init+0x18>)
{
 8005290:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8005292:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005296:	3401      	adds	r4, #1
 8005298:	f7ff ffe4 	bl	8005264 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800529c:	2c0d      	cmp	r4, #13
 800529e:	d1f8      	bne.n	8005292 <memp_init+0x6>
}
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	bf00      	nop
 80052a4:	0800a050 	.word	0x0800a050

080052a8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052a8:	280c      	cmp	r0, #12
{
 80052aa:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052ac:	d807      	bhi.n	80052be <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <memp_malloc+0x28>)
 80052b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80052b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80052b8:	3008      	adds	r0, #8
 80052ba:	f7ff bf99 	b.w	80051f0 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <memp_malloc+0x2c>)
 80052c0:	4905      	ldr	r1, [pc, #20]	; (80052d8 <memp_malloc+0x30>)
 80052c2:	4806      	ldr	r0, [pc, #24]	; (80052dc <memp_malloc+0x34>)
 80052c4:	f240 1287 	movw	r2, #391	; 0x187
 80052c8:	f004 f909 	bl	80094de <iprintf>
}
 80052cc:	2000      	movs	r0, #0
 80052ce:	bd08      	pop	{r3, pc}
 80052d0:	0800a050 	.word	0x0800a050
 80052d4:	08009f27 	.word	0x08009f27
 80052d8:	0800a033 	.word	0x0800a033
 80052dc:	08009880 	.word	0x08009880

080052e0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80052e0:	280c      	cmp	r0, #12
 80052e2:	d906      	bls.n	80052f2 <memp_free+0x12>
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <memp_free+0x24>)
 80052e6:	4908      	ldr	r1, [pc, #32]	; (8005308 <memp_free+0x28>)
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <memp_free+0x2c>)
 80052ea:	f240 12db 	movw	r2, #475	; 0x1db
 80052ee:	f004 b8f6 	b.w	80094de <iprintf>

  if (mem == NULL) {
 80052f2:	b129      	cbz	r1, 8005300 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <memp_free+0x30>)
 80052f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80052fa:	3008      	adds	r0, #8
 80052fc:	f7ff bf96 	b.w	800522c <do_memp_free_pool.isra.1>
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	08009f27 	.word	0x08009f27
 8005308:	0800a018 	.word	0x0800a018
 800530c:	08009880 	.word	0x08009880
 8005310:	0800a050 	.word	0x0800a050

08005314 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005314:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005318:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 800531a:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800531c:	d502      	bpl.n	8005324 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800531e:	3104      	adds	r1, #4
 8005320:	f7fe bd60 	b.w	8003de4 <etharp_request>
 8005324:	4770      	bx	lr

08005326 <netif_init>:
{
 8005326:	4770      	bx	lr

08005328 <netif_set_ipaddr>:
{
 8005328:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800532a:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800532c:	460c      	mov	r4, r1
 800532e:	b1b9      	cbz	r1, 8005360 <netif_set_ipaddr+0x38>
 8005330:	680b      	ldr	r3, [r1, #0]
 8005332:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005334:	9a01      	ldr	r2, [sp, #4]
 8005336:	686b      	ldr	r3, [r5, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d00f      	beq.n	800535c <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800533c:	1d2e      	adds	r6, r5, #4
 800533e:	a901      	add	r1, sp, #4
 8005340:	4630      	mov	r0, r6
 8005342:	f001 f9f5 	bl	8006730 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005346:	a901      	add	r1, sp, #4
 8005348:	4630      	mov	r0, r6
 800534a:	f003 fa93 	bl	8008874 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800534e:	b104      	cbz	r4, 8005352 <netif_set_ipaddr+0x2a>
 8005350:	6824      	ldr	r4, [r4, #0]
 8005352:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005354:	b114      	cbz	r4, 800535c <netif_set_ipaddr+0x34>
 8005356:	4628      	mov	r0, r5
 8005358:	f7ff ffdc 	bl	8005314 <netif_issue_reports.part.0>
}
 800535c:	b002      	add	sp, #8
 800535e:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005360:	4b01      	ldr	r3, [pc, #4]	; (8005368 <netif_set_ipaddr+0x40>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	e7e5      	b.n	8005332 <netif_set_ipaddr+0xa>
 8005366:	bf00      	nop
 8005368:	08009b8c 	.word	0x08009b8c

0800536c <netif_set_addr>:
{
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4606      	mov	r6, r0
 8005370:	4615      	mov	r5, r2
 8005372:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005374:	b109      	cbz	r1, 800537a <netif_set_addr+0xe>
 8005376:	680b      	ldr	r3, [r1, #0]
 8005378:	b94b      	cbnz	r3, 800538e <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ffd4 	bl	8005328 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005380:	b105      	cbz	r5, 8005384 <netif_set_addr+0x18>
 8005382:	682d      	ldr	r5, [r5, #0]
 8005384:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005386:	b104      	cbz	r4, 800538a <netif_set_addr+0x1e>
 8005388:	6824      	ldr	r4, [r4, #0]
 800538a:	60f4      	str	r4, [r6, #12]
 800538c:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800538e:	b102      	cbz	r2, 8005392 <netif_set_addr+0x26>
 8005390:	6815      	ldr	r5, [r2, #0]
 8005392:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005394:	b104      	cbz	r4, 8005398 <netif_set_addr+0x2c>
 8005396:	6824      	ldr	r4, [r4, #0]
 8005398:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800539a:	4630      	mov	r0, r6
}
 800539c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80053a0:	f7ff bfc2 	b.w	8005328 <netif_set_ipaddr>

080053a4 <netif_add>:
{
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80053aa:	4604      	mov	r4, r0
 80053ac:	460f      	mov	r7, r1
 80053ae:	4690      	mov	r8, r2
 80053b0:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 80053b2:	b92e      	cbnz	r6, 80053c0 <netif_add+0x1c>
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <netif_add+0x68>)
 80053b6:	4916      	ldr	r1, [pc, #88]	; (8005410 <netif_add+0x6c>)
 80053b8:	4816      	ldr	r0, [pc, #88]	; (8005414 <netif_add+0x70>)
 80053ba:	22fb      	movs	r2, #251	; 0xfb
 80053bc:	f004 f88f 	bl	80094de <iprintf>
  netif->num = netif_num++;
 80053c0:	4a15      	ldr	r2, [pc, #84]	; (8005418 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80053c8:	9b08      	ldr	r3, [sp, #32]
 80053ca:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80053cc:	7813      	ldrb	r3, [r2, #0]
 80053ce:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053d2:	2500      	movs	r5, #0
  netif->num = netif_num++;
 80053d4:	1c59      	adds	r1, r3, #1
  netif->input = input;
 80053d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80053d8:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 80053da:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80053dc:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053de:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80053e0:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80053e2:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 80053e4:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 80053e8:	464b      	mov	r3, r9
 80053ea:	4642      	mov	r2, r8
 80053ec:	4639      	mov	r1, r7
 80053ee:	f7ff ffbd 	bl	800536c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80053f2:	4620      	mov	r0, r4
 80053f4:	47b0      	blx	r6
 80053f6:	b930      	cbnz	r0, 8005406 <netif_add+0x62>
  netif->next = netif_list;
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <netif_add+0x78>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80053fe:	601c      	str	r4, [r3, #0]
}
 8005400:	4620      	mov	r0, r4
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8005406:	462c      	mov	r4, r5
 8005408:	e7fa      	b.n	8005400 <netif_add+0x5c>
 800540a:	bf00      	nop
 800540c:	0800a084 	.word	0x0800a084
 8005410:	0800a0b5 	.word	0x0800a0b5
 8005414:	08009880 	.word	0x08009880
 8005418:	20003ec0 	.word	0x20003ec0
 800541c:	2000785c 	.word	0x2000785c

08005420 <netif_set_default>:
  netif_default = netif;
 8005420:	4b01      	ldr	r3, [pc, #4]	; (8005428 <netif_set_default+0x8>)
 8005422:	6018      	str	r0, [r3, #0]
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20007860 	.word	0x20007860

0800542c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800542c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8005430:	07d1      	lsls	r1, r2, #31
 8005432:	d409      	bmi.n	8005448 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8005434:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005438:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800543a:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800543e:	d503      	bpl.n	8005448 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005440:	6843      	ldr	r3, [r0, #4]
 8005442:	b10b      	cbz	r3, 8005448 <netif_set_up+0x1c>
 8005444:	f7ff bf66 	b.w	8005314 <netif_issue_reports.part.0>
 8005448:	4770      	bx	lr

0800544a <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800544a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800544e:	07d9      	lsls	r1, r3, #31
 8005450:	d507      	bpl.n	8005462 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8005452:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005456:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8005458:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800545c:	d501      	bpl.n	8005462 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800545e:	f7fe bc0f 	b.w	8003c80 <etharp_cleanup_netif>
 8005462:	4770      	bx	lr

08005464 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8005464:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005466:	f003 fb2b 	bl	8008ac0 <sys_arch_protect>
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <pbuf_free_ooseq_callback+0x2c>)
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	f003 fb32 	bl	8008ad8 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <pbuf_free_ooseq_callback+0x30>)
 8005476:	681c      	ldr	r4, [r3, #0]
 8005478:	b904      	cbnz	r4, 800547c <pbuf_free_ooseq_callback+0x18>
 800547a:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 800547c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800547e:	b120      	cbz	r0, 800548a <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8005480:	f000 fc42 	bl	8005d08 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	6723      	str	r3, [r4, #112]	; 0x70
 8005488:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800548a:	68e4      	ldr	r4, [r4, #12]
 800548c:	e7f4      	b.n	8005478 <pbuf_free_ooseq_callback+0x14>
 800548e:	bf00      	nop
 8005490:	20007864 	.word	0x20007864
 8005494:	2000786c 	.word	0x2000786c

08005498 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005498:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800549a:	4604      	mov	r4, r0
 800549c:	2800      	cmp	r0, #0
 800549e:	d12f      	bne.n	8005500 <pbuf_header_impl+0x68>
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <pbuf_header_impl+0x88>)
 80054a2:	4920      	ldr	r1, [pc, #128]	; (8005524 <pbuf_header_impl+0x8c>)
 80054a4:	4820      	ldr	r0, [pc, #128]	; (8005528 <pbuf_header_impl+0x90>)
 80054a6:	f240 223f 	movw	r2, #575	; 0x23f
 80054aa:	f004 f818 	bl	80094de <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80054ae:	2000      	movs	r0, #0
 80054b0:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 80054b2:	b288      	uxth	r0, r1
  type = p->type;
 80054b4:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 80054b6:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80054b8:	b10d      	cbz	r5, 80054be <pbuf_header_impl+0x26>
 80054ba:	2d03      	cmp	r5, #3
 80054bc:	d106      	bne.n	80054cc <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 80054be:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80054c0:	f104 0210 	add.w	r2, r4, #16
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d20a      	bcs.n	80054de <pbuf_header_impl+0x46>
      return 1;
 80054c8:	2001      	movs	r0, #1
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80054cc:	3d01      	subs	r5, #1
 80054ce:	2d01      	cmp	r5, #1
 80054d0:	d811      	bhi.n	80054f6 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80054d2:	2900      	cmp	r1, #0
 80054d4:	da0c      	bge.n	80054f0 <pbuf_header_impl+0x58>
 80054d6:	8962      	ldrh	r2, [r4, #10]
 80054d8:	4282      	cmp	r2, r0
 80054da:	d3f5      	bcc.n	80054c8 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80054dc:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 80054de:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80054e0:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 80054e2:	8963      	ldrh	r3, [r4, #10]
 80054e4:	b289      	uxth	r1, r1
 80054e6:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80054e8:	4401      	add	r1, r0
  p->len += header_size_increment;
 80054ea:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80054ec:	8121      	strh	r1, [r4, #8]
 80054ee:	e7de      	b.n	80054ae <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d1f3      	bne.n	80054dc <pbuf_header_impl+0x44>
 80054f4:	e7e8      	b.n	80054c8 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <pbuf_header_impl+0x88>)
 80054f8:	490c      	ldr	r1, [pc, #48]	; (800552c <pbuf_header_impl+0x94>)
 80054fa:	f240 2277 	movw	r2, #631	; 0x277
 80054fe:	e00b      	b.n	8005518 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005500:	2900      	cmp	r1, #0
 8005502:	d0d4      	beq.n	80054ae <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8005504:	dad5      	bge.n	80054b2 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8005506:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005508:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800550a:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800550c:	4283      	cmp	r3, r0
 800550e:	d2d1      	bcs.n	80054b4 <pbuf_header_impl+0x1c>
 8005510:	4b03      	ldr	r3, [pc, #12]	; (8005520 <pbuf_header_impl+0x88>)
 8005512:	4907      	ldr	r1, [pc, #28]	; (8005530 <pbuf_header_impl+0x98>)
 8005514:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <pbuf_header_impl+0x90>)
 800551a:	f003 ffe0 	bl	80094de <iprintf>
 800551e:	e7d3      	b.n	80054c8 <pbuf_header_impl+0x30>
 8005520:	0800a331 	.word	0x0800a331
 8005524:	0800a39b 	.word	0x0800a39b
 8005528:	08009880 	.word	0x08009880
 800552c:	0800a37f 	.word	0x0800a37f
 8005530:	0800a361 	.word	0x0800a361

08005534 <pbuf_pool_is_empty>:
{
 8005534:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 8005536:	4d0c      	ldr	r5, [pc, #48]	; (8005568 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 8005538:	f003 fac2 	bl	8008ac0 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800553c:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 800553e:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8005540:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8005542:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8005544:	f003 fac8 	bl	8008ad8 <sys_arch_unprotect>
  if (!queued) {
 8005548:	b964      	cbnz	r4, 8005564 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800554a:	4622      	mov	r2, r4
 800554c:	4621      	mov	r1, r4
 800554e:	4807      	ldr	r0, [pc, #28]	; (800556c <pbuf_pool_is_empty+0x38>)
 8005550:	f7fe fa16 	bl	8003980 <tcpip_callback_with_block>
 8005554:	b130      	cbz	r0, 8005564 <pbuf_pool_is_empty+0x30>
 8005556:	f003 fab3 	bl	8008ac0 <sys_arch_protect>
 800555a:	702c      	strb	r4, [r5, #0]
}
 800555c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005560:	f003 baba 	b.w	8008ad8 <sys_arch_unprotect>
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop
 8005568:	20007864 	.word	0x20007864
 800556c:	08005465 	.word	0x08005465

08005570 <pbuf_alloced_custom>:
{
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8005574:	2804      	cmp	r0, #4
 8005576:	d81e      	bhi.n	80055b6 <pbuf_alloced_custom+0x46>
 8005578:	e8df f000 	tbb	[pc, r0]
 800557c:	1b280326 	.word	0x1b280326
 8005580:	1b          	.byte	0x1b
 8005581:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005582:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005584:	3403      	adds	r4, #3
 8005586:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800558a:	f024 0403 	bic.w	r4, r4, #3
 800558e:	190e      	adds	r6, r1, r4
 8005590:	4286      	cmp	r6, r0
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	d80b      	bhi.n	80055b0 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8005598:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800559a:	b1cd      	cbz	r5, 80055d0 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800559c:	442c      	add	r4, r5
 800559e:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80055a0:	2002      	movs	r0, #2
  p->pbuf.type = type;
 80055a2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80055a4:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80055a6:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80055a8:	8119      	strh	r1, [r3, #8]
 80055aa:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 80055ac:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80055ae:	4618      	mov	r0, r3
}
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 80055b2:	2400      	movs	r4, #0
    break;
 80055b4:	e7e6      	b.n	8005584 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <pbuf_alloced_custom+0x64>)
 80055b8:	4907      	ldr	r1, [pc, #28]	; (80055d8 <pbuf_alloced_custom+0x68>)
 80055ba:	4808      	ldr	r0, [pc, #32]	; (80055dc <pbuf_alloced_custom+0x6c>)
 80055bc:	f240 12c5 	movw	r2, #453	; 0x1c5
 80055c0:	f003 ff8d 	bl	80094de <iprintf>
    return NULL;
 80055c4:	2000      	movs	r0, #0
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80055c8:	2436      	movs	r4, #54	; 0x36
 80055ca:	e7db      	b.n	8005584 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80055cc:	240e      	movs	r4, #14
 80055ce:	e7d9      	b.n	8005584 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80055d0:	605d      	str	r5, [r3, #4]
 80055d2:	e7e5      	b.n	80055a0 <pbuf_alloced_custom+0x30>
 80055d4:	0800a331 	.word	0x0800a331
 80055d8:	0800a174 	.word	0x0800a174
 80055dc:	08009880 	.word	0x08009880

080055e0 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 80055e0:	2200      	movs	r2, #0
 80055e2:	f7ff bf59 	b.w	8005498 <pbuf_header_impl>

080055e6 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 80055e6:	2201      	movs	r2, #1
 80055e8:	f7ff bf56 	b.w	8005498 <pbuf_header_impl>

080055ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80055ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80055f0:	4604      	mov	r4, r0
 80055f2:	b950      	cbnz	r0, 800560a <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 80055f4:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <pbuf_free+0xbc>)
 80055f6:	492d      	ldr	r1, [pc, #180]	; (80056ac <pbuf_free+0xc0>)
 80055f8:	482d      	ldr	r0, [pc, #180]	; (80056b0 <pbuf_free+0xc4>)
 80055fa:	f240 22d2 	movw	r2, #722	; 0x2d2
 80055fe:	f003 ff6e 	bl	80094de <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005602:	4627      	mov	r7, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8005604:	4638      	mov	r0, r7
 8005606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800560a:	7b03      	ldrb	r3, [r0, #12]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d906      	bls.n	800561e <pbuf_free+0x32>
 8005610:	4b25      	ldr	r3, [pc, #148]	; (80056a8 <pbuf_free+0xbc>)
 8005612:	4928      	ldr	r1, [pc, #160]	; (80056b4 <pbuf_free+0xc8>)
 8005614:	4826      	ldr	r0, [pc, #152]	; (80056b0 <pbuf_free+0xc4>)
 8005616:	f240 22de 	movw	r2, #734	; 0x2de
 800561a:	f003 ff60 	bl	80094de <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800561e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80056a8 <pbuf_free+0xbc>
 8005622:	f8df a098 	ldr.w	sl, [pc, #152]	; 80056bc <pbuf_free+0xd0>
 8005626:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80056b0 <pbuf_free+0xc4>
{
 800562a:	2600      	movs	r6, #0
 800562c:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 800562e:	2c00      	cmp	r4, #0
 8005630:	d0e8      	beq.n	8005604 <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 8005632:	f003 fa45 	bl	8008ac0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005636:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8005638:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800563a:	b933      	cbnz	r3, 800564a <pbuf_free+0x5e>
 800563c:	4643      	mov	r3, r8
 800563e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8005642:	4651      	mov	r1, sl
 8005644:	4648      	mov	r0, r9
 8005646:	f003 ff4a 	bl	80094de <iprintf>
    ref = --(p->ref);
 800564a:	89e5      	ldrh	r5, [r4, #14]
 800564c:	3d01      	subs	r5, #1
 800564e:	b2ad      	uxth	r5, r5
 8005650:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8005652:	4658      	mov	r0, fp
 8005654:	f003 fa40 	bl	8008ad8 <sys_arch_unprotect>
    if (ref == 0) {
 8005658:	2d00      	cmp	r5, #0
 800565a:	d1d3      	bne.n	8005604 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800565c:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800565e:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005660:	079b      	lsls	r3, r3, #30
 8005662:	d50e      	bpl.n	8005682 <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	b933      	cbnz	r3, 8005676 <pbuf_free+0x8a>
 8005668:	4643      	mov	r3, r8
 800566a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800566e:	4912      	ldr	r1, [pc, #72]	; (80056b8 <pbuf_free+0xcc>)
 8005670:	4648      	mov	r0, r9
 8005672:	f003 ff34 	bl	80094de <iprintf>
        pc->custom_free_function(p);
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	4620      	mov	r0, r4
 800567a:	4798      	blx	r3
 800567c:	3601      	adds	r6, #1
      p = q;
 800567e:	462c      	mov	r4, r5
 8005680:	e7d4      	b.n	800562c <pbuf_free+0x40>
      type = p->type;
 8005682:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8005684:	2b03      	cmp	r3, #3
 8005686:	d104      	bne.n	8005692 <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 8005688:	4621      	mov	r1, r4
 800568a:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800568c:	f7ff fe28 	bl	80052e0 <memp_free>
 8005690:	e7f4      	b.n	800567c <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005692:	3b01      	subs	r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d802      	bhi.n	800569e <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 8005698:	4621      	mov	r1, r4
 800569a:	200b      	movs	r0, #11
 800569c:	e7f6      	b.n	800568c <pbuf_free+0xa0>
          mem_free(p);
 800569e:	4620      	mov	r0, r4
 80056a0:	f7ff fbc4 	bl	8004e2c <mem_free>
 80056a4:	e7ea      	b.n	800567c <pbuf_free+0x90>
 80056a6:	bf00      	nop
 80056a8:	0800a331 	.word	0x0800a331
 80056ac:	0800a39b 	.word	0x0800a39b
 80056b0:	08009880 	.word	0x08009880
 80056b4:	0800a2e5 	.word	0x0800a2e5
 80056b8:	0800a310 	.word	0x0800a310
 80056bc:	0800a2fa 	.word	0x0800a2fa

080056c0 <pbuf_alloc>:
{
 80056c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	460e      	mov	r6, r1
 80056c6:	4617      	mov	r7, r2
  switch (layer) {
 80056c8:	2804      	cmp	r0, #4
 80056ca:	d80e      	bhi.n	80056ea <pbuf_alloc+0x2a>
 80056cc:	e8df f000 	tbb	[pc, r0]
 80056d0:	0b170315 	.word	0x0b170315
 80056d4:	0b          	.byte	0x0b
 80056d5:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80056d6:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 80056d8:	2f03      	cmp	r7, #3
 80056da:	f200 80ba 	bhi.w	8005852 <pbuf_alloc+0x192>
 80056de:	e8df f007 	tbb	[pc, r7]
 80056e2:	ab90      	.short	0xab90
 80056e4:	10ab      	.short	0x10ab
    offset = 0;
 80056e6:	2500      	movs	r5, #0
    break;
 80056e8:	e7f6      	b.n	80056d8 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80056ea:	4b5c      	ldr	r3, [pc, #368]	; (800585c <pbuf_alloc+0x19c>)
 80056ec:	495c      	ldr	r1, [pc, #368]	; (8005860 <pbuf_alloc+0x1a0>)
 80056ee:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80056f2:	485c      	ldr	r0, [pc, #368]	; (8005864 <pbuf_alloc+0x1a4>)
 80056f4:	f003 fef3 	bl	80094de <iprintf>
 80056f8:	e04a      	b.n	8005790 <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80056fa:	2536      	movs	r5, #54	; 0x36
 80056fc:	e7ec      	b.n	80056d8 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80056fe:	250e      	movs	r5, #14
 8005700:	e7ea      	b.n	80056d8 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005702:	200c      	movs	r0, #12
 8005704:	f7ff fdd0 	bl	80052a8 <memp_malloc>
    if (p == NULL) {
 8005708:	4604      	mov	r4, r0
 800570a:	b920      	cbnz	r0, 8005716 <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 800570c:	f7ff ff12 	bl	8005534 <pbuf_pool_is_empty>
}
 8005710:	4620      	mov	r0, r4
 8005712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8005716:	2303      	movs	r3, #3
 8005718:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800571e:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005720:	3503      	adds	r5, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 800572a:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800572c:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005730:	bf28      	it	cs
 8005732:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005734:	f023 0303 	bic.w	r3, r3, #3
 8005738:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800573a:	f500 7718 	add.w	r7, r0, #608	; 0x260
 800573e:	442b      	add	r3, r5
 8005740:	429f      	cmp	r7, r3
    p->tot_len = length;
 8005742:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005744:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005746:	d206      	bcs.n	8005756 <pbuf_alloc+0x96>
 8005748:	4b44      	ldr	r3, [pc, #272]	; (800585c <pbuf_alloc+0x19c>)
 800574a:	4947      	ldr	r1, [pc, #284]	; (8005868 <pbuf_alloc+0x1a8>)
 800574c:	4845      	ldr	r0, [pc, #276]	; (8005864 <pbuf_alloc+0x1a4>)
 800574e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005752:	f003 fec4 	bl	80094de <iprintf>
    p->ref = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 800575a:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800575c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800585c <pbuf_alloc+0x19c>
 8005760:	f8df a110 	ldr.w	sl, [pc, #272]	; 8005874 <pbuf_alloc+0x1b4>
 8005764:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005864 <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 8005768:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 800576a:	46a3      	mov	fp, r4
 800576c:	2e00      	cmp	r6, #0
 800576e:	dc04      	bgt.n	800577a <pbuf_alloc+0xba>
  p->ref = 1;
 8005770:	2301      	movs	r3, #1
 8005772:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	7363      	strb	r3, [r4, #13]
  return p;
 8005778:	e7ca      	b.n	8005710 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800577a:	200c      	movs	r0, #12
 800577c:	f7ff fd94 	bl	80052a8 <memp_malloc>
 8005780:	2300      	movs	r3, #0
      if (q == NULL) {
 8005782:	4605      	mov	r5, r0
 8005784:	b930      	cbnz	r0, 8005794 <pbuf_alloc+0xd4>
        PBUF_POOL_IS_EMPTY();
 8005786:	f7ff fed5 	bl	8005534 <pbuf_pool_is_empty>
        pbuf_free(p);
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff ff2e 	bl	80055ec <pbuf_free>
    return NULL;
 8005790:	2400      	movs	r4, #0
 8005792:	e7bd      	b.n	8005710 <pbuf_alloc+0x50>
      q->flags = 0;
 8005794:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8005796:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005798:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 800579c:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800579e:	429e      	cmp	r6, r3
      q->type = type;
 80057a0:	7302      	strb	r2, [r0, #12]
      r->next = q;
 80057a2:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80057a6:	d106      	bne.n	80057b6 <pbuf_alloc+0xf6>
 80057a8:	4643      	mov	r3, r8
 80057aa:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80057ae:	4651      	mov	r1, sl
 80057b0:	4648      	mov	r0, r9
 80057b2:	f003 fe94 	bl	80094de <iprintf>
      q->tot_len = (u16_t)rem_len;
 80057b6:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80057b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 80057bc:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80057be:	bf28      	it	cs
 80057c0:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80057c4:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80057c6:	f105 0310 	add.w	r3, r5, #16
 80057ca:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80057cc:	079b      	lsls	r3, r3, #30
 80057ce:	d006      	beq.n	80057de <pbuf_alloc+0x11e>
 80057d0:	4643      	mov	r3, r8
 80057d2:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80057d6:	4925      	ldr	r1, [pc, #148]	; (800586c <pbuf_alloc+0x1ac>)
 80057d8:	4648      	mov	r0, r9
 80057da:	f003 fe80 	bl	80094de <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80057de:	8962      	ldrh	r2, [r4, #10]
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	429f      	cmp	r7, r3
 80057e6:	d206      	bcs.n	80057f6 <pbuf_alloc+0x136>
 80057e8:	4643      	mov	r3, r8
 80057ea:	f240 1255 	movw	r2, #341	; 0x155
 80057ee:	491e      	ldr	r1, [pc, #120]	; (8005868 <pbuf_alloc+0x1a8>)
 80057f0:	4648      	mov	r0, r9
 80057f2:	f003 fe74 	bl	80094de <iprintf>
      q->ref = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 80057fa:	896b      	ldrh	r3, [r5, #10]
 80057fc:	46ab      	mov	fp, r5
 80057fe:	1af6      	subs	r6, r6, r3
 8005800:	e7b4      	b.n	800576c <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8005802:	f105 0013 	add.w	r0, r5, #19
 8005806:	1cf3      	adds	r3, r6, #3
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	f020 0003 	bic.w	r0, r0, #3
 8005810:	4418      	add	r0, r3
 8005812:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005814:	4298      	cmp	r0, r3
 8005816:	d3bb      	bcc.n	8005790 <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005818:	f7ff fc4c 	bl	80050b4 <mem_malloc>
    if (p == NULL) {
 800581c:	4604      	mov	r4, r0
 800581e:	2800      	cmp	r0, #0
 8005820:	d0b6      	beq.n	8005790 <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005822:	4405      	add	r5, r0
 8005824:	3513      	adds	r5, #19
    p->next = NULL;
 8005826:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005828:	f025 0503 	bic.w	r5, r5, #3
 800582c:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 800582e:	8106      	strh	r6, [r0, #8]
 8005830:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8005832:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005834:	7303      	strb	r3, [r0, #12]
 8005836:	e79b      	b.n	8005770 <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005838:	200b      	movs	r0, #11
 800583a:	f7ff fd35 	bl	80052a8 <memp_malloc>
    if (p == NULL) {
 800583e:	4604      	mov	r4, r0
 8005840:	2800      	cmp	r0, #0
 8005842:	d0a5      	beq.n	8005790 <pbuf_alloc+0xd0>
    p->payload = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8005848:	8106      	strh	r6, [r0, #8]
 800584a:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800584c:	6003      	str	r3, [r0, #0]
    p->type = type;
 800584e:	7307      	strb	r7, [r0, #12]
    break;
 8005850:	e78e      	b.n	8005770 <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005852:	4b02      	ldr	r3, [pc, #8]	; (800585c <pbuf_alloc+0x19c>)
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <pbuf_alloc+0x1b0>)
 8005856:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800585a:	e74a      	b.n	80056f2 <pbuf_alloc+0x32>
 800585c:	0800a331 	.word	0x0800a331
 8005860:	0800a0cc 	.word	0x0800a0cc
 8005864:	08009880 	.word	0x08009880
 8005868:	0800a0e7 	.word	0x0800a0e7
 800586c:	0800a12c 	.word	0x0800a12c
 8005870:	0800a159 	.word	0x0800a159
 8005874:	0800a118 	.word	0x0800a118

08005878 <pbuf_realloc>:
{
 8005878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800587c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800587e:	4604      	mov	r4, r0
 8005880:	b930      	cbnz	r0, 8005890 <pbuf_realloc+0x18>
 8005882:	4b2e      	ldr	r3, [pc, #184]	; (800593c <pbuf_realloc+0xc4>)
 8005884:	492e      	ldr	r1, [pc, #184]	; (8005940 <pbuf_realloc+0xc8>)
 8005886:	482f      	ldr	r0, [pc, #188]	; (8005944 <pbuf_realloc+0xcc>)
 8005888:	f240 12f3 	movw	r2, #499	; 0x1f3
 800588c:	f003 fe27 	bl	80094de <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005890:	7b23      	ldrb	r3, [r4, #12]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d906      	bls.n	80058a4 <pbuf_realloc+0x2c>
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <pbuf_realloc+0xc4>)
 8005898:	492b      	ldr	r1, [pc, #172]	; (8005948 <pbuf_realloc+0xd0>)
 800589a:	482a      	ldr	r0, [pc, #168]	; (8005944 <pbuf_realloc+0xcc>)
 800589c:	f240 12f7 	movw	r2, #503	; 0x1f7
 80058a0:	f003 fe1d 	bl	80094de <iprintf>
  if (new_len >= p->tot_len) {
 80058a4:	8926      	ldrh	r6, [r4, #8]
 80058a6:	42ae      	cmp	r6, r5
 80058a8:	d945      	bls.n	8005936 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80058aa:	4f24      	ldr	r7, [pc, #144]	; (800593c <pbuf_realloc+0xc4>)
 80058ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005954 <pbuf_realloc+0xdc>
 80058b0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005944 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 80058b4:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 80058b6:	8963      	ldrh	r3, [r4, #10]
 80058b8:	429d      	cmp	r5, r3
 80058ba:	d819      	bhi.n	80058f0 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80058bc:	7b22      	ldrb	r2, [r4, #12]
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d131      	bne.n	8005926 <pbuf_realloc+0xae>
 80058c2:	429d      	cmp	r5, r3
 80058c4:	d02f      	beq.n	8005926 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80058c6:	7b63      	ldrb	r3, [r4, #13]
 80058c8:	079b      	lsls	r3, r3, #30
 80058ca:	d42c      	bmi.n	8005926 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80058cc:	6861      	ldr	r1, [r4, #4]
 80058ce:	1b09      	subs	r1, r1, r4
 80058d0:	4429      	add	r1, r5
 80058d2:	4620      	mov	r0, r4
 80058d4:	b289      	uxth	r1, r1
 80058d6:	f7ff fb61 	bl	8004f9c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80058da:	4604      	mov	r4, r0
 80058dc:	bb18      	cbnz	r0, 8005926 <pbuf_realloc+0xae>
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <pbuf_realloc+0xc4>)
 80058e0:	491a      	ldr	r1, [pc, #104]	; (800594c <pbuf_realloc+0xd4>)
 80058e2:	4818      	ldr	r0, [pc, #96]	; (8005944 <pbuf_realloc+0xcc>)
 80058e4:	f240 221d 	movw	r2, #541	; 0x21d
 80058e8:	f003 fdf9 	bl	80094de <iprintf>
  q->len = rem_len;
 80058ec:	8164      	strh	r4, [r4, #10]
 80058ee:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 80058f0:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80058f2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80058f6:	429e      	cmp	r6, r3
    rem_len -= q->len;
 80058f8:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80058fa:	dd06      	ble.n	800590a <pbuf_realloc+0x92>
 80058fc:	463b      	mov	r3, r7
 80058fe:	f240 220b 	movw	r2, #523	; 0x20b
 8005902:	4649      	mov	r1, r9
 8005904:	4640      	mov	r0, r8
 8005906:	f003 fdea 	bl	80094de <iprintf>
    q->tot_len += (u16_t)grow;
 800590a:	8923      	ldrh	r3, [r4, #8]
 800590c:	4433      	add	r3, r6
 800590e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8005910:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005912:	2c00      	cmp	r4, #0
 8005914:	d1cf      	bne.n	80058b6 <pbuf_realloc+0x3e>
 8005916:	463b      	mov	r3, r7
 8005918:	f240 220f 	movw	r2, #527	; 0x20f
 800591c:	490c      	ldr	r1, [pc, #48]	; (8005950 <pbuf_realloc+0xd8>)
 800591e:	4640      	mov	r0, r8
 8005920:	f003 fddd 	bl	80094de <iprintf>
 8005924:	e7c7      	b.n	80058b6 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8005926:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8005928:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800592a:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800592c:	b108      	cbz	r0, 8005932 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 800592e:	f7ff fe5d 	bl	80055ec <pbuf_free>
  q->next = NULL;
 8005932:	2300      	movs	r3, #0
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593a:	bf00      	nop
 800593c:	0800a331 	.word	0x0800a331
 8005940:	0800a38d 	.word	0x0800a38d
 8005944:	08009880 	.word	0x08009880
 8005948:	0800a3a5 	.word	0x0800a3a5
 800594c:	0800a3e9 	.word	0x0800a3e9
 8005950:	0800a3d1 	.word	0x0800a3d1
 8005954:	0800a3c0 	.word	0x0800a3c0

08005958 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005958:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800595a:	2200      	movs	r2, #0
 800595c:	b290      	uxth	r0, r2
 800595e:	3201      	adds	r2, #1
 8005960:	b903      	cbnz	r3, 8005964 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8005962:	4770      	bx	lr
    p = p->next;
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	e7f9      	b.n	800595c <pbuf_clen+0x4>

08005968 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005968:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800596a:	4604      	mov	r4, r0
 800596c:	b188      	cbz	r0, 8005992 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 800596e:	f003 f8a7 	bl	8008ac0 <sys_arch_protect>
 8005972:	89e3      	ldrh	r3, [r4, #14]
 8005974:	3301      	adds	r3, #1
 8005976:	81e3      	strh	r3, [r4, #14]
 8005978:	f003 f8ae 	bl	8008ad8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800597c:	89e3      	ldrh	r3, [r4, #14]
 800597e:	b943      	cbnz	r3, 8005992 <pbuf_ref+0x2a>
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <pbuf_ref+0x2c>)
 8005982:	4905      	ldr	r1, [pc, #20]	; (8005998 <pbuf_ref+0x30>)
 8005984:	4805      	ldr	r0, [pc, #20]	; (800599c <pbuf_ref+0x34>)
 8005986:	f240 3239 	movw	r2, #825	; 0x339
  }
}
 800598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800598e:	f003 bda6 	b.w	80094de <iprintf>
 8005992:	bd10      	pop	{r4, pc}
 8005994:	0800a331 	.word	0x0800a331
 8005998:	0800a405 	.word	0x0800a405
 800599c:	08009880 	.word	0x08009880

080059a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80059a4:	4604      	mov	r4, r0
 80059a6:	b100      	cbz	r0, 80059aa <pbuf_cat+0xa>
 80059a8:	b969      	cbnz	r1, 80059c6 <pbuf_cat+0x26>
 80059aa:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <pbuf_cat+0x60>)
 80059ac:	4915      	ldr	r1, [pc, #84]	; (8005a04 <pbuf_cat+0x64>)
 80059ae:	4816      	ldr	r0, [pc, #88]	; (8005a08 <pbuf_cat+0x68>)
 80059b0:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80059b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80059b8:	f003 bd91 	b.w	80094de <iprintf>
    p->tot_len += t->tot_len;
 80059bc:	8923      	ldrh	r3, [r4, #8]
 80059be:	8929      	ldrh	r1, [r5, #8]
 80059c0:	440b      	add	r3, r1
 80059c2:	8123      	strh	r3, [r4, #8]
 80059c4:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	d1f7      	bne.n	80059bc <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80059cc:	8922      	ldrh	r2, [r4, #8]
 80059ce:	8963      	ldrh	r3, [r4, #10]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d006      	beq.n	80059e2 <pbuf_cat+0x42>
 80059d4:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <pbuf_cat+0x60>)
 80059d6:	490d      	ldr	r1, [pc, #52]	; (8005a0c <pbuf_cat+0x6c>)
 80059d8:	480b      	ldr	r0, [pc, #44]	; (8005a08 <pbuf_cat+0x68>)
 80059da:	f240 3255 	movw	r2, #853	; 0x355
 80059de:	f003 fd7e 	bl	80094de <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	b133      	cbz	r3, 80059f4 <pbuf_cat+0x54>
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <pbuf_cat+0x60>)
 80059e8:	4909      	ldr	r1, [pc, #36]	; (8005a10 <pbuf_cat+0x70>)
 80059ea:	4807      	ldr	r0, [pc, #28]	; (8005a08 <pbuf_cat+0x68>)
 80059ec:	f240 3256 	movw	r2, #854	; 0x356
 80059f0:	f003 fd75 	bl	80094de <iprintf>
  p->tot_len += t->tot_len;
 80059f4:	892a      	ldrh	r2, [r5, #8]
 80059f6:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80059f8:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80059fa:	4413      	add	r3, r2
 80059fc:	8123      	strh	r3, [r4, #8]
  p->next = t;
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	0800a331 	.word	0x0800a331
 8005a04:	0800a198 	.word	0x0800a198
 8005a08:	08009880 	.word	0x08009880
 8005a0c:	0800a1cd 	.word	0x0800a1cd
 8005a10:	0800a1fa 	.word	0x0800a1fa

08005a14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b120      	cbz	r0, 8005a28 <pbuf_copy+0x14>
 8005a1e:	b119      	cbz	r1, 8005a28 <pbuf_copy+0x14>
 8005a20:	8902      	ldrh	r2, [r0, #8]
 8005a22:	890b      	ldrh	r3, [r1, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d20a      	bcs.n	8005a3e <pbuf_copy+0x2a>
 8005a28:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <pbuf_copy+0xf8>)
 8005a2a:	4939      	ldr	r1, [pc, #228]	; (8005b10 <pbuf_copy+0xfc>)
 8005a2c:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005a30:	4838      	ldr	r0, [pc, #224]	; (8005b14 <pbuf_copy+0x100>)
 8005a32:	f003 fd54 	bl	80094de <iprintf>
 8005a36:	f06f 000f 	mvn.w	r0, #15
 8005a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005a42:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005b0c <pbuf_copy+0xf8>
 8005a46:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8005b24 <pbuf_copy+0x110>
 8005a4a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005b14 <pbuf_copy+0x100>
 8005a4e:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005a50:	896e      	ldrh	r6, [r5, #10]
 8005a52:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005a54:	6868      	ldr	r0, [r5, #4]
 8005a56:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005a58:	1bf6      	subs	r6, r6, r7
 8005a5a:	eba3 030b 	sub.w	r3, r3, fp
 8005a5e:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8005a60:	bfac      	ite	ge
 8005a62:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8005a64:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005a66:	4632      	mov	r2, r6
 8005a68:	4459      	add	r1, fp
 8005a6a:	4438      	add	r0, r7
 8005a6c:	f003 fe85 	bl	800977a <memcpy>
    offset_to += len;
 8005a70:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005a72:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8005a74:	b2bf      	uxth	r7, r7
    offset_from += len;
 8005a76:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005a78:	42bb      	cmp	r3, r7
    offset_from += len;
 8005a7a:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005a7e:	d206      	bcs.n	8005a8e <pbuf_copy+0x7a>
 8005a80:	4643      	mov	r3, r8
 8005a82:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005a86:	4651      	mov	r1, sl
 8005a88:	4648      	mov	r0, r9
 8005a8a:	f003 fd28 	bl	80094de <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005a8e:	8963      	ldrh	r3, [r4, #10]
 8005a90:	455b      	cmp	r3, fp
 8005a92:	d206      	bcs.n	8005aa2 <pbuf_copy+0x8e>
 8005a94:	4643      	mov	r3, r8
 8005a96:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005a9a:	491f      	ldr	r1, [pc, #124]	; (8005b18 <pbuf_copy+0x104>)
 8005a9c:	4648      	mov	r0, r9
 8005a9e:	f003 fd1e 	bl	80094de <iprintf>
    if (offset_from >= p_from->len) {
 8005aa2:	8963      	ldrh	r3, [r4, #10]
 8005aa4:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8005aa6:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8005aa8:	bf9c      	itt	ls
 8005aaa:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8005aac:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8005ab0:	42bb      	cmp	r3, r7
 8005ab2:	d11e      	bne.n	8005af2 <pbuf_copy+0xde>
      p_to = p_to->next;
 8005ab4:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005ab6:	b9dd      	cbnz	r5, 8005af0 <pbuf_copy+0xdc>
 8005ab8:	b1bc      	cbz	r4, 8005aea <pbuf_copy+0xd6>
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <pbuf_copy+0xf8>)
 8005abc:	4917      	ldr	r1, [pc, #92]	; (8005b1c <pbuf_copy+0x108>)
 8005abe:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005ac2:	e7b5      	b.n	8005a30 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005ac4:	8962      	ldrh	r2, [r4, #10]
 8005ac6:	8923      	ldrh	r3, [r4, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d114      	bne.n	8005af6 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	b193      	cbz	r3, 8005af6 <pbuf_copy+0xe2>
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <pbuf_copy+0xf8>)
 8005ad2:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005ad6:	4912      	ldr	r1, [pc, #72]	; (8005b20 <pbuf_copy+0x10c>)
 8005ad8:	480e      	ldr	r0, [pc, #56]	; (8005b14 <pbuf_copy+0x100>)
 8005ada:	f003 fd00 	bl	80094de <iprintf>
 8005ade:	f06f 0005 	mvn.w	r0, #5
 8005ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	d1b2      	bne.n	8005a50 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005aea:	4620      	mov	r0, r4
 8005aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8005af0:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	d1e6      	bne.n	8005ac4 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005af6:	896a      	ldrh	r2, [r5, #10]
 8005af8:	892b      	ldrh	r3, [r5, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d1f3      	bne.n	8005ae6 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005afe:	682b      	ldr	r3, [r5, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <pbuf_copy+0xd2>
 8005b04:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <pbuf_copy+0xf8>)
 8005b06:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005b0a:	e7e4      	b.n	8005ad6 <pbuf_copy+0xc2>
 8005b0c:	0800a331 	.word	0x0800a331
 8005b10:	0800a20a 	.word	0x0800a20a
 8005b14:	08009880 	.word	0x08009880
 8005b18:	0800a251 	.word	0x0800a251
 8005b1c:	0800a26c 	.word	0x0800a26c
 8005b20:	0800a279 	.word	0x0800a279
 8005b24:	0800a23a 	.word	0x0800a23a

08005b28 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	460f      	mov	r7, r1
 8005b2e:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005b30:	4606      	mov	r6, r0
 8005b32:	b950      	cbnz	r0, 8005b4a <pbuf_copy_partial+0x22>
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <pbuf_copy_partial+0x7c>)
 8005b36:	491c      	ldr	r1, [pc, #112]	; (8005ba8 <pbuf_copy_partial+0x80>)
 8005b38:	481c      	ldr	r0, [pc, #112]	; (8005bac <pbuf_copy_partial+0x84>)
 8005b3a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005b3e:	f003 fcce 	bl	80094de <iprintf>
 8005b42:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8005b44:	4628      	mov	r0, r5
 8005b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005b4a:	b169      	cbz	r1, 8005b68 <pbuf_copy_partial+0x40>
 8005b4c:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005b4e:	f1b8 0f00 	cmp.w	r8, #0
 8005b52:	d0f7      	beq.n	8005b44 <pbuf_copy_partial+0x1c>
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	d0f5      	beq.n	8005b44 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8005b58:	b17b      	cbz	r3, 8005b7a <pbuf_copy_partial+0x52>
 8005b5a:	8971      	ldrh	r1, [r6, #10]
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	d30c      	bcc.n	8005b7a <pbuf_copy_partial+0x52>
      offset -= p->len;
 8005b60:	1a5b      	subs	r3, r3, r1
 8005b62:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005b64:	6836      	ldr	r6, [r6, #0]
 8005b66:	e7f2      	b.n	8005b4e <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <pbuf_copy_partial+0x7c>)
 8005b6a:	4911      	ldr	r1, [pc, #68]	; (8005bb0 <pbuf_copy_partial+0x88>)
 8005b6c:	480f      	ldr	r0, [pc, #60]	; (8005bac <pbuf_copy_partial+0x84>)
 8005b6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005b72:	f003 fcb4 	bl	80094de <iprintf>
 8005b76:	463d      	mov	r5, r7
 8005b78:	e7e4      	b.n	8005b44 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8005b7a:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005b7c:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8005b7e:	1ae4      	subs	r4, r4, r3
 8005b80:	b2a4      	uxth	r4, r4
 8005b82:	4544      	cmp	r4, r8
 8005b84:	bf28      	it	cs
 8005b86:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005b88:	4622      	mov	r2, r4
 8005b8a:	4419      	add	r1, r3
 8005b8c:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8005b8e:	4425      	add	r5, r4
      len -= buf_copy_len;
 8005b90:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005b94:	f003 fdf1 	bl	800977a <memcpy>
      copied_total += buf_copy_len;
 8005b98:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8005b9a:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e7e0      	b.n	8005b64 <pbuf_copy_partial+0x3c>
 8005ba2:	bf00      	nop
 8005ba4:	0800a331 	.word	0x0800a331
 8005ba8:	0800a2a3 	.word	0x0800a2a3
 8005bac:	08009880 	.word	0x08009880
 8005bb0:	0800a2c2 	.word	0x0800a2c2

08005bb4 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005bb4:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	b930      	cbnz	r0, 8005bc8 <tcp_close_shutdown_fin+0x14>
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <tcp_close_shutdown_fin+0x54>)
 8005bbc:	4913      	ldr	r1, [pc, #76]	; (8005c0c <tcp_close_shutdown_fin+0x58>)
 8005bbe:	4814      	ldr	r0, [pc, #80]	; (8005c10 <tcp_close_shutdown_fin+0x5c>)
 8005bc0:	f240 124d 	movw	r2, #333	; 0x14d
 8005bc4:	f003 fc8b 	bl	80094de <iprintf>

  switch (pcb->state) {
 8005bc8:	7d23      	ldrb	r3, [r4, #20]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d003      	beq.n	8005bd6 <tcp_close_shutdown_fin+0x22>
 8005bce:	2b07      	cmp	r3, #7
 8005bd0:	d00c      	beq.n	8005bec <tcp_close_shutdown_fin+0x38>
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d108      	bne.n	8005be8 <tcp_close_shutdown_fin+0x34>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f002 f994 	bl	8007f04 <tcp_send_fin>
    if (err == ERR_OK) {
 8005bdc:	b988      	cbnz	r0, 8005c02 <tcp_close_shutdown_fin+0x4e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005bde:	2305      	movs	r3, #5
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005be0:	7523      	strb	r3, [r4, #20]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005be2:	4620      	mov	r0, r4
 8005be4:	f002 f9e6 	bl	8007fb4 <tcp_output>
 8005be8:	2000      	movs	r0, #0
 8005bea:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8005bec:	4620      	mov	r0, r4
 8005bee:	f002 f989 	bl	8007f04 <tcp_send_fin>
    if (err == ERR_OK) {
 8005bf2:	b930      	cbnz	r0, 8005c02 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8005bf4:	2309      	movs	r3, #9
 8005bf6:	e7f3      	b.n	8005be0 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005bf8:	7ea3      	ldrb	r3, [r4, #26]
 8005bfa:	f043 0308 	orr.w	r3, r3, #8
 8005bfe:	76a3      	strb	r3, [r4, #26]
 8005c00:	e7f2      	b.n	8005be8 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8005c02:	1c43      	adds	r3, r0, #1
 8005c04:	d0f8      	beq.n	8005bf8 <tcp_close_shutdown_fin+0x44>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8005c06:	bd10      	pop	{r4, pc}
 8005c08:	0800a46e 	.word	0x0800a46e
 8005c0c:	0800a49d 	.word	0x0800a49d
 8005c10:	08009880 	.word	0x08009880

08005c14 <tcp_init>:
{
 8005c14:	4770      	bx	lr
	...

08005c18 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005c1c:	8d01      	ldrh	r1, [r0, #40]	; 0x28

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005c1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005c20:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005c22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c24:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005c26:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005c2a:	4428      	add	r0, r5
 8005c2c:	bf94      	ite	ls
 8005c2e:	1a82      	subls	r2, r0, r2
 8005c30:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	db01      	blt.n	8005c3c <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005c38:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005c3c:	1aea      	subs	r2, r5, r3
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	dd02      	ble.n	8005c48 <tcp_update_rcv_ann_wnd+0x30>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005c42:	2000      	movs	r0, #0
 8005c44:	8560      	strh	r0, [r4, #42]	; 0x2a
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005c48:	1b5d      	subs	r5, r3, r5
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005c4a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8005c4e:	d306      	bcc.n	8005c5e <tcp_update_rcv_ann_wnd+0x46>
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <tcp_update_rcv_ann_wnd+0x4c>)
 8005c52:	4905      	ldr	r1, [pc, #20]	; (8005c68 <tcp_update_rcv_ann_wnd+0x50>)
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <tcp_update_rcv_ann_wnd+0x54>)
 8005c56:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005c5a:	f003 fc40 	bl	80094de <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005c5e:	8565      	strh	r5, [r4, #42]	; 0x2a
    }
    return 0;
 8005c60:	2000      	movs	r0, #0
  }
}
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	0800a46e 	.word	0x0800a46e
 8005c68:	0800a6b0 	.word	0x0800a6b0
 8005c6c:	08009880 	.word	0x08009880

08005c70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005c70:	b538      	push	{r3, r4, r5, lr}
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005c72:	7d03      	ldrb	r3, [r0, #20]
 8005c74:	2b01      	cmp	r3, #1
{
 8005c76:	4604      	mov	r4, r0
 8005c78:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005c7a:	d106      	bne.n	8005c8a <tcp_recved+0x1a>
 8005c7c:	4b17      	ldr	r3, [pc, #92]	; (8005cdc <tcp_recved+0x6c>)
 8005c7e:	4918      	ldr	r1, [pc, #96]	; (8005ce0 <tcp_recved+0x70>)
 8005c80:	4818      	ldr	r0, [pc, #96]	; (8005ce4 <tcp_recved+0x74>)
 8005c82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c86:	f003 fc2a 	bl	80094de <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005c8a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8005c8c:	4429      	add	r1, r5
 8005c8e:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005c90:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8005c94:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005c96:	d911      	bls.n	8005cbc <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005c98:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8005c9c:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f7ff ffba 	bl	8005c18 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005ca4:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8005ca8:	db17      	blt.n	8005cda <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8005caa:	7ea3      	ldrb	r3, [r4, #26]
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005cb2:	4620      	mov	r0, r4
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8005cb8:	f002 b97c 	b.w	8007fb4 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d1ee      	bne.n	8005c9e <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005cc0:	7d23      	ldrb	r3, [r4, #20]
 8005cc2:	2b07      	cmp	r3, #7
 8005cc4:	d0e8      	beq.n	8005c98 <tcp_recved+0x28>
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d0e6      	beq.n	8005c98 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005cca:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <tcp_recved+0x6c>)
 8005ccc:	4906      	ldr	r1, [pc, #24]	; (8005ce8 <tcp_recved+0x78>)
 8005cce:	4805      	ldr	r0, [pc, #20]	; (8005ce4 <tcp_recved+0x74>)
 8005cd0:	f240 322d 	movw	r2, #813	; 0x32d
 8005cd4:	f003 fc03 	bl	80094de <iprintf>
 8005cd8:	e7e1      	b.n	8005c9e <tcp_recved+0x2e>
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	0800a46e 	.word	0x0800a46e
 8005ce0:	0800a517 	.word	0x0800a517
 8005ce4:	08009880 	.word	0x08009880
 8005ce8:	0800a53d 	.word	0x0800a53d

08005cec <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005cec:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8005cee:	4604      	mov	r4, r0
 8005cf0:	b148      	cbz	r0, 8005d06 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8005cf2:	6840      	ldr	r0, [r0, #4]
 8005cf4:	b108      	cbz	r0, 8005cfa <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8005cf6:	f7ff fc79 	bl	80055ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	2003      	movs	r0, #3
  }
}
 8005cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8005d02:	f7ff baed 	b.w	80052e0 <memp_free>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <tcp_segs_free>:
{
 8005d08:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8005d0a:	b900      	cbnz	r0, 8005d0e <tcp_segs_free+0x6>
}
 8005d0c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8005d0e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8005d10:	f7ff ffec 	bl	8005cec <tcp_seg_free>
    seg = next;
 8005d14:	4620      	mov	r0, r4
 8005d16:	e7f8      	b.n	8005d0a <tcp_segs_free+0x2>

08005d18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005d1c:	2003      	movs	r0, #3
 8005d1e:	f7ff fac3 	bl	80052a8 <memp_malloc>
  if (cseg == NULL) {
 8005d22:	4605      	mov	r5, r0
 8005d24:	b160      	cbz	r0, 8005d40 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005d26:	4620      	mov	r0, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	f104 0210 	add.w	r2, r4, #16
 8005d2e:	f850 1b04 	ldr.w	r1, [r0], #4
 8005d32:	f843 1b04 	str.w	r1, [r3], #4
 8005d36:	4290      	cmp	r0, r2
 8005d38:	d1f9      	bne.n	8005d2e <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8005d3a:	6868      	ldr	r0, [r5, #4]
 8005d3c:	f7ff fe14 	bl	8005968 <pbuf_ref>
  return cseg;
}
 8005d40:	4628      	mov	r0, r5
 8005d42:	bd38      	pop	{r3, r4, r5, pc}

08005d44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005d44:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8005d46:	7d03      	ldrb	r3, [r0, #20]
 8005d48:	2b01      	cmp	r3, #1
{
 8005d4a:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8005d4c:	d919      	bls.n	8005d82 <tcp_pcb_purge+0x3e>
 8005d4e:	2b0a      	cmp	r3, #10
 8005d50:	d017      	beq.n	8005d82 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005d52:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8005d54:	b118      	cbz	r0, 8005d5e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005d56:	f7ff fc49 	bl	80055ec <pbuf_free>
      pcb->refused_data = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8005d5e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005d60:	f7ff ffd2 	bl	8005d08 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005d64:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d6a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005d6c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8005d6e:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8005d70:	f7ff ffca 	bl	8005d08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005d74:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005d76:	f7ff ffc7 	bl	8005d08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005d7a:	66a5      	str	r5, [r4, #104]	; 0x68
 8005d7c:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005d7e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8005d82:	bd38      	pop	{r3, r4, r5, pc}

08005d84 <tcp_slowtmr>:
{
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8005d88:	4eb0      	ldr	r6, [pc, #704]	; (800604c <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 8005d8a:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8006080 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8005d8e:	6833      	ldr	r3, [r6, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8005d94:	4bae      	ldr	r3, [pc, #696]	; (8006050 <tcp_slowtmr+0x2cc>)
 8005d96:	781a      	ldrb	r2, [r3, #0]
{
 8005d98:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8005d9a:	3201      	adds	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8005da0:	4fac      	ldr	r7, [pc, #688]	; (8006054 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005da2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8006084 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8005da6:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 8005da8:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8005dac:	b96c      	cbnz	r4, 8005dca <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8005dae:	4faa      	ldr	r7, [pc, #680]	; (8006058 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005db0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8006084 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8005db4:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005db6:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8006088 <tcp_slowtmr+0x304>
 8005dba:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8006060 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	f040 8185 	bne.w	80060ce <tcp_slowtmr+0x34a>
}
 8005dc4:	b005      	add	sp, #20
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005dca:	7d23      	ldrb	r3, [r4, #20]
 8005dcc:	b933      	cbnz	r3, 8005ddc <tcp_slowtmr+0x58>
 8005dce:	464b      	mov	r3, r9
 8005dd0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005dd4:	49a1      	ldr	r1, [pc, #644]	; (800605c <tcp_slowtmr+0x2d8>)
 8005dd6:	48a2      	ldr	r0, [pc, #648]	; (8006060 <tcp_slowtmr+0x2dc>)
 8005dd8:	f003 fb81 	bl	80094de <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005ddc:	7d23      	ldrb	r3, [r4, #20]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d106      	bne.n	8005df0 <tcp_slowtmr+0x6c>
 8005de2:	464b      	mov	r3, r9
 8005de4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005de8:	499e      	ldr	r1, [pc, #632]	; (8006064 <tcp_slowtmr+0x2e0>)
 8005dea:	489d      	ldr	r0, [pc, #628]	; (8006060 <tcp_slowtmr+0x2dc>)
 8005dec:	f003 fb77 	bl	80094de <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005df0:	7d23      	ldrb	r3, [r4, #20]
 8005df2:	2b0a      	cmp	r3, #10
 8005df4:	d106      	bne.n	8005e04 <tcp_slowtmr+0x80>
 8005df6:	464b      	mov	r3, r9
 8005df8:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005dfc:	499a      	ldr	r1, [pc, #616]	; (8006068 <tcp_slowtmr+0x2e4>)
 8005dfe:	4898      	ldr	r0, [pc, #608]	; (8006060 <tcp_slowtmr+0x2dc>)
 8005e00:	f003 fb6d 	bl	80094de <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005e04:	9b02      	ldr	r3, [sp, #8]
 8005e06:	7f62      	ldrb	r2, [r4, #29]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d104      	bne.n	8005e18 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8005e0e:	68e5      	ldr	r5, [r4, #12]
 8005e10:	4644      	mov	r4, r8
      continue;
 8005e12:	46a0      	mov	r8, r4
 8005e14:	462c      	mov	r4, r5
 8005e16:	e7c9      	b.n	8005dac <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005e18:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8005e1a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005e1c:	2902      	cmp	r1, #2
 8005e1e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005e22:	d102      	bne.n	8005e2a <tcp_slowtmr+0xa6>
 8005e24:	2a05      	cmp	r2, #5
 8005e26:	f200 80e6 	bhi.w	8005ff6 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005e2a:	2a0b      	cmp	r2, #11
 8005e2c:	f200 80e3 	bhi.w	8005ff6 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8005e30:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8005e34:	f1bb 0f00 	cmp.w	fp, #0
 8005e38:	f000 80a6 	beq.w	8005f88 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005e3c:	488b      	ldr	r0, [pc, #556]	; (800606c <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8005e3e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005e42:	4483      	add	fp, r0
 8005e44:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8005e48:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 8005e4a:	bf84      	itt	hi
 8005e4c:	3301      	addhi	r3, #1
 8005e4e:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8005e52:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8005e56:	4293      	cmp	r3, r2
 8005e58:	f080 8085 	bcs.w	8005f66 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8005e5c:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8005e60:	7d23      	ldrb	r3, [r4, #20]
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d10b      	bne.n	8005e7e <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8005e66:	7ea2      	ldrb	r2, [r4, #26]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	d508      	bpl.n	8005e7e <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e6c:	6832      	ldr	r2, [r6, #0]
 8005e6e:	6a21      	ldr	r1, [r4, #32]
 8005e70:	1a52      	subs	r2, r2, r1
 8005e72:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8005e74:	bf84      	itt	hi
 8005e76:	f10b 0b01 	addhi.w	fp, fp, #1
 8005e7a:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e7e:	7a25      	ldrb	r5, [r4, #8]
 8005e80:	f015 0508 	ands.w	r5, r5, #8
 8005e84:	d019      	beq.n	8005eba <tcp_slowtmr+0x136>
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d002      	beq.n	8005e90 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 8005e8a:	2b07      	cmp	r3, #7
 8005e8c:	f040 80c8 	bne.w	8006020 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e90:	6831      	ldr	r1, [r6, #0]
 8005e92:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005e94:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e98:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005e9a:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8005e9e:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8005ea2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ea6:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f240 80a6 	bls.w	8005ffc <tcp_slowtmr+0x278>
        ++pcb_remove;
 8005eb0:	f10b 0b01 	add.w	fp, fp, #1
 8005eb4:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8005eb8:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 8005eba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005ebc:	b168      	cbz	r0, 8005eda <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005ebe:	6833      	ldr	r3, [r6, #0]
 8005ec0:	6a22      	ldr	r2, [r4, #32]
 8005ec2:	1a9a      	subs	r2, r3, r2
 8005ec4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005ec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8005ecc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8005ed0:	d303      	bcc.n	8005eda <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 8005ed2:	f7ff ff19 	bl	8005d08 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8005eda:	7d23      	ldrb	r3, [r4, #20]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	f040 80a1 	bne.w	8006024 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ee2:	6833      	ldr	r3, [r6, #0]
 8005ee4:	6a22      	ldr	r2, [r4, #32]
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005eea:	d803      	bhi.n	8005ef4 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8005eec:	f1bb 0f00 	cmp.w	fp, #0
 8005ef0:	f000 80cc 	beq.w	800608c <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8005ef4:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8005ef6:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8005efa:	f7ff ff23 	bl	8005d44 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005efe:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8005f00:	f1b8 0f00 	cmp.w	r8, #0
 8005f04:	f000 8096 	beq.w	8006034 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d106      	bne.n	8005f1a <tcp_slowtmr+0x196>
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	f240 4289 	movw	r2, #1161	; 0x489
 8005f12:	4957      	ldr	r1, [pc, #348]	; (8006070 <tcp_slowtmr+0x2ec>)
 8005f14:	4852      	ldr	r0, [pc, #328]	; (8006060 <tcp_slowtmr+0x2dc>)
 8005f16:	f003 fae2 	bl	80094de <iprintf>
        prev->next = pcb->next;
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8005f20:	b14d      	cbz	r5, 8005f36 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005f22:	8b23      	ldrh	r3, [r4, #24]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	8ae3      	ldrh	r3, [r4, #22]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	1d23      	adds	r3, r4, #4
 8005f2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f30:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005f32:	f002 f9bd 	bl	80082b0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	2001      	movs	r0, #1
      pcb = pcb->next;
 8005f3e:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005f40:	f7ff f9ce 	bl	80052e0 <memp_free>
      tcp_active_pcbs_changed = 0;
 8005f44:	2200      	movs	r2, #0
 8005f46:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005f4a:	f1bb 0f00 	cmp.w	fp, #0
 8005f4e:	d004      	beq.n	8005f5a <tcp_slowtmr+0x1d6>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	f06f 010c 	mvn.w	r1, #12
 8005f56:	4618      	mov	r0, r3
 8005f58:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8005f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f43f af56 	beq.w	8005e10 <tcp_slowtmr+0x8c>
 8005f64:	e71c      	b.n	8005da0 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005f66:	4620      	mov	r0, r4
 8005f68:	f002 fa92 	bl	8008490 <tcp_zero_window_probe>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f47f af75 	bne.w	8005e5c <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005f72:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8005f76:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	f63f af6e 	bhi.w	8005e5c <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8005f80:	3301      	adds	r3, #1
 8005f82:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8005f86:	e769      	b.n	8005e5c <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 8005f88:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8005f8c:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8005f8e:	bfa4      	itt	ge
 8005f90:	3301      	addge	r3, #1
 8005f92:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005f94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f43f af60 	beq.w	8005e5c <tcp_slowtmr+0xd8>
 8005f9c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8005fa0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	f6ff af59 	blt.w	8005e5c <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 8005faa:	2902      	cmp	r1, #2
 8005fac:	d00a      	beq.n	8005fc4 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005fae:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8005fb2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8005fb6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8005fba:	492e      	ldr	r1, [pc, #184]	; (8006074 <tcp_slowtmr+0x2f0>)
 8005fbc:	5c8a      	ldrb	r2, [r1, r2]
 8005fbe:	4093      	lsls	r3, r2
 8005fc0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8005fc4:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005fc6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8005fca:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005fcc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005fd0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8005fd2:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	bf28      	it	cs
 8005fda:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005fdc:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8005fde:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005fe0:	b292      	uxth	r2, r2
 8005fe2:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8005fe4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005fe8:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 8005fea:	bf38      	it	cc
 8005fec:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005ff0:	f002 f9b8 	bl	8008364 <tcp_rexmit_rto>
 8005ff4:	e734      	b.n	8005e60 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8005ff6:	f04f 0b01 	mov.w	fp, #1
 8005ffa:	e731      	b.n	8005e60 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005ffc:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006000:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <tcp_slowtmr+0x2f4>)
 8006002:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8006006:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800600a:	4299      	cmp	r1, r3
 800600c:	d908      	bls.n	8006020 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800600e:	4620      	mov	r0, r4
 8006010:	f002 fa14 	bl	800843c <tcp_keepalive>
        if (err == ERR_OK) {
 8006014:	b920      	cbnz	r0, 8006020 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8006016:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800601a:	3301      	adds	r3, #1
 800601c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8006020:	2500      	movs	r5, #0
 8006022:	e74a      	b.n	8005eba <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8006024:	2b09      	cmp	r3, #9
 8006026:	f47f af61 	bne.w	8005eec <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800602a:	6833      	ldr	r3, [r6, #0]
 800602c:	6a22      	ldr	r2, [r4, #32]
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	2bf0      	cmp	r3, #240	; 0xf0
 8006032:	e75a      	b.n	8005eea <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006034:	429c      	cmp	r4, r3
 8006036:	d006      	beq.n	8006046 <tcp_slowtmr+0x2c2>
 8006038:	464b      	mov	r3, r9
 800603a:	f240 428d 	movw	r2, #1165	; 0x48d
 800603e:	490f      	ldr	r1, [pc, #60]	; (800607c <tcp_slowtmr+0x2f8>)
 8006040:	4807      	ldr	r0, [pc, #28]	; (8006060 <tcp_slowtmr+0x2dc>)
 8006042:	f003 fa4c 	bl	80094de <iprintf>
        tcp_active_pcbs = pcb->next;
 8006046:	68e3      	ldr	r3, [r4, #12]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	e769      	b.n	8005f20 <tcp_slowtmr+0x19c>
 800604c:	20007870 	.word	0x20007870
 8006050:	20003ec2 	.word	0x20003ec2
 8006054:	2000786c 	.word	0x2000786c
 8006058:	2000787c 	.word	0x2000787c
 800605c:	0800a55e 	.word	0x0800a55e
 8006060:	08009880 	.word	0x08009880
 8006064:	0800a588 	.word	0x0800a588
 8006068:	0800a5b2 	.word	0x0800a5b2
 800606c:	0800a510 	.word	0x0800a510
 8006070:	0800a5df 	.word	0x0800a5df
 8006074:	0800a448 	.word	0x0800a448
 8006078:	000124f8 	.word	0x000124f8
 800607c:	0800a60a 	.word	0x0800a60a
 8006080:	20007868 	.word	0x20007868
 8006084:	0800a46e 	.word	0x0800a46e
 8006088:	0800a634 	.word	0x0800a634
      ++prev->polltmr;
 800608c:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800608e:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8006090:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8006092:	3301      	adds	r3, #1
 8006094:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8006096:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8006098:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800609a:	f63f aeba 	bhi.w	8005e12 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800609e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80060a2:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80060a6:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80060aa:	b173      	cbz	r3, 80060ca <tcp_slowtmr+0x346>
 80060ac:	4621      	mov	r1, r4
 80060ae:	6920      	ldr	r0, [r4, #16]
 80060b0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80060b2:	f89a 3000 	ldrb.w	r3, [sl]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f47f ae72 	bne.w	8005da0 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80060bc:	2800      	cmp	r0, #0
 80060be:	f47f aea8 	bne.w	8005e12 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 80060c2:	4620      	mov	r0, r4
 80060c4:	f001 ff76 	bl	8007fb4 <tcp_output>
 80060c8:	e6a3      	b.n	8005e12 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80060ca:	4658      	mov	r0, fp
 80060cc:	e7f1      	b.n	80060b2 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80060ce:	7d2b      	ldrb	r3, [r5, #20]
 80060d0:	2b0a      	cmp	r3, #10
 80060d2:	d006      	beq.n	80060e2 <tcp_slowtmr+0x35e>
 80060d4:	4643      	mov	r3, r8
 80060d6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80060da:	4651      	mov	r1, sl
 80060dc:	4648      	mov	r0, r9
 80060de:	f003 f9fe 	bl	80094de <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80060e2:	6833      	ldr	r3, [r6, #0]
 80060e4:	6a2a      	ldr	r2, [r5, #32]
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	2bf0      	cmp	r3, #240	; 0xf0
 80060ea:	d816      	bhi.n	800611a <tcp_slowtmr+0x396>
      pcb = pcb->next;
 80060ec:	462c      	mov	r4, r5
 80060ee:	68ed      	ldr	r5, [r5, #12]
 80060f0:	e665      	b.n	8005dbe <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	429d      	cmp	r5, r3
 80060f6:	d106      	bne.n	8006106 <tcp_slowtmr+0x382>
 80060f8:	4643      	mov	r3, r8
 80060fa:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80060fe:	4910      	ldr	r1, [pc, #64]	; (8006140 <tcp_slowtmr+0x3bc>)
 8006100:	4648      	mov	r0, r9
 8006102:	f003 f9ec 	bl	80094de <iprintf>
        prev->next = pcb->next;
 8006106:	68eb      	ldr	r3, [r5, #12]
 8006108:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800610a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800610e:	4629      	mov	r1, r5
 8006110:	2001      	movs	r0, #1
 8006112:	f7ff f8e5 	bl	80052e0 <memp_free>
      pcb = pcb->next;
 8006116:	465d      	mov	r5, fp
 8006118:	e651      	b.n	8005dbe <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800611a:	4628      	mov	r0, r5
 800611c:	f7ff fe12 	bl	8005d44 <tcp_pcb_purge>
      if (prev != NULL) {
 8006120:	2c00      	cmp	r4, #0
 8006122:	d1e6      	bne.n	80060f2 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	429d      	cmp	r5, r3
 8006128:	d006      	beq.n	8006138 <tcp_slowtmr+0x3b4>
 800612a:	4643      	mov	r3, r8
 800612c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <tcp_slowtmr+0x3c0>)
 8006132:	4648      	mov	r0, r9
 8006134:	f003 f9d3 	bl	80094de <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006138:	68eb      	ldr	r3, [r5, #12]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	e7e5      	b.n	800610a <tcp_slowtmr+0x386>
 800613e:	bf00      	nop
 8006140:	0800a663 	.word	0x0800a663
 8006144:	0800a68a 	.word	0x0800a68a

08006148 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006148:	6803      	ldr	r3, [r0, #0]
 800614a:	428b      	cmp	r3, r1
{
 800614c:	b510      	push	{r4, lr}
 800614e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006150:	d137      	bne.n	80061c2 <tcp_pcb_remove+0x7a>
 8006152:	68cb      	ldr	r3, [r1, #12]
 8006154:	6003      	str	r3, [r0, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800615a:	4620      	mov	r0, r4
 800615c:	f7ff fdf2 	bl	8005d44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006160:	7d23      	ldrb	r3, [r4, #20]
 8006162:	2b0a      	cmp	r3, #10
 8006164:	d00a      	beq.n	800617c <tcp_pcb_remove+0x34>
 8006166:	2b01      	cmp	r3, #1
 8006168:	d008      	beq.n	800617c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800616a:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800616c:	07da      	lsls	r2, r3, #31
 800616e:	d505      	bpl.n	800617c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8006176:	4620      	mov	r0, r4
 8006178:	f001 ff1c 	bl	8007fb4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800617c:	7d23      	ldrb	r3, [r4, #20]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d01a      	beq.n	80061b8 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006182:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006184:	b133      	cbz	r3, 8006194 <tcp_pcb_remove+0x4c>
 8006186:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <tcp_pcb_remove+0x8c>)
 8006188:	4913      	ldr	r1, [pc, #76]	; (80061d8 <tcp_pcb_remove+0x90>)
 800618a:	4814      	ldr	r0, [pc, #80]	; (80061dc <tcp_pcb_remove+0x94>)
 800618c:	f240 7253 	movw	r2, #1875	; 0x753
 8006190:	f003 f9a5 	bl	80094de <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006194:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006196:	b133      	cbz	r3, 80061a6 <tcp_pcb_remove+0x5e>
 8006198:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <tcp_pcb_remove+0x8c>)
 800619a:	4911      	ldr	r1, [pc, #68]	; (80061e0 <tcp_pcb_remove+0x98>)
 800619c:	480f      	ldr	r0, [pc, #60]	; (80061dc <tcp_pcb_remove+0x94>)
 800619e:	f240 7254 	movw	r2, #1876	; 0x754
 80061a2:	f003 f99c 	bl	80094de <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80061a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80061a8:	b133      	cbz	r3, 80061b8 <tcp_pcb_remove+0x70>
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <tcp_pcb_remove+0x8c>)
 80061ac:	490d      	ldr	r1, [pc, #52]	; (80061e4 <tcp_pcb_remove+0x9c>)
 80061ae:	480b      	ldr	r0, [pc, #44]	; (80061dc <tcp_pcb_remove+0x94>)
 80061b0:	f240 7256 	movw	r2, #1878	; 0x756
 80061b4:	f003 f993 	bl	80094de <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80061b8:	2300      	movs	r3, #0
 80061ba:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80061bc:	82e3      	strh	r3, [r4, #22]
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0c7      	beq.n	8006156 <tcp_pcb_remove+0xe>
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	4294      	cmp	r4, r2
 80061ca:	d1f9      	bne.n	80061c0 <tcp_pcb_remove+0x78>
 80061cc:	68e2      	ldr	r2, [r4, #12]
 80061ce:	60da      	str	r2, [r3, #12]
 80061d0:	e7c1      	b.n	8006156 <tcp_pcb_remove+0xe>
 80061d2:	bf00      	nop
 80061d4:	0800a46e 	.word	0x0800a46e
 80061d8:	0800a4c8 	.word	0x0800a4c8
 80061dc:	08009880 	.word	0x08009880
 80061e0:	0800a4e0 	.word	0x0800a4e0
 80061e4:	0800a4f9 	.word	0x0800a4f9

080061e8 <tcp_close_shutdown>:
{
 80061e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ea:	7d03      	ldrb	r3, [r0, #20]
 80061ec:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d049      	beq.n	8006286 <tcp_close_shutdown+0x9e>
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d001      	beq.n	80061fa <tcp_close_shutdown+0x12>
 80061f6:	2b07      	cmp	r3, #7
 80061f8:	d145      	bne.n	8006286 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80061fa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80061fc:	b91a      	cbnz	r2, 8006206 <tcp_close_shutdown+0x1e>
 80061fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006200:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8006204:	d03f      	beq.n	8006286 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006206:	7ea3      	ldrb	r3, [r4, #26]
 8006208:	06db      	lsls	r3, r3, #27
 800620a:	d406      	bmi.n	800621a <tcp_close_shutdown+0x32>
 800620c:	4b3f      	ldr	r3, [pc, #252]	; (800630c <tcp_close_shutdown+0x124>)
 800620e:	4940      	ldr	r1, [pc, #256]	; (8006310 <tcp_close_shutdown+0x128>)
 8006210:	4840      	ldr	r0, [pc, #256]	; (8006314 <tcp_close_shutdown+0x12c>)
 8006212:	f240 120f 	movw	r2, #271	; 0x10f
 8006216:	f003 f962 	bl	80094de <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800621a:	8b23      	ldrh	r3, [r4, #24]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	8ae3      	ldrh	r3, [r4, #22]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4622      	mov	r2, r4
 8006224:	1d23      	adds	r3, r4, #4
 8006226:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006228:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800622a:	f002 f841 	bl	80082b0 <tcp_rst>
      tcp_pcb_purge(pcb);
 800622e:	4620      	mov	r0, r4
 8006230:	f7ff fd88 	bl	8005d44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006234:	4a38      	ldr	r2, [pc, #224]	; (8006318 <tcp_close_shutdown+0x130>)
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	429c      	cmp	r4, r3
 800623a:	d115      	bne.n	8006268 <tcp_close_shutdown+0x80>
 800623c:	68e3      	ldr	r3, [r4, #12]
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	60e3      	str	r3, [r4, #12]
 8006244:	4b35      	ldr	r3, [pc, #212]	; (800631c <tcp_close_shutdown+0x134>)
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800624a:	7d23      	ldrb	r3, [r4, #20]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d113      	bne.n	8006278 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8006250:	230a      	movs	r3, #10
 8006252:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006254:	4b32      	ldr	r3, [pc, #200]	; (8006320 <tcp_close_shutdown+0x138>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	60e2      	str	r2, [r4, #12]
 800625a:	601c      	str	r4, [r3, #0]
 800625c:	f002 f9ca 	bl	80085f4 <tcp_timer_needed>
}
 8006260:	2000      	movs	r0, #0
 8006262:	b003      	add	sp, #12
 8006264:	bd30      	pop	{r4, r5, pc}
 8006266:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0e9      	beq.n	8006240 <tcp_close_shutdown+0x58>
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	4294      	cmp	r4, r2
 8006270:	d1f9      	bne.n	8006266 <tcp_close_shutdown+0x7e>
 8006272:	68e2      	ldr	r2, [r4, #12]
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	e7e3      	b.n	8006240 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8006278:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <tcp_close_shutdown+0x13c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429c      	cmp	r4, r3
 800627e:	d117      	bne.n	80062b0 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8006280:	f001 fcfc 	bl	8007c7c <tcp_trigger_input_pcb_close>
 8006284:	e7ec      	b.n	8006260 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8006286:	2b01      	cmp	r3, #1
 8006288:	d020      	beq.n	80062cc <tcp_close_shutdown+0xe4>
 800628a:	d307      	bcc.n	800629c <tcp_close_shutdown+0xb4>
 800628c:	2b02      	cmp	r3, #2
 800628e:	d033      	beq.n	80062f8 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8006290:	4620      	mov	r0, r4
}
 8006292:	b003      	add	sp, #12
 8006294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8006298:	f7ff bc8c 	b.w	8005bb4 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 800629c:	8ae3      	ldrh	r3, [r4, #22]
 800629e:	b13b      	cbz	r3, 80062b0 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80062a0:	4a21      	ldr	r2, [pc, #132]	; (8006328 <tcp_close_shutdown+0x140>)
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	429c      	cmp	r4, r3
 80062a6:	d109      	bne.n	80062bc <tcp_close_shutdown+0xd4>
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	2300      	movs	r3, #0
 80062ae:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80062b0:	4621      	mov	r1, r4
 80062b2:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 80062b4:	f7ff f814 	bl	80052e0 <memp_free>
    break;
 80062b8:	e7d2      	b.n	8006260 <tcp_close_shutdown+0x78>
 80062ba:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f5      	beq.n	80062ac <tcp_close_shutdown+0xc4>
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	4294      	cmp	r4, r2
 80062c4:	d1f9      	bne.n	80062ba <tcp_close_shutdown+0xd2>
 80062c6:	68e2      	ldr	r2, [r4, #12]
 80062c8:	60da      	str	r2, [r3, #12]
 80062ca:	e7ef      	b.n	80062ac <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80062cc:	4917      	ldr	r1, [pc, #92]	; (800632c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 80062ce:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80062d0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80062d4:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062d6:	b94a      	cbnz	r2, 80062ec <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80062d8:	3301      	adds	r3, #1
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d1f8      	bne.n	80062d0 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80062de:	4621      	mov	r1, r4
 80062e0:	4813      	ldr	r0, [pc, #76]	; (8006330 <tcp_close_shutdown+0x148>)
 80062e2:	f7ff ff31 	bl	8006148 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80062e6:	4621      	mov	r1, r4
 80062e8:	2002      	movs	r0, #2
 80062ea:	e7e3      	b.n	80062b4 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 80062ec:	6f95      	ldr	r5, [r2, #120]	; 0x78
 80062ee:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 80062f0:	bf08      	it	eq
 80062f2:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062f4:	68d2      	ldr	r2, [r2, #12]
 80062f6:	e7ee      	b.n	80062d6 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80062f8:	4621      	mov	r1, r4
 80062fa:	4807      	ldr	r0, [pc, #28]	; (8006318 <tcp_close_shutdown+0x130>)
 80062fc:	f7ff ff24 	bl	8006148 <tcp_pcb_remove>
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <tcp_close_shutdown+0x134>)
 8006302:	2001      	movs	r0, #1
 8006304:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006306:	4621      	mov	r1, r4
 8006308:	e7d4      	b.n	80062b4 <tcp_close_shutdown+0xcc>
 800630a:	bf00      	nop
 800630c:	0800a46e 	.word	0x0800a46e
 8006310:	0800a455 	.word	0x0800a455
 8006314:	08009880 	.word	0x08009880
 8006318:	2000786c 	.word	0x2000786c
 800631c:	20007868 	.word	0x20007868
 8006320:	2000787c 	.word	0x2000787c
 8006324:	20007880 	.word	0x20007880
 8006328:	20007878 	.word	0x20007878
 800632c:	0800a4b8 	.word	0x0800a4b8
 8006330:	20007874 	.word	0x20007874

08006334 <tcp_close>:
  if (pcb->state != LISTEN) {
 8006334:	7d03      	ldrb	r3, [r0, #20]
 8006336:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8006338:	bf1e      	ittt	ne
 800633a:	7e83      	ldrbne	r3, [r0, #26]
 800633c:	f043 0310 	orrne.w	r3, r3, #16
 8006340:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006342:	2101      	movs	r1, #1
 8006344:	f7ff bf50 	b.w	80061e8 <tcp_close_shutdown>

08006348 <tcp_recv_null>:
{
 8006348:	b510      	push	{r4, lr}
 800634a:	4608      	mov	r0, r1
  if (p != NULL) {
 800634c:	4614      	mov	r4, r2
 800634e:	b13a      	cbz	r2, 8006360 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8006350:	8911      	ldrh	r1, [r2, #8]
 8006352:	f7ff fc8d 	bl	8005c70 <tcp_recved>
    pbuf_free(p);
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff f948 	bl	80055ec <pbuf_free>
}
 800635c:	2000      	movs	r0, #0
 800635e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1fb      	bne.n	800635c <tcp_recv_null+0x14>
}
 8006364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8006368:	f7ff bfe4 	b.w	8006334 <tcp_close>

0800636c <tcp_process_refused_data>:
{
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 800636e:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006370:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8006374:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8006376:	2300      	movs	r3, #0
{
 8006378:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 800637a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800637c:	b1dd      	cbz	r5, 80063b6 <tcp_process_refused_data+0x4a>
 800637e:	4601      	mov	r1, r0
 8006380:	4632      	mov	r2, r6
 8006382:	6900      	ldr	r0, [r0, #16]
 8006384:	47a8      	blx	r5
 8006386:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8006388:	b9e0      	cbnz	r0, 80063c4 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800638a:	06bb      	lsls	r3, r7, #26
 800638c:	d511      	bpl.n	80063b2 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800638e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8006390:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006394:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8006398:	bf1c      	itt	ne
 800639a:	3301      	addne	r3, #1
 800639c:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800639e:	b146      	cbz	r6, 80063b2 <tcp_process_refused_data+0x46>
 80063a0:	2300      	movs	r3, #0
 80063a2:	461a      	mov	r2, r3
 80063a4:	4621      	mov	r1, r4
 80063a6:	6920      	ldr	r0, [r4, #16]
 80063a8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80063aa:	300d      	adds	r0, #13
 80063ac:	d101      	bne.n	80063b2 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 80063ae:	f06f 050c 	mvn.w	r5, #12
}
 80063b2:	4628      	mov	r0, r5
 80063b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80063b6:	4601      	mov	r1, r0
 80063b8:	462b      	mov	r3, r5
 80063ba:	4632      	mov	r2, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	f7ff ffc3 	bl	8006348 <tcp_recv_null>
 80063c2:	e7e0      	b.n	8006386 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 80063c4:	f110 050d 	adds.w	r5, r0, #13
 80063c8:	d0f1      	beq.n	80063ae <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 80063ca:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80063cc:	f06f 0504 	mvn.w	r5, #4
 80063d0:	e7ef      	b.n	80063b2 <tcp_process_refused_data+0x46>
	...

080063d4 <tcp_fasttmr>:
{
 80063d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80063d8:	4d1b      	ldr	r5, [pc, #108]	; (8006448 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80063da:	4f1c      	ldr	r7, [pc, #112]	; (800644c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80063dc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80063de:	4e1c      	ldr	r6, [pc, #112]	; (8006450 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80063e0:	3301      	adds	r3, #1
 80063e2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80063e4:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80063e6:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80063ea:	b90c      	cbnz	r4, 80063f0 <tcp_fasttmr+0x1c>
}
 80063ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 80063f0:	782b      	ldrb	r3, [r5, #0]
 80063f2:	7f62      	ldrb	r2, [r4, #29]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d024      	beq.n	8006442 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 80063f8:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 80063fa:	7ea3      	ldrb	r3, [r4, #26]
 80063fc:	07d9      	lsls	r1, r3, #31
 80063fe:	d509      	bpl.n	8006414 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8006400:	f043 0302 	orr.w	r3, r3, #2
 8006404:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8006406:	4620      	mov	r0, r4
 8006408:	f001 fdd4 	bl	8007fb4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800640c:	7ea3      	ldrb	r3, [r4, #26]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8006414:	7ea3      	ldrb	r3, [r4, #26]
 8006416:	071a      	lsls	r2, r3, #28
 8006418:	d505      	bpl.n	8006426 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800641a:	f023 0308 	bic.w	r3, r3, #8
 800641e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fbc7 	bl	8005bb4 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8006426:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8006428:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800642c:	b13b      	cbz	r3, 800643e <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800642e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8006430:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8006434:	f7ff ff9a 	bl	800636c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006438:	7833      	ldrb	r3, [r6, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1d2      	bne.n	80063e4 <tcp_fasttmr+0x10>
{
 800643e:	464c      	mov	r4, r9
 8006440:	e7d3      	b.n	80063ea <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8006442:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8006446:	e7fa      	b.n	800643e <tcp_fasttmr+0x6a>
 8006448:	20003ec2 	.word	0x20003ec2
 800644c:	2000786c 	.word	0x2000786c
 8006450:	20007868 	.word	0x20007868

08006454 <tcp_tmr>:
{
 8006454:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8006456:	f7ff ffbd 	bl	80063d4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800645a:	4a06      	ldr	r2, [pc, #24]	; (8006474 <tcp_tmr+0x20>)
 800645c:	7813      	ldrb	r3, [r2, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	7013      	strb	r3, [r2, #0]
 8006464:	07db      	lsls	r3, r3, #31
 8006466:	d503      	bpl.n	8006470 <tcp_tmr+0x1c>
}
 8006468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800646c:	f7ff bc8a 	b.w	8005d84 <tcp_slowtmr>
 8006470:	bd08      	pop	{r3, pc}
 8006472:	bf00      	nop
 8006474:	20003ec1 	.word	0x20003ec1

08006478 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006478:	7d03      	ldrb	r3, [r0, #20]
 800647a:	2b01      	cmp	r3, #1
{
 800647c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	4604      	mov	r4, r0
 8006482:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006484:	d106      	bne.n	8006494 <tcp_abandon+0x1c>
 8006486:	4b30      	ldr	r3, [pc, #192]	; (8006548 <tcp_abandon+0xd0>)
 8006488:	4930      	ldr	r1, [pc, #192]	; (800654c <tcp_abandon+0xd4>)
 800648a:	4831      	ldr	r0, [pc, #196]	; (8006550 <tcp_abandon+0xd8>)
 800648c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006490:	f003 f825 	bl	80094de <iprintf>
  if (pcb->state == TIME_WAIT) {
 8006494:	7d23      	ldrb	r3, [r4, #20]
 8006496:	2b0a      	cmp	r3, #10
 8006498:	d10a      	bne.n	80064b0 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800649a:	4621      	mov	r1, r4
 800649c:	482d      	ldr	r0, [pc, #180]	; (8006554 <tcp_abandon+0xdc>)
 800649e:	f7ff fe53 	bl	8006148 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80064a2:	4621      	mov	r1, r4
 80064a4:	2001      	movs	r0, #1
}
 80064a6:	b002      	add	sp, #8
 80064a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80064ac:	f7fe bf18 	b.w	80052e0 <memp_free>
    seqno = pcb->snd_nxt;
 80064b0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80064b4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80064b8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80064bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80064c0:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80064c2:	b99b      	cbnz	r3, 80064ec <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 80064c4:	b13d      	cbz	r5, 80064d6 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80064c6:	4a24      	ldr	r2, [pc, #144]	; (8006558 <tcp_abandon+0xe0>)
 80064c8:	6813      	ldr	r3, [r2, #0]
 80064ca:	429c      	cmp	r4, r3
 80064cc:	d106      	bne.n	80064dc <tcp_abandon+0x64>
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	2500      	movs	r5, #0
 80064d4:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80064d6:	462e      	mov	r6, r5
 80064d8:	e00f      	b.n	80064fa <tcp_abandon+0x82>
 80064da:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f8      	beq.n	80064d2 <tcp_abandon+0x5a>
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	4294      	cmp	r4, r2
 80064e4:	d1f9      	bne.n	80064da <tcp_abandon+0x62>
 80064e6:	68e2      	ldr	r2, [r4, #12]
 80064e8:	60da      	str	r2, [r3, #12]
 80064ea:	e7f2      	b.n	80064d2 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80064ec:	4621      	mov	r1, r4
 80064ee:	481b      	ldr	r0, [pc, #108]	; (800655c <tcp_abandon+0xe4>)
 80064f0:	f7ff fe2a 	bl	8006148 <tcp_pcb_remove>
 80064f4:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <tcp_abandon+0xe8>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80064fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064fc:	b108      	cbz	r0, 8006502 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 80064fe:	f7ff fc03 	bl	8005d08 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006502:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006504:	b108      	cbz	r0, 800650a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8006506:	f7ff fbff 	bl	8005d08 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800650a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800650c:	b108      	cbz	r0, 8006512 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800650e:	f7ff fbfb 	bl	8005d08 <tcp_segs_free>
    if (send_rst) {
 8006512:	b146      	cbz	r6, 8006526 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006514:	8b23      	ldrh	r3, [r4, #24]
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	9500      	str	r5, [sp, #0]
 800651a:	1d23      	adds	r3, r4, #4
 800651c:	4622      	mov	r2, r4
 800651e:	4651      	mov	r1, sl
 8006520:	4648      	mov	r0, r9
 8006522:	f001 fec5 	bl	80082b0 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8006526:	4621      	mov	r1, r4
 8006528:	2001      	movs	r0, #1
 800652a:	f7fe fed9 	bl	80052e0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800652e:	b13f      	cbz	r7, 8006540 <tcp_abandon+0xc8>
 8006530:	f06f 010c 	mvn.w	r1, #12
 8006534:	4640      	mov	r0, r8
 8006536:	463b      	mov	r3, r7
}
 8006538:	b002      	add	sp, #8
 800653a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800653e:	4718      	bx	r3
}
 8006540:	b002      	add	sp, #8
 8006542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006546:	bf00      	nop
 8006548:	0800a46e 	.word	0x0800a46e
 800654c:	0800a417 	.word	0x0800a417
 8006550:	08009880 	.word	0x08009880
 8006554:	2000787c 	.word	0x2000787c
 8006558:	20007878 	.word	0x20007878
 800655c:	2000786c 	.word	0x2000786c
 8006560:	20007868 	.word	0x20007868

08006564 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8006564:	2101      	movs	r1, #1
 8006566:	f7ff bf87 	b.w	8006478 <tcp_abandon>

0800656a <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800656a:	b538      	push	{r3, r4, r5, lr}
 800656c:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800656e:	b901      	cbnz	r1, 8006572 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8006570:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006572:	680a      	ldr	r2, [r1, #0]
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	68cc      	ldr	r4, [r1, #12]
 8006578:	429a      	cmp	r2, r3
 800657a:	d102      	bne.n	8006582 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 800657c:	4608      	mov	r0, r1
 800657e:	f7ff fff1 	bl	8006564 <tcp_abort>
      pcb = pcb->next;
 8006582:	4621      	mov	r1, r4
 8006584:	e7f3      	b.n	800656e <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08006588 <tcp_kill_state>:
{
 8006588:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800658a:	f1a0 0308 	sub.w	r3, r0, #8
 800658e:	2b01      	cmp	r3, #1
{
 8006590:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006592:	d906      	bls.n	80065a2 <tcp_kill_state+0x1a>
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <tcp_kill_state+0x4c>)
 8006596:	4910      	ldr	r1, [pc, #64]	; (80065d8 <tcp_kill_state+0x50>)
 8006598:	4810      	ldr	r0, [pc, #64]	; (80065dc <tcp_kill_state+0x54>)
 800659a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800659e:	f002 ff9e 	bl	80094de <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065a2:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <tcp_kill_state+0x58>)
 80065a4:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <tcp_kill_state+0x5c>)
  inactivity = 0;
 80065a8:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065aa:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80065ac:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065ae:	b921      	cbnz	r1, 80065ba <tcp_kill_state+0x32>
  if (inactive != NULL) {
 80065b0:	b170      	cbz	r0, 80065d0 <tcp_kill_state+0x48>
}
 80065b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 80065b6:	f7ff bf5f 	b.w	8006478 <tcp_abandon>
    if (pcb->state == state) {
 80065ba:	7d0b      	ldrb	r3, [r1, #20]
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d105      	bne.n	80065cc <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065c0:	6a0b      	ldr	r3, [r1, #32]
 80065c2:	1aeb      	subs	r3, r5, r3
 80065c4:	429a      	cmp	r2, r3
 80065c6:	bf9c      	itt	ls
 80065c8:	461a      	movls	r2, r3
 80065ca:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065cc:	68c9      	ldr	r1, [r1, #12]
 80065ce:	e7ee      	b.n	80065ae <tcp_kill_state+0x26>
 80065d0:	bd38      	pop	{r3, r4, r5, pc}
 80065d2:	bf00      	nop
 80065d4:	0800a46e 	.word	0x0800a46e
 80065d8:	0800a4a9 	.word	0x0800a4a9
 80065dc:	08009880 	.word	0x08009880
 80065e0:	2000786c 	.word	0x2000786c
 80065e4:	20007870 	.word	0x20007870

080065e8 <tcp_alloc>:
{
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80065ec:	2001      	movs	r0, #1
 80065ee:	f7fe fe5b 	bl	80052a8 <memp_malloc>
 80065f2:	4d3b      	ldr	r5, [pc, #236]	; (80066e0 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 80065f4:	4604      	mov	r4, r0
 80065f6:	bb90      	cbnz	r0, 800665e <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065f8:	4b3a      	ldr	r3, [pc, #232]	; (80066e4 <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065fa:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065fc:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80065fe:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006600:	2b00      	cmp	r3, #0
 8006602:	d158      	bne.n	80066b6 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8006604:	b114      	cbz	r4, 800660c <tcp_alloc+0x24>
    tcp_abort(inactive);
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff ffac 	bl	8006564 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800660c:	2001      	movs	r0, #1
 800660e:	f7fe fe4b 	bl	80052a8 <memp_malloc>
    if (pcb == NULL) {
 8006612:	4604      	mov	r4, r0
 8006614:	bb18      	cbnz	r0, 800665e <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8006616:	2009      	movs	r0, #9
 8006618:	f7ff ffb6 	bl	8006588 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800661c:	2001      	movs	r0, #1
 800661e:	f7fe fe43 	bl	80052a8 <memp_malloc>
      if (pcb == NULL) {
 8006622:	4604      	mov	r4, r0
 8006624:	b9d8      	cbnz	r0, 800665e <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8006626:	2008      	movs	r0, #8
 8006628:	f7ff ffae 	bl	8006588 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800662c:	2001      	movs	r0, #1
 800662e:	f7fe fe3b 	bl	80052a8 <memp_malloc>
        if (pcb == NULL) {
 8006632:	4604      	mov	r4, r0
 8006634:	b998      	cbnz	r0, 800665e <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006636:	4b2c      	ldr	r3, [pc, #176]	; (80066e8 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006638:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800663c:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800663e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8006642:	bf0c      	ite	eq
 8006644:	4631      	moveq	r1, r6
 8006646:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006648:	2b00      	cmp	r3, #0
 800664a:	d13c      	bne.n	80066c6 <tcp_alloc+0xde>
  if (inactive != NULL) {
 800664c:	b114      	cbz	r4, 8006654 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff ff88 	bl	8006564 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006654:	2001      	movs	r0, #1
 8006656:	f7fe fe27 	bl	80052a8 <memp_malloc>
  if (pcb != NULL) {
 800665a:	4604      	mov	r4, r0
 800665c:	b348      	cbz	r0, 80066b2 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800665e:	2298      	movs	r2, #152	; 0x98
 8006660:	2100      	movs	r1, #0
 8006662:	4620      	mov	r0, r4
 8006664:	f003 f894 	bl	8009790 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006668:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800666c:	8562      	strh	r2, [r4, #42]	; 0x2a
 800666e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006670:	22ff      	movs	r2, #255	; 0xff
 8006672:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8006674:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006678:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800667a:	2206      	movs	r2, #6
 800667c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006680:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8006682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006686:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8006688:	2201      	movs	r2, #1
 800668a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800668e:	682a      	ldr	r2, [r5, #0]
 8006690:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8006692:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 8006696:	4a15      	ldr	r2, [pc, #84]	; (80066ec <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8006698:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 800669c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80066a0:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 80066a2:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 80066a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80066a8:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 80066aa:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 80066ac:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80066ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 80066b2:	4620      	mov	r0, r4
 80066b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	1a82      	subs	r2, r0, r2
 80066ba:	428a      	cmp	r2, r1
 80066bc:	bf24      	itt	cs
 80066be:	461c      	movcs	r4, r3
 80066c0:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	e79c      	b.n	8006600 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 80066c6:	7d5f      	ldrb	r7, [r3, #21]
 80066c8:	428f      	cmp	r7, r1
 80066ca:	d807      	bhi.n	80066dc <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 80066d2:	4282      	cmp	r2, r0
 80066d4:	bf22      	ittt	cs
 80066d6:	4639      	movcs	r1, r7
 80066d8:	4610      	movcs	r0, r2
 80066da:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	e7b3      	b.n	8006648 <tcp_alloc+0x60>
 80066e0:	20007870 	.word	0x20007870
 80066e4:	2000787c 	.word	0x2000787c
 80066e8:	2000786c 	.word	0x2000786c
 80066ec:	20003ec2 	.word	0x20003ec2
 80066f0:	08006349 	.word	0x08006349
 80066f4:	006ddd00 	.word	0x006ddd00

080066f8 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 80066f8:	4b03      	ldr	r3, [pc, #12]	; (8006708 <tcp_next_iss+0x10>)
 80066fa:	4a04      	ldr	r2, [pc, #16]	; (800670c <tcp_next_iss+0x14>)
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	4410      	add	r0, r2
 8006702:	6018      	str	r0, [r3, #0]
}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000008 	.word	0x20000008
 800670c:	20007870 	.word	0x20007870

08006710 <tcp_eff_send_mss_impl>:
{
 8006710:	b510      	push	{r4, lr}
 8006712:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8006714:	4608      	mov	r0, r1
 8006716:	f7fd fe29 	bl	800436c <ip4_route>
    if (outif == NULL) {
 800671a:	b130      	cbz	r0, 800672a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 800671c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 800671e:	b123      	cbz	r3, 800672a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006720:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006722:	b29b      	uxth	r3, r3
 8006724:	429c      	cmp	r4, r3
 8006726:	bf28      	it	cs
 8006728:	461c      	movcs	r4, r3
}
 800672a:	4620      	mov	r0, r4
 800672c:	bd10      	pop	{r4, pc}
	...

08006730 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006734:	4604      	mov	r4, r0
 8006736:	b180      	cbz	r0, 800675a <tcp_netif_ip_addr_changed+0x2a>
 8006738:	6803      	ldr	r3, [r0, #0]
 800673a:	b173      	cbz	r3, 800675a <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <tcp_netif_ip_addr_changed+0x40>)
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	f7ff ff13 	bl	800656a <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <tcp_netif_ip_addr_changed+0x44>)
 8006746:	4620      	mov	r0, r4
 8006748:	6819      	ldr	r1, [r3, #0]
 800674a:	f7ff ff0e 	bl	800656a <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800674e:	b125      	cbz	r5, 800675a <tcp_netif_ip_addr_changed+0x2a>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b113      	cbz	r3, 800675a <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <tcp_netif_ip_addr_changed+0x48>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b903      	cbnz	r3, 800675c <tcp_netif_ip_addr_changed+0x2c>
 800675a:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8006760:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006762:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006764:	bf04      	itt	eq
 8006766:	6829      	ldreq	r1, [r5, #0]
 8006768:	6019      	streq	r1, [r3, #0]
{
 800676a:	4613      	mov	r3, r2
 800676c:	e7f4      	b.n	8006758 <tcp_netif_ip_addr_changed+0x28>
 800676e:	bf00      	nop
 8006770:	2000786c 	.word	0x2000786c
 8006774:	20007878 	.word	0x20007878
 8006778:	20007874 	.word	0x20007874

0800677c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006780:	68c3      	ldr	r3, [r0, #12]
{
 8006782:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006784:	8998      	ldrh	r0, [r3, #12]
{
 8006786:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006788:	f7fd f95a 	bl	8003a40 <lwip_htons>
 800678c:	07c2      	lsls	r2, r0, #31
 800678e:	d415      	bmi.n	80067bc <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006790:	4e18      	ldr	r6, [pc, #96]	; (80067f4 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8006792:	b1bc      	cbz	r4, 80067c4 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006794:	68e7      	ldr	r7, [r4, #12]
 8006796:	6830      	ldr	r0, [r6, #0]
 8006798:	892b      	ldrh	r3, [r5, #8]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	8922      	ldrh	r2, [r4, #8]
 800679e:	4403      	add	r3, r0
 80067a0:	440a      	add	r2, r1
 80067a2:	1a9a      	subs	r2, r3, r2
    while (next &&
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	da10      	bge.n	80067ca <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80067a8:	1a5b      	subs	r3, r3, r1
    if (next &&
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd0a      	ble.n	80067c4 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80067ae:	1a09      	subs	r1, r1, r0
 80067b0:	b289      	uxth	r1, r1
 80067b2:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80067b4:	6868      	ldr	r0, [r5, #4]
 80067b6:	f7ff f85f 	bl	8005878 <pbuf_realloc>
 80067ba:	e003      	b.n	80067c4 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff faa3 	bl	8005d08 <tcp_segs_free>
    next = NULL;
 80067c2:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 80067c4:	602c      	str	r4, [r5, #0]
}
 80067c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80067ca:	89b8      	ldrh	r0, [r7, #12]
 80067cc:	f7fd f938 	bl	8003a40 <lwip_htons>
 80067d0:	07c3      	lsls	r3, r0, #31
 80067d2:	d509      	bpl.n	80067e8 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80067d4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80067d8:	2001      	movs	r0, #1
 80067da:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 80067de:	f7fd f92f 	bl	8003a40 <lwip_htons>
 80067e2:	4338      	orrs	r0, r7
 80067e4:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 80067e8:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff fa7e 	bl	8005cec <tcp_seg_free>
      next = next->next;
 80067f0:	463c      	mov	r4, r7
 80067f2:	e7ce      	b.n	8006792 <tcp_oos_insert_segment+0x16>
 80067f4:	20003ee8 	.word	0x20003ee8

080067f8 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80067f8:	7d03      	ldrb	r3, [r0, #20]
 80067fa:	2b03      	cmp	r3, #3
{
 80067fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006802:	d806      	bhi.n	8006812 <tcp_receive+0x1a>
 8006804:	4b87      	ldr	r3, [pc, #540]	; (8006a24 <tcp_receive+0x22c>)
 8006806:	4988      	ldr	r1, [pc, #544]	; (8006a28 <tcp_receive+0x230>)
 8006808:	4888      	ldr	r0, [pc, #544]	; (8006a2c <tcp_receive+0x234>)
 800680a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800680e:	f002 fe66 	bl	80094de <iprintf>

  if (flags & TCP_ACK) {
 8006812:	4b87      	ldr	r3, [pc, #540]	; (8006a30 <tcp_receive+0x238>)
 8006814:	4e87      	ldr	r6, [pc, #540]	; (8006a34 <tcp_receive+0x23c>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f013 0f10 	tst.w	r3, #16
 800681c:	f000 817c 	beq.w	8006b18 <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006820:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006822:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006824:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8006828:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800682a:	1a1d      	subs	r5, r3, r0
 800682c:	2d00      	cmp	r5, #0
 800682e:	4d82      	ldr	r5, [pc, #520]	; (8006a38 <tcp_receive+0x240>)
 8006830:	db0d      	blt.n	800684e <tcp_receive+0x56>
 8006832:	4283      	cmp	r3, r0
 8006834:	d103      	bne.n	800683e <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	1acb      	subs	r3, r1, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	db07      	blt.n	800684e <tcp_receive+0x56>
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	4299      	cmp	r1, r3
 8006842:	d11c      	bne.n	800687e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006844:	4b7d      	ldr	r3, [pc, #500]	; (8006a3c <tcp_receive+0x244>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	89db      	ldrh	r3, [r3, #14]
 800684a:	4293      	cmp	r3, r2
 800684c:	d917      	bls.n	800687e <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800684e:	4b7b      	ldr	r3, [pc, #492]	; (8006a3c <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006850:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8006858:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800685a:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 800685c:	6828      	ldr	r0, [r5, #0]
 800685e:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006860:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006864:	bf38      	it	cc
 8006866:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 800686a:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 800686e:	2f00      	cmp	r7, #0
 8006870:	d13c      	bne.n	80068ec <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8006872:	b920      	cbnz	r0, 800687e <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8006874:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8006878:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800687a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8006884:	4f6e      	ldr	r7, [pc, #440]	; (8006a40 <tcp_receive+0x248>)
 8006886:	eba3 000e 	sub.w	r0, r3, lr
 800688a:	2800      	cmp	r0, #0
 800688c:	dc37      	bgt.n	80068fe <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 800688e:	486d      	ldr	r0, [pc, #436]	; (8006a44 <tcp_receive+0x24c>)
 8006890:	8800      	ldrh	r0, [r0, #0]
 8006892:	2800      	cmp	r0, #0
 8006894:	f040 846f 	bne.w	8007176 <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006898:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800689a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800689c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80068a0:	4401      	add	r1, r0
 80068a2:	428a      	cmp	r2, r1
 80068a4:	f040 8467 	bne.w	8007176 <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80068a8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	f2c0 8462 	blt.w	8007176 <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80068b2:	4573      	cmp	r3, lr
 80068b4:	f040 845f 	bne.w	8007176 <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80068b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068bc:	1c53      	adds	r3, r2, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 80068c2:	bf38      	it	cc
 80068c4:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80068c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d911      	bls.n	80068f4 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80068d0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80068d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80068d6:	4413      	add	r3, r2
 80068d8:	b29b      	uxth	r3, r3
 80068da:	429a      	cmp	r2, r3
 80068dc:	d201      	bcs.n	80068e2 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 80068de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80068e2:	f8df a140 	ldr.w	sl, [pc, #320]	; 8006a24 <tcp_receive+0x22c>
 80068e6:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006a2c <tcp_receive+0x234>
 80068ea:	e108      	b.n	8006afe <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d0c6      	beq.n	800687e <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e7c2      	b.n	800687a <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 80068f4:	d1f5      	bne.n	80068e2 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 80068f6:	4620      	mov	r0, r4
 80068f8:	f001 fd79 	bl	80083ee <tcp_rexmit_fast>
 80068fc:	e7f1      	b.n	80068e2 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80068fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006900:	1a9a      	subs	r2, r3, r2
 8006902:	2a00      	cmp	r2, #0
 8006904:	f300 808a 	bgt.w	8006a1c <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8006908:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800690a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800690e:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8006910:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8006912:	bf41      	itttt	mi
 8006914:	f022 0204 	bicmi.w	r2, r2, #4
 8006918:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800691a:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 800691e:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8006922:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006924:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8006926:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006928:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800692c:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 800692e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006932:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8006936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800693a:	d90f      	bls.n	800695c <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 800693c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006940:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8006944:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006946:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8006948:	bf9c      	itt	ls
 800694a:	435b      	mulls	r3, r3
 800694c:	fb93 f3f2 	sdivls	r3, r3, r2
 8006950:	4413      	add	r3, r2
 8006952:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8006954:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8006956:	bf38      	it	cc
 8006958:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800695c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006a24 <tcp_receive+0x22c>
 8006960:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a2c <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 8006964:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006966:	b943      	cbnz	r3, 800697a <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 8006968:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800696a:	2300      	movs	r3, #0
 800696c:	2a00      	cmp	r2, #0
 800696e:	d153      	bne.n	8006a18 <tcp_receive+0x220>
        pcb->rtime = -1;
 8006970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006974:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8006976:	76e3      	strb	r3, [r4, #27]
 8006978:	e7b3      	b.n	80068e2 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	6858      	ldr	r0, [r3, #4]
 800697e:	f7fd f862 	bl	8003a46 <lwip_htonl>
 8006982:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006984:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4683      	mov	fp, r0
 800698c:	8998      	ldrh	r0, [r3, #12]
 800698e:	f7fd f857 	bl	8003a40 <lwip_htons>
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	f010 0003 	ands.w	r0, r0, #3
 8006998:	eba8 0803 	sub.w	r8, r8, r3
 800699c:	bf18      	it	ne
 800699e:	2001      	movne	r0, #1
 80069a0:	44d8      	add	r8, fp
 80069a2:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80069a4:	f1b8 0f00 	cmp.w	r8, #0
 80069a8:	dcde      	bgt.n	8006968 <tcp_receive+0x170>
        next = pcb->unacked;
 80069aa:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80069ae:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80069b2:	f8d8 3000 	ldr.w	r3, [r8]
 80069b6:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80069b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069bc:	f7fe ffcc 	bl	8005958 <pbuf_clen>
 80069c0:	4583      	cmp	fp, r0
 80069c2:	d206      	bcs.n	80069d2 <tcp_receive+0x1da>
 80069c4:	464b      	mov	r3, r9
 80069c6:	f240 429e 	movw	r2, #1182	; 0x49e
 80069ca:	491f      	ldr	r1, [pc, #124]	; (8006a48 <tcp_receive+0x250>)
 80069cc:	4650      	mov	r0, sl
 80069ce:	f002 fd86 	bl	80094de <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80069d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069d6:	f7fe ffbf 	bl	8005958 <pbuf_clen>
 80069da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80069de:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80069e0:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80069e2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80069e6:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 80069ea:	4413      	add	r3, r2
        tcp_seg_free(next);
 80069ec:	4640      	mov	r0, r8
        recv_acked += next->len;
 80069ee:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 80069f0:	f7ff f97c 	bl	8005cec <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80069f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0b3      	beq.n	8006964 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80069fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1b0      	bne.n	8006964 <tcp_receive+0x16c>
 8006a02:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ad      	bne.n	8006964 <tcp_receive+0x16c>
 8006a08:	464b      	mov	r3, r9
 8006a0a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8006a0e:	490f      	ldr	r1, [pc, #60]	; (8006a4c <tcp_receive+0x254>)
 8006a10:	4650      	mov	r0, sl
 8006a12:	f002 fd64 	bl	80094de <iprintf>
 8006a16:	e7a5      	b.n	8006964 <tcp_receive+0x16c>
        pcb->rtime = 0;
 8006a18:	8623      	strh	r3, [r4, #48]	; 0x30
 8006a1a:	e7ac      	b.n	8006976 <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f001 fa93 	bl	8007f48 <tcp_send_empty_ack>
 8006a22:	e75e      	b.n	80068e2 <tcp_receive+0xea>
 8006a24:	0800a880 	.word	0x0800a880
 8006a28:	0800a8b2 	.word	0x0800a8b2
 8006a2c:	08009880 	.word	0x08009880
 8006a30:	20003ec8 	.word	0x20003ec8
 8006a34:	20003ee8 	.word	0x20003ee8
 8006a38:	20003ec4 	.word	0x20003ec4
 8006a3c:	20003ef0 	.word	0x20003ef0
 8006a40:	20003edc 	.word	0x20003edc
 8006a44:	20003efe 	.word	0x20003efe
 8006a48:	0800a8cb 	.word	0x0800a8cb
 8006a4c:	0800a8f3 	.word	0x0800a8f3
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006a50:	682a      	ldr	r2, [r5, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	9201      	str	r2, [sp, #4]
 8006a56:	6858      	ldr	r0, [r3, #4]
 8006a58:	f7fc fff5 	bl	8003a46 <lwip_htonl>
 8006a5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006a5e:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4683      	mov	fp, r0
 8006a66:	8998      	ldrh	r0, [r3, #12]
 8006a68:	f7fc ffea 	bl	8003a40 <lwip_htons>
 8006a6c:	9a01      	ldr	r2, [sp, #4]
 8006a6e:	f010 0003 	ands.w	r0, r0, #3
 8006a72:	eba2 0808 	sub.w	r8, r2, r8
 8006a76:	bf18      	it	ne
 8006a78:	2001      	movne	r0, #1
 8006a7a:	eba8 080b 	sub.w	r8, r8, fp
 8006a7e:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8006a82:	f1b8 0f00 	cmp.w	r8, #0
 8006a86:	db3d      	blt.n	8006b04 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	dc38      	bgt.n	8006b04 <tcp_receive+0x30c>
      next = pcb->unsent;
 8006a92:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8006a96:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9a:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8006a9c:	b90b      	cbnz	r3, 8006aa2 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 8006a9e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006aa2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006aa6:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8006aaa:	f7fe ff55 	bl	8005958 <pbuf_clen>
 8006aae:	4583      	cmp	fp, r0
 8006ab0:	d206      	bcs.n	8006ac0 <tcp_receive+0x2c8>
 8006ab2:	4653      	mov	r3, sl
 8006ab4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006ab8:	49ba      	ldr	r1, [pc, #744]	; (8006da4 <tcp_receive+0x5ac>)
 8006aba:	4648      	mov	r0, r9
 8006abc:	f002 fd0f 	bl	80094de <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006ac0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ac4:	f7fe ff48 	bl	8005958 <pbuf_clen>
 8006ac8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006acc:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006ace:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8006ad0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006ad4:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006ad8:	4413      	add	r3, r2
      tcp_seg_free(next);
 8006ada:	4640      	mov	r0, r8
      recv_acked += next->len;
 8006adc:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8006ade:	f7ff f905 	bl	8005cec <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8006ae2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006ae6:	b153      	cbz	r3, 8006afe <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8006ae8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006aea:	b943      	cbnz	r3, 8006afe <tcp_receive+0x306>
 8006aec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006aee:	b933      	cbnz	r3, 8006afe <tcp_receive+0x306>
 8006af0:	4653      	mov	r3, sl
 8006af2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8006af6:	49ac      	ldr	r1, [pc, #688]	; (8006da8 <tcp_receive+0x5b0>)
 8006af8:	4648      	mov	r0, r9
 8006afa:	f002 fcf0 	bl	80094de <iprintf>
    while (pcb->unsent != NULL &&
 8006afe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1a5      	bne.n	8006a50 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8006b04:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006b08:	883a      	ldrh	r2, [r7, #0]
 8006b0a:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006b0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8006b0e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	f040 8119 	bne.w	8006d4a <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006b18:	4fa4      	ldr	r7, [pc, #656]	; (8006dac <tcp_receive+0x5b4>)
 8006b1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b1c:	8838      	ldrh	r0, [r7, #0]
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f000 831c 	beq.w	800715c <tcp_receive+0x964>
 8006b24:	7d23      	ldrb	r3, [r4, #20]
 8006b26:	2b06      	cmp	r3, #6
 8006b28:	f200 8318 	bhi.w	800715c <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	1ad5      	subs	r5, r2, r3
 8006b30:	2d01      	cmp	r5, #1
 8006b32:	f100 815c 	bmi.w	8006dee <tcp_receive+0x5f6>
 8006b36:	f1c3 0101 	rsb	r1, r3, #1
 8006b3a:	1a09      	subs	r1, r1, r0
 8006b3c:	4411      	add	r1, r2
 8006b3e:	2900      	cmp	r1, #0
 8006b40:	f300 8155 	bgt.w	8006dee <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8006b44:	4b9a      	ldr	r3, [pc, #616]	; (8006db0 <tcp_receive+0x5b8>)
 8006b46:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8006b4a:	46aa      	mov	sl, r5
 8006b4c:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006b4e:	f1b9 0f00 	cmp.w	r9, #0
 8006b52:	d106      	bne.n	8006b62 <tcp_receive+0x36a>
 8006b54:	4b97      	ldr	r3, [pc, #604]	; (8006db4 <tcp_receive+0x5bc>)
 8006b56:	4998      	ldr	r1, [pc, #608]	; (8006db8 <tcp_receive+0x5c0>)
 8006b58:	4898      	ldr	r0, [pc, #608]	; (8006dbc <tcp_receive+0x5c4>)
 8006b5a:	f240 523c 	movw	r2, #1340	; 0x53c
 8006b5e:	f002 fcbe 	bl	80094de <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8006b62:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006b66:	429d      	cmp	r5, r3
 8006b68:	dd06      	ble.n	8006b78 <tcp_receive+0x380>
 8006b6a:	4b92      	ldr	r3, [pc, #584]	; (8006db4 <tcp_receive+0x5bc>)
 8006b6c:	4994      	ldr	r1, [pc, #592]	; (8006dc0 <tcp_receive+0x5c8>)
 8006b6e:	4893      	ldr	r0, [pc, #588]	; (8006dbc <tcp_receive+0x5c4>)
 8006b70:	f240 523d 	movw	r2, #1341	; 0x53d
 8006b74:	f002 fcb3 	bl	80094de <iprintf>
      if (inseg.p->len < off) {
 8006b78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006b7c:	8943      	ldrh	r3, [r0, #10]
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	f340 812a 	ble.w	8006dd8 <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006b84:	8903      	ldrh	r3, [r0, #8]
 8006b86:	429d      	cmp	r5, r3
 8006b88:	dd06      	ble.n	8006b98 <tcp_receive+0x3a0>
 8006b8a:	4b8a      	ldr	r3, [pc, #552]	; (8006db4 <tcp_receive+0x5bc>)
 8006b8c:	498d      	ldr	r1, [pc, #564]	; (8006dc4 <tcp_receive+0x5cc>)
 8006b8e:	488b      	ldr	r0, [pc, #556]	; (8006dbc <tcp_receive+0x5c4>)
 8006b90:	f240 523f 	movw	r2, #1343	; 0x53f
 8006b94:	f002 fca3 	bl	80094de <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006b98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006b9c:	8919      	ldrh	r1, [r3, #8]
 8006b9e:	1b4d      	subs	r5, r1, r5
 8006ba0:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8006ba2:	2200      	movs	r2, #0
        while (p->len < off) {
 8006ba4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8006ba8:	459a      	cmp	sl, r3
 8006baa:	f300 80f2 	bgt.w	8006d92 <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8006bae:	f1ca 0100 	rsb	r1, sl, #0
 8006bb2:	b209      	sxth	r1, r1
 8006bb4:	4648      	mov	r0, r9
 8006bb6:	f7fe fd13 	bl	80055e0 <pbuf_header>
 8006bba:	b130      	cbz	r0, 8006bca <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006bbc:	4b7d      	ldr	r3, [pc, #500]	; (8006db4 <tcp_receive+0x5bc>)
 8006bbe:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006bc2:	4981      	ldr	r1, [pc, #516]	; (8006dc8 <tcp_receive+0x5d0>)
 8006bc4:	487d      	ldr	r0, [pc, #500]	; (8006dbc <tcp_receive+0x5c4>)
 8006bc6:	f002 fc8a 	bl	80094de <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006bca:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8006bce:	6833      	ldr	r3, [r6, #0]
 8006bd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006bd2:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006bd4:	440b      	add	r3, r1
 8006bd6:	1a9b      	subs	r3, r3, r2
 8006bd8:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006bdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006be0:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006be6:	1a8b      	subs	r3, r1, r2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f2c0 82b1 	blt.w	8007150 <tcp_receive+0x958>
 8006bee:	1c4b      	adds	r3, r1, #1
 8006bf0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	1a1b      	subs	r3, r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f300 82aa 	bgt.w	8007150 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8006bfc:	4291      	cmp	r1, r2
 8006bfe:	f040 81c9 	bne.w	8006f94 <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006c02:	4d6b      	ldr	r5, [pc, #428]	; (8006db0 <tcp_receive+0x5b8>)
 8006c04:	68eb      	ldr	r3, [r5, #12]
 8006c06:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8006c0a:	8998      	ldrh	r0, [r3, #12]
 8006c0c:	f7fc ff18 	bl	8003a40 <lwip_htons>
 8006c10:	f010 0003 	ands.w	r0, r0, #3
 8006c14:	bf18      	it	ne
 8006c16:	2001      	movne	r0, #1
 8006c18:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8006c1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8006c1c:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8006c1e:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8006c20:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8006c22:	d242      	bcs.n	8006caa <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006c24:	68eb      	ldr	r3, [r5, #12]
 8006c26:	8998      	ldrh	r0, [r3, #12]
 8006c28:	f7fc ff0a 	bl	8003a40 <lwip_htons>
 8006c2c:	07c2      	lsls	r2, r0, #31
 8006c2e:	d510      	bpl.n	8006c52 <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006c30:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8006c34:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8006c38:	4640      	mov	r0, r8
 8006c3a:	f7fc ff01 	bl	8003a40 <lwip_htons>
 8006c3e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006c42:	f7fc fefd 	bl	8003a40 <lwip_htons>
 8006c46:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8006c4a:	ea40 0808 	orr.w	r8, r0, r8
 8006c4e:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006c52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c54:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006c56:	68eb      	ldr	r3, [r5, #12]
 8006c58:	8998      	ldrh	r0, [r3, #12]
 8006c5a:	f7fc fef1 	bl	8003a40 <lwip_htons>
 8006c5e:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8006c60:	bf48      	it	mi
 8006c62:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8006c64:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8006c66:	bf44      	itt	mi
 8006c68:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8006c6c:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8006c6e:	8929      	ldrh	r1, [r5, #8]
 8006c70:	f7fe fe02 	bl	8005878 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006c74:	68eb      	ldr	r3, [r5, #12]
 8006c76:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8006c7a:	8998      	ldrh	r0, [r3, #12]
 8006c7c:	f7fc fee0 	bl	8003a40 <lwip_htons>
 8006c80:	f010 0003 	ands.w	r0, r0, #3
 8006c84:	bf18      	it	ne
 8006c86:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006c88:	6833      	ldr	r3, [r6, #0]
 8006c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8006c8c:	4440      	add	r0, r8
 8006c8e:	b280      	uxth	r0, r0
 8006c90:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006c92:	4418      	add	r0, r3
 8006c94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c96:	4413      	add	r3, r2
 8006c98:	4298      	cmp	r0, r3
 8006c9a:	d006      	beq.n	8006caa <tcp_receive+0x4b2>
 8006c9c:	4b45      	ldr	r3, [pc, #276]	; (8006db4 <tcp_receive+0x5bc>)
 8006c9e:	494b      	ldr	r1, [pc, #300]	; (8006dcc <tcp_receive+0x5d4>)
 8006ca0:	4846      	ldr	r0, [pc, #280]	; (8006dbc <tcp_receive+0x5c4>)
 8006ca2:	f240 527f 	movw	r2, #1407	; 0x57f
 8006ca6:	f002 fc1a 	bl	80094de <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8006caa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80ad 	beq.w	8006e0c <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006cb2:	68eb      	ldr	r3, [r5, #12]
 8006cb4:	8998      	ldrh	r0, [r3, #12]
 8006cb6:	f7fc fec3 	bl	8003a40 <lwip_htons>
 8006cba:	07c0      	lsls	r0, r0, #31
 8006cbc:	f100 80a3 	bmi.w	8006e06 <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8006cc0:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8006cc4:	f1b8 0f00 	cmp.w	r8, #0
 8006cc8:	d03c      	beq.n	8006d44 <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8006cca:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8006cce:	6830      	ldr	r0, [r6, #0]
 8006cd0:	883b      	ldrh	r3, [r7, #0]
 8006cd2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006cd6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8006cda:	4403      	add	r3, r0
 8006cdc:	4411      	add	r1, r2
 8006cde:	1a59      	subs	r1, r3, r1
            while (next &&
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	f280 80cf 	bge.w	8006e84 <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8006ce6:	1a9b      	subs	r3, r3, r2
            if (next &&
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dd2b      	ble.n	8006d44 <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006cec:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8006cee:	1a12      	subs	r2, r2, r0
 8006cf0:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006cf2:	8998      	ldrh	r0, [r3, #12]
 8006cf4:	f7fc fea4 	bl	8003a40 <lwip_htons>
 8006cf8:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8006cfa:	bf48      	it	mi
 8006cfc:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8006cfe:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8006d00:	bf44      	itt	mi
 8006d02:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8006d06:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8006d08:	8929      	ldrh	r1, [r5, #8]
 8006d0a:	f7fe fdb5 	bl	8005878 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8006d0e:	68eb      	ldr	r3, [r5, #12]
 8006d10:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006d14:	8998      	ldrh	r0, [r3, #12]
 8006d16:	f7fc fe93 	bl	8003a40 <lwip_htons>
 8006d1a:	f010 0003 	ands.w	r0, r0, #3
 8006d1e:	bf18      	it	ne
 8006d20:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8006d22:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8006d24:	4448      	add	r0, r9
 8006d26:	b280      	uxth	r0, r0
 8006d28:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8006d2a:	4418      	add	r0, r3
 8006d2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4298      	cmp	r0, r3
 8006d34:	d006      	beq.n	8006d44 <tcp_receive+0x54c>
 8006d36:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <tcp_receive+0x5bc>)
 8006d38:	4925      	ldr	r1, [pc, #148]	; (8006dd0 <tcp_receive+0x5d8>)
 8006d3a:	4820      	ldr	r0, [pc, #128]	; (8006dbc <tcp_receive+0x5c4>)
 8006d3c:	f240 52af 	movw	r2, #1455	; 0x5af
 8006d40:	f002 fbcd 	bl	80094de <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8006d44:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8006d48:	e060      	b.n	8006e0c <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d4c:	6829      	ldr	r1, [r5, #0]
 8006d4e:	1a5b      	subs	r3, r3, r1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f6bf aee1 	bge.w	8006b18 <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006d56:	4b1f      	ldr	r3, [pc, #124]	; (8006dd4 <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 8006d58:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006d5c:	6819      	ldr	r1, [r3, #0]
 8006d5e:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8006d60:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8006d64:	b289      	uxth	r1, r1
 8006d66:	b20b      	sxth	r3, r1
      if (m < 0) {
 8006d68:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8006d6a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8006d6e:	4408      	add	r0, r1
        m = -m;
 8006d70:	bfbc      	itt	lt
 8006d72:	4249      	neglt	r1, r1
 8006d74:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8006d76:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8006d7a:	4413      	add	r3, r2
      pcb->sa += m;
 8006d7c:	b200      	sxth	r0, r0
      pcb->sv += m;
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006d82:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8006d86:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8006d8a:	2300      	movs	r3, #0
      pcb->sa += m;
 8006d8c:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8006d8e:	6363      	str	r3, [r4, #52]	; 0x34
 8006d90:	e6c2      	b.n	8006b18 <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 8006d92:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8006d96:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 8006d9a:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 8006d9e:	f8d9 9000 	ldr.w	r9, [r9]
 8006da2:	e6ff      	b.n	8006ba4 <tcp_receive+0x3ac>
 8006da4:	0800a8cb 	.word	0x0800a8cb
 8006da8:	0800a8f3 	.word	0x0800a8f3
 8006dac:	20003efe 	.word	0x20003efe
 8006db0:	20003ecc 	.word	0x20003ecc
 8006db4:	0800a880 	.word	0x0800a880
 8006db8:	0800a913 	.word	0x0800a913
 8006dbc:	08009880 	.word	0x08009880
 8006dc0:	0800a923 	.word	0x0800a923
 8006dc4:	0800a932 	.word	0x0800a932
 8006dc8:	0800a942 	.word	0x0800a942
 8006dcc:	0800a955 	.word	0x0800a955
 8006dd0:	0800a98c 	.word	0x0800a98c
 8006dd4:	20007870 	.word	0x20007870
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8006dd8:	4269      	negs	r1, r5
 8006dda:	b209      	sxth	r1, r1
 8006ddc:	f7fe fc00 	bl	80055e0 <pbuf_header>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f43f aef2 	beq.w	8006bca <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 8006de6:	4b9c      	ldr	r3, [pc, #624]	; (8007058 <tcp_receive+0x860>)
 8006de8:	f240 5251 	movw	r2, #1361	; 0x551
 8006dec:	e6e9      	b.n	8006bc2 <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006dee:	1a9b      	subs	r3, r3, r2
 8006df0:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8006df2:	bfbe      	ittt	lt
 8006df4:	7ea3      	ldrblt	r3, [r4, #26]
 8006df6:	f043 0302 	orrlt.w	r3, r3, #2
 8006dfa:	76a3      	strblt	r3, [r4, #26]
 8006dfc:	e6f1      	b.n	8006be2 <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 8006dfe:	6803      	ldr	r3, [r0, #0]
 8006e00:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8006e02:	f7fe ff73 	bl	8005cec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8006e06:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d1f8      	bne.n	8006dfe <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8006e0c:	883a      	ldrh	r2, [r7, #0]
 8006e0e:	6833      	ldr	r3, [r6, #0]
 8006e10:	4413      	add	r3, r2
 8006e12:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8006e14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d206      	bcs.n	8006e28 <tcp_receive+0x630>
 8006e1a:	4b8f      	ldr	r3, [pc, #572]	; (8007058 <tcp_receive+0x860>)
 8006e1c:	498f      	ldr	r1, [pc, #572]	; (800705c <tcp_receive+0x864>)
 8006e1e:	4890      	ldr	r0, [pc, #576]	; (8007060 <tcp_receive+0x868>)
 8006e20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8006e24:	f002 fb5b 	bl	80094de <iprintf>
        pcb->rcv_wnd -= tcplen;
 8006e28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e2a:	883a      	ldrh	r2, [r7, #0]
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7fe fef1 	bl	8005c18 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8006e36:	686b      	ldr	r3, [r5, #4]
 8006e38:	891a      	ldrh	r2, [r3, #8]
 8006e3a:	b11a      	cbz	r2, 8006e44 <tcp_receive+0x64c>
          recv_data = inseg.p;
 8006e3c:	4a89      	ldr	r2, [pc, #548]	; (8007064 <tcp_receive+0x86c>)
 8006e3e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006e44:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006e46:	4f84      	ldr	r7, [pc, #528]	; (8007058 <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006e48:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006e4a:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8007070 <tcp_receive+0x878>
 8006e4e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007060 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006e52:	f7fc fdf5 	bl	8003a40 <lwip_htons>
 8006e56:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 8006e58:	bf41      	itttt	mi
 8006e5a:	4a83      	ldrmi	r2, [pc, #524]	; (8007068 <tcp_receive+0x870>)
 8006e5c:	7813      	ldrbmi	r3, [r2, #0]
 8006e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e62:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8006e64:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006e66:	b125      	cbz	r5, 8006e72 <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006e68:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8006e6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006e6c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8006e6e:	428b      	cmp	r3, r1
 8006e70:	d033      	beq.n	8006eda <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8006e72:	7ea3      	ldrb	r3, [r4, #26]
 8006e74:	07d9      	lsls	r1, r3, #31
 8006e76:	f140 8087 	bpl.w	8006f88 <tcp_receive+0x790>
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8006e7e:	f043 0302 	orr.w	r3, r3, #2
 8006e82:	e083      	b.n	8006f8c <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006e84:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8006e88:	f7fc fdda 	bl	8003a40 <lwip_htons>
 8006e8c:	07c1      	lsls	r1, r0, #31
 8006e8e:	d51d      	bpl.n	8006ecc <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8006e90:	68eb      	ldr	r3, [r5, #12]
 8006e92:	8998      	ldrh	r0, [r3, #12]
 8006e94:	f7fc fdd4 	bl	8003a40 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006e98:	0782      	lsls	r2, r0, #30
 8006e9a:	d417      	bmi.n	8006ecc <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006e9c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8006ea6:	f7fc fdcb 	bl	8003a40 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8006eaa:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006eac:	ea49 0000 	orr.w	r0, r9, r0
 8006eb0:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8006eb4:	8998      	ldrh	r0, [r3, #12]
 8006eb6:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006eba:	f7fc fdc1 	bl	8003a40 <lwip_htons>
 8006ebe:	f010 0003 	ands.w	r0, r0, #3
 8006ec2:	bf18      	it	ne
 8006ec4:	2001      	movne	r0, #1
 8006ec6:	4481      	add	r9, r0
 8006ec8:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8006ecc:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	f7fe ff0b 	bl	8005cec <tcp_seg_free>
              next = next->next;
 8006ed6:	46c8      	mov	r8, r9
 8006ed8:	e6f4      	b.n	8006cc4 <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 8006eda:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006edc:	8990      	ldrh	r0, [r2, #12]
 8006ede:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006ee2:	f7fc fdad 	bl	8003a40 <lwip_htons>
 8006ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006ee8:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006eec:	f010 0003 	ands.w	r0, r0, #3
 8006ef0:	bf18      	it	ne
 8006ef2:	2001      	movne	r0, #1
 8006ef4:	449a      	add	sl, r3
 8006ef6:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006ef8:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006efa:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006efc:	8998      	ldrh	r0, [r3, #12]
 8006efe:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8006f02:	f7fc fd9d 	bl	8003a40 <lwip_htons>
 8006f06:	f010 0003 	ands.w	r0, r0, #3
 8006f0a:	bf18      	it	ne
 8006f0c:	2001      	movne	r0, #1
 8006f0e:	4458      	add	r0, fp
 8006f10:	4582      	cmp	sl, r0
 8006f12:	d206      	bcs.n	8006f22 <tcp_receive+0x72a>
 8006f14:	463b      	mov	r3, r7
 8006f16:	f240 52de 	movw	r2, #1502	; 0x5de
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	4648      	mov	r0, r9
 8006f1e:	f002 fade 	bl	80094de <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8006f22:	68eb      	ldr	r3, [r5, #12]
 8006f24:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006f28:	8998      	ldrh	r0, [r3, #12]
 8006f2a:	f7fc fd89 	bl	8003a40 <lwip_htons>
 8006f2e:	f010 0003 	ands.w	r0, r0, #3
 8006f32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f34:	bf18      	it	ne
 8006f36:	2001      	movne	r0, #1
 8006f38:	4450      	add	r0, sl
 8006f3a:	1a18      	subs	r0, r3, r0
 8006f3c:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7fe fe6a 	bl	8005c18 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8006f44:	6869      	ldr	r1, [r5, #4]
 8006f46:	890b      	ldrh	r3, [r1, #8]
 8006f48:	b133      	cbz	r3, 8006f58 <tcp_receive+0x760>
            if (recv_data) {
 8006f4a:	4b46      	ldr	r3, [pc, #280]	; (8007064 <tcp_receive+0x86c>)
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	b1c8      	cbz	r0, 8006f84 <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 8006f50:	f7fe fd26 	bl	80059a0 <pbuf_cat>
            cseg->p = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006f58:	68eb      	ldr	r3, [r5, #12]
 8006f5a:	8998      	ldrh	r0, [r3, #12]
 8006f5c:	f7fc fd70 	bl	8003a40 <lwip_htons>
 8006f60:	07c0      	lsls	r0, r0, #31
 8006f62:	d509      	bpl.n	8006f78 <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 8006f64:	4a40      	ldr	r2, [pc, #256]	; (8007068 <tcp_receive+0x870>)
 8006f66:	7813      	ldrb	r3, [r2, #0]
 8006f68:	f043 0320 	orr.w	r3, r3, #32
 8006f6c:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8006f6e:	7d23      	ldrb	r3, [r4, #20]
 8006f70:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8006f72:	bf04      	itt	eq
 8006f74:	2307      	moveq	r3, #7
 8006f76:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f7fe feb5 	bl	8005cec <tcp_seg_free>
 8006f82:	e76f      	b.n	8006e64 <tcp_receive+0x66c>
              recv_data = cseg->p;
 8006f84:	6019      	str	r1, [r3, #0]
 8006f86:	e7e5      	b.n	8006f54 <tcp_receive+0x75c>
        tcp_ack(pcb);
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8006f8e:	b003      	add	sp, #12
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 ffd7 	bl	8007f48 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8006f9a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006f9c:	b925      	cbnz	r5, 8006fa8 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8006f9e:	4833      	ldr	r0, [pc, #204]	; (800706c <tcp_receive+0x874>)
 8006fa0:	f7fe feba 	bl	8005d18 <tcp_seg_copy>
 8006fa4:	6720      	str	r0, [r4, #112]	; 0x70
 8006fa6:	e7f2      	b.n	8006f8e <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 8006fa8:	6833      	ldr	r3, [r6, #0]
 8006faa:	f04f 0800 	mov.w	r8, #0
 8006fae:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8006fb2:	f103 0c01 	add.w	ip, r3, #1
 8006fb6:	68e8      	ldr	r0, [r5, #12]
 8006fb8:	6842      	ldr	r2, [r0, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d117      	bne.n	8006fee <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 8006fbe:	482b      	ldr	r0, [pc, #172]	; (800706c <tcp_receive+0x874>)
 8006fc0:	892b      	ldrh	r3, [r5, #8]
 8006fc2:	8902      	ldrh	r2, [r0, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d9e2      	bls.n	8006f8e <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 8006fc8:	f7fe fea6 	bl	8005d18 <tcp_seg_copy>
                if (cseg != NULL) {
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d0de      	beq.n	8006f8e <tcp_receive+0x796>
                  if (prev != NULL) {
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d009      	beq.n	8006fea <tcp_receive+0x7f2>
                    prev->next = cseg;
 8006fd6:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006fda:	4629      	mov	r1, r5
}
 8006fdc:	b003      	add	sp, #12
 8006fde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8006fe2:	f7ff bbcb 	b.w	800677c <tcp_oos_insert_segment>
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	e7e5      	b.n	8006fb6 <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 8006fea:	6720      	str	r0, [r4, #112]	; 0x70
 8006fec:	e7f5      	b.n	8006fda <tcp_receive+0x7e2>
              if (prev == NULL) {
 8006fee:	f1b8 0f00 	cmp.w	r8, #0
 8006ff2:	d109      	bne.n	8007008 <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8006ff4:	1a99      	subs	r1, r3, r2
 8006ff6:	2900      	cmp	r1, #0
 8006ff8:	da3c      	bge.n	8007074 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8006ffa:	481c      	ldr	r0, [pc, #112]	; (800706c <tcp_receive+0x874>)
 8006ffc:	f7fe fe8c 	bl	8005d18 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007000:	2800      	cmp	r0, #0
 8007002:	d0c4      	beq.n	8006f8e <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 8007004:	6720      	str	r0, [r4, #112]	; 0x70
 8007006:	e7e8      	b.n	8006fda <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007008:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800700c:	6849      	ldr	r1, [r1, #4]
 800700e:	ebae 0101 	sub.w	r1, lr, r1
 8007012:	2900      	cmp	r1, #0
 8007014:	db2e      	blt.n	8007074 <tcp_receive+0x87c>
 8007016:	ebac 0102 	sub.w	r1, ip, r2
 800701a:	2900      	cmp	r1, #0
 800701c:	dc2a      	bgt.n	8007074 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 800701e:	4813      	ldr	r0, [pc, #76]	; (800706c <tcp_receive+0x874>)
 8007020:	f7fe fe7a 	bl	8005d18 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007024:	4604      	mov	r4, r0
 8007026:	2800      	cmp	r0, #0
 8007028:	d0b1      	beq.n	8006f8e <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800702a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800702e:	6831      	ldr	r1, [r6, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007036:	4413      	add	r3, r2
 8007038:	1a5b      	subs	r3, r3, r1
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd07      	ble.n	800704e <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800703e:	1a89      	subs	r1, r1, r2
 8007040:	b289      	uxth	r1, r1
 8007042:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007046:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800704a:	f7fe fc15 	bl	8005878 <pbuf_realloc>
                    prev->next = cseg;
 800704e:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007052:	4629      	mov	r1, r5
 8007054:	4620      	mov	r0, r4
 8007056:	e7c1      	b.n	8006fdc <tcp_receive+0x7e4>
 8007058:	0800a880 	.word	0x0800a880
 800705c:	0800a9c7 	.word	0x0800a9c7
 8007060:	08009880 	.word	0x08009880
 8007064:	20003ee0 	.word	0x20003ee0
 8007068:	20003ee4 	.word	0x20003ee4
 800706c:	20003ecc 	.word	0x20003ecc
 8007070:	0800a9e6 	.word	0x0800a9e6
              if (next->next == NULL &&
 8007074:	6829      	ldr	r1, [r5, #0]
 8007076:	46a8      	mov	r8, r5
 8007078:	2900      	cmp	r1, #0
 800707a:	d1b4      	bne.n	8006fe6 <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800707c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd85      	ble.n	8006f8e <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007082:	8980      	ldrh	r0, [r0, #12]
 8007084:	f7fc fcdc 	bl	8003a40 <lwip_htons>
 8007088:	07c2      	lsls	r2, r0, #31
 800708a:	d480      	bmi.n	8006f8e <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 800708c:	483c      	ldr	r0, [pc, #240]	; (8007180 <tcp_receive+0x988>)
 800708e:	f7fe fe43 	bl	8005d18 <tcp_seg_copy>
 8007092:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8007094:	2800      	cmp	r0, #0
 8007096:	f43f af7a 	beq.w	8006f8e <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800709a:	68eb      	ldr	r3, [r5, #12]
 800709c:	6831      	ldr	r1, [r6, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	892b      	ldrh	r3, [r5, #8]
 80070a2:	4413      	add	r3, r2
 80070a4:	1a5b      	subs	r3, r3, r1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dd05      	ble.n	80070b6 <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80070aa:	1a89      	subs	r1, r1, r2
 80070ac:	b289      	uxth	r1, r1
 80070ae:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80070b0:	6868      	ldr	r0, [r5, #4]
 80070b2:	f7fe fbe1 	bl	8005878 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80070b6:	6832      	ldr	r2, [r6, #0]
 80070b8:	883b      	ldrh	r3, [r7, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f77f af62 	ble.w	8006f8e <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	8998      	ldrh	r0, [r3, #12]
 80070d0:	f7fc fcb6 	bl	8003a40 <lwip_htons>
 80070d4:	07c3      	lsls	r3, r0, #31
 80070d6:	d511      	bpl.n	80070fc <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80070de:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80070e2:	4640      	mov	r0, r8
 80070e4:	f7fc fcac 	bl	8003a40 <lwip_htons>
 80070e8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80070ec:	f7fc fca8 	bl	8003a40 <lwip_htons>
 80070f0:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80070f4:	ea40 0808 	orr.w	r8, r0, r8
 80070f8:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80070fc:	6832      	ldr	r2, [r6, #0]
 80070fe:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	1a89      	subs	r1, r1, r2
 8007104:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8007106:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007108:	4411      	add	r1, r2
 800710a:	b289      	uxth	r1, r1
 800710c:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800710e:	f7fe fbb3 	bl	8005878 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	891d      	ldrh	r5, [r3, #8]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	8998      	ldrh	r0, [r3, #12]
 800711a:	f7fc fc91 	bl	8003a40 <lwip_htons>
 800711e:	f010 0003 	ands.w	r0, r0, #3
 8007122:	bf18      	it	ne
 8007124:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007126:	6833      	ldr	r3, [r6, #0]
 8007128:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800712a:	4428      	add	r0, r5
 800712c:	b280      	uxth	r0, r0
 800712e:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007130:	4418      	add	r0, r3
 8007132:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007134:	4413      	add	r3, r2
 8007136:	4298      	cmp	r0, r3
 8007138:	f43f af29 	beq.w	8006f8e <tcp_receive+0x796>
 800713c:	4b11      	ldr	r3, [pc, #68]	; (8007184 <tcp_receive+0x98c>)
 800713e:	4912      	ldr	r1, [pc, #72]	; (8007188 <tcp_receive+0x990>)
 8007140:	4812      	ldr	r0, [pc, #72]	; (800718c <tcp_receive+0x994>)
 8007142:	f240 627b 	movw	r2, #1659	; 0x67b
}
 8007146:	b003      	add	sp, #12
 8007148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800714c:	f002 b9c7 	b.w	80094de <iprintf>
      tcp_send_empty_ack(pcb);
 8007150:	4620      	mov	r0, r4
}
 8007152:	b003      	add	sp, #12
 8007154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8007158:	f000 bef6 	b.w	8007f48 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	1a99      	subs	r1, r3, r2
 8007160:	2900      	cmp	r1, #0
 8007162:	db06      	blt.n	8007172 <tcp_receive+0x97a>
 8007164:	3301      	adds	r3, #1
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	f77f af0e 	ble.w	8006f8e <tcp_receive+0x796>
      tcp_ack_now(pcb);
 8007172:	7ea3      	ldrb	r3, [r4, #26]
 8007174:	e683      	b.n	8006e7e <tcp_receive+0x686>
        pcb->dupacks = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800717c:	f7ff bbb1 	b.w	80068e2 <tcp_receive+0xea>
 8007180:	20003ecc 	.word	0x20003ecc
 8007184:	0800a880 	.word	0x0800a880
 8007188:	0800a955 	.word	0x0800a955
 800718c:	08009880 	.word	0x08009880

08007190 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <tcp_getoptbyte+0x30>)
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <tcp_getoptbyte+0x34>)
 8007194:	6819      	ldr	r1, [r3, #0]
{
 8007196:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007198:	b121      	cbz	r1, 80071a4 <tcp_getoptbyte+0x14>
 800719a:	480b      	ldr	r0, [pc, #44]	; (80071c8 <tcp_getoptbyte+0x38>)
 800719c:	8813      	ldrh	r3, [r2, #0]
 800719e:	8800      	ldrh	r0, [r0, #0]
 80071a0:	4283      	cmp	r3, r0
 80071a2:	d207      	bcs.n	80071b4 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80071a6:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80071a8:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 80071aa:	440b      	add	r3, r1
 80071ac:	1c48      	adds	r0, r1, #1
 80071ae:	8010      	strh	r0, [r2, #0]
 80071b0:	7d18      	ldrb	r0, [r3, #20]
 80071b2:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80071b4:	1c5c      	adds	r4, r3, #1
 80071b6:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 80071b8:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80071ba:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 80071bc:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	20003ef8 	.word	0x20003ef8
 80071c4:	20003eec 	.word	0x20003eec
 80071c8:	20003ef4 	.word	0x20003ef4
 80071cc:	20003ef0 	.word	0x20003ef0

080071d0 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80071d2:	4d19      	ldr	r5, [pc, #100]	; (8007238 <tcp_parseopt.isra.1.part.2+0x68>)
 80071d4:	4e19      	ldr	r6, [pc, #100]	; (800723c <tcp_parseopt.isra.1.part.2+0x6c>)
 80071d6:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 80071d8:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80071da:	802b      	strh	r3, [r5, #0]
 80071dc:	8834      	ldrh	r4, [r6, #0]
 80071de:	882b      	ldrh	r3, [r5, #0]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d300      	bcc.n	80071e6 <tcp_parseopt.isra.1.part.2+0x16>
 80071e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 80071e6:	f7ff ffd3 	bl	8007190 <tcp_getoptbyte>
      switch (opt) {
 80071ea:	2801      	cmp	r0, #1
 80071ec:	d0f6      	beq.n	80071dc <tcp_parseopt.isra.1.part.2+0xc>
 80071ee:	d3f9      	bcc.n	80071e4 <tcp_parseopt.isra.1.part.2+0x14>
 80071f0:	2802      	cmp	r0, #2
 80071f2:	d117      	bne.n	8007224 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80071f4:	f7ff ffcc 	bl	8007190 <tcp_getoptbyte>
 80071f8:	2804      	cmp	r0, #4
 80071fa:	d1f3      	bne.n	80071e4 <tcp_parseopt.isra.1.part.2+0x14>
 80071fc:	882b      	ldrh	r3, [r5, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	42a3      	cmp	r3, r4
 8007202:	daef      	bge.n	80071e4 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8007204:	f7ff ffc4 	bl	8007190 <tcp_getoptbyte>
 8007208:	0200      	lsls	r0, r0, #8
 800720a:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 800720c:	f7ff ffc0 	bl	8007190 <tcp_getoptbyte>
 8007210:	4320      	orrs	r0, r4
 8007212:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007214:	1e43      	subs	r3, r0, #1
 8007216:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800721a:	bf28      	it	cs
 800721c:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8007220:	8038      	strh	r0, [r7, #0]
 8007222:	e7db      	b.n	80071dc <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007224:	f7ff ffb4 	bl	8007190 <tcp_getoptbyte>
        if (data < 2) {
 8007228:	2801      	cmp	r0, #1
 800722a:	d9db      	bls.n	80071e4 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800722c:	882b      	ldrh	r3, [r5, #0]
 800722e:	3b02      	subs	r3, #2
 8007230:	4418      	add	r0, r3
 8007232:	8028      	strh	r0, [r5, #0]
 8007234:	e7d2      	b.n	80071dc <tcp_parseopt.isra.1.part.2+0xc>
 8007236:	bf00      	nop
 8007238:	20003eec 	.word	0x20003eec
 800723c:	20003efc 	.word	0x20003efc

08007240 <tcp_input_delayed_close>:
{
 8007240:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8007242:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <tcp_input_delayed_close+0x38>)
{
 8007244:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8007246:	7818      	ldrb	r0, [r3, #0]
 8007248:	f010 0010 	ands.w	r0, r0, #16
 800724c:	d012      	beq.n	8007274 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800724e:	7ea3      	ldrb	r3, [r4, #26]
 8007250:	06db      	lsls	r3, r3, #27
 8007252:	d406      	bmi.n	8007262 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007254:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007258:	b11b      	cbz	r3, 8007262 <tcp_input_delayed_close+0x22>
 800725a:	f06f 010e 	mvn.w	r1, #14
 800725e:	6920      	ldr	r0, [r4, #16]
 8007260:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007262:	4621      	mov	r1, r4
 8007264:	4805      	ldr	r0, [pc, #20]	; (800727c <tcp_input_delayed_close+0x3c>)
 8007266:	f7fe ff6f 	bl	8006148 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800726a:	2001      	movs	r0, #1
 800726c:	4621      	mov	r1, r4
 800726e:	f7fe f837 	bl	80052e0 <memp_free>
 8007272:	2001      	movs	r0, #1
}
 8007274:	bd10      	pop	{r4, pc}
 8007276:	bf00      	nop
 8007278:	20003ee4 	.word	0x20003ee4
 800727c:	2000786c 	.word	0x2000786c

08007280 <tcp_input>:
{
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8007284:	4e9f      	ldr	r6, [pc, #636]	; (8007504 <tcp_input+0x284>)
 8007286:	6843      	ldr	r3, [r0, #4]
 8007288:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800728a:	8943      	ldrh	r3, [r0, #10]
 800728c:	2b13      	cmp	r3, #19
{
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8007292:	f240 81b2 	bls.w	80075fa <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007296:	4f9c      	ldr	r7, [pc, #624]	; (8007508 <tcp_input+0x288>)
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f7fd f9dd 	bl	800465a <ip4_addr_isbroadcast_u32>
 80072a0:	46b8      	mov	r8, r7
 80072a2:	4604      	mov	r4, r0
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 81a8 	bne.w	80075fa <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80072b0:	2be0      	cmp	r3, #224	; 0xe0
 80072b2:	f000 81a2 	beq.w	80075fa <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80072b6:	6833      	ldr	r3, [r6, #0]
 80072b8:	8998      	ldrh	r0, [r3, #12]
 80072ba:	f7fc fbc1 	bl	8003a40 <lwip_htons>
 80072be:	0a81      	lsrs	r1, r0, #10
 80072c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80072c4:	2913      	cmp	r1, #19
 80072c6:	f240 8198 	bls.w	80075fa <tcp_input+0x37a>
 80072ca:	892b      	ldrh	r3, [r5, #8]
 80072cc:	b289      	uxth	r1, r1
 80072ce:	428b      	cmp	r3, r1
 80072d0:	f0c0 8193 	bcc.w	80075fa <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 80072d4:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80072d6:	4a8d      	ldr	r2, [pc, #564]	; (800750c <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 80072d8:	4f8d      	ldr	r7, [pc, #564]	; (8007510 <tcp_input+0x290>)
 80072da:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80072dc:	f1a1 0314 	sub.w	r3, r1, #20
 80072e0:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 80072e2:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 80072e4:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80072e6:	8013      	strh	r3, [r2, #0]
 80072e8:	4c8a      	ldr	r4, [pc, #552]	; (8007514 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 80072ea:	d344      	bcc.n	8007376 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80072ec:	4249      	negs	r1, r1
 80072ee:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 80072f0:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80072f2:	f7fe f975 	bl	80055e0 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80072f6:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80072f8:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8007568 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80072fc:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80072fe:	4f86      	ldr	r7, [pc, #536]	; (8007518 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007300:	f7fc fb9e 	bl	8003a40 <lwip_htons>
 8007304:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007306:	6834      	ldr	r4, [r6, #0]
 8007308:	8860      	ldrh	r0, [r4, #2]
 800730a:	f7fc fb99 	bl	8003a40 <lwip_htons>
 800730e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007310:	6834      	ldr	r4, [r6, #0]
 8007312:	6860      	ldr	r0, [r4, #4]
 8007314:	f7fc fb97 	bl	8003a46 <lwip_htonl>
 8007318:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800731a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800731c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007320:	68a0      	ldr	r0, [r4, #8]
 8007322:	f7fc fb90 	bl	8003a46 <lwip_htonl>
 8007326:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007328:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800732a:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800732c:	89e0      	ldrh	r0, [r4, #14]
 800732e:	f7fc fb87 	bl	8003a40 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007332:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007334:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007336:	8998      	ldrh	r0, [r3, #12]
 8007338:	f7fc fb82 	bl	8003a40 <lwip_htons>
 800733c:	b2c0      	uxtb	r0, r0
 800733e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007342:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8007344:	4a75      	ldr	r2, [pc, #468]	; (800751c <tcp_input+0x29c>)
 8007346:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007348:	f010 0003 	ands.w	r0, r0, #3
 800734c:	bf18      	it	ne
 800734e:	2001      	movne	r0, #1
 8007350:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007352:	4973      	ldr	r1, [pc, #460]	; (8007520 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8007354:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007356:	4b73      	ldr	r3, [pc, #460]	; (8007524 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007358:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800735a:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 800735c:	f04f 0a00 	mov.w	sl, #0
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007364:	2c00      	cmp	r4, #0
 8007366:	d140      	bne.n	80073ea <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007368:	4b6f      	ldr	r3, [pc, #444]	; (8007528 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800736a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800752c <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800736e:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007370:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 800756c <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007374:	e148      	b.n	8007608 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	b92b      	cbnz	r3, 8007386 <tcp_input+0x106>
 800737a:	4b6c      	ldr	r3, [pc, #432]	; (800752c <tcp_input+0x2ac>)
 800737c:	496c      	ldr	r1, [pc, #432]	; (8007530 <tcp_input+0x2b0>)
 800737e:	486d      	ldr	r0, [pc, #436]	; (8007534 <tcp_input+0x2b4>)
 8007380:	22b2      	movs	r2, #178	; 0xb2
 8007382:	f002 f8ac 	bl	80094de <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8007386:	f06f 0113 	mvn.w	r1, #19
 800738a:	4628      	mov	r0, r5
 800738c:	f7fe f928 	bl	80055e0 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007390:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8007392:	8969      	ldrh	r1, [r5, #10]
 8007394:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007396:	881c      	ldrh	r4, [r3, #0]
 8007398:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800739a:	4249      	negs	r1, r1
 800739c:	b209      	sxth	r1, r1
 800739e:	4628      	mov	r0, r5
 80073a0:	f7fe f91e 	bl	80055e0 <pbuf_header>
    if (opt2len > p->next->len) {
 80073a4:	6828      	ldr	r0, [r5, #0]
 80073a6:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80073a8:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	f0c0 8125 	bcc.w	80075fa <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 80073b0:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80073b2:	6843      	ldr	r3, [r0, #4]
 80073b4:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80073b6:	b209      	sxth	r1, r1
 80073b8:	f7fe f912 	bl	80055e0 <pbuf_header>
    p->tot_len -= opt2len;
 80073bc:	892b      	ldrh	r3, [r5, #8]
 80073be:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80073c0:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 80073c2:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80073c4:	b12b      	cbz	r3, 80073d2 <tcp_input+0x152>
 80073c6:	4b59      	ldr	r3, [pc, #356]	; (800752c <tcp_input+0x2ac>)
 80073c8:	495b      	ldr	r1, [pc, #364]	; (8007538 <tcp_input+0x2b8>)
 80073ca:	485a      	ldr	r0, [pc, #360]	; (8007534 <tcp_input+0x2b4>)
 80073cc:	22cf      	movs	r2, #207	; 0xcf
 80073ce:	f002 f886 	bl	80094de <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	892a      	ldrh	r2, [r5, #8]
 80073d6:	891b      	ldrh	r3, [r3, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d08c      	beq.n	80072f6 <tcp_input+0x76>
 80073dc:	4b53      	ldr	r3, [pc, #332]	; (800752c <tcp_input+0x2ac>)
 80073de:	4957      	ldr	r1, [pc, #348]	; (800753c <tcp_input+0x2bc>)
 80073e0:	4854      	ldr	r0, [pc, #336]	; (8007534 <tcp_input+0x2b4>)
 80073e2:	22d0      	movs	r2, #208	; 0xd0
 80073e4:	f002 f87b 	bl	80094de <iprintf>
 80073e8:	e785      	b.n	80072f6 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80073ea:	7d23      	ldrb	r3, [r4, #20]
 80073ec:	b92b      	cbnz	r3, 80073fa <tcp_input+0x17a>
 80073ee:	4b4f      	ldr	r3, [pc, #316]	; (800752c <tcp_input+0x2ac>)
 80073f0:	4953      	ldr	r1, [pc, #332]	; (8007540 <tcp_input+0x2c0>)
 80073f2:	4850      	ldr	r0, [pc, #320]	; (8007534 <tcp_input+0x2b4>)
 80073f4:	22e2      	movs	r2, #226	; 0xe2
 80073f6:	f002 f872 	bl	80094de <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80073fa:	7d23      	ldrb	r3, [r4, #20]
 80073fc:	2b0a      	cmp	r3, #10
 80073fe:	d105      	bne.n	800740c <tcp_input+0x18c>
 8007400:	4b4a      	ldr	r3, [pc, #296]	; (800752c <tcp_input+0x2ac>)
 8007402:	4950      	ldr	r1, [pc, #320]	; (8007544 <tcp_input+0x2c4>)
 8007404:	484b      	ldr	r0, [pc, #300]	; (8007534 <tcp_input+0x2b4>)
 8007406:	22e3      	movs	r2, #227	; 0xe3
 8007408:	f002 f869 	bl	80094de <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800740c:	7d23      	ldrb	r3, [r4, #20]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d105      	bne.n	800741e <tcp_input+0x19e>
 8007412:	4b46      	ldr	r3, [pc, #280]	; (800752c <tcp_input+0x2ac>)
 8007414:	494c      	ldr	r1, [pc, #304]	; (8007548 <tcp_input+0x2c8>)
 8007416:	4847      	ldr	r0, [pc, #284]	; (8007534 <tcp_input+0x2b4>)
 8007418:	22e4      	movs	r2, #228	; 0xe4
 800741a:	f002 f860 	bl	80094de <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800741e:	6832      	ldr	r2, [r6, #0]
 8007420:	8b21      	ldrh	r1, [r4, #24]
 8007422:	8813      	ldrh	r3, [r2, #0]
 8007424:	4299      	cmp	r1, r3
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	d169      	bne.n	80074fe <tcp_input+0x27e>
 800742a:	8ae1      	ldrh	r1, [r4, #22]
 800742c:	8852      	ldrh	r2, [r2, #2]
 800742e:	4291      	cmp	r1, r2
 8007430:	d165      	bne.n	80074fe <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8007432:	6861      	ldr	r1, [r4, #4]
 8007434:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007438:	4291      	cmp	r1, r2
 800743a:	d160      	bne.n	80074fe <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8007442:	4291      	cmp	r1, r2
 8007444:	d15b      	bne.n	80074fe <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007446:	429c      	cmp	r4, r3
 8007448:	f040 8406 	bne.w	8007c58 <tcp_input+0x9d8>
 800744c:	4b37      	ldr	r3, [pc, #220]	; (800752c <tcp_input+0x2ac>)
 800744e:	493f      	ldr	r1, [pc, #252]	; (800754c <tcp_input+0x2cc>)
 8007450:	4838      	ldr	r0, [pc, #224]	; (8007534 <tcp_input+0x2b4>)
 8007452:	22ec      	movs	r2, #236	; 0xec
 8007454:	f002 f843 	bl	80094de <iprintf>
      if (prev != NULL) {
 8007458:	f1ba 0f00 	cmp.w	sl, #0
 800745c:	d007      	beq.n	800746e <tcp_input+0x1ee>
        prev->next = pcb->next;
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8007464:	f8d9 3000 	ldr.w	r3, [r9]
 8007468:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 800746a:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800746e:	68e3      	ldr	r3, [r4, #12]
 8007470:	429c      	cmp	r4, r3
 8007472:	d105      	bne.n	8007480 <tcp_input+0x200>
 8007474:	4b2d      	ldr	r3, [pc, #180]	; (800752c <tcp_input+0x2ac>)
 8007476:	4936      	ldr	r1, [pc, #216]	; (8007550 <tcp_input+0x2d0>)
 8007478:	482e      	ldr	r0, [pc, #184]	; (8007534 <tcp_input+0x2b4>)
 800747a:	22f4      	movs	r2, #244	; 0xf4
 800747c:	f002 f82f 	bl	80094de <iprintf>
    inseg.next = NULL;
 8007480:	4b34      	ldr	r3, [pc, #208]	; (8007554 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8007482:	8929      	ldrh	r1, [r5, #8]
 8007484:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 8007486:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 8007488:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 800748a:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 800748c:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 800748e:	4832      	ldr	r0, [pc, #200]	; (8007558 <tcp_input+0x2d8>)
    recv_acked = 0;
 8007490:	4932      	ldr	r1, [pc, #200]	; (800755c <tcp_input+0x2dc>)
    inseg.p = p;
 8007492:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8007494:	4b32      	ldr	r3, [pc, #200]	; (8007560 <tcp_input+0x2e0>)
    recv_flags = 0;
 8007496:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8007498:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 800749a:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 800749c:	9a03      	ldr	r2, [sp, #12]
 800749e:	9105      	str	r1, [sp, #20]
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	f012 0f08 	tst.w	r2, #8
 80074a6:	4680      	mov	r8, r0
 80074a8:	469a      	mov	sl, r3
 80074aa:	d003      	beq.n	80074b4 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 80074ac:	7b6b      	ldrb	r3, [r5, #13]
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80074b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80074b6:	4d2b      	ldr	r5, [pc, #172]	; (8007564 <tcp_input+0x2e4>)
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8137 	beq.w	800772c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80074be:	4620      	mov	r0, r4
 80074c0:	f7fe ff54 	bl	800636c <tcp_process_refused_data>
 80074c4:	300d      	adds	r0, #13
 80074c6:	d008      	beq.n	80074da <tcp_input+0x25a>
 80074c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 812e 	beq.w	800772c <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8129 	beq.w	800772c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 80074da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074dc:	b913      	cbnz	r3, 80074e4 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fd32 	bl	8007f48 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 80074e4:	2400      	movs	r4, #0
 80074e6:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 80074e8:	4d1a      	ldr	r5, [pc, #104]	; (8007554 <tcp_input+0x2d4>)
    recv_data = NULL;
 80074ea:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 80074ee:	6868      	ldr	r0, [r5, #4]
 80074f0:	b110      	cbz	r0, 80074f8 <tcp_input+0x278>
      pbuf_free(inseg.p);
 80074f2:	f7fe f87b 	bl	80055ec <pbuf_free>
      inseg.p = NULL;
 80074f6:	606c      	str	r4, [r5, #4]
}
 80074f8:	b009      	add	sp, #36	; 0x24
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074fe:	46a2      	mov	sl, r4
 8007500:	461c      	mov	r4, r3
 8007502:	e72f      	b.n	8007364 <tcp_input+0xe4>
 8007504:	20003ef0 	.word	0x20003ef0
 8007508:	20004168 	.word	0x20004168
 800750c:	20003efc 	.word	0x20003efc
 8007510:	20003ef8 	.word	0x20003ef8
 8007514:	20003ef4 	.word	0x20003ef4
 8007518:	20003ec4 	.word	0x20003ec4
 800751c:	20003ec8 	.word	0x20003ec8
 8007520:	2000786c 	.word	0x2000786c
 8007524:	20003efe 	.word	0x20003efe
 8007528:	2000787c 	.word	0x2000787c
 800752c:	0800a880 	.word	0x0800a880
 8007530:	0800a6ca 	.word	0x0800a6ca
 8007534:	08009880 	.word	0x08009880
 8007538:	0800a6da 	.word	0x0800a6da
 800753c:	0800a6e6 	.word	0x0800a6e6
 8007540:	0800a705 	.word	0x0800a705
 8007544:	0800a72c 	.word	0x0800a72c
 8007548:	0800a756 	.word	0x0800a756
 800754c:	0800a77d 	.word	0x0800a77d
 8007550:	0800a7a8 	.word	0x0800a7a8
 8007554:	20003ecc 	.word	0x20003ecc
 8007558:	20003ee4 	.word	0x20003ee4
 800755c:	20003edc 	.word	0x20003edc
 8007560:	20003ee0 	.word	0x20003ee0
 8007564:	20007880 	.word	0x20007880
 8007568:	20003ee8 	.word	0x20003ee8
 800756c:	0800a7d2 	.word	0x0800a7d2
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007570:	7d23      	ldrb	r3, [r4, #20]
 8007572:	2b0a      	cmp	r3, #10
 8007574:	d005      	beq.n	8007582 <tcp_input+0x302>
 8007576:	4653      	mov	r3, sl
 8007578:	22fe      	movs	r2, #254	; 0xfe
 800757a:	4649      	mov	r1, r9
 800757c:	489d      	ldr	r0, [pc, #628]	; (80077f4 <tcp_input+0x574>)
 800757e:	f001 ffae 	bl	80094de <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007582:	6833      	ldr	r3, [r6, #0]
 8007584:	8b22      	ldrh	r2, [r4, #24]
 8007586:	8818      	ldrh	r0, [r3, #0]
 8007588:	4290      	cmp	r0, r2
 800758a:	d13c      	bne.n	8007606 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 800758c:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 800758e:	885a      	ldrh	r2, [r3, #2]
 8007590:	428a      	cmp	r2, r1
 8007592:	d138      	bne.n	8007606 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800759a:	4299      	cmp	r1, r3
 800759c:	d133      	bne.n	8007606 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800759e:	6821      	ldr	r1, [r4, #0]
 80075a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80075a4:	4299      	cmp	r1, r3
 80075a6:	d12e      	bne.n	8007606 <tcp_input+0x386>
  if (flags & TCP_RST) {
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	0759      	lsls	r1, r3, #29
 80075ae:	d424      	bmi.n	80075fa <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 80075b0:	079e      	lsls	r6, r3, #30
 80075b2:	d513      	bpl.n	80075dc <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80075b4:	f8db 1000 	ldr.w	r1, [fp]
 80075b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ba:	1acb      	subs	r3, r1, r3
 80075bc:	d413      	bmi.n	80075e6 <tcp_input+0x366>
 80075be:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80075c0:	1b9b      	subs	r3, r3, r6
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dc0f      	bgt.n	80075e6 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	881c      	ldrh	r4, [r3, #0]
 80075ca:	9001      	str	r0, [sp, #4]
 80075cc:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80075ce:	4b8a      	ldr	r3, [pc, #552]	; (80077f8 <tcp_input+0x578>)
 80075d0:	4421      	add	r1, r4
 80075d2:	1d1a      	adds	r2, r3, #4
 80075d4:	6838      	ldr	r0, [r7, #0]
 80075d6:	f000 fe6b 	bl	80082b0 <tcp_rst>
 80075da:	e00e      	b.n	80075fa <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 80075dc:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 80075de:	bf42      	ittt	mi
 80075e0:	4b86      	ldrmi	r3, [pc, #536]	; (80077fc <tcp_input+0x57c>)
 80075e2:	681b      	ldrmi	r3, [r3, #0]
 80075e4:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b133      	cbz	r3, 80075fa <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 80075ec:	7ea3      	ldrb	r3, [r4, #26]
 80075ee:	f043 0302 	orr.w	r3, r3, #2
 80075f2:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fcdd 	bl	8007fb4 <tcp_output>
  pbuf_free(p);
 80075fa:	4628      	mov	r0, r5
}
 80075fc:	b009      	add	sp, #36	; 0x24
 80075fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007602:	f7fd bff3 	b.w	80055ec <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007606:	68e4      	ldr	r4, [r4, #12]
 8007608:	2c00      	cmp	r4, #0
 800760a:	d1b1      	bne.n	8007570 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800760c:	4b7c      	ldr	r3, [pc, #496]	; (8007800 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 800760e:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007610:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007612:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007616:	4689      	mov	r9, r1
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	d111      	bne.n	8007642 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800761e:	8990      	ldrh	r0, [r2, #12]
 8007620:	f7fc fa0e 	bl	8003a40 <lwip_htons>
 8007624:	0743      	lsls	r3, r0, #29
 8007626:	d4e8      	bmi.n	80075fa <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007628:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800762a:	9a04      	ldr	r2, [sp, #16]
 800762c:	f8db 1000 	ldr.w	r1, [fp]
 8007630:	8810      	ldrh	r0, [r2, #0]
 8007632:	881a      	ldrh	r2, [r3, #0]
 8007634:	9201      	str	r2, [sp, #4]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	4b6f      	ldr	r3, [pc, #444]	; (80077f8 <tcp_input+0x578>)
 800763c:	4401      	add	r1, r0
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	e7c8      	b.n	80075d4 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8007642:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8007646:	8853      	ldrh	r3, [r2, #2]
 8007648:	4283      	cmp	r3, r0
 800764a:	d107      	bne.n	800765c <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800764c:	f8d9 3000 	ldr.w	r3, [r9]
 8007650:	4573      	cmp	r3, lr
 8007652:	f000 82dd 	beq.w	8007c10 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 82da 	beq.w	8007c10 <tcp_input+0x990>
 800765c:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800765e:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8007662:	e7d9      	b.n	8007618 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8007664:	0798      	lsls	r0, r3, #30
 8007666:	d5c8      	bpl.n	80075fa <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8007668:	f899 0015 	ldrb.w	r0, [r9, #21]
 800766c:	f7fe ffbc 	bl	80065e8 <tcp_alloc>
    if (npcb == NULL) {
 8007670:	4604      	mov	r4, r0
 8007672:	b950      	cbnz	r0, 800768a <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007674:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0be      	beq.n	80075fa <tcp_input+0x37a>
 800767c:	4601      	mov	r1, r0
 800767e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007682:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007686:	4798      	blx	r3
 8007688:	e7b7      	b.n	80075fa <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800768a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800768e:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007690:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007692:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007696:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007698:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800769c:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800769e:	7813      	ldrb	r3, [r2, #0]
 80076a0:	7852      	ldrb	r2, [r2, #1]
 80076a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076a6:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80076a8:	2303      	movs	r3, #3
 80076aa:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80076ac:	f8db 3000 	ldr.w	r3, [fp]
 80076b0:	3301      	adds	r3, #1
 80076b2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80076b4:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80076b6:	f7ff f81f 	bl	80066f8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80076ba:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 80076be:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80076c0:	3b01      	subs	r3, #1
 80076c2:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80076c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 80076c8:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 80076ca:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 80076cc:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80076ce:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 80076d0:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80076d4:	f899 3008 	ldrb.w	r3, [r9, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 80076de:	4b49      	ldr	r3, [pc, #292]	; (8007804 <tcp_input+0x584>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	60e2      	str	r2, [r4, #12]
 80076e4:	601c      	str	r4, [r3, #0]
 80076e6:	f000 ff85 	bl	80085f4 <tcp_timer_needed>
 80076ea:	4b47      	ldr	r3, [pc, #284]	; (8007808 <tcp_input+0x588>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 80076f0:	9b06      	ldr	r3, [sp, #24]
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b11b      	cbz	r3, 80076fe <tcp_input+0x47e>
 80076f6:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80076fa:	f7ff fd69 	bl	80071d0 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 80076fe:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007700:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8007702:	89db      	ldrh	r3, [r3, #14]
 8007704:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007708:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800770a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800770e:	f7fe ffff 	bl	8006710 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007712:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007714:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fb5c 	bl	8007dd4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800771c:	2800      	cmp	r0, #0
 800771e:	f43f af69 	beq.w	80075f4 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8007722:	2100      	movs	r1, #0
 8007724:	4620      	mov	r0, r4
 8007726:	f7fe fea7 	bl	8006478 <tcp_abandon>
 800772a:	e766      	b.n	80075fa <tcp_input+0x37a>
  if (flags & TCP_RST) {
 800772c:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 800772e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	0759      	lsls	r1, r3, #29
 8007734:	d535      	bpl.n	80077a2 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8007736:	7d21      	ldrb	r1, [r4, #20]
 8007738:	2902      	cmp	r1, #2
 800773a:	d122      	bne.n	8007782 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 800773c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d109      	bne.n	8007758 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8007744:	f898 3000 	ldrb.w	r3, [r8]
 8007748:	f043 0308 	orr.w	r3, r3, #8
 800774c:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8007750:	7ea3      	ldrb	r3, [r4, #26]
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8007758:	f898 3000 	ldrb.w	r3, [r8]
 800775c:	0719      	lsls	r1, r3, #28
 800775e:	f140 81ed 	bpl.w	8007b3c <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007762:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007766:	b11b      	cbz	r3, 8007770 <tcp_input+0x4f0>
 8007768:	f06f 010d 	mvn.w	r1, #13
 800776c:	6920      	ldr	r0, [r4, #16]
 800776e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007770:	4621      	mov	r1, r4
 8007772:	4824      	ldr	r0, [pc, #144]	; (8007804 <tcp_input+0x584>)
 8007774:	f7fe fce8 	bl	8006148 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007778:	4621      	mov	r1, r4
 800777a:	2001      	movs	r0, #1
 800777c:	f7fd fdb0 	bl	80052e0 <memp_free>
 8007780:	e6b0      	b.n	80074e4 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8007782:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007784:	f8db 3000 	ldr.w	r3, [fp]
 8007788:	429a      	cmp	r2, r3
 800778a:	f000 825a 	beq.w	8007c42 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	d4e2      	bmi.n	8007758 <tcp_input+0x4d8>
 8007792:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	2b00      	cmp	r3, #0
 8007798:	dcde      	bgt.n	8007758 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800779a:	7ea3      	ldrb	r3, [r4, #26]
 800779c:	f043 0302 	orr.w	r3, r3, #2
 80077a0:	e7d9      	b.n	8007756 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80077a2:	f013 0102 	ands.w	r1, r3, #2
 80077a6:	d003      	beq.n	80077b0 <tcp_input+0x530>
 80077a8:	7d22      	ldrb	r2, [r4, #20]
 80077aa:	3a02      	subs	r2, #2
 80077ac:	2a01      	cmp	r2, #1
 80077ae:	d8f4      	bhi.n	800779a <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80077b0:	7ea2      	ldrb	r2, [r4, #26]
 80077b2:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 80077b4:	bf5e      	ittt	pl
 80077b6:	4a11      	ldrpl	r2, [pc, #68]	; (80077fc <tcp_input+0x57c>)
 80077b8:	6812      	ldrpl	r2, [r2, #0]
 80077ba:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80077bc:	2200      	movs	r2, #0
 80077be:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80077c2:	9a06      	ldr	r2, [sp, #24]
 80077c4:	8812      	ldrh	r2, [r2, #0]
 80077c6:	b13a      	cbz	r2, 80077d8 <tcp_input+0x558>
 80077c8:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80077cc:	9107      	str	r1, [sp, #28]
 80077ce:	9306      	str	r3, [sp, #24]
 80077d0:	f7ff fcfe 	bl	80071d0 <tcp_parseopt.isra.1.part.2>
 80077d4:	9907      	ldr	r1, [sp, #28]
 80077d6:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 80077d8:	7d22      	ldrb	r2, [r4, #20]
 80077da:	3a02      	subs	r2, #2
 80077dc:	2a07      	cmp	r2, #7
 80077de:	d8bb      	bhi.n	8007758 <tcp_input+0x4d8>
 80077e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80077e4:	00940014 	.word	0x00940014
 80077e8:	010000fc 	.word	0x010000fc
 80077ec:	00fc014a 	.word	0x00fc014a
 80077f0:	01830164 	.word	0x01830164
 80077f4:	08009880 	.word	0x08009880
 80077f8:	20004178 	.word	0x20004178
 80077fc:	20007870 	.word	0x20007870
 8007800:	20007874 	.word	0x20007874
 8007804:	2000786c 	.word	0x2000786c
 8007808:	20007868 	.word	0x20007868
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800780c:	f003 0212 	and.w	r2, r3, #18
 8007810:	2a12      	cmp	r2, #18
 8007812:	d15e      	bne.n	80078d2 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8007814:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	3201      	adds	r2, #1
 800781a:	428a      	cmp	r2, r1
 800781c:	d159      	bne.n	80078d2 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 800781e:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8007822:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8007824:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8007826:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8007828:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800782a:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800782c:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800782e:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007830:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007832:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8007834:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007838:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 800783c:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800783e:	18e1      	adds	r1, r4, r3
 8007840:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8007842:	f7fe ff65 	bl	8006710 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007846:	f241 121c 	movw	r2, #4380	; 0x111c
 800784a:	0043      	lsls	r3, r0, #1
 800784c:	4293      	cmp	r3, r2
 800784e:	bf38      	it	cc
 8007850:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007852:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007854:	0080      	lsls	r0, r0, #2
 8007856:	4283      	cmp	r3, r0
 8007858:	bf28      	it	cs
 800785a:	4603      	movcs	r3, r0
 800785c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007860:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007864:	b933      	cbnz	r3, 8007874 <tcp_input+0x5f4>
 8007866:	4bad      	ldr	r3, [pc, #692]	; (8007b1c <tcp_input+0x89c>)
 8007868:	49ad      	ldr	r1, [pc, #692]	; (8007b20 <tcp_input+0x8a0>)
 800786a:	48ae      	ldr	r0, [pc, #696]	; (8007b24 <tcp_input+0x8a4>)
 800786c:	f240 321a 	movw	r2, #794	; 0x31a
 8007870:	f001 fe35 	bl	80094de <iprintf>
      --pcb->snd_queuelen;
 8007874:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8007878:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 800787a:	3b01      	subs	r3, #1
 800787c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8007880:	b9fe      	cbnz	r6, 80078c2 <tcp_input+0x642>
        rseg = pcb->unsent;
 8007882:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007884:	b936      	cbnz	r6, 8007894 <tcp_input+0x614>
 8007886:	4ba5      	ldr	r3, [pc, #660]	; (8007b1c <tcp_input+0x89c>)
 8007888:	49a7      	ldr	r1, [pc, #668]	; (8007b28 <tcp_input+0x8a8>)
 800788a:	48a6      	ldr	r0, [pc, #664]	; (8007b24 <tcp_input+0x8a4>)
 800788c:	f240 3222 	movw	r2, #802	; 0x322
 8007890:	f001 fe25 	bl	80094de <iprintf>
        pcb->unsent = rseg->next;
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8007898:	4630      	mov	r0, r6
 800789a:	f7fe fa27 	bl	8005cec <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800789e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078a0:	b993      	cbnz	r3, 80078c8 <tcp_input+0x648>
        pcb->rtime = -1;
 80078a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078a6:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80078a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f43f af74 	beq.w	800779a <tcp_input+0x51a>
 80078b2:	2200      	movs	r2, #0
 80078b4:	4621      	mov	r1, r4
 80078b6:	6920      	ldr	r0, [r4, #16]
 80078b8:	4798      	blx	r3
      if (err == ERR_ABRT) {
 80078ba:	300d      	adds	r0, #13
 80078bc:	f47f af6d 	bne.w	800779a <tcp_input+0x51a>
 80078c0:	e610      	b.n	80074e4 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 80078c2:	6833      	ldr	r3, [r6, #0]
 80078c4:	66e3      	str	r3, [r4, #108]	; 0x6c
 80078c6:	e7e7      	b.n	8007898 <tcp_input+0x618>
        pcb->rtime = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 80078cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d0:	e7ea      	b.n	80078a8 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 80078d2:	06db      	lsls	r3, r3, #27
 80078d4:	f57f af40 	bpl.w	8007758 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078d8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80078da:	9a04      	ldr	r2, [sp, #16]
 80078dc:	f8db 1000 	ldr.w	r1, [fp]
 80078e0:	8810      	ldrh	r0, [r2, #0]
 80078e2:	881a      	ldrh	r2, [r3, #0]
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	885b      	ldrh	r3, [r3, #2]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	4b90      	ldr	r3, [pc, #576]	; (8007b2c <tcp_input+0x8ac>)
 80078ec:	4401      	add	r1, r0
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f000 fcdd 	bl	80082b0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80078f6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	f63f af2c 	bhi.w	8007758 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fd2d 	bl	8008364 <tcp_rexmit_rto>
 800790a:	e725      	b.n	8007758 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 800790c:	06d8      	lsls	r0, r3, #27
 800790e:	d557      	bpl.n	80079c0 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007910:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007912:	6838      	ldr	r0, [r7, #0]
 8007914:	43db      	mvns	r3, r3
 8007916:	42c3      	cmn	r3, r0
 8007918:	d443      	bmi.n	80079a2 <tcp_input+0x722>
 800791a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800791c:	1ac3      	subs	r3, r0, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	dc3f      	bgt.n	80079a2 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8007922:	2304      	movs	r3, #4
 8007924:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007926:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007928:	b143      	cbz	r3, 800793c <tcp_input+0x6bc>
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	b933      	cbnz	r3, 800793c <tcp_input+0x6bc>
 800792e:	4b7b      	ldr	r3, [pc, #492]	; (8007b1c <tcp_input+0x89c>)
 8007930:	497f      	ldr	r1, [pc, #508]	; (8007b30 <tcp_input+0x8b0>)
 8007932:	487c      	ldr	r0, [pc, #496]	; (8007b24 <tcp_input+0x8a4>)
 8007934:	f240 3251 	movw	r2, #849	; 0x351
 8007938:	f001 fdd1 	bl	80094de <iprintf>
        if (pcb->listener == NULL) {
 800793c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800793e:	b91b      	cbnz	r3, 8007948 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8007940:	4620      	mov	r0, r4
 8007942:	f7fe fe0f 	bl	8006564 <tcp_abort>
            goto aborted;
 8007946:	e5cd      	b.n	80074e4 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f8      	beq.n	8007940 <tcp_input+0x6c0>
 800794e:	2200      	movs	r2, #0
 8007950:	4621      	mov	r1, r4
 8007952:	6920      	ldr	r0, [r4, #16]
 8007954:	4798      	blx	r3
        if (err != ERR_OK) {
 8007956:	b110      	cbz	r0, 800795e <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8007958:	300d      	adds	r0, #13
 800795a:	d1f1      	bne.n	8007940 <tcp_input+0x6c0>
 800795c:	e5c2      	b.n	80074e4 <tcp_input+0x264>
        tcp_receive(pcb);
 800795e:	4620      	mov	r0, r4
 8007960:	f7fe ff4a 	bl	80067f8 <tcp_receive>
        if (recv_acked != 0) {
 8007964:	9b05      	ldr	r3, [sp, #20]
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b113      	cbz	r3, 8007970 <tcp_input+0x6f0>
          recv_acked--;
 800796a:	9a05      	ldr	r2, [sp, #20]
 800796c:	3b01      	subs	r3, #1
 800796e:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007970:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007972:	f241 111c 	movw	r1, #4380	; 0x111c
 8007976:	0053      	lsls	r3, r2, #1
 8007978:	428b      	cmp	r3, r1
 800797a:	bf38      	it	cc
 800797c:	460b      	movcc	r3, r1
 800797e:	0092      	lsls	r2, r2, #2
 8007980:	4293      	cmp	r3, r2
 8007982:	bf28      	it	cs
 8007984:	4613      	movcs	r3, r2
 8007986:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800798a:	f898 3000 	ldrb.w	r3, [r8]
 800798e:	069a      	lsls	r2, r3, #26
 8007990:	f57f aee2 	bpl.w	8007758 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8007994:	7ea3      	ldrb	r3, [r4, #26]
 8007996:	f043 0302 	orr.w	r3, r3, #2
 800799a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800799c:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 800799e:	7523      	strb	r3, [r4, #20]
 80079a0:	e6da      	b.n	8007758 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079a2:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	f8db 1000 	ldr.w	r1, [fp]
 80079aa:	8816      	ldrh	r6, [r2, #0]
 80079ac:	881a      	ldrh	r2, [r3, #0]
 80079ae:	9201      	str	r2, [sp, #4]
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	4b5d      	ldr	r3, [pc, #372]	; (8007b2c <tcp_input+0x8ac>)
 80079b6:	4431      	add	r1, r6
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	f000 fc79 	bl	80082b0 <tcp_rst>
 80079be:	e6cb      	b.n	8007758 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80079c0:	2900      	cmp	r1, #0
 80079c2:	f43f aec9 	beq.w	8007758 <tcp_input+0x4d8>
 80079c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c8:	f8db 2000 	ldr.w	r2, [fp]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4293      	cmp	r3, r2
 80079d0:	f47f aec2 	bne.w	8007758 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fce1 	bl	800839c <tcp_rexmit>
 80079da:	e6bd      	b.n	8007758 <tcp_input+0x4d8>
    tcp_receive(pcb);
 80079dc:	4620      	mov	r0, r4
 80079de:	f7fe ff0b 	bl	80067f8 <tcp_receive>
 80079e2:	e7d2      	b.n	800798a <tcp_input+0x70a>
    tcp_receive(pcb);
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7fe ff07 	bl	80067f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80079ea:	f898 3000 	ldrb.w	r3, [r8]
 80079ee:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 80079f6:	d031      	beq.n	8007a5c <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80079f8:	f013 0f10 	tst.w	r3, #16
 80079fc:	7ea3      	ldrb	r3, [r4, #26]
 80079fe:	d028      	beq.n	8007a52 <tcp_input+0x7d2>
 8007a00:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4291      	cmp	r1, r2
 8007a06:	d124      	bne.n	8007a52 <tcp_input+0x7d2>
 8007a08:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007a0a:	bb12      	cbnz	r2, 8007a52 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8007a0c:	f043 0302 	orr.w	r3, r3, #2
 8007a10:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7fe f996 	bl	8005d44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007a18:	f8d9 3000 	ldr.w	r3, [r9]
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	d10a      	bne.n	8007a36 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8007a20:	68e3      	ldr	r3, [r4, #12]
 8007a22:	f8c9 3000 	str.w	r3, [r9]
 8007a26:	e008      	b.n	8007a3a <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	4294      	cmp	r4, r2
 8007a2c:	d102      	bne.n	8007a34 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8007a2e:	68e2      	ldr	r2, [r4, #12]
 8007a30:	60da      	str	r2, [r3, #12]
 8007a32:	e002      	b.n	8007a3a <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8007a34:	4613      	mov	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f6      	bne.n	8007a28 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8007a3a:	4b3e      	ldr	r3, [pc, #248]	; (8007b34 <tcp_input+0x8b4>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007a40:	230a      	movs	r3, #10
 8007a42:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007a44:	4b3c      	ldr	r3, [pc, #240]	; (8007b38 <tcp_input+0x8b8>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	60e2      	str	r2, [r4, #12]
 8007a4a:	601c      	str	r4, [r3, #0]
 8007a4c:	f000 fdd2 	bl	80085f4 <tcp_timer_needed>
 8007a50:	e682      	b.n	8007758 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8007a52:	f043 0302 	orr.w	r3, r3, #2
 8007a56:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8007a58:	2308      	movs	r3, #8
 8007a5a:	e7a0      	b.n	800799e <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a5c:	06db      	lsls	r3, r3, #27
 8007a5e:	f57f ae7b 	bpl.w	8007758 <tcp_input+0x4d8>
 8007a62:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	f47f ae76 	bne.w	8007758 <tcp_input+0x4d8>
 8007a6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f47f ae72 	bne.w	8007758 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8007a74:	2306      	movs	r3, #6
 8007a76:	e792      	b.n	800799e <tcp_input+0x71e>
    tcp_receive(pcb);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7fe febd 	bl	80067f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007a7e:	f898 3000 	ldrb.w	r3, [r8]
 8007a82:	069f      	lsls	r7, r3, #26
 8007a84:	f57f ae68 	bpl.w	8007758 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8007a88:	7ea3      	ldrb	r3, [r4, #26]
 8007a8a:	f043 0302 	orr.w	r3, r3, #2
 8007a8e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8007a90:	4620      	mov	r0, r4
 8007a92:	f7fe f957 	bl	8005d44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007a96:	f8d9 3000 	ldr.w	r3, [r9]
 8007a9a:	429c      	cmp	r4, r3
 8007a9c:	d0c0      	beq.n	8007a20 <tcp_input+0x7a0>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0cb      	beq.n	8007a3a <tcp_input+0x7ba>
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	4294      	cmp	r4, r2
 8007aa6:	d0c2      	beq.n	8007a2e <tcp_input+0x7ae>
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	e7f8      	b.n	8007a9e <tcp_input+0x81e>
    tcp_receive(pcb);
 8007aac:	4620      	mov	r0, r4
 8007aae:	f7fe fea3 	bl	80067f8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	06de      	lsls	r6, r3, #27
 8007ab8:	f57f ae4e 	bpl.w	8007758 <tcp_input+0x4d8>
 8007abc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	f47f ae49 	bne.w	8007758 <tcp_input+0x4d8>
 8007ac6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f47f ae45 	bne.w	8007758 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7fe f938 	bl	8005d44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007ad4:	f8d9 3000 	ldr.w	r3, [r9]
 8007ad8:	429c      	cmp	r4, r3
 8007ada:	d0a1      	beq.n	8007a20 <tcp_input+0x7a0>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ac      	beq.n	8007a3a <tcp_input+0x7ba>
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	4294      	cmp	r4, r2
 8007ae4:	d0a3      	beq.n	8007a2e <tcp_input+0x7ae>
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	e7f8      	b.n	8007adc <tcp_input+0x85c>
    tcp_receive(pcb);
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7fe fe84 	bl	80067f8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	06d8      	lsls	r0, r3, #27
 8007af6:	f57f ae2f 	bpl.w	8007758 <tcp_input+0x4d8>
 8007afa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	f47f ae2a 	bne.w	8007758 <tcp_input+0x4d8>
 8007b04:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f47f ae26 	bne.w	8007758 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8007b0c:	f898 3000 	ldrb.w	r3, [r8]
 8007b10:	f043 0310 	orr.w	r3, r3, #16
 8007b14:	f888 3000 	strb.w	r3, [r8]
 8007b18:	e61e      	b.n	8007758 <tcp_input+0x4d8>
 8007b1a:	bf00      	nop
 8007b1c:	0800a880 	.word	0x0800a880
 8007b20:	0800a81f 	.word	0x0800a81f
 8007b24:	08009880 	.word	0x08009880
 8007b28:	0800a835 	.word	0x0800a835
 8007b2c:	20004178 	.word	0x20004178
 8007b30:	0800a848 	.word	0x0800a848
 8007b34:	20007868 	.word	0x20007868
 8007b38:	2000787c 	.word	0x2000787c
        if (recv_acked > 0) {
 8007b3c:	9b05      	ldr	r3, [sp, #20]
 8007b3e:	881a      	ldrh	r2, [r3, #0]
 8007b40:	b122      	cbz	r2, 8007b4c <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007b42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007b44:	b9eb      	cbnz	r3, 8007b82 <tcp_input+0x902>
          recv_acked = 0;
 8007b46:	9a05      	ldr	r2, [sp, #20]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7ff fb77 	bl	8007240 <tcp_input_delayed_close>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f47f acc6 	bne.w	80074e4 <tcp_input+0x264>
        if (recv_data != NULL) {
 8007b58:	f8da 3000 	ldr.w	r3, [sl]
 8007b5c:	b33b      	cbz	r3, 8007bae <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007b5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007b60:	b133      	cbz	r3, 8007b70 <tcp_input+0x8f0>
 8007b62:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <tcp_input+0x9e4>)
 8007b64:	4940      	ldr	r1, [pc, #256]	; (8007c68 <tcp_input+0x9e8>)
 8007b66:	4841      	ldr	r0, [pc, #260]	; (8007c6c <tcp_input+0x9ec>)
 8007b68:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007b6c:	f001 fcb7 	bl	80094de <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007b70:	7ea3      	ldrb	r3, [r4, #26]
 8007b72:	f013 0310 	ands.w	r3, r3, #16
 8007b76:	d00a      	beq.n	8007b8e <tcp_input+0x90e>
            pbuf_free(recv_data);
 8007b78:	f8da 0000 	ldr.w	r0, [sl]
 8007b7c:	f7fd fd36 	bl	80055ec <pbuf_free>
 8007b80:	e6de      	b.n	8007940 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007b82:	4621      	mov	r1, r4
 8007b84:	6920      	ldr	r0, [r4, #16]
 8007b86:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8007b88:	300d      	adds	r0, #13
 8007b8a:	d1dc      	bne.n	8007b46 <tcp_input+0x8c6>
 8007b8c:	e4aa      	b.n	80074e4 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b8e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8007b92:	b31e      	cbz	r6, 8007bdc <tcp_input+0x95c>
 8007b94:	f8da 2000 	ldr.w	r2, [sl]
 8007b98:	6920      	ldr	r0, [r4, #16]
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8007b9e:	f110 0f0d 	cmn.w	r0, #13
 8007ba2:	f43f ac9f 	beq.w	80074e4 <tcp_input+0x264>
          if (err != ERR_OK) {
 8007ba6:	b110      	cbz	r0, 8007bae <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8007ba8:	f8da 3000 	ldr.w	r3, [sl]
 8007bac:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8007bae:	f898 3000 	ldrb.w	r3, [r8]
 8007bb2:	069a      	lsls	r2, r3, #26
 8007bb4:	d505      	bpl.n	8007bc2 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8007bb6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007bb8:	b1c3      	cbz	r3, 8007bec <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007bba:	7b5a      	ldrb	r2, [r3, #13]
 8007bbc:	f042 0220 	orr.w	r2, r2, #32
 8007bc0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8007bc2:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <tcp_input+0x9f0>)
 8007bc4:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8007bc6:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8007bc8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007bca:	f7ff fb39 	bl	8007240 <tcp_input_delayed_close>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f47f ac88 	bne.w	80074e4 <tcp_input+0x264>
        tcp_output(pcb);
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 f9ed 	bl	8007fb4 <tcp_output>
 8007bda:	e483      	b.n	80074e4 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007bdc:	4633      	mov	r3, r6
 8007bde:	f8da 2000 	ldr.w	r2, [sl]
 8007be2:	4621      	mov	r1, r4
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7fe fbaf 	bl	8006348 <tcp_recv_null>
 8007bea:	e7d8      	b.n	8007b9e <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007bee:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8007bf6:	bf1c      	itt	ne
 8007bf8:	3301      	addne	r3, #1
 8007bfa:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007bfc:	2e00      	cmp	r6, #0
 8007bfe:	d0e0      	beq.n	8007bc2 <tcp_input+0x942>
 8007c00:	2300      	movs	r3, #0
 8007c02:	461a      	mov	r2, r3
 8007c04:	4621      	mov	r1, r4
 8007c06:	6920      	ldr	r0, [r4, #16]
 8007c08:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8007c0a:	300d      	adds	r0, #13
 8007c0c:	d1d9      	bne.n	8007bc2 <tcp_input+0x942>
 8007c0e:	e469      	b.n	80074e4 <tcp_input+0x264>
      if (prev != NULL) {
 8007c10:	b13c      	cbz	r4, 8007c22 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007c12:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007c16:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c18:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007c1a:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c1e:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	0759      	lsls	r1, r3, #29
 8007c28:	f53f ace7 	bmi.w	80075fa <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8007c2c:	06dc      	lsls	r4, r3, #27
 8007c2e:	f57f ad19 	bpl.w	8007664 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	f8db 1000 	ldr.w	r1, [fp]
 8007c38:	881c      	ldrh	r4, [r3, #0]
 8007c3a:	8813      	ldrh	r3, [r2, #0]
 8007c3c:	e88d 0009 	stmia.w	sp, {r0, r3}
 8007c40:	e4c5      	b.n	80075ce <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007c42:	2900      	cmp	r1, #0
 8007c44:	f47f ad7e 	bne.w	8007744 <tcp_input+0x4c4>
 8007c48:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <tcp_input+0x9e4>)
 8007c4a:	490b      	ldr	r1, [pc, #44]	; (8007c78 <tcp_input+0x9f8>)
 8007c4c:	4807      	ldr	r0, [pc, #28]	; (8007c6c <tcp_input+0x9ec>)
 8007c4e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007c52:	f001 fc44 	bl	80094de <iprintf>
 8007c56:	e575      	b.n	8007744 <tcp_input+0x4c4>
      if (prev != NULL) {
 8007c58:	f1ba 0f00 	cmp.w	sl, #0
 8007c5c:	f47f abff 	bne.w	800745e <tcp_input+0x1de>
 8007c60:	e40e      	b.n	8007480 <tcp_input+0x200>
 8007c62:	bf00      	nop
 8007c64:	0800a880 	.word	0x0800a880
 8007c68:	0800a866 	.word	0x0800a866
 8007c6c:	08009880 	.word	0x08009880
 8007c70:	20007880 	.word	0x20007880
 8007c74:	20007874 	.word	0x20007874
 8007c78:	0800a7ff 	.word	0x0800a7ff

08007c7c <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8007c7c:	4a02      	ldr	r2, [pc, #8]	; (8007c88 <tcp_trigger_input_pcb_close+0xc>)
 8007c7e:	7813      	ldrb	r3, [r2, #0]
 8007c80:	f043 0310 	orr.w	r3, r3, #16
 8007c84:	7013      	strb	r3, [r2, #0]
 8007c86:	4770      	bx	lr
 8007c88:	20003ee4 	.word	0x20003ee4

08007c8c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	f89d a020 	ldrb.w	sl, [sp, #32]
 8007c94:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007c96:	f01a 0f01 	tst.w	sl, #1

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007c9a:	f04f 0003 	mov.w	r0, #3
{
 8007c9e:	460f      	mov	r7, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007ca4:	bf14      	ite	ne
 8007ca6:	2504      	movne	r5, #4
 8007ca8:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007caa:	f7fd fafd 	bl	80052a8 <memp_malloc>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	b928      	cbnz	r0, 8007cbe <tcp_create_segment+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f7fd fc9a 	bl	80055ec <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 8007cb8:	4620      	mov	r0, r4
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8007cbe:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8007cc2:	2300      	movs	r3, #0
  seg->p = p;
 8007cc4:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007cc8:	893b      	ldrh	r3, [r7, #8]
 8007cca:	fa1f fa85 	uxth.w	sl, r5
 8007cce:	4553      	cmp	r3, sl
 8007cd0:	d205      	bcs.n	8007cde <tcp_create_segment+0x52>
 8007cd2:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <tcp_create_segment+0xc4>)
 8007cd4:	491f      	ldr	r1, [pc, #124]	; (8007d54 <tcp_create_segment+0xc8>)
 8007cd6:	4820      	ldr	r0, [pc, #128]	; (8007d58 <tcp_create_segment+0xcc>)
 8007cd8:	22ba      	movs	r2, #186	; 0xba
 8007cda:	f001 fc00 	bl	80094de <iprintf>
  seg->len = p->tot_len - optlen;
 8007cde:	893b      	ldrh	r3, [r7, #8]
 8007ce0:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8007ce4:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 8007ce6:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8007ce8:	2114      	movs	r1, #20
 8007cea:	f7fd fc79 	bl	80055e0 <pbuf_header>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	b120      	cbz	r0, 8007cfc <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7fd fffa 	bl	8005cec <tcp_seg_free>
    return NULL;
 8007cf8:	2400      	movs	r4, #0
 8007cfa:	e7dd      	b.n	8007cb8 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007cfc:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007cfe:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007d02:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007d06:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007d0a:	f7fb fe99 	bl	8003a40 <lwip_htons>
 8007d0e:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007d12:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8007d16:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8007d1a:	f7fb fe91 	bl	8003a40 <lwip_htons>
 8007d1e:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007d22:	4648      	mov	r0, r9
 8007d24:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007d28:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007d2a:	f7fb fe8c 	bl	8003a46 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007d2e:	3505      	adds	r5, #5
 8007d30:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007d34:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007d38:	b2a8      	uxth	r0, r5
 8007d3a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8007d3e:	f7fb fe7f 	bl	8003a40 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8007d42:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007d44:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8007d48:	749f      	strb	r7, [r3, #18]
 8007d4a:	74df      	strb	r7, [r3, #19]
  return seg;
 8007d4c:	e7b4      	b.n	8007cb8 <tcp_create_segment+0x2c>
 8007d4e:	bf00      	nop
 8007d50:	0800ab83 	.word	0x0800ab83
 8007d54:	0800aa0b 	.word	0x0800aa0b
 8007d58:	08009880 	.word	0x08009880

08007d5c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007d5c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007d60:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007d62:	4605      	mov	r5, r0
 8007d64:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007d66:	2001      	movs	r0, #1
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7fd fca9 	bl	80056c0 <pbuf_alloc>
  if (p != NULL) {
 8007d6e:	4606      	mov	r6, r0
 8007d70:	b340      	cbz	r0, 8007dc4 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007d72:	8943      	ldrh	r3, [r0, #10]
 8007d74:	2b13      	cmp	r3, #19
 8007d76:	dc05      	bgt.n	8007d84 <tcp_output_alloc_header.constprop.0+0x28>
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <tcp_output_alloc_header.constprop.0+0x6c>)
 8007d7a:	4914      	ldr	r1, [pc, #80]	; (8007dcc <tcp_output_alloc_header.constprop.0+0x70>)
 8007d7c:	4814      	ldr	r0, [pc, #80]	; (8007dd0 <tcp_output_alloc_header.constprop.0+0x74>)
 8007d7e:	2273      	movs	r2, #115	; 0x73
 8007d80:	f001 fbad 	bl	80094de <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8007d84:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8007d86:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8007d88:	f7fb fe5a 	bl	8003a40 <lwip_htons>
 8007d8c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007d8e:	8b28      	ldrh	r0, [r5, #24]
 8007d90:	f7fb fe56 	bl	8003a40 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8007d94:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007d96:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007d98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007d9a:	f7fb fe54 	bl	8003a46 <lwip_htonl>
 8007d9e:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8007da0:	f245 0010 	movw	r0, #20496	; 0x5010
 8007da4:	f7fb fe4c 	bl	8003a40 <lwip_htons>
 8007da8:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007daa:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8007dac:	f7fb fe48 	bl	8003a40 <lwip_htons>
    tcphdr->chksum = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	7423      	strb	r3, [r4, #16]
 8007db4:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8007db6:	74a3      	strb	r3, [r4, #18]
 8007db8:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007dba:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8007dbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007dbe:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007dc0:	4413      	add	r3, r2
 8007dc2:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc8:	0800ab83 	.word	0x0800ab83
 8007dcc:	0800ab55 	.word	0x0800ab55
 8007dd0:	08009880 	.word	0x08009880

08007dd4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8007dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007dd8:	f011 0803 	ands.w	r8, r1, #3
{
 8007ddc:	4604      	mov	r4, r0
 8007dde:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007de0:	d106      	bne.n	8007df0 <tcp_enqueue_flags+0x1c>
 8007de2:	4b41      	ldr	r3, [pc, #260]	; (8007ee8 <tcp_enqueue_flags+0x114>)
 8007de4:	4941      	ldr	r1, [pc, #260]	; (8007eec <tcp_enqueue_flags+0x118>)
 8007de6:	4842      	ldr	r0, [pc, #264]	; (8007ef0 <tcp_enqueue_flags+0x11c>)
 8007de8:	f240 321b 	movw	r2, #795	; 0x31b
 8007dec:	f001 fb77 	bl	80094de <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8007df0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d90a      	bls.n	8007e0e <tcp_enqueue_flags+0x3a>
 8007df8:	07f1      	lsls	r1, r6, #31
 8007dfa:	d408      	bmi.n	8007e0e <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8007dfc:	7ea3      	ldrb	r3, [r4, #26]
 8007dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e02:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8007e08:	b003      	add	sp, #12
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0e:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 8007e12:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007e14:	bf14      	ite	ne
 8007e16:	2704      	movne	r7, #4
 8007e18:	2700      	moveq	r7, #0
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8007e22:	bf14      	ite	ne
 8007e24:	f04f 0901 	movne.w	r9, #1
 8007e28:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007e2c:	f7fd fc48 	bl	80056c0 <pbuf_alloc>
 8007e30:	4605      	mov	r5, r0
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d0e2      	beq.n	8007dfc <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007e36:	8943      	ldrh	r3, [r0, #10]
 8007e38:	42bb      	cmp	r3, r7
 8007e3a:	d206      	bcs.n	8007e4a <tcp_enqueue_flags+0x76>
 8007e3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <tcp_enqueue_flags+0x114>)
 8007e3e:	492d      	ldr	r1, [pc, #180]	; (8007ef4 <tcp_enqueue_flags+0x120>)
 8007e40:	482b      	ldr	r0, [pc, #172]	; (8007ef0 <tcp_enqueue_flags+0x11c>)
 8007e42:	f240 3241 	movw	r2, #833	; 0x341
 8007e46:	f001 fb4a 	bl	80094de <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007e4a:	f8cd 9000 	str.w	r9, [sp]
 8007e4e:	4629      	mov	r1, r5
 8007e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e52:	4632      	mov	r2, r6
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff ff19 	bl	8007c8c <tcp_create_segment>
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d0cd      	beq.n	8007dfc <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8007e60:	68c3      	ldr	r3, [r0, #12]
 8007e62:	079a      	lsls	r2, r3, #30
 8007e64:	d006      	beq.n	8007e74 <tcp_enqueue_flags+0xa0>
 8007e66:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <tcp_enqueue_flags+0x114>)
 8007e68:	4923      	ldr	r1, [pc, #140]	; (8007ef8 <tcp_enqueue_flags+0x124>)
 8007e6a:	4821      	ldr	r0, [pc, #132]	; (8007ef0 <tcp_enqueue_flags+0x11c>)
 8007e6c:	f240 3249 	movw	r2, #841	; 0x349
 8007e70:	f001 fb35 	bl	80094de <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007e74:	892b      	ldrh	r3, [r5, #8]
 8007e76:	b133      	cbz	r3, 8007e86 <tcp_enqueue_flags+0xb2>
 8007e78:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <tcp_enqueue_flags+0x114>)
 8007e7a:	4920      	ldr	r1, [pc, #128]	; (8007efc <tcp_enqueue_flags+0x128>)
 8007e7c:	481c      	ldr	r0, [pc, #112]	; (8007ef0 <tcp_enqueue_flags+0x11c>)
 8007e7e:	f240 324a 	movw	r2, #842	; 0x34a
 8007e82:	f001 fb2c 	bl	80094de <iprintf>
  if (pcb->unsent == NULL) {
 8007e86:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007e88:	bb4b      	cbnz	r3, 8007ede <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8007e8a:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007e92:	f1b8 0f00 	cmp.w	r8, #0
 8007e96:	d002      	beq.n	8007e9e <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8007e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8007e9e:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8007ea0:	bf42      	ittt	mi
 8007ea2:	7ea3      	ldrbmi	r3, [r4, #26]
 8007ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea8:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007eaa:	6868      	ldr	r0, [r5, #4]
 8007eac:	f7fd fd54 	bl	8005958 <pbuf_clen>
 8007eb0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007eb4:	4418      	add	r0, r3
 8007eb6:	b280      	uxth	r0, r0
 8007eb8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d0a3      	beq.n	8007e08 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007ec0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007ec2:	b948      	cbnz	r0, 8007ed8 <tcp_enqueue_flags+0x104>
 8007ec4:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	d19e      	bne.n	8007e08 <tcp_enqueue_flags+0x34>
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <tcp_enqueue_flags+0x114>)
 8007ecc:	490c      	ldr	r1, [pc, #48]	; (8007f00 <tcp_enqueue_flags+0x12c>)
 8007ece:	4808      	ldr	r0, [pc, #32]	; (8007ef0 <tcp_enqueue_flags+0x11c>)
 8007ed0:	f240 326d 	movw	r2, #877	; 0x36d
 8007ed4:	f001 fb03 	bl	80094de <iprintf>
  return ERR_OK;
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e795      	b.n	8007e08 <tcp_enqueue_flags+0x34>
 8007edc:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	d1fb      	bne.n	8007edc <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8007ee4:	601d      	str	r5, [r3, #0]
 8007ee6:	e7d1      	b.n	8007e8c <tcp_enqueue_flags+0xb8>
 8007ee8:	0800ab83 	.word	0x0800ab83
 8007eec:	0800aa20 	.word	0x0800aa20
 8007ef0:	08009880 	.word	0x08009880
 8007ef4:	0800aa75 	.word	0x0800aa75
 8007ef8:	0800aaae 	.word	0x0800aaae
 8007efc:	0800aac6 	.word	0x0800aac6
 8007f00:	0800aaf0 	.word	0x0800aaf0

08007f04 <tcp_send_fin>:
{
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8007f06:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8007f08:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8007f0a:	b934      	cbnz	r4, 8007f1a <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	2101      	movs	r1, #1
}
 8007f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007f14:	f7ff bf5e 	b.w	8007dd4 <tcp_enqueue_flags>
 8007f18:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1fb      	bne.n	8007f18 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8007f20:	68e3      	ldr	r3, [r4, #12]
 8007f22:	8998      	ldrh	r0, [r3, #12]
 8007f24:	f7fb fd8c 	bl	8003a40 <lwip_htons>
 8007f28:	f010 0707 	ands.w	r7, r0, #7
 8007f2c:	d1ee      	bne.n	8007f0c <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007f2e:	68e6      	ldr	r6, [r4, #12]
 8007f30:	2001      	movs	r0, #1
 8007f32:	89b4      	ldrh	r4, [r6, #12]
 8007f34:	f7fb fd84 	bl	8003a40 <lwip_htons>
 8007f38:	4320      	orrs	r0, r4
 8007f3a:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8007f3c:	7eab      	ldrb	r3, [r5, #26]
 8007f3e:	f043 0320 	orr.w	r3, r3, #32
 8007f42:	76ab      	strb	r3, [r5, #26]
}
 8007f44:	4638      	mov	r0, r7
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8007f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007f4a:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8007f4c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007f4e:	f7fb fd7a 	bl	8003a46 <lwip_htonl>
 8007f52:	2100      	movs	r1, #0
 8007f54:	4602      	mov	r2, r0
 8007f56:	4620      	mov	r0, r4
 8007f58:	f7ff ff00 	bl	8007d5c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	b940      	cbnz	r0, 8007f72 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8007f60:	7ea3      	ldrb	r3, [r4, #26]
 8007f62:	f043 0303 	orr.w	r3, r3, #3
 8007f66:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8007f68:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	b004      	add	sp, #16
 8007f70:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007f72:	1d25      	adds	r5, r4, #4
 8007f74:	4628      	mov	r0, r5
 8007f76:	f7fc f9f9 	bl	800436c <ip4_route>
  if (netif == NULL) {
 8007f7a:	b1a0      	cbz	r0, 8007fa6 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	9201      	str	r2, [sp, #4]
 8007f80:	7a62      	ldrb	r2, [r4, #9]
 8007f82:	9002      	str	r0, [sp, #8]
 8007f84:	9200      	str	r2, [sp, #0]
 8007f86:	7aa3      	ldrb	r3, [r4, #10]
 8007f88:	462a      	mov	r2, r5
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7fc fb53 	bl	8004638 <ip4_output_if>
 8007f92:	4605      	mov	r5, r0
  pbuf_free(p);
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7fd fb29 	bl	80055ec <pbuf_free>
 8007f9a:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8007f9c:	b135      	cbz	r5, 8007fac <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8007f9e:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007fa2:	76a3      	strb	r3, [r4, #26]
 8007fa4:	e7e2      	b.n	8007f6c <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8007fa6:	f06f 0503 	mvn.w	r5, #3
 8007faa:	e7f3      	b.n	8007f94 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	e7f7      	b.n	8007fa2 <tcp_send_empty_ack+0x5a>
	...

08007fb4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007fb8:	7d03      	ldrb	r3, [r0, #20]
 8007fba:	2b01      	cmp	r3, #1
{
 8007fbc:	b087      	sub	sp, #28
 8007fbe:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007fc0:	d106      	bne.n	8007fd0 <tcp_output+0x1c>
 8007fc2:	4ba5      	ldr	r3, [pc, #660]	; (8008258 <tcp_output+0x2a4>)
 8007fc4:	49a5      	ldr	r1, [pc, #660]	; (800825c <tcp_output+0x2a8>)
 8007fc6:	48a6      	ldr	r0, [pc, #664]	; (8008260 <tcp_output+0x2ac>)
 8007fc8:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8007fcc:	f001 fa87 	bl	80094de <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8007fd0:	4ba4      	ldr	r3, [pc, #656]	; (8008264 <tcp_output+0x2b0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	429c      	cmp	r4, r3
 8007fd6:	d052      	beq.n	800807e <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007fd8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007fdc:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8007fe0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007fe2:	429f      	cmp	r7, r3
 8007fe4:	bf28      	it	cs
 8007fe6:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8007fe8:	7ea3      	ldrb	r3, [r4, #26]
 8007fea:	0799      	lsls	r1, r3, #30
 8007fec:	d510      	bpl.n	8008010 <tcp_output+0x5c>
 8007fee:	b92d      	cbnz	r5, 8007ffc <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8007ff0:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8007ff2:	b007      	add	sp, #28
 8007ff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8007ff8:	f7ff bfa6 	b.w	8007f48 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8007ffc:	68eb      	ldr	r3, [r5, #12]
 8007ffe:	6858      	ldr	r0, [r3, #4]
 8008000:	f7fb fd21 	bl	8003a46 <lwip_htonl>
 8008004:	892b      	ldrh	r3, [r5, #8]
 8008006:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	4418      	add	r0, r3
     (seg == NULL ||
 800800c:	4287      	cmp	r7, r0
 800800e:	d3ef      	bcc.n	8007ff0 <tcp_output+0x3c>
  useg = pcb->unacked;
 8008010:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8008012:	2e00      	cmp	r6, #0
 8008014:	d136      	bne.n	8008084 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008016:	f104 0804 	add.w	r8, r4, #4
 800801a:	4640      	mov	r0, r8
 800801c:	f7fc f9a6 	bl	800436c <ip4_route>
  if (netif == NULL) {
 8008020:	4681      	mov	r9, r0
 8008022:	2800      	cmp	r0, #0
 8008024:	f000 813c 	beq.w	80082a0 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8008028:	b10c      	cbz	r4, 800802e <tcp_output+0x7a>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	b913      	cbnz	r3, 8008034 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800802e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008032:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8008034:	b1d5      	cbz	r5, 800806c <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008036:	68eb      	ldr	r3, [r5, #12]
 8008038:	6858      	ldr	r0, [r3, #4]
 800803a:	f7fb fd04 	bl	8003a46 <lwip_htonl>
 800803e:	892b      	ldrh	r3, [r5, #8]
 8008040:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	4418      	add	r0, r3
  if (seg != NULL &&
 8008046:	4287      	cmp	r7, r0
 8008048:	d26f      	bcs.n	800812a <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800804a:	2f00      	cmp	r7, #0
 800804c:	d06d      	beq.n	800812a <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800804e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008052:	429f      	cmp	r7, r3
 8008054:	d169      	bne.n	800812a <tcp_output+0x176>
 8008056:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d166      	bne.n	800812a <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 800805c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008060:	b923      	cbnz	r3, 800806c <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8008062:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8008066:	2301      	movs	r3, #1
 8008068:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800806c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800806e:	b913      	cbnz	r3, 8008076 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008076:	7ea3      	ldrb	r3, [r4, #26]
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800807e:	2000      	movs	r0, #0
 8008080:	e0e6      	b.n	8008250 <tcp_output+0x29c>
 8008082:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8008084:	6833      	ldr	r3, [r6, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1fb      	bne.n	8008082 <tcp_output+0xce>
 800808a:	e7c4      	b.n	8008016 <tcp_output+0x62>
    pcb->unsent = seg->next;
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008090:	7d23      	ldrb	r3, [r4, #20]
 8008092:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008094:	bf1e      	ittt	ne
 8008096:	7ea3      	ldrbne	r3, [r4, #26]
 8008098:	f023 0303 	bicne.w	r3, r3, #3
 800809c:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800809e:	68eb      	ldr	r3, [r5, #12]
 80080a0:	6858      	ldr	r0, [r3, #4]
 80080a2:	f7fb fcd0 	bl	8003a46 <lwip_htonl>
 80080a6:	68e9      	ldr	r1, [r5, #12]
 80080a8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80080ac:	4683      	mov	fp, r0
 80080ae:	8988      	ldrh	r0, [r1, #12]
 80080b0:	f7fb fcc6 	bl	8003a40 <lwip_htons>
 80080b4:	f010 0003 	ands.w	r0, r0, #3
 80080b8:	eb0b 030a 	add.w	r3, fp, sl
 80080bc:	bf18      	it	ne
 80080be:	2001      	movne	r0, #1
 80080c0:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80080c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80080c4:	68ea      	ldr	r2, [r5, #12]
 80080c6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80080ca:	1a1b      	subs	r3, r3, r0
 80080cc:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 80080ce:	bfb8      	it	lt
 80080d0:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80080d2:	8990      	ldrh	r0, [r2, #12]
 80080d4:	f7fb fcb4 	bl	8003a40 <lwip_htons>
 80080d8:	f010 0003 	ands.w	r0, r0, #3
 80080dc:	bf18      	it	ne
 80080de:	2001      	movne	r0, #1
 80080e0:	eb10 0f0a 	cmn.w	r0, sl
 80080e4:	f000 80d8 	beq.w	8008298 <tcp_output+0x2e4>
      seg->next = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 80080ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80080ee:	b913      	cbnz	r3, 80080f6 <tcp_output+0x142>
        pcb->unacked = seg;
 80080f0:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 80080f2:	462e      	mov	r6, r5
 80080f4:	e016      	b.n	8008124 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80080f6:	68eb      	ldr	r3, [r5, #12]
 80080f8:	6858      	ldr	r0, [r3, #4]
 80080fa:	f7fb fca4 	bl	8003a46 <lwip_htonl>
 80080fe:	68f2      	ldr	r2, [r6, #12]
 8008100:	4682      	mov	sl, r0
 8008102:	6850      	ldr	r0, [r2, #4]
 8008104:	f7fb fc9f 	bl	8003a46 <lwip_htonl>
 8008108:	ebaa 0000 	sub.w	r0, sl, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	f280 80c1 	bge.w	8008294 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008112:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	2a00      	cmp	r2, #0
 800811a:	f040 80a9 	bne.w	8008270 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8008122:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8008124:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8008126:	2d00      	cmp	r5, #0
 8008128:	d0a2      	beq.n	8008070 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800812a:	68eb      	ldr	r3, [r5, #12]
 800812c:	6858      	ldr	r0, [r3, #4]
 800812e:	f7fb fc8a 	bl	8003a46 <lwip_htonl>
 8008132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008134:	1ac0      	subs	r0, r0, r3
 8008136:	892b      	ldrh	r3, [r5, #8]
 8008138:	4418      	add	r0, r3
  while (seg != NULL &&
 800813a:	4287      	cmp	r7, r0
 800813c:	d396      	bcc.n	800806c <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800813e:	68eb      	ldr	r3, [r5, #12]
 8008140:	8998      	ldrh	r0, [r3, #12]
 8008142:	f7fb fc7d 	bl	8003a40 <lwip_htons>
 8008146:	0742      	lsls	r2, r0, #29
 8008148:	d506      	bpl.n	8008158 <tcp_output+0x1a4>
 800814a:	4b43      	ldr	r3, [pc, #268]	; (8008258 <tcp_output+0x2a4>)
 800814c:	4946      	ldr	r1, [pc, #280]	; (8008268 <tcp_output+0x2b4>)
 800814e:	4844      	ldr	r0, [pc, #272]	; (8008260 <tcp_output+0x2ac>)
 8008150:	f240 4246 	movw	r2, #1094	; 0x446
 8008154:	f001 f9c3 	bl	80094de <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008158:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800815a:	b19b      	cbz	r3, 8008184 <tcp_output+0x1d0>
 800815c:	7ea2      	ldrb	r2, [r4, #26]
 800815e:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008162:	d10f      	bne.n	8008184 <tcp_output+0x1d0>
 8008164:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008166:	b12b      	cbz	r3, 8008174 <tcp_output+0x1c0>
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	b959      	cbnz	r1, 8008184 <tcp_output+0x1d0>
 800816c:	8919      	ldrh	r1, [r3, #8]
 800816e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008170:	4299      	cmp	r1, r3
 8008172:	d207      	bcs.n	8008184 <tcp_output+0x1d0>
 8008174:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008178:	b123      	cbz	r3, 8008184 <tcp_output+0x1d0>
 800817a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800817e:	2b08      	cmp	r3, #8
 8008180:	f240 8091 	bls.w	80082a6 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8008184:	7d23      	ldrb	r3, [r4, #20]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d00a      	beq.n	80081a0 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800818a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800818e:	2010      	movs	r0, #16
 8008190:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8008194:	f7fb fc54 	bl	8003a40 <lwip_htons>
 8008198:	ea4b 0000 	orr.w	r0, fp, r0
 800819c:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80081a0:	686b      	ldr	r3, [r5, #4]
 80081a2:	89db      	ldrh	r3, [r3, #14]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	f47f af71 	bne.w	800808c <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80081aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081ac:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80081b0:	f7fb fc49 	bl	8003a46 <lwip_htonl>
 80081b4:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80081b8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80081ba:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80081be:	f7fb fc3f 	bl	8003a40 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80081c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80081c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80081c6:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80081ca:	4413      	add	r3, r2
 80081cc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80081ce:	7aab      	ldrb	r3, [r5, #10]
 80081d0:	07db      	lsls	r3, r3, #31
 80081d2:	d50c      	bpl.n	80081ee <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80081d4:	4641      	mov	r1, r8
 80081d6:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80081da:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80081de:	f7fe fa97 	bl	8006710 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80081e2:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80081e6:	f7fb fc2e 	bl	8003a46 <lwip_htonl>
 80081ea:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80081ee:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80081f2:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 80081f4:	bfbc      	itt	lt
 80081f6:	2300      	movlt	r3, #0
 80081f8:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80081fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081fc:	b93b      	cbnz	r3, 800820e <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 80081fe:	4b1b      	ldr	r3, [pc, #108]	; (800826c <tcp_output+0x2b8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008204:	68eb      	ldr	r3, [r5, #12]
 8008206:	6858      	ldr	r0, [r3, #4]
 8008208:	f7fb fc1d 	bl	8003a46 <lwip_htonl>
 800820c:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800820e:	6868      	ldr	r0, [r5, #4]
 8008210:	68ea      	ldr	r2, [r5, #12]
 8008212:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008214:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8008216:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800821c:	1ac9      	subs	r1, r1, r3
 800821e:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8008220:	8901      	ldrh	r1, [r0, #8]
 8008222:	1acb      	subs	r3, r1, r3
 8008224:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	7413      	strb	r3, [r2, #16]
 800822a:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800822c:	2206      	movs	r2, #6
 800822e:	9201      	str	r2, [sp, #4]
 8008230:	7a62      	ldrb	r2, [r4, #9]
 8008232:	9200      	str	r2, [sp, #0]
 8008234:	7aa3      	ldrb	r3, [r4, #10]
 8008236:	f8cd 9008 	str.w	r9, [sp, #8]
 800823a:	4642      	mov	r2, r8
 800823c:	4621      	mov	r1, r4
 800823e:	f7fc f9fb 	bl	8004638 <ip4_output_if>
    if (err != ERR_OK) {
 8008242:	2800      	cmp	r0, #0
 8008244:	f43f af22 	beq.w	800808c <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8008248:	7ea3      	ldrb	r3, [r4, #26]
 800824a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800824e:	76a3      	strb	r3, [r4, #26]
}
 8008250:	b007      	add	sp, #28
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	bf00      	nop
 8008258:	0800ab83 	.word	0x0800ab83
 800825c:	0800ab18 	.word	0x0800ab18
 8008260:	08009880 	.word	0x08009880
 8008264:	20007880 	.word	0x20007880
 8008268:	0800ab3e 	.word	0x0800ab3e
 800826c:	20007870 	.word	0x20007870
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008270:	68d2      	ldr	r2, [r2, #12]
 8008272:	9305      	str	r3, [sp, #20]
 8008274:	6850      	ldr	r0, [r2, #4]
 8008276:	f7fb fbe6 	bl	8003a46 <lwip_htonl>
 800827a:	68e9      	ldr	r1, [r5, #12]
 800827c:	4682      	mov	sl, r0
 800827e:	6848      	ldr	r0, [r1, #4]
 8008280:	f7fb fbe1 	bl	8003a46 <lwip_htonl>
 8008284:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8008288:	2800      	cmp	r0, #0
 800828a:	9b05      	ldr	r3, [sp, #20]
 800828c:	f6bf af47 	bge.w	800811e <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	e740      	b.n	8008116 <tcp_output+0x162>
          useg->next = seg;
 8008294:	6035      	str	r5, [r6, #0]
 8008296:	e72c      	b.n	80080f2 <tcp_output+0x13e>
      tcp_seg_free(seg);
 8008298:	4628      	mov	r0, r5
 800829a:	f7fd fd27 	bl	8005cec <tcp_seg_free>
 800829e:	e741      	b.n	8008124 <tcp_output+0x170>
    return ERR_RTE;
 80082a0:	f06f 0003 	mvn.w	r0, #3
 80082a4:	e7d4      	b.n	8008250 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80082a6:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 80082aa:	f47f af6b 	bne.w	8008184 <tcp_output+0x1d0>
 80082ae:	e6dd      	b.n	800806c <tcp_output+0xb8>

080082b0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	b085      	sub	sp, #20
 80082b6:	4681      	mov	r9, r0
 80082b8:	460e      	mov	r6, r1
 80082ba:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80082bc:	2114      	movs	r1, #20
 80082be:	2200      	movs	r2, #0
 80082c0:	2001      	movs	r0, #1
{
 80082c2:	461f      	mov	r7, r3
 80082c4:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 80082c8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80082cc:	f7fd f9f8 	bl	80056c0 <pbuf_alloc>
  if (p == NULL) {
 80082d0:	4605      	mov	r5, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d03c      	beq.n	8008350 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80082d6:	8943      	ldrh	r3, [r0, #10]
 80082d8:	2b13      	cmp	r3, #19
 80082da:	d806      	bhi.n	80082ea <tcp_rst+0x3a>
 80082dc:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <tcp_rst+0xa8>)
 80082de:	491f      	ldr	r1, [pc, #124]	; (800835c <tcp_rst+0xac>)
 80082e0:	481f      	ldr	r0, [pc, #124]	; (8008360 <tcp_rst+0xb0>)
 80082e2:	f240 524d 	movw	r2, #1357	; 0x54d
 80082e6:	f001 f8fa 	bl	80094de <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 80082ea:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 80082ec:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 80082ee:	f7fb fba7 	bl	8003a40 <lwip_htons>
 80082f2:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80082f4:	4650      	mov	r0, sl
 80082f6:	f7fb fba3 	bl	8003a40 <lwip_htons>
 80082fa:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80082fc:	4648      	mov	r0, r9
 80082fe:	f7fb fba2 	bl	8003a46 <lwip_htonl>
 8008302:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008304:	4630      	mov	r0, r6
 8008306:	f7fb fb9e 	bl	8003a46 <lwip_htonl>
 800830a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800830c:	f245 0014 	movw	r0, #20500	; 0x5014
 8008310:	f7fb fb96 	bl	8003a40 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008314:	2308      	movs	r3, #8
 8008316:	2600      	movs	r6, #0
 8008318:	73a3      	strb	r3, [r4, #14]
 800831a:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800831c:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800831e:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8008320:	7426      	strb	r6, [r4, #16]
 8008322:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8008324:	74a6      	strb	r6, [r4, #18]
 8008326:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008328:	4638      	mov	r0, r7
 800832a:	f7fc f81f 	bl	800436c <ip4_route>
  if (netif != NULL) {
 800832e:	b148      	cbz	r0, 8008344 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008330:	2306      	movs	r3, #6
 8008332:	9002      	str	r0, [sp, #8]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	9600      	str	r6, [sp, #0]
 8008338:	23ff      	movs	r3, #255	; 0xff
 800833a:	463a      	mov	r2, r7
 800833c:	4641      	mov	r1, r8
 800833e:	4628      	mov	r0, r5
 8008340:	f7fc f97a 	bl	8004638 <ip4_output_if>
  }
  pbuf_free(p);
 8008344:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008346:	b005      	add	sp, #20
 8008348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800834c:	f7fd b94e 	b.w	80055ec <pbuf_free>
}
 8008350:	b005      	add	sp, #20
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	bf00      	nop
 8008358:	0800ab83 	.word	0x0800ab83
 800835c:	0800ab55 	.word	0x0800ab55
 8008360:	08009880 	.word	0x08009880

08008364 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008364:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8008366:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8008368:	b1aa      	cbz	r2, 8008396 <tcp_rexmit_rto+0x32>
 800836a:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800836c:	680b      	ldr	r3, [r1, #0]
 800836e:	b983      	cbnz	r3, 8008392 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008370:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8008372:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008374:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008376:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800837a:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800837c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800837e:	bf1c      	itt	ne
 8008380:	3301      	addne	r3, #1
 8008382:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800838a:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800838e:	f7ff be11 	b.w	8007fb4 <tcp_output>
 8008392:	4619      	mov	r1, r3
 8008394:	e7ea      	b.n	800836c <tcp_rexmit_rto+0x8>
}
 8008396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800839a:	4770      	bx	lr

0800839c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800839e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 80083a0:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 80083a2:	b1ad      	cbz	r5, 80083d0 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80083a8:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 80083ac:	6833      	ldr	r3, [r6, #0]
 80083ae:	b983      	cbnz	r3, 80083d2 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 80083b0:	6833      	ldr	r3, [r6, #0]
 80083b2:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 80083b4:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b90b      	cbnz	r3, 80083be <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80083ba:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80083be:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80083c2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80083c4:	bf1c      	itt	ne
 80083c6:	3301      	addne	r3, #1
 80083c8:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	6363      	str	r3, [r4, #52]	; 0x34
 80083d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	6858      	ldr	r0, [r3, #4]
 80083d6:	f7fb fb36 	bl	8003a46 <lwip_htonl>
 80083da:	68eb      	ldr	r3, [r5, #12]
 80083dc:	4607      	mov	r7, r0
 80083de:	6858      	ldr	r0, [r3, #4]
 80083e0:	f7fb fb31 	bl	8003a46 <lwip_htonl>
 80083e4:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 80083e6:	2800      	cmp	r0, #0
 80083e8:	dae2      	bge.n	80083b0 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 80083ea:	6836      	ldr	r6, [r6, #0]
 80083ec:	e7de      	b.n	80083ac <tcp_rexmit+0x10>

080083ee <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80083ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 80083f0:	b510      	push	{r4, lr}
 80083f2:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80083f4:	b30b      	cbz	r3, 800843a <tcp_rexmit_fast+0x4c>
 80083f6:	7e83      	ldrb	r3, [r0, #26]
 80083f8:	075b      	lsls	r3, r3, #29
 80083fa:	d41e      	bmi.n	800843a <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80083fc:	f7ff ffce 	bl	800839c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008400:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008404:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008408:	4293      	cmp	r3, r2
 800840a:	bf38      	it	cc
 800840c:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800840e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008410:	bf28      	it	cs
 8008412:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008414:	0059      	lsls	r1, r3, #1
 8008416:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008418:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800841c:	bf38      	it	cc
 800841e:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008422:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008426:	440b      	add	r3, r1
 8008428:	4413      	add	r3, r2
 800842a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800842e:	7ea3      	ldrb	r3, [r4, #26]
 8008430:	f043 0304 	orr.w	r3, r3, #4
 8008434:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	8623      	strh	r3, [r4, #48]	; 0x30
 800843a:	bd10      	pop	{r4, pc}

0800843c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800843c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800843e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008440:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008442:	3801      	subs	r0, #1
 8008444:	f7fb faff 	bl	8003a46 <lwip_htonl>
 8008448:	2100      	movs	r1, #0
 800844a:	4602      	mov	r2, r0
 800844c:	4620      	mov	r0, r4
 800844e:	f7ff fc85 	bl	8007d5c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008452:	4605      	mov	r5, r0
 8008454:	b1c8      	cbz	r0, 800848a <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008456:	1d26      	adds	r6, r4, #4
 8008458:	4630      	mov	r0, r6
 800845a:	f7fb ff87 	bl	800436c <ip4_route>
  if (netif == NULL) {
 800845e:	b188      	cbz	r0, 8008484 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8008460:	2100      	movs	r1, #0
 8008462:	2206      	movs	r2, #6
 8008464:	7aa3      	ldrb	r3, [r4, #10]
 8008466:	9002      	str	r0, [sp, #8]
 8008468:	e88d 0006 	stmia.w	sp, {r1, r2}
 800846c:	4628      	mov	r0, r5
 800846e:	4621      	mov	r1, r4
 8008470:	4632      	mov	r2, r6
 8008472:	f7fc f8e1 	bl	8004638 <ip4_output_if>
 8008476:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008478:	4628      	mov	r0, r5
 800847a:	f7fd f8b7 	bl	80055ec <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800847e:	4620      	mov	r0, r4
 8008480:	b004      	add	sp, #16
 8008482:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8008484:	f06f 0403 	mvn.w	r4, #3
 8008488:	e7f6      	b.n	8008478 <tcp_keepalive+0x3c>
    return ERR_MEM;
 800848a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800848e:	e7f6      	b.n	800847e <tcp_keepalive+0x42>

08008490 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008490:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008494:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8008496:	4606      	mov	r6, r0

  if (seg == NULL) {
 8008498:	b914      	cbnz	r4, 80084a0 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800849a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800849c:	2c00      	cmp	r4, #0
 800849e:	d042      	beq.n	8008526 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80084a0:	68e3      	ldr	r3, [r4, #12]
 80084a2:	8998      	ldrh	r0, [r3, #12]
 80084a4:	f7fb facc 	bl	8003a40 <lwip_htons>
 80084a8:	f010 0501 	ands.w	r5, r0, #1
 80084ac:	bf18      	it	ne
 80084ae:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80084b0:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80084b2:	bf1c      	itt	ne
 80084b4:	fab5 f585 	clzne	r5, r5
 80084b8:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	f085 0101 	eor.w	r1, r5, #1
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff fc4b 	bl	8007d5c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80084c6:	4607      	mov	r7, r0
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d03e      	beq.n	800854a <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80084cc:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80084d0:	b36d      	cbz	r5, 800852e <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80084d2:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 80084d6:	2011      	movs	r0, #17
 80084d8:	f7fb fab2 	bl	8003a40 <lwip_htons>
 80084dc:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80084e0:	b2ad      	uxth	r5, r5
 80084e2:	4328      	orrs	r0, r5
 80084e4:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80084e8:	68e3      	ldr	r3, [r4, #12]
 80084ea:	6858      	ldr	r0, [r3, #4]
 80084ec:	f7fb faab 	bl	8003a46 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80084f0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80084f2:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80084f4:	1a1b      	subs	r3, r3, r0
 80084f6:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80084f8:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 80084fc:	bfb8      	it	lt
 80084fe:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008500:	4620      	mov	r0, r4
 8008502:	f7fb ff33 	bl	800436c <ip4_route>
  if (netif == NULL) {
 8008506:	b1e8      	cbz	r0, 8008544 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008508:	2100      	movs	r1, #0
 800850a:	2206      	movs	r2, #6
 800850c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8008510:	9002      	str	r0, [sp, #8]
 8008512:	4622      	mov	r2, r4
 8008514:	7ab3      	ldrb	r3, [r6, #10]
 8008516:	4631      	mov	r1, r6
 8008518:	4638      	mov	r0, r7
 800851a:	f7fc f88d 	bl	8004638 <ip4_output_if>
 800851e:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008520:	4638      	mov	r0, r7
 8008522:	f7fd f863 	bl	80055ec <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008526:	4620      	mov	r0, r4
 8008528:	b004      	add	sp, #16
 800852a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800852e:	6860      	ldr	r0, [r4, #4]
 8008530:	8922      	ldrh	r2, [r4, #8]
 8008532:	8903      	ldrh	r3, [r0, #8]
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	b29b      	uxth	r3, r3
 8008538:	2201      	movs	r2, #1
 800853a:	f108 0114 	add.w	r1, r8, #20
 800853e:	f7fd faf3 	bl	8005b28 <pbuf_copy_partial>
 8008542:	e7d1      	b.n	80084e8 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8008544:	f06f 0403 	mvn.w	r4, #3
 8008548:	e7ea      	b.n	8008520 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 800854a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800854e:	e7ea      	b.n	8008526 <tcp_zero_window_probe+0x96>

08008550 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008554:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008556:	200a      	movs	r0, #10
{
 8008558:	460f      	mov	r7, r1
 800855a:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800855c:	f7fc fea4 	bl	80052a8 <memp_malloc>
  if (timeout == NULL) {
 8008560:	4604      	mov	r4, r0
 8008562:	b938      	cbnz	r0, 8008574 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008564:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <sys_timeout+0x90>)
 8008566:	491f      	ldr	r1, [pc, #124]	; (80085e4 <sys_timeout+0x94>)
 8008568:	481f      	ldr	r0, [pc, #124]	; (80085e8 <sys_timeout+0x98>)
 800856a:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 800856c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008570:	f000 bfb5 	b.w	80094de <iprintf>
  now = sys_now();
 8008574:	f000 fcbe 	bl	8008ef4 <sys_now>
  if (next_timeout == NULL) {
 8008578:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <sys_timeout+0x9c>)
 800857a:	491d      	ldr	r1, [pc, #116]	; (80085f0 <sys_timeout+0xa0>)
 800857c:	6813      	ldr	r3, [r2, #0]
 800857e:	b95b      	cbnz	r3, 8008598 <sys_timeout+0x48>
    timeouts_last_time = now;
 8008580:	6008      	str	r0, [r1, #0]
    diff = 0;
 8008582:	4618      	mov	r0, r3
  timeout->next = NULL;
 8008584:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8008586:	4428      	add	r0, r5
  timeout->next = NULL;
 8008588:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 800858a:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 800858c:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800858e:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8008590:	b92b      	cbnz	r3, 800859e <sys_timeout+0x4e>
    next_timeout = timeout;
 8008592:	6014      	str	r4, [r2, #0]
 8008594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8008598:	6809      	ldr	r1, [r1, #0]
 800859a:	1a40      	subs	r0, r0, r1
 800859c:	e7f2      	b.n	8008584 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800859e:	6859      	ldr	r1, [r3, #4]
 80085a0:	428d      	cmp	r5, r1
 80085a2:	d217      	bcs.n	80085d4 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 80085a4:	1b4d      	subs	r5, r1, r5
 80085a6:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	e7f2      	b.n	8008592 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 80085ac:	684e      	ldr	r6, [r1, #4]
 80085ae:	42b2      	cmp	r2, r6
 80085b0:	d312      	bcc.n	80085d8 <sys_timeout+0x88>
 80085b2:	4608      	mov	r0, r1
      timeout->time -= t->time;
 80085b4:	6841      	ldr	r1, [r0, #4]
 80085b6:	6862      	ldr	r2, [r4, #4]
 80085b8:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 80085ba:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 80085bc:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80085be:	2900      	cmp	r1, #0
 80085c0:	d1f4      	bne.n	80085ac <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 80085c2:	4295      	cmp	r5, r2
 80085c4:	d202      	bcs.n	80085cc <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	441d      	add	r5, r3
 80085ca:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 80085cc:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 80085ce:	6004      	str	r4, [r0, #0]
        break;
 80085d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d4:	4618      	mov	r0, r3
 80085d6:	e7ed      	b.n	80085b4 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 80085d8:	1ab2      	subs	r2, r6, r2
 80085da:	604a      	str	r2, [r1, #4]
 80085dc:	e7f6      	b.n	80085cc <sys_timeout+0x7c>
 80085de:	bf00      	nop
 80085e0:	0800abe4 	.word	0x0800abe4
 80085e4:	0800ac18 	.word	0x0800ac18
 80085e8:	08009880 	.word	0x08009880
 80085ec:	20003f00 	.word	0x20003f00
 80085f0:	20003f08 	.word	0x20003f08

080085f4 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80085f4:	4b08      	ldr	r3, [pc, #32]	; (8008618 <tcp_timer_needed+0x24>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	b962      	cbnz	r2, 8008614 <tcp_timer_needed+0x20>
 80085fa:	4a08      	ldr	r2, [pc, #32]	; (800861c <tcp_timer_needed+0x28>)
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	b912      	cbnz	r2, 8008606 <tcp_timer_needed+0x12>
 8008600:	4a07      	ldr	r2, [pc, #28]	; (8008620 <tcp_timer_needed+0x2c>)
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	b132      	cbz	r2, 8008614 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800860a:	4906      	ldr	r1, [pc, #24]	; (8008624 <tcp_timer_needed+0x30>)
 800860c:	2200      	movs	r2, #0
 800860e:	20fa      	movs	r0, #250	; 0xfa
 8008610:	f7ff bf9e 	b.w	8008550 <sys_timeout>
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20003f04 	.word	0x20003f04
 800861c:	2000786c 	.word	0x2000786c
 8008620:	2000787c 	.word	0x2000787c
 8008624:	08008629 	.word	0x08008629

08008628 <tcpip_tcp_timer>:
{
 8008628:	b508      	push	{r3, lr}
  tcp_tmr();
 800862a:	f7fd ff13 	bl	8006454 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800862e:	4b08      	ldr	r3, [pc, #32]	; (8008650 <tcpip_tcp_timer+0x28>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	b913      	cbnz	r3, 800863a <tcpip_tcp_timer+0x12>
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <tcpip_tcp_timer+0x2c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	b133      	cbz	r3, 8008648 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800863a:	2200      	movs	r2, #0
 800863c:	4906      	ldr	r1, [pc, #24]	; (8008658 <tcpip_tcp_timer+0x30>)
 800863e:	20fa      	movs	r0, #250	; 0xfa
}
 8008640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008644:	f7ff bf84 	b.w	8008550 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8008648:	4a04      	ldr	r2, [pc, #16]	; (800865c <tcpip_tcp_timer+0x34>)
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	bd08      	pop	{r3, pc}
 800864e:	bf00      	nop
 8008650:	2000786c 	.word	0x2000786c
 8008654:	2000787c 	.word	0x2000787c
 8008658:	08008629 	.word	0x08008629
 800865c:	20003f04 	.word	0x20003f04

08008660 <sys_timeouts_init>:
{
 8008660:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8008662:	4d0a      	ldr	r5, [pc, #40]	; (800868c <sys_timeouts_init+0x2c>)
 8008664:	4c0a      	ldr	r4, [pc, #40]	; (8008690 <sys_timeouts_init+0x30>)
 8008666:	f105 0208 	add.w	r2, r5, #8
 800866a:	4621      	mov	r1, r4
 800866c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008670:	f7ff ff6e 	bl	8008550 <sys_timeout>
 8008674:	f105 0210 	add.w	r2, r5, #16
 8008678:	4621      	mov	r1, r4
 800867a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800867e:	f7ff ff67 	bl	8008550 <sys_timeout>
  timeouts_last_time = sys_now();
 8008682:	f000 fc37 	bl	8008ef4 <sys_now>
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <sys_timeouts_init+0x34>)
 8008688:	6018      	str	r0, [r3, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	0800abcc 	.word	0x0800abcc
 8008690:	08008699 	.word	0x08008699
 8008694:	20003f08 	.word	0x20003f08

08008698 <cyclic_timer>:
{
 8008698:	b510      	push	{r4, lr}
 800869a:	4604      	mov	r4, r0
  cyclic->handler();
 800869c:	6843      	ldr	r3, [r0, #4]
 800869e:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80086a0:	4622      	mov	r2, r4
 80086a2:	6820      	ldr	r0, [r4, #0]
 80086a4:	4902      	ldr	r1, [pc, #8]	; (80086b0 <cyclic_timer+0x18>)
}
 80086a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80086aa:	f7ff bf51 	b.w	8008550 <sys_timeout>
 80086ae:	bf00      	nop
 80086b0:	08008699 	.word	0x08008699

080086b4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80086b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80086b8:	4e1f      	ldr	r6, [pc, #124]	; (8008738 <sys_timeouts_mbox_fetch+0x84>)
  diff = sys_now() - timeouts_last_time;
 80086ba:	4d20      	ldr	r5, [pc, #128]	; (800873c <sys_timeouts_mbox_fetch+0x88>)
{
 80086bc:	4680      	mov	r8, r0
 80086be:	4689      	mov	r9, r1
 80086c0:	4637      	mov	r7, r6
  if (!next_timeout) {
 80086c2:	6832      	ldr	r2, [r6, #0]
 80086c4:	b92a      	cbnz	r2, 80086d2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80086c6:	4649      	mov	r1, r9
 80086c8:	4640      	mov	r0, r8
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 80086ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 80086ce:	f000 b993 	b.w	80089f8 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 80086d2:	f000 fc0f 	bl	8008ef4 <sys_now>
 80086d6:	682a      	ldr	r2, [r5, #0]
  if (diff > next_timeout->time) {
 80086d8:	6833      	ldr	r3, [r6, #0]
  diff = sys_now() - timeouts_last_time;
 80086da:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	4290      	cmp	r0, r2
 80086e0:	d91f      	bls.n	8008722 <sys_timeouts_mbox_fetch+0x6e>
  if (next_timeout) {
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0ec      	beq.n	80086c2 <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 80086e8:	f000 fc04 	bl	8008ef4 <sys_now>
    diff = now - timeouts_last_time;
 80086ec:	682c      	ldr	r4, [r5, #0]
 80086ee:	1b04      	subs	r4, r0, r4
      tmptimeout = next_timeout;
 80086f0:	6839      	ldr	r1, [r7, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80086f2:	2900      	cmp	r1, #0
 80086f4:	d0e5      	beq.n	80086c2 <sys_timeouts_mbox_fetch+0xe>
 80086f6:	684b      	ldr	r3, [r1, #4]
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d8e2      	bhi.n	80086c2 <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 80086fc:	682a      	ldr	r2, [r5, #0]
        handler = tmptimeout->h;
 80086fe:	f8d1 a008 	ldr.w	sl, [r1, #8]
        arg = tmptimeout->arg;
 8008702:	f8d1 b00c 	ldr.w	fp, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 8008706:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 8008708:	1ae4      	subs	r4, r4, r3
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800870a:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800870c:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 800870e:	602a      	str	r2, [r5, #0]
        next_timeout = tmptimeout->next;
 8008710:	603b      	str	r3, [r7, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008712:	f7fc fde5 	bl	80052e0 <memp_free>
        if (handler != NULL) {
 8008716:	f1ba 0f00 	cmp.w	sl, #0
 800871a:	d0e9      	beq.n	80086f0 <sys_timeouts_mbox_fetch+0x3c>
          handler(arg);
 800871c:	4658      	mov	r0, fp
 800871e:	47d0      	blx	sl
 8008720:	e7e6      	b.n	80086f0 <sys_timeouts_mbox_fetch+0x3c>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8008722:	1a12      	subs	r2, r2, r0
 8008724:	d0dd      	beq.n	80086e2 <sys_timeouts_mbox_fetch+0x2e>
 8008726:	4649      	mov	r1, r9
 8008728:	4640      	mov	r0, r8
 800872a:	f000 f965 	bl	80089f8 <sys_arch_mbox_fetch>
 800872e:	3001      	adds	r0, #1
 8008730:	d0d7      	beq.n	80086e2 <sys_timeouts_mbox_fetch+0x2e>
 8008732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	bf00      	nop
 8008738:	20003f00 	.word	0x20003f00
 800873c:	20003f08 	.word	0x20003f08

08008740 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008740:	4770      	bx	lr
	...

08008744 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008748:	8943      	ldrh	r3, [r0, #10]
 800874a:	2b07      	cmp	r3, #7
{
 800874c:	b085      	sub	sp, #20
 800874e:	4605      	mov	r5, r0
 8008750:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8008752:	d805      	bhi.n	8008760 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8008754:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8008756:	b005      	add	sp, #20
 8008758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800875c:	f7fc bf46 	b.w	80055ec <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008760:	4e3e      	ldr	r6, [pc, #248]	; (800885c <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 8008762:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008764:	6831      	ldr	r1, [r6, #0]
 8008766:	6970      	ldr	r0, [r6, #20]
 8008768:	f7fb ff77 	bl	800465a <ip4_addr_isbroadcast_u32>
 800876c:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800876e:	8820      	ldrh	r0, [r4, #0]
 8008770:	f7fb f966 	bl	8003a40 <lwip_htons>
 8008774:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8008776:	8860      	ldrh	r0, [r4, #2]
 8008778:	f7fb f962 	bl	8003a40 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800877c:	4a38      	ldr	r2, [pc, #224]	; (8008860 <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800877e:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008780:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8008784:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8008786:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008788:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 800878a:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800878c:	4603      	mov	r3, r0
  prev = NULL;
 800878e:	46a4      	mov	ip, r4
 8008790:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008792:	b92b      	cbnz	r3, 80087a0 <udp_input+0x5c>
  if (pcb != NULL) {
 8008794:	bb0c      	cbnz	r4, 80087da <udp_input+0x96>
  if (for_us) {
 8008796:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800879a:	428b      	cmp	r3, r1
 800879c:	d1da      	bne.n	8008754 <udp_input+0x10>
 800879e:	e01c      	b.n	80087da <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 80087a0:	8a5a      	ldrh	r2, [r3, #18]
 80087a2:	4552      	cmp	r2, sl
 80087a4:	d12b      	bne.n	80087fe <udp_input+0xba>
 80087a6:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 80087a8:	b32f      	cbz	r7, 80087f6 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80087aa:	b13a      	cbz	r2, 80087bc <udp_input+0x78>
 80087ac:	1c4e      	adds	r6, r1, #1
 80087ae:	d005      	beq.n	80087bc <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80087b0:	404a      	eors	r2, r1
 80087b2:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80087b4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80087b8:	4216      	tst	r6, r2
 80087ba:	d120      	bne.n	80087fe <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80087bc:	7c1a      	ldrb	r2, [r3, #16]
 80087be:	0752      	lsls	r2, r2, #29
 80087c0:	d402      	bmi.n	80087c8 <udp_input+0x84>
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	bf08      	it	eq
 80087c6:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 80087c8:	8a9a      	ldrh	r2, [r3, #20]
 80087ca:	4542      	cmp	r2, r8
 80087cc:	d117      	bne.n	80087fe <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80087ce:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 80087d0:	b9c2      	cbnz	r2, 8008804 <udp_input+0xc0>
        if (prev != NULL) {
 80087d2:	f1bc 0f00 	cmp.w	ip, #0
 80087d6:	d118      	bne.n	800880a <udp_input+0xc6>
 80087d8:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 80087da:	f06f 0107 	mvn.w	r1, #7
 80087de:	4628      	mov	r0, r5
 80087e0:	f7fc fefe 	bl	80055e0 <pbuf_header>
 80087e4:	b1c0      	cbz	r0, 8008818 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80087e6:	4b1f      	ldr	r3, [pc, #124]	; (8008864 <udp_input+0x120>)
 80087e8:	491f      	ldr	r1, [pc, #124]	; (8008868 <udp_input+0x124>)
 80087ea:	4820      	ldr	r0, [pc, #128]	; (800886c <udp_input+0x128>)
 80087ec:	f240 1255 	movw	r2, #341	; 0x155
 80087f0:	f000 fe75 	bl	80094de <iprintf>
 80087f4:	e7ae      	b.n	8008754 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	d0e0      	beq.n	80087bc <udp_input+0x78>
 80087fa:	428a      	cmp	r2, r1
 80087fc:	d0de      	beq.n	80087bc <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80087fe:	469c      	mov	ip, r3
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	e7c6      	b.n	8008792 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008804:	4572      	cmp	r2, lr
 8008806:	d1fa      	bne.n	80087fe <udp_input+0xba>
 8008808:	e7e3      	b.n	80087d2 <udp_input+0x8e>
          prev->next = pcb->next;
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 8008810:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8008814:	60d8      	str	r0, [r3, #12]
 8008816:	e7df      	b.n	80087d8 <udp_input+0x94>
    if (pcb != NULL) {
 8008818:	b164      	cbz	r4, 8008834 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800881a:	69a6      	ldr	r6, [r4, #24]
 800881c:	2e00      	cmp	r6, #0
 800881e:	d099      	beq.n	8008754 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008820:	f8cd 8000 	str.w	r8, [sp]
 8008824:	4b12      	ldr	r3, [pc, #72]	; (8008870 <udp_input+0x12c>)
 8008826:	69e0      	ldr	r0, [r4, #28]
 8008828:	462a      	mov	r2, r5
 800882a:	4621      	mov	r1, r4
 800882c:	47b0      	blx	r6
}
 800882e:	b005      	add	sp, #20
 8008830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008834:	2f00      	cmp	r7, #0
 8008836:	d18d      	bne.n	8008754 <udp_input+0x10>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008840:	2be0      	cmp	r3, #224	; 0xe0
 8008842:	d087      	beq.n	8008754 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	8999      	ldrh	r1, [r3, #12]
 8008848:	3108      	adds	r1, #8
 800884a:	b209      	sxth	r1, r1
 800884c:	4628      	mov	r0, r5
 800884e:	f7fc feca 	bl	80055e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008852:	2103      	movs	r1, #3
 8008854:	4628      	mov	r0, r5
 8008856:	f7fb fd7f 	bl	8004358 <icmp_dest_unreach>
 800885a:	e77b      	b.n	8008754 <udp_input+0x10>
 800885c:	20004168 	.word	0x20004168
 8008860:	20007884 	.word	0x20007884
 8008864:	0800ac55 	.word	0x0800ac55
 8008868:	0800ac84 	.word	0x0800ac84
 800886c:	08009880 	.word	0x08009880
 8008870:	20004178 	.word	0x20004178

08008874 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008874:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008876:	b138      	cbz	r0, 8008888 <udp_netif_ip_addr_changed+0x14>
 8008878:	6803      	ldr	r3, [r0, #0]
 800887a:	b12b      	cbz	r3, 8008888 <udp_netif_ip_addr_changed+0x14>
 800887c:	b121      	cbz	r1, 8008888 <udp_netif_ip_addr_changed+0x14>
 800887e:	680b      	ldr	r3, [r1, #0]
 8008880:	b113      	cbz	r3, 8008888 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008882:	4b06      	ldr	r3, [pc, #24]	; (800889c <udp_netif_ip_addr_changed+0x28>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	b903      	cbnz	r3, 800888a <udp_netif_ip_addr_changed+0x16>
 8008888:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800888a:	681c      	ldr	r4, [r3, #0]
 800888c:	6802      	ldr	r2, [r0, #0]
 800888e:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008890:	bf04      	itt	eq
 8008892:	680a      	ldreq	r2, [r1, #0]
 8008894:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	e7f5      	b.n	8008886 <udp_netif_ip_addr_changed+0x12>
 800889a:	bf00      	nop
 800889c:	20007884 	.word	0x20007884

080088a0 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80088a0:	8943      	ldrh	r3, [r0, #10]
 80088a2:	2b0e      	cmp	r3, #14
{
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	4604      	mov	r4, r0
 80088a8:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 80088aa:	d914      	bls.n	80088d6 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80088ac:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80088ae:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80088b0:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d50a      	bpl.n	80088cc <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d111      	bne.n	80088de <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80088ba:	7843      	ldrb	r3, [r0, #1]
 80088bc:	b933      	cbnz	r3, 80088cc <ethernet_input+0x2c>
 80088be:	7883      	ldrb	r3, [r0, #2]
 80088c0:	2b5e      	cmp	r3, #94	; 0x5e
 80088c2:	d103      	bne.n	80088cc <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80088c4:	7b63      	ldrb	r3, [r4, #13]
 80088c6:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80088ca:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80088cc:	2e08      	cmp	r6, #8
 80088ce:	d010      	beq.n	80088f2 <ethernet_input+0x52>
 80088d0:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80088d4:	d01e      	beq.n	8008914 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80088d6:	4620      	mov	r0, r4
 80088d8:	f7fc fe88 	bl	80055ec <pbuf_free>
  return ERR_OK;
 80088dc:	e018      	b.n	8008910 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80088de:	2206      	movs	r2, #6
 80088e0:	4914      	ldr	r1, [pc, #80]	; (8008934 <ethernet_input+0x94>)
 80088e2:	f000 ff3b 	bl	800975c <memcmp>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d1f0      	bne.n	80088cc <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 80088ea:	7b63      	ldrb	r3, [r4, #13]
 80088ec:	f043 0308 	orr.w	r3, r3, #8
 80088f0:	e7eb      	b.n	80088ca <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80088f2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80088f6:	071a      	lsls	r2, r3, #28
 80088f8:	d5ed      	bpl.n	80088d6 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80088fa:	f06f 010d 	mvn.w	r1, #13
 80088fe:	4620      	mov	r0, r4
 8008900:	f7fc fe6e 	bl	80055e0 <pbuf_header>
 8008904:	2800      	cmp	r0, #0
 8008906:	d1e6      	bne.n	80088d6 <ethernet_input+0x36>
        ip4_input(p, netif);
 8008908:	4629      	mov	r1, r5
 800890a:	4620      	mov	r0, r4
 800890c:	f7fb fd5a 	bl	80043c4 <ip4_input>
}
 8008910:	2000      	movs	r0, #0
 8008912:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8008914:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8008918:	071b      	lsls	r3, r3, #28
 800891a:	d5dc      	bpl.n	80088d6 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800891c:	f06f 010d 	mvn.w	r1, #13
 8008920:	4620      	mov	r0, r4
 8008922:	f7fc fe5d 	bl	80055e0 <pbuf_header>
 8008926:	2800      	cmp	r0, #0
 8008928:	d1d5      	bne.n	80088d6 <ethernet_input+0x36>
        etharp_input(p, netif);
 800892a:	4629      	mov	r1, r5
 800892c:	4620      	mov	r0, r4
 800892e:	f7fb f9bb 	bl	8003ca8 <etharp_input>
      break;
 8008932:	e7ed      	b.n	8008910 <ethernet_input+0x70>
 8008934:	0800ac98 	.word	0x0800ac98

08008938 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800893e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8008942:	460d      	mov	r5, r1
 8008944:	4616      	mov	r6, r2
 8008946:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8008948:	f7fb f87a 	bl	8003a40 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800894c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800894e:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8008950:	4628      	mov	r0, r5
 8008952:	f7fc fe45 	bl	80055e0 <pbuf_header>
 8008956:	b9e0      	cbnz	r0, 8008992 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8008958:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800895a:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	88bb      	ldrh	r3, [r7, #4]
 8008964:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8008966:	6833      	ldr	r3, [r6, #0]
 8008968:	f8c1 3006 	str.w	r3, [r1, #6]
 800896c:	88b3      	ldrh	r3, [r6, #4]
 800896e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8008970:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008974:	2b06      	cmp	r3, #6
 8008976:	d006      	beq.n	8008986 <ethernet_output+0x4e>
 8008978:	4b08      	ldr	r3, [pc, #32]	; (800899c <ethernet_output+0x64>)
 800897a:	4909      	ldr	r1, [pc, #36]	; (80089a0 <ethernet_output+0x68>)
 800897c:	4809      	ldr	r0, [pc, #36]	; (80089a4 <ethernet_output+0x6c>)
 800897e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008982:	f000 fdac 	bl	80094de <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8008986:	69a3      	ldr	r3, [r4, #24]
 8008988:	4629      	mov	r1, r5
 800898a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800898c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8008990:	4718      	bx	r3
}
 8008992:	f06f 0001 	mvn.w	r0, #1
 8008996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899a:	bf00      	nop
 800899c:	0800ac9e 	.word	0x0800ac9e
 80089a0:	0800acd3 	.word	0x0800acd3
 80089a4:	08009880 	.word	0x08009880

080089a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80089a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089aa:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80089ac:	9100      	str	r1, [sp, #0]
 80089ae:	2304      	movs	r3, #4
 80089b0:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80089b2:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	9102      	str	r1, [sp, #8]
 80089b8:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80089ba:	f7f9 fac1 	bl	8001f40 <osMessageCreate>
 80089be:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80089c0:	fab0 f080 	clz	r0, r0
 80089c4:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 80089c6:	4240      	negs	r0, r0
 80089c8:	b004      	add	sp, #16
 80089ca:	bd10      	pop	{r4, pc}

080089cc <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089d6:	4629      	mov	r1, r5
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	f7f9 fac5 	bl	8001f68 <osMessagePut>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d1f7      	bne.n	80089d2 <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80089e2:	bd38      	pop	{r3, r4, r5, pc}

080089e4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80089e4:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80089e6:	2200      	movs	r2, #0
 80089e8:	6800      	ldr	r0, [r0, #0]
 80089ea:	f7f9 fabd 	bl	8001f68 <osMessagePut>
 80089ee:	3000      	adds	r0, #0
 80089f0:	bf18      	it	ne
 80089f2:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80089f4:	4240      	negs	r0, r0
 80089f6:	bd08      	pop	{r3, pc}

080089f8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80089f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fa:	b085      	sub	sp, #20
 80089fc:	4606      	mov	r6, r0
 80089fe:	460d      	mov	r5, r1
 8008a00:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8008a02:	f7f9 f9c6 	bl	8001d92 <osKernelSysTick>
 8008a06:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8008a08:	b177      	cbz	r7, 8008a28 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	6831      	ldr	r1, [r6, #0]
 8008a0e:	a801      	add	r0, sp, #4
 8008a10:	f7f9 fad2 	bl	8001fb8 <osMessageGet>

    if(event.status == osEventMessage)
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d10d      	bne.n	8008a36 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 8008a1e:	f7f9 f9b8 	bl	8001d92 <osKernelSysTick>
 8008a22:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8008a24:	b005      	add	sp, #20
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8008a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a2c:	6831      	ldr	r1, [r6, #0]
 8008a2e:	a801      	add	r0, sp, #4
 8008a30:	f7f9 fac2 	bl	8001fb8 <osMessageGet>
 8008a34:	e7f1      	b.n	8008a1a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a3a:	e7f3      	b.n	8008a24 <sys_arch_mbox_fetch+0x2c>

08008a3c <sys_mbox_valid>:
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	3000      	adds	r0, #0
 8008a40:	bf18      	it	ne
 8008a42:	2001      	movne	r0, #1
 8008a44:	4770      	bx	lr

08008a46 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	f7f9 ba54 	b.w	8001ef4 <osSemaphoreRelease>

08008a4c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8008a4c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8008a4e:	4803      	ldr	r0, [pc, #12]	; (8008a5c <sys_init+0x10>)
 8008a50:	f7f9 f9d6 	bl	8001e00 <osMutexCreate>
 8008a54:	4b02      	ldr	r3, [pc, #8]	; (8008a60 <sys_init+0x14>)
 8008a56:	6018      	str	r0, [r3, #0]
 8008a58:	bd08      	pop	{r3, pc}
 8008a5a:	bf00      	nop
 8008a5c:	0800ad0c 	.word	0x0800ad0c
 8008a60:	2000788c 	.word	0x2000788c

08008a64 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8008a64:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8008a66:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8008a68:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8008a6a:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8008a70:	f7f9 f9c6 	bl	8001e00 <osMutexCreate>
 8008a74:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8008a76:	fab0 f080 	clz	r0, r0
 8008a7a:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8008a7c:	4240      	negs	r0, r0
 8008a7e:	b002      	add	sp, #8
 8008a80:	bd10      	pop	{r4, pc}

08008a82 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8008a82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a86:	6800      	ldr	r0, [r0, #0]
 8008a88:	f7f9 b9c2 	b.w	8001e10 <osMutexWait>

08008a8c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f7f9 ba55 	b.w	8001f3c <osMutexRelease>

08008a92 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8008a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a94:	b089      	sub	sp, #36	; 0x24
 8008a96:	4607      	mov	r7, r0
 8008a98:	460e      	mov	r6, r1
 8008a9a:	4614      	mov	r4, r2
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	221c      	movs	r2, #28
 8008aa0:	a801      	add	r0, sp, #4
{
 8008aa2:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8008aa4:	f000 fe74 	bl	8009790 <memset>
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aaa:	9701      	str	r7, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 8008aac:	4621      	mov	r1, r4
 8008aae:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8008ab0:	9602      	str	r6, [sp, #8]
 8008ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ab6:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8008ab8:	f7f9 f972 	bl	8001da0 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8008abc:	b009      	add	sp, #36	; 0x24
 8008abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ac0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8008ac0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8008ac2:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <sys_arch_protect+0x14>)
 8008ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f7f9 f9a1 	bl	8001e10 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 8008ace:	2001      	movs	r0, #1
 8008ad0:	bd08      	pop	{r3, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000788c 	.word	0x2000788c

08008ad8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8008ad8:	4b01      	ldr	r3, [pc, #4]	; (8008ae0 <sys_arch_unprotect+0x8>)
 8008ada:	6818      	ldr	r0, [r3, #0]
 8008adc:	f7f9 ba2e 	b.w	8001f3c <osMutexRelease>
 8008ae0:	2000788c 	.word	0x2000788c

08008ae4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008ae8:	4a25      	ldr	r2, [pc, #148]	; (8008b80 <low_level_output+0x9c>)
 8008aea:	9200      	str	r2, [sp, #0]
 8008aec:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8008aee:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008af2:	68ab      	ldr	r3, [r5, #8]
{
 8008af4:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8008af6:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008af8:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 8008afc:	b92c      	cbnz	r4, 8008b0a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008afe:	4639      	mov	r1, r7
 8008b00:	481f      	ldr	r0, [pc, #124]	; (8008b80 <low_level_output+0x9c>)
 8008b02:	f7f7 fead 	bl	8000860 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8008b06:	4620      	mov	r0, r4
 8008b08:	e004      	b.n	8008b14 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008b0a:	682a      	ldr	r2, [r5, #0]
 8008b0c:	2a00      	cmp	r2, #0
 8008b0e:	da11      	bge.n	8008b34 <low_level_output+0x50>
        errval = ERR_USE;
 8008b10:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008b14:	9b00      	ldr	r3, [sp, #0]
 8008b16:	f241 0214 	movw	r2, #4116	; 0x1014
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	5899      	ldr	r1, [r3, r2]
 8008b1e:	0689      	lsls	r1, r1, #26
 8008b20:	d505      	bpl.n	8008b2e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008b22:	2120      	movs	r1, #32
 8008b24:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008b26:	f241 0204 	movw	r2, #4100	; 0x1004
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8008b2e:	b003      	add	sp, #12
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8008b34:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008b38:	4646      	mov	r6, r8
      payloadoffset = 0;
 8008b3a:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008b3e:	eb06 0809 	add.w	r8, r6, r9
 8008b42:	45d8      	cmp	r8, fp
 8008b44:	eb03 0006 	add.w	r0, r3, r6
 8008b48:	6861      	ldr	r1, [r4, #4]
 8008b4a:	d808      	bhi.n	8008b5e <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008b4c:	464a      	mov	r2, r9
 8008b4e:	4451      	add	r1, sl
 8008b50:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8008b52:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008b54:	f000 fe11 	bl	800977a <memcpy>
  for(q = p; q != NULL; q = q->next)
 8008b58:	6824      	ldr	r4, [r4, #0]
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	e7ce      	b.n	8008afc <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008b5e:	ebab 0606 	sub.w	r6, fp, r6
 8008b62:	4632      	mov	r2, r6
 8008b64:	4451      	add	r1, sl
 8008b66:	f000 fe08 	bl	800977a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008b6a:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dbce      	blt.n	8008b10 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008b72:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008b74:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008b76:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008b78:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	e7de      	b.n	8008b3e <low_level_output+0x5a>
 8008b80:	20009160 	.word	0x20009160

08008b84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008b8a:	4c37      	ldr	r4, [pc, #220]	; (8008c68 <ethernetif_input+0xe4>)
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b92:	f7f9 f989 	bl	8001ea8 <osSemaphoreWait>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d1f8      	bne.n	8008b8c <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008b9a:	4c34      	ldr	r4, [pc, #208]	; (8008c6c <ethernetif_input+0xe8>)
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7f7 fed3 	bl	8000948 <HAL_ETH_GetReceivedFrame_IT>
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d1f0      	bne.n	8008b8a <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 8008ba8:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bac:	9301      	str	r3, [sp, #4]
  if (len > 0)
 8008bae:	bb01      	cbnz	r1, 8008bf2 <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 8008bb0:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008bb4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4282      	cmp	r2, r0
 8008bba:	d14d      	bne.n	8008c58 <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8008bc0:	f241 0214 	movw	r2, #4116	; 0x1014
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	5899      	ldr	r1, [r3, r2]
 8008bc8:	0609      	lsls	r1, r1, #24
 8008bca:	d505      	bpl.n	8008bd8 <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008bcc:	2180      	movs	r1, #128	; 0x80
 8008bce:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 8008bd0:	f241 0208 	movw	r2, #4104	; 0x1008
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	d0d6      	beq.n	8008b8a <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008bdc:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008be0:	4651      	mov	r1, sl
 8008be2:	4638      	mov	r0, r7
 8008be4:	4798      	blx	r3
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d0d7      	beq.n	8008b9a <ethernetif_input+0x16>
          {
            pbuf_free(p);
 8008bea:	4638      	mov	r0, r7
 8008bec:	f7fc fcfe 	bl	80055ec <pbuf_free>
 8008bf0:	e7d3      	b.n	8008b9a <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008bf2:	2203      	movs	r2, #3
 8008bf4:	2004      	movs	r0, #4
 8008bf6:	f7fc fd63 	bl	80056c0 <pbuf_alloc>
  if (p != NULL)
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d0d7      	beq.n	8008bb0 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008c00:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 8008c04:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 8008c06:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8008c0a:	462e      	mov	r6, r5
      payloadoffset = 0;
 8008c0c:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008c10:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008c14:	18b5      	adds	r5, r6, r2
 8008c16:	429d      	cmp	r5, r3
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c1e:	eb03 0106 	add.w	r1, r3, r6
 8008c22:	d808      	bhi.n	8008c36 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008c24:	4448      	add	r0, r9
 8008c26:	f000 fda8 	bl	800977a <memcpy>
    for(q = p; q != NULL; q = q->next)
 8008c2a:	f8d8 8000 	ldr.w	r8, [r8]
 8008c2e:	f1b8 0f00 	cmp.w	r8, #0
 8008c32:	d1e8      	bne.n	8008c06 <ethernetif_input+0x82>
 8008c34:	e7bd      	b.n	8008bb2 <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008c36:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 8008c3a:	3604      	adds	r6, #4
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	4448      	add	r0, r9
 8008c40:	f000 fd9b 	bl	800977a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008c44:	f8db b00c 	ldr.w	fp, [fp, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008c48:	f8db 3008 	ldr.w	r3, [fp, #8]
 8008c4c:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008c4e:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008c50:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 8008c54:	2600      	movs	r6, #0
 8008c56:	e7db      	b.n	8008c10 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008c5e:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008c60:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008c62:	3201      	adds	r2, #1
 8008c64:	e7a8      	b.n	8008bb8 <ethernetif_input+0x34>
 8008c66:	bf00      	nop
 8008c68:	20003f0c 	.word	0x20003f0c
 8008c6c:	20009160 	.word	0x20009160

08008c70 <HAL_ETH_MspInit>:
{
 8008c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c76:	2214      	movs	r2, #20
 8008c78:	2100      	movs	r1, #0
 8008c7a:	a807      	add	r0, sp, #28
 8008c7c:	f000 fd88 	bl	8009790 <memset>
  if(ethHandle->Instance==ETH)
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	4b3d      	ldr	r3, [pc, #244]	; (8008d78 <HAL_ETH_MspInit+0x108>)
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d174      	bne.n	8008d72 <HAL_ETH_MspInit+0x102>
    __HAL_RCC_ETH_CLK_ENABLE();
 8008c88:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8008c8c:	2400      	movs	r4, #0
 8008c8e:	9400      	str	r4, [sp, #0]
 8008c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c92:	483a      	ldr	r0, [pc, #232]	; (8008d7c <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8008c94:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008c98:	631a      	str	r2, [r3, #48]	; 0x30
 8008c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c9c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8008ca0:	9200      	str	r2, [sp, #0]
 8008ca2:	9a00      	ldr	r2, [sp, #0]
 8008ca4:	9401      	str	r4, [sp, #4]
 8008ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ca8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30
 8008cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cb0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008cb4:	9201      	str	r2, [sp, #4]
 8008cb6:	9a01      	ldr	r2, [sp, #4]
 8008cb8:	9402      	str	r4, [sp, #8]
 8008cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cbc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8008cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008cc8:	9202      	str	r2, [sp, #8]
 8008cca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ccc:	9403      	str	r4, [sp, #12]
 8008cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd0:	f042 0204 	orr.w	r2, r2, #4
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8008cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd8:	f002 0204 	and.w	r2, r2, #4
 8008cdc:	9203      	str	r2, [sp, #12]
 8008cde:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ce0:	9404      	str	r4, [sp, #16]
 8008ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8008cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cec:	f002 0201 	and.w	r2, r2, #1
 8008cf0:	9204      	str	r2, [sp, #16]
 8008cf2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cf4:	9405      	str	r4, [sp, #20]
 8008cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf8:	f042 0202 	orr.w	r2, r2, #2
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8008cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d00:	f002 0202 	and.w	r2, r2, #2
 8008d04:	9205      	str	r2, [sp, #20]
 8008d06:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d08:	9406      	str	r4, [sp, #24]
 8008d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d10:	631a      	str	r2, [r3, #48]	; 0x30
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d1c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d1e:	250b      	movs	r5, #11
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d20:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d22:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008d24:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d26:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008d28:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d2a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d2c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d2e:	f7f8 f833 	bl	8000d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008d32:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d34:	a907      	add	r1, sp, #28
 8008d36:	4812      	ldr	r0, [pc, #72]	; (8008d80 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008d38:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d3e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d40:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d42:	f7f8 f829 	bl	8000d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008d4a:	a907      	add	r1, sp, #28
 8008d4c:	480d      	ldr	r0, [pc, #52]	; (8008d84 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008d4e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d50:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d52:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d54:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d56:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008d58:	f7f8 f81e 	bl	8000d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008d5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d60:	a907      	add	r1, sp, #28
 8008d62:	4809      	ldr	r0, [pc, #36]	; (8008d88 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008d64:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d66:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d68:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d6a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d6c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d6e:	f7f8 f813 	bl	8000d98 <HAL_GPIO_Init>
}
 8008d72:	b00d      	add	sp, #52	; 0x34
 8008d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40028000 	.word	0x40028000
 8008d7c:	40020800 	.word	0x40020800
 8008d80:	40020000 	.word	0x40020000
 8008d84:	40020400 	.word	0x40020400
 8008d88:	40021800 	.word	0x40021800

08008d8c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8008d8c:	4b01      	ldr	r3, [pc, #4]	; (8008d94 <HAL_ETH_RxCpltCallback+0x8>)
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	f7f9 b8b0 	b.w	8001ef4 <osSemaphoreRelease>
 8008d94:	20003f0c 	.word	0x20003f0c

08008d98 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d98:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d9a:	4604      	mov	r4, r0
{
 8008d9c:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d9e:	b930      	cbnz	r0, 8008dae <ethernetif_init+0x16>
 8008da0:	4b47      	ldr	r3, [pc, #284]	; (8008ec0 <ethernetif_init+0x128>)
 8008da2:	4948      	ldr	r1, [pc, #288]	; (8008ec4 <ethernetif_init+0x12c>)
 8008da4:	4848      	ldr	r0, [pc, #288]	; (8008ec8 <ethernetif_init+0x130>)
 8008da6:	f240 222a 	movw	r2, #554	; 0x22a
 8008daa:	f000 fb98 	bl	80094de <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008dae:	2373      	movs	r3, #115	; 0x73
 8008db0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8008db4:	2374      	movs	r3, #116	; 0x74
 8008db6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008dba:	4b44      	ldr	r3, [pc, #272]	; (8008ecc <ethernetif_init+0x134>)
  heth.Instance = ETH;
 8008dbc:	4d44      	ldr	r5, [pc, #272]	; (8008ed0 <ethernetif_init+0x138>)
  netif->output = etharp_output;
 8008dbe:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 8008dc0:	2180      	movs	r1, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008dc2:	4b44      	ldr	r3, [pc, #272]	; (8008ed4 <ethernetif_init+0x13c>)
 8008dc4:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 8008dc6:	4a44      	ldr	r2, [pc, #272]	; (8008ed8 <ethernetif_init+0x140>)
  MACAddr[1] = 0x80;
 8008dc8:	f88d 1005 	strb.w	r1, [sp, #5]
  uint32_t regvalue = 0;
 8008dcc:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 8008dce:	21e1      	movs	r1, #225	; 0xe1
  uint32_t regvalue = 0;
 8008dd0:	9300      	str	r3, [sp, #0]
  heth.Instance = ETH;
 8008dd2:	602a      	str	r2, [r5, #0]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008dd4:	822b      	strh	r3, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008dd6:	2201      	movs	r2, #1
  MACAddr[0] = 0x00;
 8008dd8:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[2] = 0xE1;
 8008ddc:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x00;
 8008de0:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 8008de4:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 8008de8:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 8008dec:	a901      	add	r1, sp, #4
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008dee:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008df0:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008df2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008df6:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 8008df8:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8008dfa:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008dfc:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008dfe:	f7f7 fe93 	bl	8000b28 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8008e02:	b928      	cbnz	r0, 8008e10 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008e04:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8008e08:	f043 0304 	orr.w	r3, r3, #4
 8008e0c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008e10:	2304      	movs	r3, #4
 8008e12:	4a32      	ldr	r2, [pc, #200]	; (8008edc <ethernetif_init+0x144>)
 8008e14:	4932      	ldr	r1, [pc, #200]	; (8008ee0 <ethernetif_init+0x148>)
 8008e16:	482e      	ldr	r0, [pc, #184]	; (8008ed0 <ethernetif_init+0x138>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008e18:	4e32      	ldr	r6, [pc, #200]	; (8008ee4 <ethernetif_init+0x14c>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008e1a:	f7f7 fca7 	bl	800076c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008e1e:	2304      	movs	r3, #4
 8008e20:	4a31      	ldr	r2, [pc, #196]	; (8008ee8 <ethernetif_init+0x150>)
 8008e22:	4932      	ldr	r1, [pc, #200]	; (8008eec <ethernetif_init+0x154>)
 8008e24:	482a      	ldr	r0, [pc, #168]	; (8008ed0 <ethernetif_init+0x138>)
 8008e26:	f7f7 fcde 	bl	80007e6 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008e2a:	2306      	movs	r3, #6
 8008e2c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008e30:	696b      	ldr	r3, [r5, #20]
 8008e32:	781a      	ldrb	r2, [r3, #0]
 8008e34:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008e38:	785a      	ldrb	r2, [r3, #1]
 8008e3a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008e3e:	789a      	ldrb	r2, [r3, #2]
 8008e40:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008e44:	78da      	ldrb	r2, [r3, #3]
 8008e46:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008e4a:	791a      	ldrb	r2, [r3, #4]
 8008e4c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008e50:	795b      	ldrb	r3, [r3, #5]
 8008e52:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 8008e56:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8008e5a:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008e5c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8008e60:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 8008e64:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008e66:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	a803      	add	r0, sp, #12
  osSemaphoreDef(SEM);
 8008e6e:	9703      	str	r7, [sp, #12]
 8008e70:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008e72:	f7f8 fff3 	bl	8001e5c <osSemaphoreCreate>
 8008e76:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <ethernetif_init+0x158>)
 8008e78:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008e7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008e7c:	ad05      	add	r5, sp, #20
 8008e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008e84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008e88:	4621      	mov	r1, r4
 8008e8a:	a805      	add	r0, sp, #20
 8008e8c:	f7f8 ff88 	bl	8001da0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8008e90:	480f      	ldr	r0, [pc, #60]	; (8008ed0 <ethernetif_init+0x138>)
 8008e92:	f7f7 ff45 	bl	8000d20 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008e96:	466a      	mov	r2, sp
 8008e98:	211d      	movs	r1, #29
 8008e9a:	480d      	ldr	r0, [pc, #52]	; (8008ed0 <ethernetif_init+0x138>)
 8008e9c:	f7f7 fdd3 	bl	8000a46 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008ea0:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008ea2:	480b      	ldr	r0, [pc, #44]	; (8008ed0 <ethernetif_init+0x138>)
  regvalue |= (PHY_ISFR_INT4);
 8008ea4:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008ea8:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 8008eaa:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008eac:	f7f7 fe05 	bl	8000aba <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008eb0:	466a      	mov	r2, sp
 8008eb2:	211d      	movs	r1, #29
 8008eb4:	4806      	ldr	r0, [pc, #24]	; (8008ed0 <ethernetif_init+0x138>)
 8008eb6:	f7f7 fdc6 	bl	8000a46 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8008eba:	4638      	mov	r0, r7
 8008ebc:	b00d      	add	sp, #52	; 0x34
 8008ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec0:	0800ad14 	.word	0x0800ad14
 8008ec4:	080099d4 	.word	0x080099d4
 8008ec8:	08009880 	.word	0x08009880
 8008ecc:	0800406d 	.word	0x0800406d
 8008ed0:	20009160 	.word	0x20009160
 8008ed4:	08008ae5 	.word	0x08008ae5
 8008ed8:	40028000 	.word	0x40028000
 8008edc:	200091a8 	.word	0x200091a8
 8008ee0:	20007890 	.word	0x20007890
 8008ee4:	080097b8 	.word	0x080097b8
 8008ee8:	20007910 	.word	0x20007910
 8008eec:	200090e0 	.word	0x200090e0
 8008ef0:	20003f0c 	.word	0x20003f0c

08008ef4 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 8008ef4:	f7f7 bb2a 	b.w	800054c <HAL_GetTick>

08008ef8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008ef8:	b508      	push	{r3, lr}
    
                 
  /* init code for LWIP */
  MX_LWIP_Init();
 8008efa:	f000 f8ab 	bl	8009054 <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008efe:	2001      	movs	r0, #1
 8008f00:	f7f8 ff76 	bl	8001df0 <osDelay>
 8008f04:	e7fb      	b.n	8008efe <StartDefaultTask+0x6>
	...

08008f08 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008f08:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <vApplicationGetIdleTaskMemory+0x10>)
 8008f0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008f0c:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <vApplicationGetIdleTaskMemory+0x14>)
 8008f0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20004110 	.word	0x20004110
 8008f1c:	20003f10 	.word	0x20003f10

08008f20 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8008f20:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008f22:	4d08      	ldr	r5, [pc, #32]	; (8008f44 <MX_FREERTOS_Init+0x24>)
 8008f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8008f26:	b089      	sub	sp, #36	; 0x24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008f28:	ac01      	add	r4, sp, #4
 8008f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008f34:	2100      	movs	r1, #0
 8008f36:	a801      	add	r0, sp, #4
 8008f38:	f7f8 ff32 	bl	8001da0 <osThreadCreate>
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <MX_FREERTOS_Init+0x28>)
 8008f3e:	6018      	str	r0, [r3, #0]
}
 8008f40:	b009      	add	sp, #36	; 0x24
 8008f42:	bd30      	pop	{r4, r5, pc}
 8008f44:	080097d4 	.word	0x080097d4
 8008f48:	2000a978 	.word	0x2000a978

08008f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f50:	2214      	movs	r2, #20
 8008f52:	2100      	movs	r1, #0
 8008f54:	a807      	add	r0, sp, #28
 8008f56:	f000 fc1b 	bl	8009790 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	4b38      	ldr	r3, [pc, #224]	; (8009040 <MX_GPIO_Init+0xf4>)
 8008f5e:	9401      	str	r4, [sp, #4]
 8008f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008f62:	4f38      	ldr	r7, [pc, #224]	; (8009044 <MX_GPIO_Init+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008f64:	4d38      	ldr	r5, [pc, #224]	; (8009048 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f66:	f042 0204 	orr.w	r2, r2, #4
 8008f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6e:	f002 0204 	and.w	r2, r2, #4
 8008f72:	9201      	str	r2, [sp, #4]
 8008f74:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f76:	9402      	str	r4, [sp, #8]
 8008f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f82:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008f86:	9202      	str	r2, [sp, #8]
 8008f88:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f8a:	9403      	str	r4, [sp, #12]
 8008f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f8e:	f042 0201 	orr.w	r2, r2, #1
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
 8008f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f96:	f002 0201 	and.w	r2, r2, #1
 8008f9a:	9203      	str	r2, [sp, #12]
 8008f9c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f9e:	9404      	str	r4, [sp, #16]
 8008fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fa2:	f042 0202 	orr.w	r2, r2, #2
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008faa:	f002 0202 	and.w	r2, r2, #2
 8008fae:	9204      	str	r2, [sp, #16]
 8008fb0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008fb2:	9405      	str	r4, [sp, #20]
 8008fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb6:	f042 0208 	orr.w	r2, r2, #8
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30
 8008fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fbe:	f002 0208 	and.w	r2, r2, #8
 8008fc2:	9205      	str	r2, [sp, #20]
 8008fc4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008fc6:	9406      	str	r4, [sp, #24]
 8008fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fce:	631a      	str	r2, [r3, #48]	; 0x30
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008fe0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008fe2:	f7f7 ffc5 	bl	8000f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	2140      	movs	r1, #64	; 0x40
 8008fec:	f7f7 ffc0 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8008ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ff4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8008ff6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ff8:	4b14      	ldr	r3, [pc, #80]	; (800904c <MX_GPIO_Init+0x100>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8008ffa:	4815      	ldr	r0, [pc, #84]	; (8009050 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ffc:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ffe:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009000:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009002:	f7f7 fec9 	bl	8000d98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8009006:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800900a:	a907      	add	r1, sp, #28
 800900c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800900e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009010:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009012:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009014:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009016:	f7f7 febf 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800901a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800901c:	a907      	add	r1, sp, #28
 800901e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8009020:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009022:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009024:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009026:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009028:	f7f7 feb6 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800902c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800902e:	a907      	add	r1, sp, #28
 8009030:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8009032:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009034:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009036:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009038:	f7f7 feae 	bl	8000d98 <HAL_GPIO_Init>

}
 800903c:	b00d      	add	sp, #52	; 0x34
 800903e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009040:	40023800 	.word	0x40023800
 8009044:	40020400 	.word	0x40020400
 8009048:	40021800 	.word	0x40021800
 800904c:	10110000 	.word	0x10110000
 8009050:	40020800 	.word	0x40020800

08009054 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8009056:	4f2e      	ldr	r7, [pc, #184]	; (8009110 <MX_LWIP_Init+0xbc>)
  IP_ADDRESS[3] = 101;
  NETMASK_ADDRESS[0] = 255;
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 0;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 0;
 8009058:	4d2e      	ldr	r5, [pc, #184]	; (8009114 <MX_LWIP_Init+0xc0>)
  NETMASK_ADDRESS[0] = 255;
 800905a:	4e2f      	ldr	r6, [pc, #188]	; (8009118 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 10;
 800905c:	230a      	movs	r3, #10
 800905e:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 1;
 8009060:	2301      	movs	r3, #1
 8009062:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 105;
 8009064:	2369      	movs	r3, #105	; 0x69
  NETMASK_ADDRESS[2] = 0;
 8009066:	2400      	movs	r4, #0
  IP_ADDRESS[2] = 105;
 8009068:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 101;
 800906a:	2365      	movs	r3, #101	; 0x65
{
 800906c:	b085      	sub	sp, #20
  IP_ADDRESS[3] = 101;
 800906e:	70fb      	strb	r3, [r7, #3]
  GATEWAY_ADDRESS[1] = 0;
  GATEWAY_ADDRESS[2] = 0;
  GATEWAY_ADDRESS[3] = 0;
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009070:	4621      	mov	r1, r4
  NETMASK_ADDRESS[0] = 255;
 8009072:	23ff      	movs	r3, #255	; 0xff
  tcpip_init( NULL, NULL );
 8009074:	4620      	mov	r0, r4
  NETMASK_ADDRESS[0] = 255;
 8009076:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 8009078:	7073      	strb	r3, [r6, #1]
  GATEWAY_ADDRESS[0] = 0;
 800907a:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 800907c:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 800907e:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009080:	70ec      	strb	r4, [r5, #3]
  NETMASK_ADDRESS[2] = 0;
 8009082:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8009084:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 8009086:	f7fa fcab 	bl	80039e0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800908a:	787b      	ldrb	r3, [r7, #1]
 800908c:	783a      	ldrb	r2, [r7, #0]
 800908e:	4923      	ldr	r1, [pc, #140]	; (800911c <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009090:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009092:	041b      	lsls	r3, r3, #16
 8009094:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	4313      	orrs	r3, r2
 800909c:	78ba      	ldrb	r2, [r7, #2]
 800909e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090a2:	ba1b      	rev	r3, r3
 80090a4:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80090a6:	7873      	ldrb	r3, [r6, #1]
 80090a8:	7832      	ldrb	r2, [r6, #0]
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090b0:	78f2      	ldrb	r2, [r6, #3]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	78b2      	ldrb	r2, [r6, #2]
 80090b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090ba:	4a19      	ldr	r2, [pc, #100]	; (8009120 <MX_LWIP_Init+0xcc>)
 80090bc:	ba1b      	rev	r3, r3
 80090be:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80090c0:	782b      	ldrb	r3, [r5, #0]
 80090c2:	0400      	lsls	r0, r0, #16
 80090c4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80090c8:	78eb      	ldrb	r3, [r5, #3]
 80090ca:	4318      	orrs	r0, r3
 80090cc:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80090ce:	4d15      	ldr	r5, [pc, #84]	; (8009124 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80090d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80090d4:	4b14      	ldr	r3, [pc, #80]	; (8009128 <MX_LWIP_Init+0xd4>)
 80090d6:	ba00      	rev	r0, r0
 80090d8:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80090da:	4814      	ldr	r0, [pc, #80]	; (800912c <MX_LWIP_Init+0xd8>)
 80090dc:	9002      	str	r0, [sp, #8]
 80090de:	4814      	ldr	r0, [pc, #80]	; (8009130 <MX_LWIP_Init+0xdc>)
 80090e0:	9001      	str	r0, [sp, #4]
 80090e2:	9400      	str	r4, [sp, #0]
 80090e4:	4628      	mov	r0, r5
 80090e6:	f7fc f95d 	bl	80053a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7fc f998 	bl	8005420 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80090f0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80090f4:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80090f6:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80090f8:	d504      	bpl.n	8009104 <MX_LWIP_Init+0xb0>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80090fa:	b005      	add	sp, #20
 80090fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8009100:	f7fc b994 	b.w	800542c <netif_set_up>
}
 8009104:	b005      	add	sp, #20
 8009106:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800910a:	f7fc b99e 	b.w	800544a <netif_set_down>
 800910e:	bf00      	nop
 8009110:	2000a9b8 	.word	0x2000a9b8
 8009114:	2000a97c 	.word	0x2000a97c
 8009118:	2000a9b4 	.word	0x2000a9b4
 800911c:	2000a9b0 	.word	0x2000a9b0
 8009120:	2000a9bc 	.word	0x2000a9bc
 8009124:	2000a980 	.word	0x2000a980
 8009128:	2000a9c0 	.word	0x2000a9c0
 800912c:	08003965 	.word	0x08003965
 8009130:	08008d99 	.word	0x08008d99

08009134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009134:	b530      	push	{r4, r5, lr}
 8009136:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009138:	2230      	movs	r2, #48	; 0x30
 800913a:	2100      	movs	r1, #0
 800913c:	a808      	add	r0, sp, #32
 800913e:	f000 fb27 	bl	8009790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009142:	2100      	movs	r1, #0
 8009144:	2214      	movs	r2, #20
 8009146:	a803      	add	r0, sp, #12
 8009148:	f000 fb22 	bl	8009790 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800914c:	2400      	movs	r4, #0
 800914e:	4b1d      	ldr	r3, [pc, #116]	; (80091c4 <SystemClock_Config+0x90>)
 8009150:	9401      	str	r4, [sp, #4]
 8009152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009154:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009158:	641a      	str	r2, [r3, #64]	; 0x40
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009164:	4b18      	ldr	r3, [pc, #96]	; (80091c8 <SystemClock_Config+0x94>)
 8009166:	9402      	str	r4, [sp, #8]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800917a:	2301      	movs	r3, #1
 800917c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800917e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009182:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009184:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009188:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800918a:	2304      	movs	r3, #4
 800918c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800918e:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009190:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009192:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009194:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009196:	2307      	movs	r3, #7
 8009198:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800919a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800919c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800919e:	f7f7 ff73 	bl	8001088 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091a2:	230f      	movs	r3, #15
 80091a4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80091a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80091aa:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80091ac:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80091ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80091b2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091b4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091b6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80091b8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80091ba:	f7f8 f915 	bl	80013e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80091be:	b015      	add	sp, #84	; 0x54
 80091c0:	bd30      	pop	{r4, r5, pc}
 80091c2:	bf00      	nop
 80091c4:	40023800 	.word	0x40023800
 80091c8:	40007000 	.word	0x40007000

080091cc <main>:
{
 80091cc:	b508      	push	{r3, lr}
  HAL_Init();
 80091ce:	f7f7 f997 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 80091d2:	f7ff ffaf 	bl	8009134 <SystemClock_Config>
  MX_GPIO_Init();
 80091d6:	f7ff feb9 	bl	8008f4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80091da:	f000 f9bf 	bl	800955c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80091de:	f000 fa11 	bl	8009604 <MX_USB_OTG_FS_PCD_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80091e2:	2200      	movs	r2, #0
 80091e4:	2105      	movs	r1, #5
 80091e6:	203d      	movs	r0, #61	; 0x3d
 80091e8:	f7f7 f9dc 	bl	80005a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80091ec:	203d      	movs	r0, #61	; 0x3d
 80091ee:	f7f7 fa0d 	bl	800060c <HAL_NVIC_EnableIRQ>
  MX_FREERTOS_Init(); 
 80091f2:	f7ff fe95 	bl	8008f20 <MX_FREERTOS_Init>
  osKernelStart();
 80091f6:	f7f8 fdc7 	bl	8001d88 <osKernelStart>
 80091fa:	e7fe      	b.n	80091fa <main+0x2e>

080091fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80091fc:	6802      	ldr	r2, [r0, #0]
 80091fe:	4b03      	ldr	r3, [pc, #12]	; (800920c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8009200:	429a      	cmp	r2, r3
 8009202:	d101      	bne.n	8009208 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8009204:	f7f7 b996 	b.w	8000534 <HAL_IncTick>
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40010000 	.word	0x40010000

08009210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009210:	4770      	bx	lr

08009212 <malloc>:
/* Defining malloc/free should overwrite the standard versions
provided by the compiler. */
void *malloc (size_t size)
{
/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc( size );
 8009212:	f7f9 b927 	b.w	8002464 <pvPortMalloc>

08009216 <free>:
/* Call the FreeRTOS version of calloc. */
	void * p= pvPortMalloc( size );
	return memset(p,0,size);
}
void free (void *ptr) { /* Call the FreeRTOS version of free.*/
	vPortFree( ptr );
 8009216:	f7f9 b9b3 	b.w	8002580 <vPortFree>
	...

0800921c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800921c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <HAL_MspInit+0x40>)
 8009220:	2200      	movs	r2, #0
 8009222:	9200      	str	r2, [sp, #0]
 8009224:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009226:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800922a:	6459      	str	r1, [r3, #68]	; 0x44
 800922c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800922e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8009232:	9100      	str	r1, [sp, #0]
 8009234:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009236:	9201      	str	r2, [sp, #4]
 8009238:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800923a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800923e:	6419      	str	r1, [r3, #64]	; 0x40
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009246:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009248:	210f      	movs	r1, #15
 800924a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800924e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009250:	f7f7 f9a8 	bl	80005a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009254:	b003      	add	sp, #12
 8009256:	f85d fb04 	ldr.w	pc, [sp], #4
 800925a:	bf00      	nop
 800925c:	40023800 	.word	0x40023800

08009260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009260:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8009262:	4601      	mov	r1, r0
{
 8009264:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8009266:	2200      	movs	r2, #0
 8009268:	2019      	movs	r0, #25
 800926a:	f7f7 f99b 	bl	80005a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800926e:	2019      	movs	r0, #25
 8009270:	f7f7 f9cc 	bl	800060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009274:	2500      	movs	r5, #0
 8009276:	4b15      	ldr	r3, [pc, #84]	; (80092cc <HAL_InitTick+0x6c>)
 8009278:	9502      	str	r5, [sp, #8]
 800927a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800927c:	4c14      	ldr	r4, [pc, #80]	; (80092d0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800927e:	f042 0201 	orr.w	r2, r2, #1
 8009282:	645a      	str	r2, [r3, #68]	; 0x44
 8009284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800928c:	a901      	add	r1, sp, #4
 800928e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009290:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009292:	f7f8 f969 	bl	8001568 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009296:	f7f8 f957 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800929a:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <HAL_InitTick+0x74>)
 800929c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800929e:	f240 33e7 	movw	r3, #999	; 0x3e7
 80092a2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80092a4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <HAL_InitTick+0x78>)
 80092a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80092ac:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80092ae:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80092b0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80092b2:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092b4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80092b6:	f7f8 fa93 	bl	80017e0 <HAL_TIM_Base_Init>
 80092ba:	b920      	cbnz	r0, 80092c6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80092bc:	4620      	mov	r0, r4
 80092be:	f7f8 f972 	bl	80015a6 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80092c2:	b009      	add	sp, #36	; 0x24
 80092c4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80092c6:	2001      	movs	r0, #1
 80092c8:	e7fb      	b.n	80092c2 <HAL_InitTick+0x62>
 80092ca:	bf00      	nop
 80092cc:	40023800 	.word	0x40023800
 80092d0:	2000a9c4 	.word	0x2000a9c4
 80092d4:	40010000 	.word	0x40010000
 80092d8:	000f4240 	.word	0x000f4240

080092dc <NMI_Handler>:
 80092dc:	4770      	bx	lr

080092de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092de:	e7fe      	b.n	80092de <HardFault_Handler>

080092e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092e0:	e7fe      	b.n	80092e0 <MemManage_Handler>

080092e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092e2:	e7fe      	b.n	80092e2 <BusFault_Handler>

080092e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092e4:	e7fe      	b.n	80092e4 <UsageFault_Handler>

080092e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80092e6:	4770      	bx	lr

080092e8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80092e8:	4801      	ldr	r0, [pc, #4]	; (80092f0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80092ea:	f7f8 b970 	b.w	80015ce <HAL_TIM_IRQHandler>
 80092ee:	bf00      	nop
 80092f0:	2000a9c4 	.word	0x2000a9c4

080092f4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80092f4:	4801      	ldr	r0, [pc, #4]	; (80092fc <ETH_IRQHandler+0x8>)
 80092f6:	f7f7 bb6e 	b.w	80009d6 <HAL_ETH_IRQHandler>
 80092fa:	bf00      	nop
 80092fc:	20009160 	.word	0x20009160

08009300 <_write>:
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
// the new function for SWV output

{
 8009300:	b510      	push	{r4, lr}
	int i=0;
	for(i=0; i<len; i++)
 8009302:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009304:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8009308:	4293      	cmp	r3, r2
 800930a:	db01      	blt.n	8009310 <_write+0x10>
	ITM_SendChar((*ptr++)); // out char to serial
	return len;
}
 800930c:	4610      	mov	r0, r2
 800930e:	bd10      	pop	{r4, pc}
 8009310:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8009314:	07c0      	lsls	r0, r0, #31
 8009316:	d503      	bpl.n	8009320 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8009318:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800931c:	07c0      	lsls	r0, r0, #31
 800931e:	d402      	bmi.n	8009326 <_write+0x26>
	for(i=0; i<len; i++)
 8009320:	3301      	adds	r3, #1
 8009322:	e7f1      	b.n	8009308 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8009324:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	2800      	cmp	r0, #0
 800932a:	d0fb      	beq.n	8009324 <_write+0x24>
	ITM_SendChar((*ptr++)); // out char to serial
 800932c:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800932e:	7020      	strb	r0, [r4, #0]
 8009330:	e7f6      	b.n	8009320 <_write+0x20>
	...

08009334 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009334:	490f      	ldr	r1, [pc, #60]	; (8009374 <SystemInit+0x40>)
 8009336:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800933a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800933e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <SystemInit+0x44>)
 8009344:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009346:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8009348:	f042 0201 	orr.w	r2, r2, #1
 800934c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800934e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009356:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800935a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800935c:	4a07      	ldr	r2, [pc, #28]	; (800937c <SystemInit+0x48>)
 800935e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009366:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009368:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800936a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800936e:	608b      	str	r3, [r1, #8]
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	e000ed00 	.word	0xe000ed00
 8009378:	40023800 	.word	0x40023800
 800937c:	24003010 	.word	0x24003010

08009380 <ts_itoa>:
 **---------------------------------------------------------------------------
 **  Abstract: Convert integer to ascii
 **  Returns:  void
 **---------------------------------------------------------------------------
 */
void ts_itoa(char **buf, unsigned int d, int base) {
 8009380:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 8009382:	2301      	movs	r3, #1
	while (d / div >= base)
 8009384:	fbb1 f4f3 	udiv	r4, r1, r3
 8009388:	4294      	cmp	r4, r2
 800938a:	d201      	bcs.n	8009390 <ts_itoa+0x10>
		div *= base;

	while (div != 0) {
 800938c:	b913      	cbnz	r3, 8009394 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num - 10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800938e:	bd70      	pop	{r4, r5, r6, pc}
		div *= base;
 8009390:	4353      	muls	r3, r2
 8009392:	e7f7      	b.n	8009384 <ts_itoa+0x4>
 8009394:	6805      	ldr	r5, [r0, #0]
		int num = d / div;
 8009396:	fbb1 f4f3 	udiv	r4, r1, r3
		if (num > 9)
 800939a:	2c09      	cmp	r4, #9
		d = d % div;
 800939c:	fb03 1114 	mls	r1, r3, r4, r1
			*((*buf)++) = (num - 10) + 'A';
 80093a0:	f105 0601 	add.w	r6, r5, #1
 80093a4:	bfcc      	ite	gt
 80093a6:	3437      	addgt	r4, #55	; 0x37
			*((*buf)++) = num + '0';
 80093a8:	3430      	addle	r4, #48	; 0x30
			*((*buf)++) = (num - 10) + 'A';
 80093aa:	6006      	str	r6, [r0, #0]
		div /= base;
 80093ac:	fb93 f3f2 	sdiv	r3, r3, r2
			*((*buf)++) = num + '0';
 80093b0:	702c      	strb	r4, [r5, #0]
 80093b2:	e7eb      	b.n	800938c <ts_itoa+0xc>

080093b4 <ts_formatstring>:
 **---------------------------------------------------------------------------
 **  Abstract: Writes arguments va to buffer buf according to format fmt
 **  Returns:  Length of string
 **---------------------------------------------------------------------------
 */
int ts_formatstring(char *buf, const char *fmt, va_list va) {
 80093b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80093b8:	ad02      	add	r5, sp, #8
 80093ba:	460c      	mov	r4, r1
 80093bc:	f845 0d04 	str.w	r0, [r5, #-4]!
 80093c0:	4613      	mov	r3, r2
	char *start_buf = buf;
 80093c2:	4606      	mov	r6, r0
			case 'd':
			case 'i': {
				signed int val = va_arg(va, signed int);
				if (val < 0) {
					val *= -1;
					*buf++ = '-';
 80093c4:	272d      	movs	r7, #45	; 0x2d
	while (*fmt) {
 80093c6:	7822      	ldrb	r2, [r4, #0]
 80093c8:	b932      	cbnz	r2, 80093d8 <ts_formatstring+0x24>
		/* Else just copy */
		else {
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	701a      	strb	r2, [r3, #0]

	return (int) (buf - start_buf);
}
 80093ce:	9801      	ldr	r0, [sp, #4]
 80093d0:	1b80      	subs	r0, r0, r6
 80093d2:	b002      	add	sp, #8
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*fmt == '%') {
 80093d8:	2a25      	cmp	r2, #37	; 0x25
 80093da:	d146      	bne.n	800946a <ts_formatstring+0xb6>
			switch (*(++fmt)) {
 80093dc:	7862      	ldrb	r2, [r4, #1]
 80093de:	2a64      	cmp	r2, #100	; 0x64
 80093e0:	d021      	beq.n	8009426 <ts_formatstring+0x72>
 80093e2:	d80a      	bhi.n	80093fa <ts_formatstring+0x46>
 80093e4:	2a58      	cmp	r2, #88	; 0x58
 80093e6:	d013      	beq.n	8009410 <ts_formatstring+0x5c>
 80093e8:	2a63      	cmp	r2, #99	; 0x63
 80093ea:	d015      	beq.n	8009418 <ts_formatstring+0x64>
 80093ec:	2a25      	cmp	r2, #37	; 0x25
 80093ee:	d109      	bne.n	8009404 <ts_formatstring+0x50>
				*buf++ = '%';
 80093f0:	9901      	ldr	r1, [sp, #4]
 80093f2:	1c48      	adds	r0, r1, #1
 80093f4:	9001      	str	r0, [sp, #4]
 80093f6:	700a      	strb	r2, [r1, #0]
				break;
 80093f8:	e004      	b.n	8009404 <ts_formatstring+0x50>
			switch (*(++fmt)) {
 80093fa:	2a73      	cmp	r2, #115	; 0x73
 80093fc:	d023      	beq.n	8009446 <ts_formatstring+0x92>
 80093fe:	d803      	bhi.n	8009408 <ts_formatstring+0x54>
 8009400:	2a69      	cmp	r2, #105	; 0x69
 8009402:	d010      	beq.n	8009426 <ts_formatstring+0x72>
			fmt++;
 8009404:	3402      	adds	r4, #2
 8009406:	e7de      	b.n	80093c6 <ts_formatstring+0x12>
			switch (*(++fmt)) {
 8009408:	2a75      	cmp	r2, #117	; 0x75
 800940a:	d029      	beq.n	8009460 <ts_formatstring+0xac>
 800940c:	2a78      	cmp	r2, #120	; 0x78
 800940e:	d1f9      	bne.n	8009404 <ts_formatstring+0x50>
				ts_itoa(&buf, va_arg(va, int), 16);
 8009410:	f103 0804 	add.w	r8, r3, #4
 8009414:	2210      	movs	r2, #16
 8009416:	e026      	b.n	8009466 <ts_formatstring+0xb2>
				*buf++ = va_arg(va, int);
 8009418:	9a01      	ldr	r2, [sp, #4]
 800941a:	1c51      	adds	r1, r2, #1
 800941c:	9101      	str	r1, [sp, #4]
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	7011      	strb	r1, [r2, #0]
 8009422:	3304      	adds	r3, #4
				break;
 8009424:	e7ee      	b.n	8009404 <ts_formatstring+0x50>
				signed int val = va_arg(va, signed int);
 8009426:	6819      	ldr	r1, [r3, #0]
				if (val < 0) {
 8009428:	2900      	cmp	r1, #0
				signed int val = va_arg(va, signed int);
 800942a:	f103 0804 	add.w	r8, r3, #4
				if (val < 0) {
 800942e:	da04      	bge.n	800943a <ts_formatstring+0x86>
					*buf++ = '-';
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	9201      	str	r2, [sp, #4]
					val *= -1;
 8009436:	4249      	negs	r1, r1
					*buf++ = '-';
 8009438:	701f      	strb	r7, [r3, #0]
				ts_itoa(&buf, val, 10);
 800943a:	220a      	movs	r2, #10
				ts_itoa(&buf, va_arg(va, int), 16);
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff ff9f 	bl	8009380 <ts_itoa>
 8009442:	4643      	mov	r3, r8
				break;
 8009444:	e7de      	b.n	8009404 <ts_formatstring+0x50>
				char * arg = va_arg(va, char *);
 8009446:	1d19      	adds	r1, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
				while (*arg) {
 800944a:	781a      	ldrb	r2, [r3, #0]
 800944c:	b90a      	cbnz	r2, 8009452 <ts_formatstring+0x9e>
				char * arg = va_arg(va, char *);
 800944e:	460b      	mov	r3, r1
 8009450:	e7d8      	b.n	8009404 <ts_formatstring+0x50>
					*buf++ = *arg++;
 8009452:	9a01      	ldr	r2, [sp, #4]
 8009454:	1c50      	adds	r0, r2, #1
 8009456:	9001      	str	r0, [sp, #4]
 8009458:	f813 0b01 	ldrb.w	r0, [r3], #1
 800945c:	7010      	strb	r0, [r2, #0]
 800945e:	e7f4      	b.n	800944a <ts_formatstring+0x96>
				ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8009460:	f103 0804 	add.w	r8, r3, #4
 8009464:	220a      	movs	r2, #10
				ts_itoa(&buf, va_arg(va, int), 16);
 8009466:	6819      	ldr	r1, [r3, #0]
 8009468:	e7e8      	b.n	800943c <ts_formatstring+0x88>
			*buf++ = *fmt++;
 800946a:	9901      	ldr	r1, [sp, #4]
 800946c:	1c48      	adds	r0, r1, #1
 800946e:	9001      	str	r0, [sp, #4]
 8009470:	3401      	adds	r4, #1
 8009472:	700a      	strb	r2, [r1, #0]
 8009474:	e7a7      	b.n	80093c6 <ts_formatstring+0x12>

08009476 <ts_formatlength>:
 **  Abstract: Calculate maximum length of the resulting string from the
 **            format string and va_list va
 **  Returns:  Maximum length
 **---------------------------------------------------------------------------
 */
int ts_formatlength(const char *fmt, va_list va) {
 8009476:	b530      	push	{r4, r5, lr}
 8009478:	4602      	mov	r2, r0
	int length = 0;
 800947a:	2000      	movs	r0, #0
	while (*fmt) {
 800947c:	7813      	ldrb	r3, [r2, #0]
 800947e:	b903      	cbnz	r3, 8009482 <ts_formatlength+0xc>
			++length;
		}
		++fmt;
	}
	return length;
}
 8009480:	bd30      	pop	{r4, r5, pc}
		if (*fmt == '%') {
 8009482:	2b25      	cmp	r3, #37	; 0x25
 8009484:	d128      	bne.n	80094d8 <ts_formatlength+0x62>
			switch (*fmt) {
 8009486:	7853      	ldrb	r3, [r2, #1]
 8009488:	2b69      	cmp	r3, #105	; 0x69
			++fmt;
 800948a:	f102 0401 	add.w	r4, r2, #1
			switch (*fmt) {
 800948e:	d013      	beq.n	80094b8 <ts_formatlength+0x42>
 8009490:	d808      	bhi.n	80094a4 <ts_formatlength+0x2e>
 8009492:	2b63      	cmp	r3, #99	; 0x63
 8009494:	d00e      	beq.n	80094b4 <ts_formatlength+0x3e>
 8009496:	2b64      	cmp	r3, #100	; 0x64
 8009498:	d00e      	beq.n	80094b8 <ts_formatlength+0x42>
 800949a:	2b58      	cmp	r3, #88	; 0x58
 800949c:	d108      	bne.n	80094b0 <ts_formatlength+0x3a>
				length += 8;
 800949e:	f100 0308 	add.w	r3, r0, #8
 80094a2:	e00b      	b.n	80094bc <ts_formatlength+0x46>
			switch (*fmt) {
 80094a4:	2b75      	cmp	r3, #117	; 0x75
 80094a6:	d007      	beq.n	80094b8 <ts_formatlength+0x42>
 80094a8:	2b78      	cmp	r3, #120	; 0x78
 80094aa:	d0f8      	beq.n	800949e <ts_formatlength+0x28>
 80094ac:	2b73      	cmp	r3, #115	; 0x73
 80094ae:	d007      	beq.n	80094c0 <ts_formatlength+0x4a>
				++length;
 80094b0:	1c43      	adds	r3, r0, #1
				break;
 80094b2:	e00e      	b.n	80094d2 <ts_formatlength+0x5c>
				va_arg(va, int);
 80094b4:	3104      	adds	r1, #4
 80094b6:	e7fb      	b.n	80094b0 <ts_formatlength+0x3a>
				length += 11;
 80094b8:	f100 030b 	add.w	r3, r0, #11
				va_arg(va, unsigned int);
 80094bc:	3104      	adds	r1, #4
 80094be:	e008      	b.n	80094d2 <ts_formatlength+0x5c>
				char * str = va_arg(va, char *);
 80094c0:	680a      	ldr	r2, [r1, #0]
 80094c2:	1d0d      	adds	r5, r1, #4
 80094c4:	1a80      	subs	r0, r0, r2
 80094c6:	1813      	adds	r3, r2, r0
				while (*str++)
 80094c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80094cc:	2900      	cmp	r1, #0
 80094ce:	d1fa      	bne.n	80094c6 <ts_formatlength+0x50>
				char * str = va_arg(va, char *);
 80094d0:	4629      	mov	r1, r5
		++fmt;
 80094d2:	1c62      	adds	r2, r4, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	e7d1      	b.n	800947c <ts_formatlength+0x6>
			++length;
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	4614      	mov	r4, r2
 80094dc:	e7f9      	b.n	80094d2 <ts_formatlength+0x5c>

080094de <iprintf>:
 **            standard output according to the format parameter.
 **  Returns:  Number of bytes written
 **
 **===========================================================================
 */
int iprintf(const char *fmt, ...) {
 80094de:	b40f      	push	{r0, r1, r2, r3}
 80094e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	f107 0520 	add.w	r5, r7, #32
 80094ec:	f855 6b04 	ldr.w	r6, [r5], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 80094f0:	607d      	str	r5, [r7, #4]
	length = ts_formatlength(fmt, va);
 80094f2:	4629      	mov	r1, r5
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff ffbe 	bl	8009476 <ts_formatlength>
	va_end(va);
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 80094fa:	2831      	cmp	r0, #49	; 0x31
	length = ts_formatlength(fmt, va);
 80094fc:	4604      	mov	r4, r0
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 80094fe:	dc19      	bgt.n	8009534 <iprintf+0x56>

		char buf[length];
 8009500:	3407      	adds	r4, #7
 8009502:	f024 0407 	bic.w	r4, r4, #7
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 8009506:	46e8      	mov	r8, sp
		char buf[length];
 8009508:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 800950c:	462a      	mov	r2, r5
 800950e:	4631      	mov	r1, r6
 8009510:	4668      	mov	r0, sp
		va_start(va, fmt);
 8009512:	607d      	str	r5, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8009514:	f7ff ff4e 	bl	80093b4 <ts_formatstring>
		length = _write(1, buf, length);
 8009518:	4669      	mov	r1, sp
 800951a:	4602      	mov	r2, r0
 800951c:	2001      	movs	r0, #1
 800951e:	f7ff feef 	bl	8009300 <_write>
 8009522:	4604      	mov	r4, r0
 8009524:	46c5      	mov	sp, r8
			va_end(va);
			free(buf);
		}
	}
	return length;
}
 8009526:	4620      	mov	r0, r4
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009530:	b004      	add	sp, #16
 8009532:	4770      	bx	lr
		char * buf = malloc(length * sizeof(char));
 8009534:	f7ff fe6d 	bl	8009212 <malloc>
		if (buf) {
 8009538:	4680      	mov	r8, r0
 800953a:	2800      	cmp	r0, #0
 800953c:	d0f3      	beq.n	8009526 <iprintf+0x48>
			length = ts_formatstring(buf, fmt, va);
 800953e:	462a      	mov	r2, r5
 8009540:	4631      	mov	r1, r6
			va_start(va, fmt);
 8009542:	607d      	str	r5, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 8009544:	f7ff ff36 	bl	80093b4 <ts_formatstring>
			length = _write(1, buf, length);
 8009548:	4641      	mov	r1, r8
 800954a:	4602      	mov	r2, r0
 800954c:	2001      	movs	r0, #1
 800954e:	f7ff fed7 	bl	8009300 <_write>
 8009552:	4604      	mov	r4, r0
			free(buf);
 8009554:	4640      	mov	r0, r8
 8009556:	f7ff fe5e 	bl	8009216 <free>
	return length;
 800955a:	e7e4      	b.n	8009526 <iprintf+0x48>

0800955c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800955c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800955e:	480b      	ldr	r0, [pc, #44]	; (800958c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <MX_USART3_UART_Init+0x34>)
 8009562:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8009566:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800956a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800956c:	2300      	movs	r3, #0
 800956e:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009570:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009572:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009574:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009576:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009578:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800957a:	f7f8 fa67 	bl	8001a4c <HAL_UART_Init>
 800957e:	b118      	cbz	r0, 8009588 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8009580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009584:	f7ff be44 	b.w	8009210 <Error_Handler>
 8009588:	bd08      	pop	{r3, pc}
 800958a:	bf00      	nop
 800958c:	2000aa04 	.word	0x2000aa04
 8009590:	40004800 	.word	0x40004800

08009594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009594:	b510      	push	{r4, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800959a:	2214      	movs	r2, #20
 800959c:	2100      	movs	r1, #0
 800959e:	a803      	add	r0, sp, #12
 80095a0:	f000 f8f6 	bl	8009790 <memset>
  if(uartHandle->Instance==USART3)
 80095a4:	6822      	ldr	r2, [r4, #0]
 80095a6:	4b15      	ldr	r3, [pc, #84]	; (80095fc <HAL_UART_MspInit+0x68>)
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d125      	bne.n	80095f8 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80095ac:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80095b0:	2100      	movs	r1, #0
 80095b2:	9101      	str	r1, [sp, #4]
 80095b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80095b6:	4812      	ldr	r0, [pc, #72]	; (8009600 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80095b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80095bc:	641a      	str	r2, [r3, #64]	; 0x40
 80095be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095c0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80095c4:	9201      	str	r2, [sp, #4]
 80095c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80095c8:	9102      	str	r1, [sp, #8]
 80095ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095cc:	f042 0208 	orr.w	r2, r2, #8
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	f003 0308 	and.w	r3, r3, #8
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80095dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80095e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095e2:	2302      	movs	r3, #2
 80095e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80095e6:	2301      	movs	r3, #1
 80095e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095ea:	2303      	movs	r3, #3
 80095ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80095ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80095f0:	2307      	movs	r3, #7
 80095f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80095f4:	f7f7 fbd0 	bl	8000d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80095f8:	b008      	add	sp, #32
 80095fa:	bd10      	pop	{r4, pc}
 80095fc:	40004800 	.word	0x40004800
 8009600:	40020c00 	.word	0x40020c00

08009604 <MX_USB_OTG_FS_PCD_Init>:
/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009604:	480c      	ldr	r0, [pc, #48]	; (8009638 <MX_USB_OTG_FS_PCD_Init+0x34>)
{
 8009606:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800960c:	2304      	movs	r3, #4
 800960e:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009612:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009614:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009616:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009618:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800961a:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800961c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800961e:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009620:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009622:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009624:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009626:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009628:	f7f7 fca7 	bl	8000f7a <HAL_PCD_Init>
 800962c:	b118      	cbz	r0, 8009636 <MX_USB_OTG_FS_PCD_Init+0x32>
  {
    Error_Handler();
  }

}
 800962e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009632:	f7ff bded 	b.w	8009210 <Error_Handler>
 8009636:	bd08      	pop	{r3, pc}
 8009638:	2000aa44 	.word	0x2000aa44

0800963c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800963c:	b530      	push	{r4, r5, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009642:	2214      	movs	r2, #20
 8009644:	2100      	movs	r1, #0
 8009646:	a803      	add	r0, sp, #12
 8009648:	f000 f8a2 	bl	8009790 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009652:	d12f      	bne.n	80096b4 <HAL_PCD_MspInit+0x78>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009654:	4c18      	ldr	r4, [pc, #96]	; (80096b8 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009656:	4819      	ldr	r0, [pc, #100]	; (80096bc <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009658:	2500      	movs	r5, #0
 800965a:	9501      	str	r5, [sp, #4]
 800965c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	6323      	str	r3, [r4, #48]	; 0x30
 8009664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800966e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009672:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009674:	2302      	movs	r3, #2
 8009676:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009678:	2303      	movs	r3, #3
 800967a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800967c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800967e:	230a      	movs	r3, #10
 8009680:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009682:	f7f7 fb89 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009686:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800968a:	a903      	add	r1, sp, #12
 800968c:	480b      	ldr	r0, [pc, #44]	; (80096bc <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800968e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009690:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009692:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009694:	f7f7 fb80 	bl	8000d98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800969a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969e:	6363      	str	r3, [r4, #52]	; 0x34
 80096a0:	9502      	str	r5, [sp, #8]
 80096a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096a8:	6463      	str	r3, [r4, #68]	; 0x44
 80096aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096b0:	9302      	str	r3, [sp, #8]
 80096b2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096b4:	b009      	add	sp, #36	; 0x24
 80096b6:	bd30      	pop	{r4, r5, pc}
 80096b8:	40023800 	.word	0x40023800
 80096bc:	40020000 	.word	0x40020000

080096c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80096c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096f8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80096c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80096c6:	e003      	b.n	80096d0 <LoopCopyDataInit>

080096c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80096c8:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80096ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80096cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80096ce:	3104      	adds	r1, #4

080096d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80096d0:	480b      	ldr	r0, [pc, #44]	; (8009700 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80096d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80096d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80096d8:	d3f6      	bcc.n	80096c8 <CopyDataInit>
  ldr  r2, =_sbss
 80096da:	4a0b      	ldr	r2, [pc, #44]	; (8009708 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096dc:	e002      	b.n	80096e4 <LoopFillZerobss>

080096de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096e0:	f842 3b04 	str.w	r3, [r2], #4

080096e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80096e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80096e8:	d3f9      	bcc.n	80096de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096ea:	f7ff fe23 	bl	8009334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096ee:	f000 f811 	bl	8009714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096f2:	f7ff fd6b 	bl	80091cc <main>
  bx  lr    
 80096f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80096f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80096fc:	0800ad64 	.word	0x0800ad64
  ldr  r0, =_sdata
 8009700:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009704:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8009708:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800970c:	2000ae4c 	.word	0x2000ae4c

08009710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009710:	e7fe      	b.n	8009710 <ADC_IRQHandler>
	...

08009714 <__libc_init_array>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4e0d      	ldr	r6, [pc, #52]	; (800974c <__libc_init_array+0x38>)
 8009718:	4c0d      	ldr	r4, [pc, #52]	; (8009750 <__libc_init_array+0x3c>)
 800971a:	1ba4      	subs	r4, r4, r6
 800971c:	10a4      	asrs	r4, r4, #2
 800971e:	2500      	movs	r5, #0
 8009720:	42a5      	cmp	r5, r4
 8009722:	d109      	bne.n	8009738 <__libc_init_array+0x24>
 8009724:	4e0b      	ldr	r6, [pc, #44]	; (8009754 <__libc_init_array+0x40>)
 8009726:	4c0c      	ldr	r4, [pc, #48]	; (8009758 <__libc_init_array+0x44>)
 8009728:	f000 f83a 	bl	80097a0 <_init>
 800972c:	1ba4      	subs	r4, r4, r6
 800972e:	10a4      	asrs	r4, r4, #2
 8009730:	2500      	movs	r5, #0
 8009732:	42a5      	cmp	r5, r4
 8009734:	d105      	bne.n	8009742 <__libc_init_array+0x2e>
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800973c:	4798      	blx	r3
 800973e:	3501      	adds	r5, #1
 8009740:	e7ee      	b.n	8009720 <__libc_init_array+0xc>
 8009742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009746:	4798      	blx	r3
 8009748:	3501      	adds	r5, #1
 800974a:	e7f2      	b.n	8009732 <__libc_init_array+0x1e>
 800974c:	0800ad5c 	.word	0x0800ad5c
 8009750:	0800ad5c 	.word	0x0800ad5c
 8009754:	0800ad5c 	.word	0x0800ad5c
 8009758:	0800ad60 	.word	0x0800ad60

0800975c <memcmp>:
 800975c:	b510      	push	{r4, lr}
 800975e:	3901      	subs	r1, #1
 8009760:	4402      	add	r2, r0
 8009762:	4290      	cmp	r0, r2
 8009764:	d101      	bne.n	800976a <memcmp+0xe>
 8009766:	2000      	movs	r0, #0
 8009768:	bd10      	pop	{r4, pc}
 800976a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800976e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009772:	42a3      	cmp	r3, r4
 8009774:	d0f5      	beq.n	8009762 <memcmp+0x6>
 8009776:	1b18      	subs	r0, r3, r4
 8009778:	bd10      	pop	{r4, pc}

0800977a <memcpy>:
 800977a:	b510      	push	{r4, lr}
 800977c:	1e43      	subs	r3, r0, #1
 800977e:	440a      	add	r2, r1
 8009780:	4291      	cmp	r1, r2
 8009782:	d100      	bne.n	8009786 <memcpy+0xc>
 8009784:	bd10      	pop	{r4, pc}
 8009786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800978e:	e7f7      	b.n	8009780 <memcpy+0x6>

08009790 <memset>:
 8009790:	4402      	add	r2, r0
 8009792:	4603      	mov	r3, r0
 8009794:	4293      	cmp	r3, r2
 8009796:	d100      	bne.n	800979a <memset+0xa>
 8009798:	4770      	bx	lr
 800979a:	f803 1b01 	strb.w	r1, [r3], #1
 800979e:	e7f9      	b.n	8009794 <memset+0x4>

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
